
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#endif
}
#endif /* CONFIG_USERSPACE */

void z_impl_k_str_out(char *c, size_t n)
{
   0:	b0 ae 00 00 79 18 00 00 eb 6e 00 00 b5 18 00 00     ....y....n......
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	for (i = 0; i < n; i++) {
		_char_out(c[i]);
  10:	b5 18 00 00 b5 18 00 00 b5 18 00 00 00 00 00 00     ................
	...

		memcpy(ptr2, ptr, MIN(prev_size, bytes));
		sys_heap_free(heap, ptr);
	}
	return ptr2;
}
  2c:	fd 16 00 00 b5 18 00 00 00 00 00 00 b1 16 00 00     ................
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
  3c:	f5 13 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
  50:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	if (size_too_big(h, bytes)) {
  60:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
  70:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
  80:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	chunksz_t chunks_need = bytes_to_chunksz(h, bytes + align_gap);
  90:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	if (align && ((uintptr_t)ptr & (align - 1))) {
  a0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		split_chunks(h, c, c + chunks_need);
  b0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		free_chunk(h, c + chunks_need);
  c0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
  d0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		   (chunk_size(h, c) + chunk_size(h, rc) >= chunks_need)) {
  e0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		if (split_size < chunk_size(h, rc)) {
  f0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
			split_chunks(h, rc, rc + split_size);
 100:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
			free_list_add(h, rc + split_size);
 110:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		set_chunk_used(h, c, true);
 120:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	void *ptr2 = sys_heap_aligned_alloc(heap, align, bytes);
 130:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		size_t prev_size = chunksz_to_bytes(h, chunk_size(h, c)) - align_gap;
 140:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 150:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 160:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		sys_heap_free(heap, ptr);
 170:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 180:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 190:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 1a0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	/* Register events */
	events_registered = register_events(events, num_events,
					    &work->poller, false);

	key = k_spin_lock(&lock);
	if (work->poller.is_polling && !K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 1b0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
		/*
		 * Poller is still polling.
		 * No event is ready and all are watched.
		 */
		__ASSERT(num_events == events_registered,
 1c0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 1d0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
			 "Some events were not registered!\n");

		/* Setup timeout if such action is requested */
		if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1e0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
			z_add_timeout(&work->timeout,
 1f0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 200:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 210:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 220:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 230:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 240:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 250:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	/*
	 * If poller is still polling, no watched event occurred. This means
	 * we reached here due to K_NO_WAIT timeout "expiration".
	 */
	if (work->poller.is_polling) {
		work->poller.is_polling = false;
 260:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	} else {
		work->poll_result = 0;
	}

	/* Clear registrations. */
	clear_event_registrations(events, events_registered, key);
 270:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 280:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 290:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
	k_spin_unlock(&lock, key);

	/* Submit work. */
	k_work_submit_to_queue(work_q, &work->work);
 2a0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...

	SYS_PORT_TRACING_FUNC_EXIT(k_work_poll, submit_to_queue, work_q, work, timeout, 0);

	return 0;
 2b0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 2c0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 2d0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 2e0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 2f0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 300:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 310:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 320:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 330:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 340:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 350:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 360:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 370:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 380:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 390:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 3a0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 3b0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 3c0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 3d0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 3e0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...
 3f0:	51 18 00 00 51 18 00 00 51 18 00 00 51 18 00 00     Q...Q...Q...Q...

00000400 <sbh>:
	...
 408:	10 95 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00000420 <__aeabi_uldivmod>:
     420:	b953      	cbnz	r3, 438 <__aeabi_uldivmod+0x18>
     422:	b94a      	cbnz	r2, 438 <__aeabi_uldivmod+0x18>
     424:	2900      	cmp	r1, #0
     426:	bf08      	it	eq
     428:	2800      	cmpeq	r0, #0
     42a:	bf1c      	itt	ne
     42c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     430:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     434:	f000 b80c 	b.w	450 <__aeabi_idiv0>
     438:	f1ad 0c08 	sub.w	ip, sp, #8
     43c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     440:	f000 f808 	bl	454 <__udivmoddi4>
     444:	f8dd e004 	ldr.w	lr, [sp, #4]
     448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     44c:	b004      	add	sp, #16
     44e:	4770      	bx	lr

00000450 <__aeabi_idiv0>:
     450:	4770      	bx	lr
     452:	bf00      	nop

00000454 <__udivmoddi4>:
     454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     458:	4686      	mov	lr, r0
     45a:	468c      	mov	ip, r1
     45c:	4608      	mov	r0, r1
     45e:	4615      	mov	r5, r2
     460:	4674      	mov	r4, lr
     462:	4619      	mov	r1, r3
     464:	9e08      	ldr	r6, [sp, #32]
     466:	2b00      	cmp	r3, #0
     468:	f040 80c2 	bne.w	5f0 <__udivmoddi4+0x19c>
     46c:	4285      	cmp	r5, r0
     46e:	fab2 f282 	clz	r2, r2
     472:	d945      	bls.n	500 <__udivmoddi4+0xac>
     474:	b14a      	cbz	r2, 48a <__udivmoddi4+0x36>
     476:	f1c2 0320 	rsb	r3, r2, #32
     47a:	fa00 fc02 	lsl.w	ip, r0, r2
     47e:	fa2e f303 	lsr.w	r3, lr, r3
     482:	4095      	lsls	r5, r2
     484:	ea43 0c0c 	orr.w	ip, r3, ip
     488:	4094      	lsls	r4, r2
     48a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     48e:	fbbc f8fe 	udiv	r8, ip, lr
     492:	b2a8      	uxth	r0, r5
     494:	fb0e cc18 	mls	ip, lr, r8, ip
     498:	fb08 f900 	mul.w	r9, r8, r0
     49c:	0c23      	lsrs	r3, r4, #16
     49e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     4a2:	4599      	cmp	r9, r3
     4a4:	d928      	bls.n	4f8 <__udivmoddi4+0xa4>
     4a6:	18eb      	adds	r3, r5, r3
     4a8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     4ac:	d204      	bcs.n	4b8 <__udivmoddi4+0x64>
     4ae:	4599      	cmp	r9, r3
     4b0:	d902      	bls.n	4b8 <__udivmoddi4+0x64>
     4b2:	f1a8 0702 	sub.w	r7, r8, #2
     4b6:	442b      	add	r3, r5
     4b8:	eba3 0309 	sub.w	r3, r3, r9
     4bc:	fbb3 fcfe 	udiv	ip, r3, lr
     4c0:	fb0e 331c 	mls	r3, lr, ip, r3
     4c4:	fb0c f000 	mul.w	r0, ip, r0
     4c8:	b2a4      	uxth	r4, r4
     4ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     4ce:	42a0      	cmp	r0, r4
     4d0:	d914      	bls.n	4fc <__udivmoddi4+0xa8>
     4d2:	192c      	adds	r4, r5, r4
     4d4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     4d8:	d204      	bcs.n	4e4 <__udivmoddi4+0x90>
     4da:	42a0      	cmp	r0, r4
     4dc:	d902      	bls.n	4e4 <__udivmoddi4+0x90>
     4de:	f1ac 0302 	sub.w	r3, ip, #2
     4e2:	442c      	add	r4, r5
     4e4:	1a24      	subs	r4, r4, r0
     4e6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     4ea:	b11e      	cbz	r6, 4f4 <__udivmoddi4+0xa0>
     4ec:	2300      	movs	r3, #0
     4ee:	40d4      	lsrs	r4, r2
     4f0:	6034      	str	r4, [r6, #0]
     4f2:	6073      	str	r3, [r6, #4]
     4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4f8:	4647      	mov	r7, r8
     4fa:	e7dd      	b.n	4b8 <__udivmoddi4+0x64>
     4fc:	4663      	mov	r3, ip
     4fe:	e7f1      	b.n	4e4 <__udivmoddi4+0x90>
     500:	bb92      	cbnz	r2, 568 <__udivmoddi4+0x114>
     502:	2101      	movs	r1, #1
     504:	1b43      	subs	r3, r0, r5
     506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     50a:	fbb3 fcfe 	udiv	ip, r3, lr
     50e:	b2af      	uxth	r7, r5
     510:	fb0e 331c 	mls	r3, lr, ip, r3
     514:	fb0c f807 	mul.w	r8, ip, r7
     518:	0c20      	lsrs	r0, r4, #16
     51a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     51e:	4598      	cmp	r8, r3
     520:	d962      	bls.n	5e8 <__udivmoddi4+0x194>
     522:	18eb      	adds	r3, r5, r3
     524:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     528:	d204      	bcs.n	534 <__udivmoddi4+0xe0>
     52a:	4598      	cmp	r8, r3
     52c:	d902      	bls.n	534 <__udivmoddi4+0xe0>
     52e:	f1ac 0002 	sub.w	r0, ip, #2
     532:	442b      	add	r3, r5
     534:	eba3 0308 	sub.w	r3, r3, r8
     538:	fbb3 fcfe 	udiv	ip, r3, lr
     53c:	fb0e 331c 	mls	r3, lr, ip, r3
     540:	fb0c f707 	mul.w	r7, ip, r7
     544:	b2a4      	uxth	r4, r4
     546:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     54a:	42a7      	cmp	r7, r4
     54c:	d94e      	bls.n	5ec <__udivmoddi4+0x198>
     54e:	192c      	adds	r4, r5, r4
     550:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     554:	d204      	bcs.n	560 <__udivmoddi4+0x10c>
     556:	42a7      	cmp	r7, r4
     558:	d902      	bls.n	560 <__udivmoddi4+0x10c>
     55a:	f1ac 0302 	sub.w	r3, ip, #2
     55e:	442c      	add	r4, r5
     560:	1be4      	subs	r4, r4, r7
     562:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     566:	e7c0      	b.n	4ea <__udivmoddi4+0x96>
     568:	f1c2 0320 	rsb	r3, r2, #32
     56c:	4095      	lsls	r5, r2
     56e:	fa20 f103 	lsr.w	r1, r0, r3
     572:	fa2e f303 	lsr.w	r3, lr, r3
     576:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     57a:	fbb1 fcfe 	udiv	ip, r1, lr
     57e:	4090      	lsls	r0, r2
     580:	4303      	orrs	r3, r0
     582:	b2af      	uxth	r7, r5
     584:	fb0e 101c 	mls	r0, lr, ip, r1
     588:	fb0c f807 	mul.w	r8, ip, r7
     58c:	0c19      	lsrs	r1, r3, #16
     58e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     592:	4588      	cmp	r8, r1
     594:	fa04 f402 	lsl.w	r4, r4, r2
     598:	d922      	bls.n	5e0 <__udivmoddi4+0x18c>
     59a:	1869      	adds	r1, r5, r1
     59c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5a0:	d204      	bcs.n	5ac <__udivmoddi4+0x158>
     5a2:	4588      	cmp	r8, r1
     5a4:	d902      	bls.n	5ac <__udivmoddi4+0x158>
     5a6:	f1ac 0002 	sub.w	r0, ip, #2
     5aa:	4429      	add	r1, r5
     5ac:	eba1 0108 	sub.w	r1, r1, r8
     5b0:	fbb1 fcfe 	udiv	ip, r1, lr
     5b4:	fb0e 111c 	mls	r1, lr, ip, r1
     5b8:	fb0c f707 	mul.w	r7, ip, r7
     5bc:	b29b      	uxth	r3, r3
     5be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     5c2:	429f      	cmp	r7, r3
     5c4:	d90e      	bls.n	5e4 <__udivmoddi4+0x190>
     5c6:	18eb      	adds	r3, r5, r3
     5c8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     5cc:	d204      	bcs.n	5d8 <__udivmoddi4+0x184>
     5ce:	429f      	cmp	r7, r3
     5d0:	d902      	bls.n	5d8 <__udivmoddi4+0x184>
     5d2:	f1ac 0102 	sub.w	r1, ip, #2
     5d6:	442b      	add	r3, r5
     5d8:	1bdb      	subs	r3, r3, r7
     5da:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     5de:	e792      	b.n	506 <__udivmoddi4+0xb2>
     5e0:	4660      	mov	r0, ip
     5e2:	e7e3      	b.n	5ac <__udivmoddi4+0x158>
     5e4:	4661      	mov	r1, ip
     5e6:	e7f7      	b.n	5d8 <__udivmoddi4+0x184>
     5e8:	4660      	mov	r0, ip
     5ea:	e7a3      	b.n	534 <__udivmoddi4+0xe0>
     5ec:	4663      	mov	r3, ip
     5ee:	e7b7      	b.n	560 <__udivmoddi4+0x10c>
     5f0:	4283      	cmp	r3, r0
     5f2:	d906      	bls.n	602 <__udivmoddi4+0x1ae>
     5f4:	b916      	cbnz	r6, 5fc <__udivmoddi4+0x1a8>
     5f6:	2100      	movs	r1, #0
     5f8:	4608      	mov	r0, r1
     5fa:	e77b      	b.n	4f4 <__udivmoddi4+0xa0>
     5fc:	e9c6 e000 	strd	lr, r0, [r6]
     600:	e7f9      	b.n	5f6 <__udivmoddi4+0x1a2>
     602:	fab3 f783 	clz	r7, r3
     606:	b98f      	cbnz	r7, 62c <__udivmoddi4+0x1d8>
     608:	4283      	cmp	r3, r0
     60a:	d301      	bcc.n	610 <__udivmoddi4+0x1bc>
     60c:	4572      	cmp	r2, lr
     60e:	d808      	bhi.n	622 <__udivmoddi4+0x1ce>
     610:	ebbe 0402 	subs.w	r4, lr, r2
     614:	eb60 0303 	sbc.w	r3, r0, r3
     618:	2001      	movs	r0, #1
     61a:	469c      	mov	ip, r3
     61c:	b91e      	cbnz	r6, 626 <__udivmoddi4+0x1d2>
     61e:	2100      	movs	r1, #0
     620:	e768      	b.n	4f4 <__udivmoddi4+0xa0>
     622:	4638      	mov	r0, r7
     624:	e7fa      	b.n	61c <__udivmoddi4+0x1c8>
     626:	e9c6 4c00 	strd	r4, ip, [r6]
     62a:	e7f8      	b.n	61e <__udivmoddi4+0x1ca>
     62c:	f1c7 0c20 	rsb	ip, r7, #32
     630:	40bb      	lsls	r3, r7
     632:	fa22 f40c 	lsr.w	r4, r2, ip
     636:	431c      	orrs	r4, r3
     638:	ea4f 4914 	mov.w	r9, r4, lsr #16
     63c:	fa20 f30c 	lsr.w	r3, r0, ip
     640:	fbb3 f8f9 	udiv	r8, r3, r9
     644:	40b8      	lsls	r0, r7
     646:	fa2e f10c 	lsr.w	r1, lr, ip
     64a:	4301      	orrs	r1, r0
     64c:	fa0e f507 	lsl.w	r5, lr, r7
     650:	fb09 3018 	mls	r0, r9, r8, r3
     654:	fa1f fe84 	uxth.w	lr, r4
     658:	fb08 fa0e 	mul.w	sl, r8, lr
     65c:	0c0b      	lsrs	r3, r1, #16
     65e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     662:	459a      	cmp	sl, r3
     664:	fa02 f207 	lsl.w	r2, r2, r7
     668:	d940      	bls.n	6ec <__udivmoddi4+0x298>
     66a:	18e3      	adds	r3, r4, r3
     66c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     670:	d204      	bcs.n	67c <__udivmoddi4+0x228>
     672:	459a      	cmp	sl, r3
     674:	d902      	bls.n	67c <__udivmoddi4+0x228>
     676:	f1a8 0002 	sub.w	r0, r8, #2
     67a:	4423      	add	r3, r4
     67c:	eba3 030a 	sub.w	r3, r3, sl
     680:	fbb3 f8f9 	udiv	r8, r3, r9
     684:	fb09 3318 	mls	r3, r9, r8, r3
     688:	fb08 fe0e 	mul.w	lr, r8, lr
     68c:	b289      	uxth	r1, r1
     68e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     692:	458e      	cmp	lr, r1
     694:	d92c      	bls.n	6f0 <__udivmoddi4+0x29c>
     696:	1861      	adds	r1, r4, r1
     698:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     69c:	d204      	bcs.n	6a8 <__udivmoddi4+0x254>
     69e:	458e      	cmp	lr, r1
     6a0:	d902      	bls.n	6a8 <__udivmoddi4+0x254>
     6a2:	f1a8 0302 	sub.w	r3, r8, #2
     6a6:	4421      	add	r1, r4
     6a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     6ac:	fba0 9802 	umull	r9, r8, r0, r2
     6b0:	eba1 010e 	sub.w	r1, r1, lr
     6b4:	4541      	cmp	r1, r8
     6b6:	46ce      	mov	lr, r9
     6b8:	4643      	mov	r3, r8
     6ba:	d302      	bcc.n	6c2 <__udivmoddi4+0x26e>
     6bc:	d106      	bne.n	6cc <__udivmoddi4+0x278>
     6be:	454d      	cmp	r5, r9
     6c0:	d204      	bcs.n	6cc <__udivmoddi4+0x278>
     6c2:	ebb9 0e02 	subs.w	lr, r9, r2
     6c6:	eb68 0304 	sbc.w	r3, r8, r4
     6ca:	3801      	subs	r0, #1
     6cc:	2e00      	cmp	r6, #0
     6ce:	d0a6      	beq.n	61e <__udivmoddi4+0x1ca>
     6d0:	ebb5 020e 	subs.w	r2, r5, lr
     6d4:	eb61 0103 	sbc.w	r1, r1, r3
     6d8:	fa01 fc0c 	lsl.w	ip, r1, ip
     6dc:	fa22 f307 	lsr.w	r3, r2, r7
     6e0:	ea4c 0303 	orr.w	r3, ip, r3
     6e4:	40f9      	lsrs	r1, r7
     6e6:	e9c6 3100 	strd	r3, r1, [r6]
     6ea:	e798      	b.n	61e <__udivmoddi4+0x1ca>
     6ec:	4640      	mov	r0, r8
     6ee:	e7c5      	b.n	67c <__udivmoddi4+0x228>
     6f0:	4643      	mov	r3, r8
     6f2:	e7d9      	b.n	6a8 <__udivmoddi4+0x254>

000006f4 <strcmp>:
     6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
     6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
     6fc:	2a01      	cmp	r2, #1
     6fe:	bf28      	it	cs
     700:	429a      	cmpcs	r2, r3
     702:	d0f7      	beq.n	6f4 <strcmp>
     704:	1ad0      	subs	r0, r2, r3
     706:	4770      	bx	lr

00000708 <strlen>:
     708:	4603      	mov	r3, r0
     70a:	f813 2b01 	ldrb.w	r2, [r3], #1
     70e:	2a00      	cmp	r2, #0
     710:	d1fb      	bne.n	70a <strlen+0x2>
     712:	1a18      	subs	r0, r3, r0
     714:	3801      	subs	r0, #1
     716:	4770      	bx	lr

00000718 <main>:
 * point. Other devices (for example FreeRTOS or ESP32) that have different
 * requirements for entry code (like an app_main function) should specialize
 * this main.cc file in a target-specific subfolder.
 */
int main(int argc, char *argv[])
{
     718:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// for (int i = 0; i < NUM_LOOPS; i++) {
	// 	loop();
		
	// }
	
    printf("--------------------------------- \n");
     71a:	4821      	ldr	r0, [pc, #132]	; (7a0 <main+0x88>)
     71c:	f005 fd98 	bl	6250 <iprintf>
   


    volatile int* address = (int*)0x70000000; // Create a pointer to the memory address
     720:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000

    *address = 14;  // Write the value 1 to the memory address
     724:	230e      	movs	r3, #14
    volatile int* address = (int*)0x70000000; // Create a pointer to the memory address
     726:	9401      	str	r4, [sp, #4]
    // *address2 = 20;

    printf("!Value at memory address 0x01000000: %x\n", &address);
     728:	a901      	add	r1, sp, #4
    *address = 14;  // Write the value 1 to the memory address
     72a:	6023      	str	r3, [r4, #0]
    printf("!Value at memory address 0x01000000: %x\n", &address);
     72c:	481d      	ldr	r0, [pc, #116]	; (7a4 <main+0x8c>)
     72e:	f005 fd8f 	bl	6250 <iprintf>
    printf("Value at memory address 0x01000000: %x\n", *address);
     732:	9b01      	ldr	r3, [sp, #4]
     734:	481c      	ldr	r0, [pc, #112]	; (7a8 <main+0x90>)
     736:	6819      	ldr	r1, [r3, #0]
     738:	f005 fd8a 	bl	6250 <iprintf>
    printf("Value at memory address 0x01000000: %x\n", address);
     73c:	9901      	ldr	r1, [sp, #4]
     73e:	481a      	ldr	r0, [pc, #104]	; (7a8 <main+0x90>)
     740:	f005 fd86 	bl	6250 <iprintf>

    // The text to be saved in the file
    const char* text = "Cortec M3 Sending Sample FIle\n";

    // Open the file using direct memory access
    FILE* file = fmemopen(file_address, strlen(text), "wb");
     744:	4819      	ldr	r0, [pc, #100]	; (7ac <main+0x94>)
     746:	f7ff ffdf 	bl	708 <strlen>
     74a:	4a19      	ldr	r2, [pc, #100]	; (7b0 <main+0x98>)
     74c:	4601      	mov	r1, r0
     74e:	4620      	mov	r0, r4
     750:	f005 f976 	bl	5a40 <fmemopen>
    if (file == NULL) {
     754:	4604      	mov	r4, r0
     756:	b928      	cbnz	r0, 764 <main+0x4c>
        perror("Error opening the file");
     758:	4816      	ldr	r0, [pc, #88]	; (7b4 <main+0x9c>)
     75a:	f005 fd71 	bl	6240 <perror>
        return 1;
     75e:	2001      	movs	r0, #1
    printf("Text written successfully at address 0x70000000.\n");


    return 0;

}
     760:	b003      	add	sp, #12
     762:	bd30      	pop	{r4, r5, pc}
    if (fwrite(text, sizeof(char), strlen(text), file) != strlen(text)) {
     764:	4811      	ldr	r0, [pc, #68]	; (7ac <main+0x94>)
     766:	f7ff ffcf 	bl	708 <strlen>
     76a:	4623      	mov	r3, r4
     76c:	4602      	mov	r2, r0
     76e:	2101      	movs	r1, #1
     770:	480e      	ldr	r0, [pc, #56]	; (7ac <main+0x94>)
     772:	f005 f9c1 	bl	5af8 <fwrite>
     776:	4605      	mov	r5, r0
     778:	480c      	ldr	r0, [pc, #48]	; (7ac <main+0x94>)
     77a:	f7ff ffc5 	bl	708 <strlen>
     77e:	4285      	cmp	r5, r0
     780:	d006      	beq.n	790 <main+0x78>
        perror("Error writing to the file");
     782:	480d      	ldr	r0, [pc, #52]	; (7b8 <main+0xa0>)
     784:	f005 fd5c 	bl	6240 <perror>
        fclose(file);
     788:	4620      	mov	r0, r4
     78a:	f004 ffb3 	bl	56f4 <fclose>
        return 1;
     78e:	e7e6      	b.n	75e <main+0x46>
    fclose(file);
     790:	4620      	mov	r0, r4
     792:	f004 ffaf 	bl	56f4 <fclose>
    printf("Text written successfully at address 0x70000000.\n");
     796:	4809      	ldr	r0, [pc, #36]	; (7bc <main+0xa4>)
     798:	f005 fd5a 	bl	6250 <iprintf>
    return 0;
     79c:	2000      	movs	r0, #0
     79e:	e7df      	b.n	760 <main+0x48>
     7a0:	0000807e 	.word	0x0000807e
     7a4:	000080a2 	.word	0x000080a2
     7a8:	000080a3 	.word	0x000080a3
     7ac:	000080cb 	.word	0x000080cb
     7b0:	000080ea 	.word	0x000080ea
     7b4:	000080ed 	.word	0x000080ed
     7b8:	00008104 	.word	0x00008104
     7bc:	0000811e 	.word	0x0000811e

000007c0 <char_out>:
	ctx->count++;
     7c0:	680b      	ldr	r3, [r1, #0]
     7c2:	3301      	adds	r3, #1
     7c4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     7c6:	4b01      	ldr	r3, [pc, #4]	; (7cc <char_out+0xc>)
     7c8:	681b      	ldr	r3, [r3, #0]
     7ca:	4718      	bx	r3
     7cc:	00009510 	.word	0x00009510

000007d0 <__printk_hook_install>:
	_char_out = fn;
     7d0:	4b01      	ldr	r3, [pc, #4]	; (7d8 <__printk_hook_install+0x8>)
     7d2:	6018      	str	r0, [r3, #0]
}
     7d4:	4770      	bx	lr
     7d6:	bf00      	nop
     7d8:	00009510 	.word	0x00009510

000007dc <vprintk>:
{
     7dc:	b507      	push	{r0, r1, r2, lr}
     7de:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     7e0:	2100      	movs	r1, #0
{
     7e2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     7e4:	9101      	str	r1, [sp, #4]
	cbvprintf(char_out, &ctx, fmt, ap);
     7e6:	4803      	ldr	r0, [pc, #12]	; (7f4 <vprintk+0x18>)
     7e8:	a901      	add	r1, sp, #4
     7ea:	f000 f91b 	bl	a24 <cbvprintf>
}
     7ee:	b003      	add	sp, #12
     7f0:	f85d fb04 	ldr.w	pc, [sp], #4
     7f4:	000007c1 	.word	0x000007c1

000007f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     7f8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     7fa:	2500      	movs	r5, #0
{
     7fc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     7fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     802:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
     804:	a901      	add	r1, sp, #4
     806:	4805      	ldr	r0, [pc, #20]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
	struct str_context ctx = { str, size, 0 };
     808:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     80a:	f000 f90b 	bl	a24 <cbvprintf>

	if (ctx.count < ctx.max) {
     80e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     812:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     814:	bfb8      	it	lt
     816:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     818:	b005      	add	sp, #20
     81a:	bd30      	pop	{r4, r5, pc}
     81c:	00006c97 	.word	0x00006c97

00000820 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
     820:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
     824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     826:	4607      	mov	r7, r0
     828:	460c      	mov	r4, r1
     82a:	4616      	mov	r6, r2
     82c:	f080 8085 	bcs.w	93a <sys_heap_init+0x11a>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     830:	2a04      	cmp	r2, #4
     832:	d972      	bls.n	91a <sys_heap_init+0xfa>
     834:	2304      	movs	r3, #4
	bytes -= heap_footer_bytes(bytes);
     836:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     838:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     83a:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     83c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     840:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     844:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     846:	2c17      	cmp	r4, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     848:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     84c:	d80e      	bhi.n	86c <sys_heap_init+0x4c>
     84e:	493e      	ldr	r1, [pc, #248]	; (948 <sys_heap_init+0x128>)
     850:	f240 138b 	movw	r3, #395	; 0x18b
     854:	4a3d      	ldr	r2, [pc, #244]	; (94c <sys_heap_init+0x12c>)
     856:	483e      	ldr	r0, [pc, #248]	; (950 <sys_heap_init+0x130>)
     858:	f006 fa30 	bl	6cbc <printk>
     85c:	483d      	ldr	r0, [pc, #244]	; (954 <sys_heap_init+0x134>)
     85e:	f006 fa2d 	bl	6cbc <printk>
     862:	f240 118b 	movw	r1, #395	; 0x18b
     866:	4839      	ldr	r0, [pc, #228]	; (94c <sys_heap_init+0x12c>)
     868:	f006 faf2 	bl	6e50 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
     86c:	2300      	movs	r3, #0
	heap->heap = h;
     86e:	603d      	str	r5, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     870:	4631      	mov	r1, r6
	h->avail_buckets = 0;
     872:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     874:	4630      	mov	r0, r6
	h->end_chunk = heap_sz;
     876:	60ae      	str	r6, [r5, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     878:	f006 fa85 	bl	6d86 <bucket_idx.isra.0>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
     87c:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
     87e:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     880:	1c47      	adds	r7, r0, #1
     882:	4630      	mov	r0, r6
     884:	f006 fa76 	bl	6d74 <bytes_to_chunksz.isra.0>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     888:	341b      	adds	r4, #27
     88a:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     88c:	4420      	add	r0, r4
     88e:	42b0      	cmp	r0, r6
     890:	d90e      	bls.n	8b0 <sys_heap_init+0x90>
     892:	4931      	ldr	r1, [pc, #196]	; (958 <sys_heap_init+0x138>)
     894:	f44f 73cb 	mov.w	r3, #406	; 0x196
     898:	4a2c      	ldr	r2, [pc, #176]	; (94c <sys_heap_init+0x12c>)
     89a:	482d      	ldr	r0, [pc, #180]	; (950 <sys_heap_init+0x130>)
     89c:	f006 fa0e 	bl	6cbc <printk>
     8a0:	482c      	ldr	r0, [pc, #176]	; (954 <sys_heap_init+0x134>)
     8a2:	f006 fa0b 	bl	6cbc <printk>
     8a6:	f44f 71cb 	mov.w	r1, #406	; 0x196
     8aa:	4828      	ldr	r0, [pc, #160]	; (94c <sys_heap_init+0x12c>)
     8ac:	f006 fad0 	bl	6e50 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
     8b0:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
     8b2:	4619      	mov	r1, r3
     8b4:	f105 020c 	add.w	r2, r5, #12
	for (int i = 0; i < nb_buckets; i++) {
     8b8:	42bb      	cmp	r3, r7
     8ba:	db40      	blt.n	93e <sys_heap_init+0x11e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
     8bc:	4622      	mov	r2, r4
     8be:	4628      	mov	r0, r5
     8c0:	2100      	movs	r1, #0
     8c2:	f006 fa53 	bl	6d6c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
     8c6:	2300      	movs	r3, #0
     8c8:	4628      	mov	r0, r5
     8ca:	461a      	mov	r2, r3
     8cc:	4619      	mov	r1, r3
     8ce:	f006 fa24 	bl	6d1a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     8d2:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
     8d4:	4619      	mov	r1, r3
     8d6:	4628      	mov	r0, r5
     8d8:	2201      	movs	r2, #1
     8da:	f006 fa2f 	bl	6d3c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     8de:	463a      	mov	r2, r7
     8e0:	4621      	mov	r1, r4
     8e2:	f006 fa43 	bl	6d6c <set_chunk_size>
     8e6:	4623      	mov	r3, r4
     8e8:	2200      	movs	r2, #0
     8ea:	4621      	mov	r1, r4
     8ec:	4628      	mov	r0, r5
     8ee:	f006 fa14 	bl	6d1a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
     8f2:	4631      	mov	r1, r6
     8f4:	4628      	mov	r0, r5
     8f6:	f006 fa39 	bl	6d6c <set_chunk_size>
     8fa:	463b      	mov	r3, r7
     8fc:	4631      	mov	r1, r6
     8fe:	4628      	mov	r0, r5
     900:	2200      	movs	r2, #0
     902:	f006 fa0a 	bl	6d1a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
     906:	4631      	mov	r1, r6
     908:	4628      	mov	r0, r5
     90a:	2201      	movs	r2, #1
     90c:	f006 fa16 	bl	6d3c <set_chunk_used>

	free_list_add(h, chunk0_size);
     910:	4621      	mov	r1, r4
}
     912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
     916:	f006 ba42 	b.w	6d9e <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     91a:	f44f 73c1 	mov.w	r3, #386	; 0x182
     91e:	4a0b      	ldr	r2, [pc, #44]	; (94c <sys_heap_init+0x12c>)
     920:	490e      	ldr	r1, [pc, #56]	; (95c <sys_heap_init+0x13c>)
     922:	480b      	ldr	r0, [pc, #44]	; (950 <sys_heap_init+0x130>)
     924:	f006 f9ca 	bl	6cbc <printk>
     928:	480a      	ldr	r0, [pc, #40]	; (954 <sys_heap_init+0x134>)
     92a:	f006 f9c7 	bl	6cbc <printk>
     92e:	f44f 71c1 	mov.w	r1, #386	; 0x182
     932:	4806      	ldr	r0, [pc, #24]	; (94c <sys_heap_init+0x12c>)
     934:	f006 fa8c 	bl	6e50 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
     938:	e77c      	b.n	834 <sys_heap_init+0x14>
     93a:	2308      	movs	r3, #8
     93c:	e77b      	b.n	836 <sys_heap_init+0x16>
		h->buckets[i].next = 0;
     93e:	f842 1f04 	str.w	r1, [r2, #4]!
	for (int i = 0; i < nb_buckets; i++) {
     942:	3301      	adds	r3, #1
     944:	e7b8      	b.n	8b8 <sys_heap_init+0x98>
     946:	bf00      	nop
     948:	00008273 	.word	0x00008273
     94c:	00008150 	.word	0x00008150
     950:	00008182 	.word	0x00008182
     954:	0000825a 	.word	0x0000825a
     958:	0000829c 	.word	0x0000829c
     95c:	00008239 	.word	0x00008239

00000960 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
     960:	b5f0      	push	{r4, r5, r6, r7, lr}
     962:	4602      	mov	r2, r0
     964:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
     966:	270a      	movs	r7, #10
	size_t val = 0;
     968:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
     96a:	4e07      	ldr	r6, [pc, #28]	; (988 <extract_decimal+0x28>)
     96c:	460b      	mov	r3, r1
     96e:	781c      	ldrb	r4, [r3, #0]
     970:	3101      	adds	r1, #1
     972:	5d35      	ldrb	r5, [r6, r4]
     974:	076d      	lsls	r5, r5, #29
     976:	d401      	bmi.n	97c <extract_decimal+0x1c>
	}
	*str = sp;
     978:	6013      	str	r3, [r2, #0]
	return val;
}
     97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
     97c:	fb07 4300 	mla	r3, r7, r0, r4
     980:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
     984:	e7f2      	b.n	96c <extract_decimal+0xc>
     986:	bf00      	nop
     988:	00008d42 	.word	0x00008d42

0000098c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
     98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     990:	4615      	mov	r5, r2
     992:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
     994:	78d3      	ldrb	r3, [r2, #3]
     996:	4a22      	ldr	r2, [pc, #136]	; (a20 <encode_uint+0x94>)
	switch (specifier) {
     998:	2b6f      	cmp	r3, #111	; 0x6f
     99a:	f812 b003 	ldrb.w	fp, [r2, r3]
{
     99e:	4680      	mov	r8, r0
     9a0:	460f      	mov	r7, r1
     9a2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
     9a6:	d029      	beq.n	9fc <encode_uint+0x70>
     9a8:	d824      	bhi.n	9f4 <encode_uint+0x68>
		return 10;
     9aa:	2b58      	cmp	r3, #88	; 0x58
     9ac:	bf0c      	ite	eq
     9ae:	2610      	moveq	r6, #16
     9b0:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
     9b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
     9b6:	4632      	mov	r2, r6
     9b8:	2300      	movs	r3, #0
     9ba:	4640      	mov	r0, r8
     9bc:	4639      	mov	r1, r7
     9be:	f7ff fd2f 	bl	420 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
     9c2:	2a09      	cmp	r2, #9
     9c4:	b2d4      	uxtb	r4, r2
     9c6:	d81e      	bhi.n	a06 <encode_uint+0x7a>
     9c8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
     9ca:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
     9cc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
     9ce:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
     9d2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
     9d6:	d301      	bcc.n	9dc <encode_uint+0x50>
     9d8:	45d1      	cmp	r9, sl
     9da:	d811      	bhi.n	a00 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
     9dc:	782b      	ldrb	r3, [r5, #0]
     9de:	069b      	lsls	r3, r3, #26
     9e0:	d505      	bpl.n	9ee <encode_uint+0x62>
		if (radix == 8) {
     9e2:	2e08      	cmp	r6, #8
     9e4:	d115      	bne.n	a12 <encode_uint+0x86>
			conv->altform_0 = true;
     9e6:	78ab      	ldrb	r3, [r5, #2]
     9e8:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
     9ec:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
     9ee:	4648      	mov	r0, r9
     9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
     9f4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
     9f8:	2b70      	cmp	r3, #112	; 0x70
     9fa:	e7d7      	b.n	9ac <encode_uint+0x20>
	switch (specifier) {
     9fc:	2608      	movs	r6, #8
     9fe:	e7d8      	b.n	9b2 <encode_uint+0x26>
		value /= radix;
     a00:	4680      	mov	r8, r0
     a02:	460f      	mov	r7, r1
     a04:	e7d7      	b.n	9b6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
     a06:	f1bb 0f01 	cmp.w	fp, #1
     a0a:	bf0c      	ite	eq
     a0c:	3437      	addeq	r4, #55	; 0x37
     a0e:	3457      	addne	r4, #87	; 0x57
     a10:	e7db      	b.n	9ca <encode_uint+0x3e>
		} else if (radix == 16) {
     a12:	2e10      	cmp	r6, #16
     a14:	d1eb      	bne.n	9ee <encode_uint+0x62>
			conv->altform_0c = true;
     a16:	78ab      	ldrb	r3, [r5, #2]
     a18:	f043 0310 	orr.w	r3, r3, #16
     a1c:	e7e6      	b.n	9ec <encode_uint+0x60>
     a1e:	bf00      	nop
     a20:	00008d42 	.word	0x00008d42

00000a24 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a28:	4682      	mov	sl, r0
     a2a:	4617      	mov	r7, r2
     a2c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a2e:	2500      	movs	r5, #0
{
     a30:	b097      	sub	sp, #92	; 0x5c
     a32:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a34:	7838      	ldrb	r0, [r7, #0]
     a36:	b908      	cbnz	r0, a3c <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     a38:	4628      	mov	r0, r5
     a3a:	e349      	b.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
			OUTC(*fp++);
     a3c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     a3e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     a40:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
     a42:	d006      	beq.n	a52 <cbvprintf+0x2e>
			OUTC('%');
     a44:	9903      	ldr	r1, [sp, #12]
     a46:	47d0      	blx	sl
     a48:	2800      	cmp	r0, #0
     a4a:	f2c0 8341 	blt.w	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
     a4e:	3501      	adds	r5, #1
		if (bps == NULL) {
     a50:	e1f9      	b.n	e46 <cbvprintf+0x422>
		} state = {
     a52:	2218      	movs	r2, #24
     a54:	2100      	movs	r1, #0
     a56:	a810      	add	r0, sp, #64	; 0x40
     a58:	f006 fc88 	bl	736c <memset>
	if (*sp == '%') {
     a5c:	787b      	ldrb	r3, [r7, #1]
     a5e:	2b25      	cmp	r3, #37	; 0x25
     a60:	f000 80a3 	beq.w	baa <cbvprintf+0x186>
     a64:	2300      	movs	r3, #0
     a66:	4698      	mov	r8, r3
     a68:	469e      	mov	lr, r3
     a6a:	469c      	mov	ip, r3
     a6c:	4618      	mov	r0, r3
     a6e:	1c79      	adds	r1, r7, #1
     a70:	460e      	mov	r6, r1
		switch (*sp) {
     a72:	f811 2b01 	ldrb.w	r2, [r1], #1
     a76:	2a2b      	cmp	r2, #43	; 0x2b
     a78:	f000 80c6 	beq.w	c08 <cbvprintf+0x1e4>
     a7c:	f200 80bd 	bhi.w	bfa <cbvprintf+0x1d6>
     a80:	2a20      	cmp	r2, #32
     a82:	f000 80c4 	beq.w	c0e <cbvprintf+0x1ea>
     a86:	2a23      	cmp	r2, #35	; 0x23
     a88:	f000 80c4 	beq.w	c14 <cbvprintf+0x1f0>
     a8c:	b12b      	cbz	r3, a9a <cbvprintf+0x76>
     a8e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     a96:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     a9a:	f1b8 0f00 	cmp.w	r8, #0
     a9e:	d005      	beq.n	aac <cbvprintf+0x88>
     aa0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     aa4:	f043 0320 	orr.w	r3, r3, #32
     aa8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     aac:	f1be 0f00 	cmp.w	lr, #0
     ab0:	d005      	beq.n	abe <cbvprintf+0x9a>
     ab2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     ab6:	f043 0310 	orr.w	r3, r3, #16
     aba:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     abe:	f1bc 0f00 	cmp.w	ip, #0
     ac2:	d005      	beq.n	ad0 <cbvprintf+0xac>
     ac4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     ac8:	f043 0308 	orr.w	r3, r3, #8
     acc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     ad0:	b128      	cbz	r0, ade <cbvprintf+0xba>
     ad2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     ad6:	f043 0304 	orr.w	r3, r3, #4
     ada:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     ade:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     ae2:	f003 0144 	and.w	r1, r3, #68	; 0x44
     ae6:	2944      	cmp	r1, #68	; 0x44
     ae8:	d103      	bne.n	af2 <cbvprintf+0xce>
		conv->flag_zero = false;
     aea:	f36f 1386 	bfc	r3, #6, #1
     aee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     af2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     af6:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     afc:	9609      	str	r6, [sp, #36]	; 0x24
     afe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     b02:	f040 808c 	bne.w	c1e <cbvprintf+0x1fa>
		conv->width_star = true;
     b06:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     b0a:	f043 0301 	orr.w	r3, r3, #1
     b0e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
     b12:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
     b14:	781a      	ldrb	r2, [r3, #0]
     b16:	2a2e      	cmp	r2, #46	; 0x2e
     b18:	bf0c      	ite	eq
     b1a:	2101      	moveq	r1, #1
     b1c:	2100      	movne	r1, #0
     b1e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     b22:	f361 0241 	bfi	r2, r1, #1, #1
     b26:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     b2a:	d10c      	bne.n	b46 <cbvprintf+0x122>
	++sp;
     b2c:	1c5a      	adds	r2, r3, #1
     b2e:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
     b30:	785a      	ldrb	r2, [r3, #1]
     b32:	2a2a      	cmp	r2, #42	; 0x2a
     b34:	f040 8083 	bne.w	c3e <cbvprintf+0x21a>
		conv->prec_star = true;
     b38:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     b3c:	3302      	adds	r3, #2
		conv->prec_star = true;
     b3e:	f042 0204 	orr.w	r2, r2, #4
     b42:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
     b46:	781a      	ldrb	r2, [r3, #0]
     b48:	2a6c      	cmp	r2, #108	; 0x6c
     b4a:	f000 80a4 	beq.w	c96 <cbvprintf+0x272>
     b4e:	f200 8086 	bhi.w	c5e <cbvprintf+0x23a>
     b52:	2a68      	cmp	r2, #104	; 0x68
     b54:	f000 808c 	beq.w	c70 <cbvprintf+0x24c>
     b58:	2a6a      	cmp	r2, #106	; 0x6a
     b5a:	f000 80a5 	beq.w	ca8 <cbvprintf+0x284>
     b5e:	2a4c      	cmp	r2, #76	; 0x4c
     b60:	f000 80aa 	beq.w	cb8 <cbvprintf+0x294>
	conv->specifier = *sp++;
     b64:	461a      	mov	r2, r3
     b66:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     b6a:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     b6c:	9204      	str	r2, [sp, #16]
     b6e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
     b72:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
     b76:	f200 8117 	bhi.w	da8 <cbvprintf+0x384>
     b7a:	2b6d      	cmp	r3, #109	; 0x6d
     b7c:	f200 80a9 	bhi.w	cd2 <cbvprintf+0x2ae>
     b80:	2b69      	cmp	r3, #105	; 0x69
     b82:	f200 8111 	bhi.w	da8 <cbvprintf+0x384>
     b86:	2b57      	cmp	r3, #87	; 0x57
     b88:	f200 80be 	bhi.w	d08 <cbvprintf+0x2e4>
     b8c:	2b41      	cmp	r3, #65	; 0x41
     b8e:	d003      	beq.n	b98 <cbvprintf+0x174>
     b90:	3b45      	subs	r3, #69	; 0x45
     b92:	2b02      	cmp	r3, #2
     b94:	f200 8108 	bhi.w	da8 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_FP;
     b98:	2204      	movs	r2, #4
     b9a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     b9e:	f362 0302 	bfi	r3, r2, #0, #3
     ba2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
     ba6:	2301      	movs	r3, #1
			break;
     ba8:	e0ca      	b.n	d40 <cbvprintf+0x31c>
		conv->specifier = *sp++;
     baa:	1cba      	adds	r2, r7, #2
     bac:	9204      	str	r2, [sp, #16]
     bae:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     bb2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     bb6:	07da      	lsls	r2, r3, #31
     bb8:	f140 80fd 	bpl.w	db6 <cbvprintf+0x392>
			width = va_arg(ap, int);
     bbc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bc0:	f1b9 0f00 	cmp.w	r9, #0
     bc4:	da07      	bge.n	bd6 <cbvprintf+0x1b2>
				conv->flag_dash = true;
     bc6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
     bca:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     bce:	f042 0204 	orr.w	r2, r2, #4
     bd2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
     bd6:	075e      	lsls	r6, r3, #29
     bd8:	f140 80f6 	bpl.w	dc8 <cbvprintf+0x3a4>
			int arg = va_arg(ap, int);
     bdc:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
     be0:	f1bb 0f00 	cmp.w	fp, #0
     be4:	f280 80f5 	bge.w	dd2 <cbvprintf+0x3ae>
				conv->prec_present = false;
     be8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     bec:	f36f 0341 	bfc	r3, #1, #1
     bf0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     bf4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     bf8:	e0eb      	b.n	dd2 <cbvprintf+0x3ae>
		switch (*sp) {
     bfa:	2a2d      	cmp	r2, #45	; 0x2d
     bfc:	d00d      	beq.n	c1a <cbvprintf+0x1f6>
     bfe:	2a30      	cmp	r2, #48	; 0x30
     c00:	f47f af44 	bne.w	a8c <cbvprintf+0x68>
     c04:	2301      	movs	r3, #1
	} while (loop);
     c06:	e733      	b.n	a70 <cbvprintf+0x4c>
		switch (*sp) {
     c08:	f04f 0c01 	mov.w	ip, #1
     c0c:	e730      	b.n	a70 <cbvprintf+0x4c>
     c0e:	f04f 0e01 	mov.w	lr, #1
     c12:	e72d      	b.n	a70 <cbvprintf+0x4c>
     c14:	f04f 0801 	mov.w	r8, #1
     c18:	e72a      	b.n	a70 <cbvprintf+0x4c>
     c1a:	2001      	movs	r0, #1
     c1c:	e728      	b.n	a70 <cbvprintf+0x4c>
	size_t width = extract_decimal(&sp);
     c1e:	a809      	add	r0, sp, #36	; 0x24
     c20:	f7ff fe9e 	bl	960 <extract_decimal>
	if (sp != wp) {
     c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c26:	42b3      	cmp	r3, r6
     c28:	f43f af74 	beq.w	b14 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
     c2c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
     c30:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     c32:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
     c34:	f360 0241 	bfi	r2, r0, #1, #1
     c38:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
     c3c:	e76a      	b.n	b14 <cbvprintf+0xf0>
	size_t prec = extract_decimal(&sp);
     c3e:	a809      	add	r0, sp, #36	; 0x24
     c40:	f7ff fe8e 	bl	960 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
     c44:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
     c48:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     c4a:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c4e:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
     c52:	f362 0341 	bfi	r3, r2, #1, #1
     c56:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
     c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c5c:	e773      	b.n	b46 <cbvprintf+0x122>
	switch (*sp) {
     c5e:	2a74      	cmp	r2, #116	; 0x74
     c60:	d026      	beq.n	cb0 <cbvprintf+0x28c>
     c62:	2a7a      	cmp	r2, #122	; 0x7a
     c64:	f47f af7e 	bne.w	b64 <cbvprintf+0x140>
		conv->length_mod = LENGTH_Z;
     c68:	2106      	movs	r1, #6
     c6a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c6e:	e00c      	b.n	c8a <cbvprintf+0x266>
		if (*++sp == 'h') {
     c70:	785a      	ldrb	r2, [r3, #1]
     c72:	2a68      	cmp	r2, #104	; 0x68
     c74:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c78:	d106      	bne.n	c88 <cbvprintf+0x264>
			conv->length_mod = LENGTH_HH;
     c7a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     c7c:	f361 02c6 	bfi	r2, r1, #3, #4
     c80:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     c84:	3302      	adds	r3, #2
     c86:	e76d      	b.n	b64 <cbvprintf+0x140>
			conv->length_mod = LENGTH_H;
     c88:	2102      	movs	r1, #2
     c8a:	f361 02c6 	bfi	r2, r1, #3, #4
     c8e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     c92:	3301      	adds	r3, #1
     c94:	e766      	b.n	b64 <cbvprintf+0x140>
		if (*++sp == 'l') {
     c96:	785a      	ldrb	r2, [r3, #1]
     c98:	2a6c      	cmp	r2, #108	; 0x6c
     c9a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c9e:	d101      	bne.n	ca4 <cbvprintf+0x280>
			conv->length_mod = LENGTH_LL;
     ca0:	2104      	movs	r1, #4
     ca2:	e7eb      	b.n	c7c <cbvprintf+0x258>
			conv->length_mod = LENGTH_L;
     ca4:	2103      	movs	r1, #3
     ca6:	e7f0      	b.n	c8a <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
     ca8:	2105      	movs	r1, #5
     caa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     cae:	e7ec      	b.n	c8a <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
     cb0:	2107      	movs	r1, #7
     cb2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     cb6:	e7e8      	b.n	c8a <cbvprintf+0x266>
		conv->unsupported = true;
     cb8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     cbc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     cc0:	f022 0202 	bic.w	r2, r2, #2
     cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     cc8:	f042 0202 	orr.w	r2, r2, #2
     ccc:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     cd0:	e7df      	b.n	c92 <cbvprintf+0x26e>
	switch (conv->specifier) {
     cd2:	3b6e      	subs	r3, #110	; 0x6e
     cd4:	b2d9      	uxtb	r1, r3
     cd6:	2301      	movs	r3, #1
     cd8:	408b      	lsls	r3, r1
     cda:	f240 4182 	movw	r1, #1154	; 0x482
     cde:	420b      	tst	r3, r1
     ce0:	d138      	bne.n	d54 <cbvprintf+0x330>
     ce2:	f013 0f24 	tst.w	r3, #36	; 0x24
     ce6:	d152      	bne.n	d8e <cbvprintf+0x36a>
     ce8:	07d8      	lsls	r0, r3, #31
     cea:	d55d      	bpl.n	da8 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
     cec:	2103      	movs	r1, #3
     cee:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     cf2:	f361 0302 	bfi	r3, r1, #0, #3
     cf6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     cfa:	f002 0378 	and.w	r3, r2, #120	; 0x78
     cfe:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     d02:	424b      	negs	r3, r1
     d04:	414b      	adcs	r3, r1
     d06:	e01b      	b.n	d40 <cbvprintf+0x31c>
     d08:	2001      	movs	r0, #1
	switch (conv->specifier) {
     d0a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     d0e:	b2c9      	uxtb	r1, r1
     d10:	fa00 f101 	lsl.w	r1, r0, r1
     d14:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     d18:	f47f af3e 	bne.w	b98 <cbvprintf+0x174>
     d1c:	f640 0601 	movw	r6, #2049	; 0x801
     d20:	4231      	tst	r1, r6
     d22:	d11d      	bne.n	d60 <cbvprintf+0x33c>
     d24:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     d28:	d03e      	beq.n	da8 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
     d2a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     d2e:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     d32:	f002 0278 	and.w	r2, r2, #120	; 0x78
     d36:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     d38:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     d3c:	d034      	beq.n	da8 <cbvprintf+0x384>
	bool unsupported = false;
     d3e:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     d40:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     d44:	f3c2 0140 	ubfx	r1, r2, #1, #1
     d48:	430b      	orrs	r3, r1
     d4a:	f363 0241 	bfi	r2, r3, #1, #1
     d4e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     d52:	e72e      	b.n	bb2 <cbvprintf+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
     d54:	2102      	movs	r1, #2
     d56:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     d5a:	f361 0302 	bfi	r3, r1, #0, #3
     d5e:	e7e8      	b.n	d32 <cbvprintf+0x30e>
     d60:	2002      	movs	r0, #2
     d62:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     d66:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     d6a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     d6e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     d70:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     d74:	bf02      	ittt	eq
     d76:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     d7a:	f041 0101 	orreq.w	r1, r1, #1
     d7e:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     d82:	2b63      	cmp	r3, #99	; 0x63
     d84:	d1db      	bne.n	d3e <cbvprintf+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     d86:	1e13      	subs	r3, r2, #0
     d88:	bf18      	it	ne
     d8a:	2301      	movne	r3, #1
     d8c:	e7d8      	b.n	d40 <cbvprintf+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
     d8e:	2103      	movs	r1, #3
     d90:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     d94:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     d98:	f361 0302 	bfi	r3, r1, #0, #3
     d9c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     da0:	bf14      	ite	ne
     da2:	2301      	movne	r3, #1
     da4:	2300      	moveq	r3, #0
     da6:	e7cb      	b.n	d40 <cbvprintf+0x31c>
		conv->invalid = true;
     da8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     dac:	f043 0301 	orr.w	r3, r3, #1
     db0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     db4:	e7c3      	b.n	d3e <cbvprintf+0x31a>
		} else if (conv->width_present) {
     db6:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     dba:	2a00      	cmp	r2, #0
		int width = -1;
     dbc:	bfac      	ite	ge
     dbe:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
     dc2:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
     dc6:	e706      	b.n	bd6 <cbvprintf+0x1b2>
		} else if (conv->prec_present) {
     dc8:	0798      	lsls	r0, r3, #30
     dca:	f57f af13 	bpl.w	bf4 <cbvprintf+0x1d0>
			precision = conv->prec_value;
     dce:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
     dd2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     dd4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
     dd8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
     ddc:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
     de0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     de4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     de6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     dea:	d133      	bne.n	e54 <cbvprintf+0x430>
			switch (length_mod) {
     dec:	1ecb      	subs	r3, r1, #3
     dee:	2b04      	cmp	r3, #4
     df0:	d804      	bhi.n	dfc <cbvprintf+0x3d8>
     df2:	e8df f003 	tbb	[pc, r3]
     df6:	4610      	.short	0x4610
     df8:	1046      	.short	0x1046
     dfa:	10          	.byte	0x10
     dfb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     dfc:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     dfe:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     e00:	ea4f 72e3 	mov.w	r2, r3, asr #31
     e04:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     e08:	d10b      	bne.n	e22 <cbvprintf+0x3fe>
				value->sint = (char)value->sint;
     e0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     e0e:	9310      	str	r3, [sp, #64]	; 0x40
     e10:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
     e12:	9311      	str	r3, [sp, #68]	; 0x44
     e14:	e007      	b.n	e26 <cbvprintf+0x402>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     e16:	f854 3b04 	ldr.w	r3, [r4], #4
     e1a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     e1c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
     e20:	e002      	b.n	e28 <cbvprintf+0x404>
			} else if (length_mod == LENGTH_H) {
     e22:	2902      	cmp	r1, #2
     e24:	d011      	beq.n	e4a <cbvprintf+0x426>
				value->sint = va_arg(ap, int);
     e26:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     e28:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     e2c:	f013 0603 	ands.w	r6, r3, #3
     e30:	d047      	beq.n	ec2 <cbvprintf+0x49e>
			OUTS(sp, fp);
     e32:	463a      	mov	r2, r7
     e34:	4650      	mov	r0, sl
     e36:	9b04      	ldr	r3, [sp, #16]
     e38:	9903      	ldr	r1, [sp, #12]
     e3a:	f005 fff2 	bl	6e22 <outs>
     e3e:	2800      	cmp	r0, #0
     e40:	f2c0 8146 	blt.w	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
     e44:	4405      	add	r5, r0
			continue;
     e46:	9f04      	ldr	r7, [sp, #16]
     e48:	e5f4      	b.n	a34 <cbvprintf+0x10>
				value->sint = (short)value->sint;
     e4a:	b21a      	sxth	r2, r3
     e4c:	9210      	str	r2, [sp, #64]	; 0x40
     e4e:	f343 33c0 	sbfx	r3, r3, #15, #1
     e52:	e7de      	b.n	e12 <cbvprintf+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
     e54:	2b02      	cmp	r3, #2
     e56:	d124      	bne.n	ea2 <cbvprintf+0x47e>
			switch (length_mod) {
     e58:	1ecb      	subs	r3, r1, #3
     e5a:	2b04      	cmp	r3, #4
     e5c:	d804      	bhi.n	e68 <cbvprintf+0x444>
     e5e:	e8df f003 	tbb	[pc, r3]
     e62:	1018      	.short	0x1018
     e64:	1810      	.short	0x1810
     e66:	18          	.byte	0x18
     e67:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     e68:	2901      	cmp	r1, #1
     e6a:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     e6e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     e72:	d014      	beq.n	e9e <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
     e74:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     e76:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     e7a:	d1d5      	bne.n	e28 <cbvprintf+0x404>
				value->uint = (unsigned short)value->uint;
     e7c:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     e7e:	9310      	str	r3, [sp, #64]	; 0x40
     e80:	e7d2      	b.n	e28 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap,
     e82:	3407      	adds	r4, #7
     e84:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     e88:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     e90:	e7ca      	b.n	e28 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap, size_t);
     e92:	f854 3b04 	ldr.w	r3, [r4], #4
     e96:	9310      	str	r3, [sp, #64]	; 0x40
     e98:	2300      	movs	r3, #0
     e9a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     e9c:	e7c4      	b.n	e28 <cbvprintf+0x404>
				value->uint = (unsigned char)value->uint;
     e9e:	b2db      	uxtb	r3, r3
     ea0:	e7bc      	b.n	e1c <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
     ea2:	2b04      	cmp	r3, #4
     ea4:	d108      	bne.n	eb8 <cbvprintf+0x494>
					(sint_value_type)va_arg(ap, long long);
     ea6:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     ea8:	f024 0407 	bic.w	r4, r4, #7
     eac:	e9d4 2300 	ldrd	r2, r3, [r4]
     eb0:	3408      	adds	r4, #8
     eb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     eb6:	e7b7      	b.n	e28 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_PTR) {
     eb8:	2b03      	cmp	r3, #3
     eba:	d1b5      	bne.n	e28 <cbvprintf+0x404>
			value->ptr = va_arg(ap, void *);
     ebc:	f854 3b04 	ldr.w	r3, [r4], #4
     ec0:	e7dd      	b.n	e7e <cbvprintf+0x45a>
		switch (conv->specifier) {
     ec2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
     ec6:	2878      	cmp	r0, #120	; 0x78
     ec8:	d8bd      	bhi.n	e46 <cbvprintf+0x422>
     eca:	2862      	cmp	r0, #98	; 0x62
     ecc:	d81c      	bhi.n	f08 <cbvprintf+0x4e4>
     ece:	2825      	cmp	r0, #37	; 0x25
     ed0:	f43f adb8 	beq.w	a44 <cbvprintf+0x20>
     ed4:	2858      	cmp	r0, #88	; 0x58
     ed6:	d1b6      	bne.n	e46 <cbvprintf+0x422>
			bps = encode_uint(value->uint, conv, buf, bpe);
     ed8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
     edc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ee0:	9300      	str	r3, [sp, #0]
     ee2:	aa12      	add	r2, sp, #72	; 0x48
     ee4:	ab0a      	add	r3, sp, #40	; 0x28
     ee6:	f7ff fd51 	bl	98c <encode_uint>
			if (precision >= 0) {
     eea:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     eee:	4607      	mov	r7, r0
			if (precision >= 0) {
     ef0:	f280 8097 	bge.w	1022 <CONFIG_MAIN_STACK_SIZE+0x22>
		if (bps == NULL) {
     ef4:	2f00      	cmp	r7, #0
     ef6:	d0a6      	beq.n	e46 <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
     ef8:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
     efc:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
     f00:	2e00      	cmp	r6, #0
     f02:	d04e      	beq.n	fa2 <cbvprintf+0x57e>
			nj_len += 1U;
     f04:	3001      	adds	r0, #1
     f06:	e04c      	b.n	fa2 <cbvprintf+0x57e>
		switch (conv->specifier) {
     f08:	3863      	subs	r0, #99	; 0x63
     f0a:	2815      	cmp	r0, #21
     f0c:	d89b      	bhi.n	e46 <cbvprintf+0x422>
     f0e:	a201      	add	r2, pc, #4	; (adr r2, f14 <cbvprintf+0x4f0>)
     f10:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     f14:	00000f93 	.word	0x00000f93
     f18:	00000ff9 	.word	0x00000ff9
     f1c:	00000e47 	.word	0x00000e47
     f20:	00000e47 	.word	0x00000e47
     f24:	00000e47 	.word	0x00000e47
     f28:	00000e47 	.word	0x00000e47
     f2c:	00000ff9 	.word	0x00000ff9
     f30:	00000e47 	.word	0x00000e47
     f34:	00000e47 	.word	0x00000e47
     f38:	00000e47 	.word	0x00000e47
     f3c:	00000e47 	.word	0x00000e47
     f40:	00001081 	.word	0x00001081
     f44:	0000101d 	.word	0x0000101d
     f48:	00001043 	.word	0x00001043
     f4c:	00000e47 	.word	0x00000e47
     f50:	00000e47 	.word	0x00000e47
     f54:	00000f6d 	.word	0x00000f6d
     f58:	00000e47 	.word	0x00000e47
     f5c:	0000101d 	.word	0x0000101d
     f60:	00000e47 	.word	0x00000e47
     f64:	00000e47 	.word	0x00000e47
     f68:	0000101d 	.word	0x0000101d
			if (precision >= 0) {
     f6c:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
     f70:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
     f72:	db0a      	blt.n	f8a <cbvprintf+0x566>
				len = strnlen(bps, precision);
     f74:	4659      	mov	r1, fp
     f76:	4638      	mov	r0, r7
     f78:	f006 fb19 	bl	75ae <strnlen>
			bpe = bps + len;
     f7c:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
     f80:	2f00      	cmp	r7, #0
     f82:	f43f af60 	beq.w	e46 <cbvprintf+0x422>
		char sign = 0;
     f86:	2600      	movs	r6, #0
     f88:	e00b      	b.n	fa2 <cbvprintf+0x57e>
				len = strlen(bps);
     f8a:	4638      	mov	r0, r7
     f8c:	f7ff fbbc 	bl	708 <strlen>
     f90:	e7f4      	b.n	f7c <cbvprintf+0x558>
		char sign = 0;
     f92:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     f94:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f96:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
     f98:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
     fa0:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
     fa2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     fa6:	f013 0210 	ands.w	r2, r3, #16
     faa:	9205      	str	r2, [sp, #20]
     fac:	f000 8083 	beq.w	10b6 <CONFIG_MAIN_STACK_SIZE+0xb6>
			nj_len += 2U;
     fb0:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     fb2:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     fb4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
     fb8:	bf48      	it	mi
     fba:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
     fbc:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
     fbe:	bf48      	it	mi
     fc0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     fc2:	f1b9 0f00 	cmp.w	r9, #0
     fc6:	f340 8090 	ble.w	10ea <CONFIG_MAIN_STACK_SIZE+0xea>
			if (!conv->flag_dash) {
     fca:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
     fce:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
     fd2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     fd6:	0750      	lsls	r0, r2, #29
     fd8:	9306      	str	r3, [sp, #24]
     fda:	f100 8086 	bmi.w	10ea <CONFIG_MAIN_STACK_SIZE+0xea>
				if (conv->flag_zero) {
     fde:	0651      	lsls	r1, r2, #25
     fe0:	d579      	bpl.n	10d6 <CONFIG_MAIN_STACK_SIZE+0xd6>
					if (sign != 0) {
     fe2:	b13e      	cbz	r6, ff4 <cbvprintf+0x5d0>
						OUTC(sign);
     fe4:	4630      	mov	r0, r6
     fe6:	9903      	ldr	r1, [sp, #12]
     fe8:	47d0      	blx	sl
     fea:	2800      	cmp	r0, #0
     fec:	db70      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
     fee:	9b06      	ldr	r3, [sp, #24]
     ff0:	3501      	adds	r5, #1
     ff2:	461e      	mov	r6, r3
					pad = '0';
     ff4:	2230      	movs	r2, #48	; 0x30
     ff6:	e06f      	b.n	10d8 <CONFIG_MAIN_STACK_SIZE+0xd8>
			if (conv->flag_plus) {
     ff8:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     ffa:	bf5a      	itte	pl
     ffc:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1000:	015e      	lslpl	r6, r3, #5
				sign = '+';
    1002:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    1004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    1008:	2b00      	cmp	r3, #0
    100a:	f6bf af65 	bge.w	ed8 <cbvprintf+0x4b4>
				value->uint = (uint_value_type)-sint;
    100e:	4252      	negs	r2, r2
    1010:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    1014:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    1016:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    101a:	e75d      	b.n	ed8 <cbvprintf+0x4b4>
		switch (conv->specifier) {
    101c:	2600      	movs	r6, #0
    101e:	e75b      	b.n	ed8 <cbvprintf+0x4b4>
		char sign = 0;
    1020:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1022:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    1026:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    102a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    102c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1030:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    1032:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    1036:	f67f af5d 	bls.w	ef4 <cbvprintf+0x4d0>
					conv->pad0_value = precision - (int)len;
    103a:	ebab 0303 	sub.w	r3, fp, r3
    103e:	9313      	str	r3, [sp, #76]	; 0x4c
    1040:	e758      	b.n	ef4 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
    1042:	9810      	ldr	r0, [sp, #64]	; 0x40
    1044:	b380      	cbz	r0, 10a8 <CONFIG_MAIN_STACK_SIZE+0xa8>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1046:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    104a:	ab0a      	add	r3, sp, #40	; 0x28
    104c:	2100      	movs	r1, #0
    104e:	f8cd 8000 	str.w	r8, [sp]
    1052:	aa12      	add	r2, sp, #72	; 0x48
    1054:	f7ff fc9a 	bl	98c <encode_uint>
				conv->altform_0c = true;
    1058:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    105c:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    1060:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1064:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1068:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    106c:	4607      	mov	r7, r0
				conv->altform_0c = true;
    106e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    1072:	dad5      	bge.n	1020 <CONFIG_MAIN_STACK_SIZE+0x20>
		if (bps == NULL) {
    1074:	2800      	cmp	r0, #0
    1076:	f43f aee6 	beq.w	e46 <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    107a:	eba8 0000 	sub.w	r0, r8, r0
    107e:	e782      	b.n	f86 <cbvprintf+0x562>
				store_count(conv, value->ptr, count);
    1080:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    1082:	2907      	cmp	r1, #7
    1084:	f63f aedf 	bhi.w	e46 <cbvprintf+0x422>
    1088:	e8df f001 	tbb	[pc, r1]
    108c:	0c06040c 	.word	0x0c06040c
    1090:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1094:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1096:	e6d6      	b.n	e46 <cbvprintf+0x422>
		*(short *)dp = (short)count;
    1098:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    109a:	e6d4      	b.n	e46 <cbvprintf+0x422>
		*(intmax_t *)dp = (intmax_t)count;
    109c:	17ea      	asrs	r2, r5, #31
    109e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    10a2:	e6d0      	b.n	e46 <cbvprintf+0x422>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    10a4:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    10a6:	e6ce      	b.n	e46 <cbvprintf+0x422>
			bpe = bps + 5;
    10a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1168 <CONFIG_MAIN_STACK_SIZE+0x168>
		char sign = 0;
    10ac:	4606      	mov	r6, r0
    10ae:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    10b2:	2005      	movs	r0, #5
    10b4:	e775      	b.n	fa2 <cbvprintf+0x57e>
		} else if (conv->altform_0) {
    10b6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    10b8:	bf48      	it	mi
    10ba:	3001      	addmi	r0, #1
    10bc:	e779      	b.n	fb2 <cbvprintf+0x58e>
					OUTC(pad);
    10be:	4610      	mov	r0, r2
    10c0:	9307      	str	r3, [sp, #28]
    10c2:	9206      	str	r2, [sp, #24]
    10c4:	9903      	ldr	r1, [sp, #12]
    10c6:	47d0      	blx	sl
    10c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    10cc:	2800      	cmp	r0, #0
    10ce:	da04      	bge.n	10da <CONFIG_MAIN_STACK_SIZE+0xda>
#undef OUTS
#undef OUTC
}
    10d0:	b017      	add	sp, #92	; 0x5c
    10d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    10d6:	2220      	movs	r2, #32
					pad = '0';
    10d8:	464b      	mov	r3, r9
				while (width-- > 0) {
    10da:	4619      	mov	r1, r3
    10dc:	2900      	cmp	r1, #0
    10de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    10e2:	dcec      	bgt.n	10be <CONFIG_MAIN_STACK_SIZE+0xbe>
    10e4:	444d      	add	r5, r9
    10e6:	4699      	mov	r9, r3
    10e8:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    10ea:	b12e      	cbz	r6, 10f8 <CONFIG_MAIN_STACK_SIZE+0xf8>
			OUTC(sign);
    10ec:	4630      	mov	r0, r6
    10ee:	9903      	ldr	r1, [sp, #12]
    10f0:	47d0      	blx	sl
    10f2:	2800      	cmp	r0, #0
    10f4:	dbec      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    10f6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    10f8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    10fc:	06da      	lsls	r2, r3, #27
    10fe:	d401      	bmi.n	1104 <CONFIG_MAIN_STACK_SIZE+0x104>
    1100:	071b      	lsls	r3, r3, #28
    1102:	d505      	bpl.n	1110 <CONFIG_MAIN_STACK_SIZE+0x110>
				OUTC('0');
    1104:	2030      	movs	r0, #48	; 0x30
    1106:	9903      	ldr	r1, [sp, #12]
    1108:	47d0      	blx	sl
    110a:	2800      	cmp	r0, #0
    110c:	dbe0      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    110e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1110:	9b05      	ldr	r3, [sp, #20]
    1112:	b133      	cbz	r3, 1122 <CONFIG_MAIN_STACK_SIZE+0x122>
				OUTC(conv->specifier);
    1114:	9903      	ldr	r1, [sp, #12]
    1116:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    111a:	47d0      	blx	sl
    111c:	2800      	cmp	r0, #0
    111e:	dbd7      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    1120:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1122:	44ab      	add	fp, r5
    1124:	e005      	b.n	1132 <CONFIG_MAIN_STACK_SIZE+0x132>
				OUTC('0');
    1126:	2030      	movs	r0, #48	; 0x30
    1128:	9903      	ldr	r1, [sp, #12]
    112a:	47d0      	blx	sl
    112c:	2800      	cmp	r0, #0
    112e:	dbcf      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    1130:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1132:	ebab 0305 	sub.w	r3, fp, r5
    1136:	2b00      	cmp	r3, #0
    1138:	dcf5      	bgt.n	1126 <CONFIG_MAIN_STACK_SIZE+0x126>
			OUTS(bps, bpe);
    113a:	4643      	mov	r3, r8
    113c:	463a      	mov	r2, r7
    113e:	4650      	mov	r0, sl
    1140:	9903      	ldr	r1, [sp, #12]
    1142:	f005 fe6e 	bl	6e22 <outs>
    1146:	2800      	cmp	r0, #0
    1148:	dbc2      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    114a:	4405      	add	r5, r0
		while (width > 0) {
    114c:	44a9      	add	r9, r5
    114e:	eba9 0305 	sub.w	r3, r9, r5
    1152:	2b00      	cmp	r3, #0
    1154:	f77f ae77 	ble.w	e46 <cbvprintf+0x422>
			OUTC(' ');
    1158:	2020      	movs	r0, #32
    115a:	9903      	ldr	r1, [sp, #12]
    115c:	47d0      	blx	sl
    115e:	2800      	cmp	r0, #0
    1160:	dbb6      	blt.n	10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    1162:	3501      	adds	r5, #1
			--width;
    1164:	e7f3      	b.n	114e <CONFIG_MAIN_STACK_SIZE+0x14e>
    1166:	bf00      	nop
    1168:	000082cc 	.word	0x000082cc

0000116c <z_platform_init>:
struct sb_header sbh __attribute((used, section(".sboot"))) = {
	.img_size = (uint32_t)&_image_rom_end,
};

void z_platform_init(void)
{
    116c:	b508      	push	{r3, lr}
	cache_instr_enable();
    116e:	f000 fa77 	bl	1660 <cache_instr_enable>

	if (CONFIG_SRAM_NC_SIZE > 0) {
		(void)memset(__bss_nc_start__, 0, __bss_nc_end__ - __bss_nc_start__);
	}
}
    1172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void)memset(__bss_nc_start__, 0, __bss_nc_end__ - __bss_nc_start__);
    1176:	4803      	ldr	r0, [pc, #12]	; (1184 <z_platform_init+0x18>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    1178:	4a03      	ldr	r2, [pc, #12]	; (1188 <z_platform_init+0x1c>)
    117a:	2100      	movs	r1, #0
    117c:	1a12      	subs	r2, r2, r0
    117e:	f006 b8f5 	b.w	736c <memset>
    1182:	bf00      	nop
    1184:	01000000 	.word	0x01000000
    1188:	01007000 	.word	0x01007000

0000118c <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    118c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    118e:	4c04      	ldr	r4, [pc, #16]	; (11a0 <__do_init_array_aux+0x14>)
		func < __init_array_end;
    1190:	4d04      	ldr	r5, [pc, #16]	; (11a4 <__do_init_array_aux+0x18>)
    1192:	42ac      	cmp	r4, r5
    1194:	d300      	bcc.n	1198 <__do_init_array_aux+0xc>
		func++) {
		(*func)();
	}
}
    1196:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    1198:	f854 3b04 	ldr.w	r3, [r4], #4
    119c:	4798      	blx	r3
		func++) {
    119e:	e7f8      	b.n	1192 <__do_init_array_aux+0x6>
    11a0:	00007ebc 	.word	0x00007ebc
    11a4:	00007ebc 	.word	0x00007ebc

000011a8 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    11a8:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    11aa:	4c05      	ldr	r4, [pc, #20]	; (11c0 <__do_global_ctors_aux+0x18>)
    11ac:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    11ae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    11b2:	b905      	cbnz	r5, 11b6 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    11b4:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    11b6:	f854 3904 	ldr.w	r3, [r4], #-4
    11ba:	3d01      	subs	r5, #1
    11bc:	4798      	blx	r3
    11be:	e7f8      	b.n	11b2 <__do_global_ctors_aux+0xa>
    11c0:	00007eb4 	.word	0x00007eb4

000011c4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    11c4:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    11c6:	4807      	ldr	r0, [pc, #28]	; (11e4 <uart_console_init+0x20>)
    11c8:	f001 fe9e 	bl	2f08 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    11cc:	4c06      	ldr	r4, [pc, #24]	; (11e8 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    11ce:	4b07      	ldr	r3, [pc, #28]	; (11ec <uart_console_init+0x28>)
    11d0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    11d2:	4620      	mov	r0, r4
    11d4:	f000 fcc0 	bl	1b58 <__stdout_hook_install>
	__printk_hook_install(console_out);
    11d8:	4620      	mov	r0, r4
    11da:	f7ff faf9 	bl	7d0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    11de:	2000      	movs	r0, #0
    11e0:	bd10      	pop	{r4, pc}
    11e2:	bf00      	nop
    11e4:	000082cd 	.word	0x000082cd
    11e8:	000011f1 	.word	0x000011f1
    11ec:	00009ca8 	.word	0x00009ca8

000011f0 <console_out>:
	if ('\n' == c) {
    11f0:	280a      	cmp	r0, #10
{
    11f2:	b538      	push	{r3, r4, r5, lr}
    11f4:	4604      	mov	r4, r0
    11f6:	4d07      	ldr	r5, [pc, #28]	; (1214 <console_out+0x24>)
	if ('\n' == c) {
    11f8:	d104      	bne.n	1204 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    11fa:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    11fc:	6883      	ldr	r3, [r0, #8]
    11fe:	210d      	movs	r1, #13
    1200:	685b      	ldr	r3, [r3, #4]
    1202:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1204:	6828      	ldr	r0, [r5, #0]
    1206:	6883      	ldr	r3, [r0, #8]
    1208:	b2e1      	uxtb	r1, r4
    120a:	685b      	ldr	r3, [r3, #4]
    120c:	4798      	blx	r3
}
    120e:	4620      	mov	r0, r4
    1210:	bd38      	pop	{r3, r4, r5, pc}
    1212:	bf00      	nop
    1214:	00009ca8 	.word	0x00009ca8

00001218 <aspeed_clock_control_get_rate>:

static int aspeed_clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sub_system, uint32_t *rate)
{
	uint32_t clk_id = (uint32_t)sub_system;
	uint32_t base = DEV_CFG(dev)->base;
    1218:	6843      	ldr	r3, [r0, #4]
	uint32_t reg, src, clk_div;

	switch (clk_id) {
    121a:	3928      	subs	r1, #40	; 0x28
{
    121c:	b510      	push	{r4, lr}
	uint32_t base = DEV_CFG(dev)->base;
    121e:	6818      	ldr	r0, [r3, #0]
	switch (clk_id) {
    1220:	291b      	cmp	r1, #27
    1222:	d836      	bhi.n	1292 <aspeed_clock_control_get_rate+0x7a>
    1224:	e8df f001 	tbb	[pc, r1]
    1228:	0e0e0e0e 	.word	0x0e0e0e0e
    122c:	35350e0e 	.word	0x35350e0e
    1230:	4b4b4b4b 	.word	0x4b4b4b4b
    1234:	4b4b3535 	.word	0x4b4b3535
    1238:	4b4b4b4b 	.word	0x4b4b4b4b
    123c:	35354b4b 	.word	0x35354b4b
    1240:	4b433937 	.word	0x4b433937
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1244:	f8d0 1314 	ldr.w	r1, [r0, #788]	; 0x314
	case ASPEED_CLK_GATE_I3C2CLK:
	case ASPEED_CLK_GATE_I3C3CLK:
	case ASPEED_CLK_GATE_I3C4CLK:
	case ASPEED_CLK_GATE_I3C5CLK:
		reg = sys_read32(base + CLK_SELECTION_REG5);
		if (FIELD_GET(I3C_CLK_SRC_SEL, reg) == I3C_CLK_SRC_APLL_DIV) {
    1248:	0fcb      	lsrs	r3, r1, #31
    124a:	d024      	beq.n	1296 <aspeed_clock_control_get_rate+0x7e>
    124c:	f8d0 0210 	ldr.w	r0, [r0, #528]	; 0x210
			src = aspeed_clock_control_get_pll_freq(sys_read32(base + APLL_PARAM_REG));
			clk_div = I3C_CLK_APLL_DIV_REG_TO_NUM(FIELD_GET(I3C_CLK_APLL_DIV_SEL, reg));
    1250:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
	if (reg_value & PLL_PARAM_BYPASS_MODE) {
    1254:	01c4      	lsls	r4, r0, #7
		uint32_t m = FIELD_GET(PLL_PARAM_M, reg_value);
    1256:	bf5f      	itttt	pl
    1258:	f3c0 030c 	ubfxpl	r3, r0, #0, #13
		uint32_t n = FIELD_GET(PLL_PARAM_N, reg_value);
    125c:	f3c0 3445 	ubfxpl	r4, r0, #13, #6
		mult = (m + 1) / (n + 1);
    1260:	3301      	addpl	r3, #1
    1262:	3401      	addpl	r4, #1
    1264:	bf54      	ite	pl
    1266:	fbb3 f3f4 	udivpl	r3, r3, r4
		mult = div = 1;
    126a:	4618      	movmi	r0, r3
	return (CLKIN_FREQ * mult / div);
    126c:	4c15      	ldr	r4, [pc, #84]	; (12c4 <aspeed_clock_control_get_rate+0xac>)
		uint32_t p = FIELD_GET(PLL_PARAM_P, reg_value);
    126e:	bf58      	it	pl
    1270:	f3c0 40c3 	ubfxpl	r0, r0, #19, #4
	return (CLKIN_FREQ * mult / div);
    1274:	fb04 f303 	mul.w	r3, r4, r3
		div = p + 1;
    1278:	bf58      	it	pl
    127a:	3001      	addpl	r0, #1
			clk_div = I3C_CLK_APLL_DIV_REG_TO_NUM(FIELD_GET(I3C_CLK_APLL_DIV_SEL, reg));
    127c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	return (CLKIN_FREQ * mult / div);
    1280:	fbb3 f3f0 	udiv	r3, r3, r0
			clk_div = I3C_CLK_APLL_DIV_REG_TO_NUM(FIELD_GET(I3C_CLK_APLL_DIV_SEL, reg));
    1284:	bf32      	itee	cc
    1286:	2102      	movcc	r1, #2
    1288:	0f09      	lsrcs	r1, r1, #28
    128a:	3101      	addcs	r1, #1
			*rate = src / clk_div;
    128c:	fbb3 f3f1 	udiv	r3, r3, r1
	case ASPEED_CLK_GATE_UART9CLK:
	case ASPEED_CLK_GATE_UART10CLK:
	case ASPEED_CLK_GATE_UART11CLK:
	case ASPEED_CLK_GATE_UART12CLK:
	case ASPEED_CLK_GATE_UART13CLK:
		*rate = 24000000 / 13;
    1290:	6013      	str	r3, [r2, #0]
		LOG_ERR("Missing feature define for %d!", clk_id);
		break;
	}

	return 0;
}
    1292:	2000      	movs	r0, #0
    1294:	bd10      	pop	{r4, pc}
		*rate = HCLK_FREQ;
    1296:	4b0c      	ldr	r3, [pc, #48]	; (12c8 <aspeed_clock_control_get_rate+0xb0>)
    1298:	e7fa      	b.n	1290 <aspeed_clock_control_get_rate+0x78>
    129a:	f8d0 3300 	ldr.w	r3, [r0, #768]	; 0x300
		*rate = src / clk_div;
    129e:	490b      	ldr	r1, [pc, #44]	; (12cc <aspeed_clock_control_get_rate+0xb4>)
		clk_div = APB1_DIV_REG_TO_NUM(FIELD_GET(APB1_DIV_SEL, reg));
    12a0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    12a4:	3301      	adds	r3, #1
    12a6:	009b      	lsls	r3, r3, #2
		*rate = src / clk_div;
    12a8:	fbb1 f3f3 	udiv	r3, r1, r3
    12ac:	e7f0      	b.n	1290 <aspeed_clock_control_get_rate+0x78>
    12ae:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
    12b2:	4905      	ldr	r1, [pc, #20]	; (12c8 <aspeed_clock_control_get_rate+0xb0>)
		clk_div = APB2_DIV_REG_TO_NUM(FIELD_GET(APB2_DIV_SEL, reg));
    12b4:	f3c3 2342 	ubfx	r3, r3, #9, #3
    12b8:	3301      	adds	r3, #1
    12ba:	005b      	lsls	r3, r3, #1
    12bc:	e7f4      	b.n	12a8 <aspeed_clock_control_get_rate+0x90>
		*rate = 24000000 / 13;
    12be:	4b04      	ldr	r3, [pc, #16]	; (12d0 <aspeed_clock_control_get_rate+0xb8>)
    12c0:	e7e6      	b.n	1290 <aspeed_clock_control_get_rate+0x78>
    12c2:	bf00      	nop
    12c4:	017d7840 	.word	0x017d7840
    12c8:	0bebc200 	.word	0x0bebc200
    12cc:	47868c00 	.word	0x47868c00
    12d0:	001c2b89 	.word	0x001c2b89

000012d4 <pinmux_aspeed_get>:
 */
static int pinmux_aspeed_get(const struct device *dev, uint32_t pin,
			     uint32_t *func)
{
	ARG_UNUSED(dev);
	if (pin >= MAX_PIN_ID) {
    12d4:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
		return -EINVAL;
	}
	*func = aspeed_pin_desc_table[pin];
    12d8:	bf9d      	ittte	ls
    12da:	4b04      	ldrls	r3, [pc, #16]	; (12ec <pinmux_aspeed_get+0x18>)
	return 0;
    12dc:	2000      	movls	r0, #0
	*func = aspeed_pin_desc_table[pin];
    12de:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
		return -EINVAL;
    12e2:	f06f 0015 	mvnhi.w	r0, #21
	*func = aspeed_pin_desc_table[pin];
    12e6:	bf98      	it	ls
    12e8:	6013      	strls	r3, [r2, #0]
}
    12ea:	4770      	bx	lr
    12ec:	00009538 	.word	0x00009538

000012f0 <pinmux_aspeed_set>:
 * @retval -EINVAL  Invalid pin.
 */
static int pinmux_aspeed_set(const struct device *dev, uint32_t pin,
			     uint32_t func)
{
	uint32_t scu_base = DEV_CFG(dev)->base;
    12f0:	6843      	ldr	r3, [r0, #4]
{
    12f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t scu_base = DEV_CFG(dev)->base;
    12f4:	681e      	ldr	r6, [r3, #0]
	const struct aspeed_sig_desc *sig_desc;
	const struct aspeed_sig_en *sig_en;
	struct aspeed_sig_desc dummy = {
    12f6:	2300      	movs	r3, #0
{
    12f8:	b085      	sub	sp, #20
				sizeof(aspeed_gpio_sig_desc_table[0]);
	uint32_t index;
	int sig_en_number;
	int sig_en_idx;

	if (func >= MAX_SIG_ID) {
    12fa:	2a07      	cmp	r2, #7
{
    12fc:	4614      	mov	r4, r2
	struct aspeed_sig_desc dummy = {
    12fe:	f88d 3008 	strb.w	r3, [sp, #8]
    1302:	f8ad 100a 	strh.w	r1, [sp, #10]
    1306:	9303      	str	r3, [sp, #12]
	if (func >= MAX_SIG_ID) {
    1308:	d814      	bhi.n	1334 <pinmux_aspeed_set+0x44>
		return -EINVAL;
	}
	if (func == SIG_GPIO) {
    130a:	d10c      	bne.n	1326 <pinmux_aspeed_set+0x36>
			if (pin == aspeed_gpio_sig_desc_table[index]->pin) {
				sig_desc = aspeed_gpio_sig_desc_table[index];
				break;
			}
		}
		func = (pin << 16) | func;
    130c:	040c      	lsls	r4, r1, #16
    130e:	f044 0407 	orr.w	r4, r4, #7
    1312:	ad02      	add	r5, sp, #8

		if (pin != sig_desc->pin) {
			return -EINVAL;
		}
	}
	pinmux_aspeed_get(dev, pin, &ret_sig_id);
    1314:	aa01      	add	r2, sp, #4
    1316:	f7ff ffdd 	bl	12d4 <pinmux_aspeed_get>
	if (ret_sig_id == func) {
    131a:	9b01      	ldr	r3, [sp, #4]
    131c:	42a3      	cmp	r3, r4
    131e:	d10c      	bne.n	133a <pinmux_aspeed_set+0x4a>
		return 0;
    1320:	2000      	movs	r0, #0
				ret_sig_id);
		}
#endif
		return -EBUSY;
	}
}
    1322:	b005      	add	sp, #20
    1324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sig_desc = aspeed_sig_desc_table[func];
    1326:	4b15      	ldr	r3, [pc, #84]	; (137c <pinmux_aspeed_set+0x8c>)
    1328:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
		if (sig_desc == NULL) {
    132c:	b115      	cbz	r5, 1334 <pinmux_aspeed_set+0x44>
		if (pin != sig_desc->pin) {
    132e:	886b      	ldrh	r3, [r5, #2]
    1330:	428b      	cmp	r3, r1
    1332:	d0ef      	beq.n	1314 <pinmux_aspeed_set+0x24>
		return -EINVAL;
    1334:	f06f 0015 	mvn.w	r0, #21
    1338:	e7f3      	b.n	1322 <pinmux_aspeed_set+0x32>
	} else if (ret_sig_id == 0xffffffff) {
    133a:	3301      	adds	r3, #1
    133c:	d11a      	bne.n	1374 <pinmux_aspeed_set+0x84>
		aspeed_pin_desc_table[pin] = func;
    133e:	4b10      	ldr	r3, [pc, #64]	; (1380 <pinmux_aspeed_set+0x90>)
					 ~BIT(sig_en->bits)),
    1340:	2701      	movs	r7, #1
		aspeed_pin_desc_table[pin] = func;
    1342:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
		for (sig_en_idx = 0; sig_en_idx < sig_en_number; sig_en_idx++) {
    1346:	2300      	movs	r3, #0
		sig_en_number = sig_desc->nsig_en;
    1348:	782c      	ldrb	r4, [r5, #0]
		for (sig_en_idx = 0; sig_en_idx < sig_en_number; sig_en_idx++) {
    134a:	429c      	cmp	r4, r3
    134c:	dde8      	ble.n	1320 <pinmux_aspeed_set+0x30>
			sig_en = &sig_desc->sig_en[sig_en_idx];
    134e:	686a      	ldr	r2, [r5, #4]
    1350:	eb02 0083 	add.w	r0, r2, r3, lsl #2
					 ~BIT(sig_en->bits)),
    1354:	7881      	ldrb	r1, [r0, #2]
			if (sig_en->op) {
    1356:	78c0      	ldrb	r0, [r0, #3]
					(sys_read32(scu_base + sig_en->offset) &
    1358:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
					 ~BIT(sig_en->bits)),
    135c:	fa07 f101 	lsl.w	r1, r7, r1
			if (sig_en->op) {
    1360:	b128      	cbz	r0, 136e <pinmux_aspeed_set+0x7e>
    1362:	5990      	ldr	r0, [r2, r6]
					(sys_read32(scu_base + sig_en->offset) &
    1364:	ea20 0101 	bic.w	r1, r0, r1
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1368:	5191      	str	r1, [r2, r6]
		for (sig_en_idx = 0; sig_en_idx < sig_en_number; sig_en_idx++) {
    136a:	3301      	adds	r3, #1
    136c:	e7ed      	b.n	134a <pinmux_aspeed_set+0x5a>
	return *(volatile uint32_t *)addr;
    136e:	5990      	ldr	r0, [r2, r6]
					(sys_read32(scu_base + sig_en->offset) |
    1370:	4301      	orrs	r1, r0
    1372:	e7f9      	b.n	1368 <pinmux_aspeed_set+0x78>
		return -EBUSY;
    1374:	f06f 000f 	mvn.w	r0, #15
    1378:	e7d3      	b.n	1322 <pinmux_aspeed_set+0x32>
    137a:	bf00      	nop
    137c:	0000951c 	.word	0x0000951c
    1380:	00009538 	.word	0x00009538

00001384 <pinmux_aspeed_init>:
	}
	return ret;
}

static int pinmux_aspeed_init(const struct device *dev)
{
    1384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fun_desc = aspeed_fun_desc_table[fun_id];
    1386:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <pinmux_aspeed_init+0x2c>)
{
    1388:	4606      	mov	r6, r0
	fun_desc = aspeed_fun_desc_table[fun_id];
    138a:	685c      	ldr	r4, [r3, #4]
	if (fun_desc == NULL) {
    138c:	b12c      	cbz	r4, 139a <pinmux_aspeed_init+0x16>
	for (sig_idx = 0; sig_idx < sig_number; sig_idx++) {
    138e:	7825      	ldrb	r5, [r4, #0]
		sig_desc = aspeed_sig_desc_table[sig_id];
    1390:	4f08      	ldr	r7, [pc, #32]	; (13b4 <pinmux_aspeed_init+0x30>)
    1392:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	for (sig_idx = 0; sig_idx < sig_number; sig_idx++) {
    1396:	42ac      	cmp	r4, r5
    1398:	d101      	bne.n	139e <pinmux_aspeed_init+0x1a>
		if (aspeed_fun_en_table[fun_id]) {
			aspeed_pinctrl_fn_group_request(dev, fun_id);
		}
	}
	return 0;
}
    139a:	2000      	movs	r0, #0
    139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sig_id = fun_desc->sig_id_list[sig_idx];
    139e:	f834 2f02 	ldrh.w	r2, [r4, #2]!
		ret |= pinmux_aspeed_set(dev, sig_desc->pin, sig_id);
    13a2:	4630      	mov	r0, r6
    13a4:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    13a8:	8859      	ldrh	r1, [r3, #2]
    13aa:	f7ff ffa1 	bl	12f0 <pinmux_aspeed_set>
	for (sig_idx = 0; sig_idx < sig_number; sig_idx++) {
    13ae:	e7f2      	b.n	1396 <pinmux_aspeed_init+0x12>
    13b0:	00009514 	.word	0x00009514
    13b4:	0000951c 	.word	0x0000951c

000013b8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    13b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    13bc:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    13be:	6919      	ldr	r1, [r3, #16]
{
    13c0:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    13c2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    13c6:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    13c8:	4908      	ldr	r1, [pc, #32]	; (13ec <elapsed+0x34>)
    13ca:	4b09      	ldr	r3, [pc, #36]	; (13f0 <elapsed+0x38>)
    13cc:	d101      	bne.n	13d2 <elapsed+0x1a>
	    || (val1 < val2)) {
    13ce:	4282      	cmp	r2, r0
    13d0:	d206      	bcs.n	13e0 <elapsed+0x28>
		overflow_cyc += last_load;
    13d2:	681a      	ldr	r2, [r3, #0]
    13d4:	680c      	ldr	r4, [r1, #0]
    13d6:	4422      	add	r2, r4
    13d8:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    13da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    13de:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	680a      	ldr	r2, [r1, #0]
    13e4:	4413      	add	r3, r2
}
    13e6:	1a18      	subs	r0, r3, r0
    13e8:	bd10      	pop	{r4, pc}
    13ea:	bf00      	nop
    13ec:	00009cc8 	.word	0x00009cc8
    13f0:	00009cbc 	.word	0x00009cbc

000013f4 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
    13f4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
    13f6:	f7ff ffdf 	bl	13b8 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
    13fa:	4b0c      	ldr	r3, [pc, #48]	; (142c <sys_clock_isr+0x38>)
    13fc:	4a0c      	ldr	r2, [pc, #48]	; (1430 <sys_clock_isr+0x3c>)
    13fe:	6818      	ldr	r0, [r3, #0]
    1400:	6811      	ldr	r1, [r2, #0]
    1402:	4408      	add	r0, r1
    1404:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
    1406:	2200      	movs	r2, #0
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    1408:	f644 6120 	movw	r1, #20000	; 0x4e20
	overflow_cyc = 0;
    140c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    140e:	4a09      	ldr	r2, [pc, #36]	; (1434 <sys_clock_isr+0x40>)
    1410:	6813      	ldr	r3, [r2, #0]
    1412:	1ac0      	subs	r0, r0, r3
    1414:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
    1418:	fb01 3300 	mla	r3, r1, r0, r3
    141c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    141e:	f003 fd2d 	bl	4e7c <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
    1422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    1426:	f000 bb45 	b.w	1ab4 <z_arm_exc_exit>
    142a:	bf00      	nop
    142c:	00009cbc 	.word	0x00009cbc
    1430:	00009cc4 	.word	0x00009cc4
    1434:	00009cc0 	.word	0x00009cc0

00001438 <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1438:	2220      	movs	r2, #32
    143a:	4b09      	ldr	r3, [pc, #36]	; (1460 <sys_clock_driver_init+0x28>)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
    143c:	2000      	movs	r0, #0
    143e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
    1442:	f644 621f 	movw	r2, #19999	; 0x4e1f
    1446:	4b07      	ldr	r3, [pc, #28]	; (1464 <sys_clock_driver_init+0x2c>)
    1448:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    144a:	4b07      	ldr	r3, [pc, #28]	; (1468 <sys_clock_driver_init+0x30>)
    144c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    144e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1452:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    1454:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    1456:	691a      	ldr	r2, [r3, #16]
    1458:	f042 0207 	orr.w	r2, r2, #7
    145c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    145e:	4770      	bx	lr
    1460:	e000ed00 	.word	0xe000ed00
    1464:	00009cc8 	.word	0x00009cc8
    1468:	00009cbc 	.word	0x00009cbc

0000146c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146e:	4604      	mov	r4, r0
    1470:	4f45      	ldr	r7, [pc, #276]	; (1588 <sys_clock_set_timeout+0x11c>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    1472:	2900      	cmp	r1, #0
    1474:	d07d      	beq.n	1572 <sys_clock_set_timeout+0x106>
    1476:	1c43      	adds	r3, r0, #1
    1478:	d109      	bne.n	148e <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    147a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    147e:	6913      	ldr	r3, [r2, #16]
    1480:	f023 0301 	bic.w	r3, r3, #1
    1484:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    1486:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    148a:	603b      	str	r3, [r7, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
    148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
    148e:	683d      	ldr	r5, [r7, #0]
	__asm__ volatile(
    1490:	f04f 0320 	mov.w	r3, #32
    1494:	f3ef 8611 	mrs	r6, BASEPRI
    1498:	f383 8811 	msr	BASEPRI, r3
    149c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    14a0:	483a      	ldr	r0, [pc, #232]	; (158c <sys_clock_set_timeout+0x120>)
    14a2:	f001 fec5 	bl	3230 <z_spin_lock_valid>
    14a6:	b968      	cbnz	r0, 14c4 <sys_clock_set_timeout+0x58>
    14a8:	2381      	movs	r3, #129	; 0x81
    14aa:	4a39      	ldr	r2, [pc, #228]	; (1590 <sys_clock_set_timeout+0x124>)
    14ac:	4939      	ldr	r1, [pc, #228]	; (1594 <sys_clock_set_timeout+0x128>)
    14ae:	483a      	ldr	r0, [pc, #232]	; (1598 <sys_clock_set_timeout+0x12c>)
    14b0:	f005 fc04 	bl	6cbc <printk>
    14b4:	4935      	ldr	r1, [pc, #212]	; (158c <sys_clock_set_timeout+0x120>)
    14b6:	4839      	ldr	r0, [pc, #228]	; (159c <sys_clock_set_timeout+0x130>)
    14b8:	f005 fc00 	bl	6cbc <printk>
    14bc:	2181      	movs	r1, #129	; 0x81
    14be:	4834      	ldr	r0, [pc, #208]	; (1590 <sys_clock_set_timeout+0x124>)
    14c0:	f005 fcc6 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    14c4:	4831      	ldr	r0, [pc, #196]	; (158c <sys_clock_set_timeout+0x120>)
    14c6:	f001 fecf 	bl	3268 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    14ca:	f7ff ff75 	bl	13b8 <elapsed>
	val1 = SysTick->VAL;
    14ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
    14d2:	2200      	movs	r2, #0
	cycle_count += pending;
    14d4:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 15a0 <sys_clock_set_timeout+0x134>
	val1 = SysTick->VAL;
    14d8:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
    14da:	f8dc 3000 	ldr.w	r3, [ip]
    14de:	4418      	add	r0, r3
	overflow_cyc = 0U;
    14e0:	4b30      	ldr	r3, [pc, #192]	; (15a4 <sys_clock_set_timeout+0x138>)
    14e2:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    14e4:	4b30      	ldr	r3, [pc, #192]	; (15a8 <sys_clock_set_timeout+0x13c>)
    14e6:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
    14e8:	1ac2      	subs	r2, r0, r3
    14ea:	d44a      	bmi.n	1582 <sys_clock_set_timeout+0x116>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    14ec:	f240 3e45 	movw	lr, #837	; 0x345
    14f0:	3c01      	subs	r4, #1
    14f2:	4574      	cmp	r4, lr
    14f4:	bfa8      	it	ge
    14f6:	4674      	movge	r4, lr
		delay = ticks * CYC_PER_TICK;
    14f8:	f644 6e20 	movw	lr, #20000	; 0x4e20
    14fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    1500:	fb0e 2204 	mla	r2, lr, r4, r2
    1504:	f502 429c 	add.w	r2, r2, #19968	; 0x4e00
    1508:	321f      	adds	r2, #31
    150a:	fbb2 f2fe 	udiv	r2, r2, lr
		delay -= unannounced;
    150e:	1a1b      	subs	r3, r3, r0
    1510:	fb0e 3302 	mla	r3, lr, r2, r3
		delay = MAX(delay, MIN_DELAY);
    1514:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1518:	4293      	cmp	r3, r2
    151a:	d932      	bls.n	1582 <sys_clock_set_timeout+0x116>
		if (delay > MAX_CYCLES) {
    151c:	4a23      	ldr	r2, [pc, #140]	; (15ac <sys_clock_set_timeout+0x140>)
    151e:	4293      	cmp	r3, r2
    1520:	bf28      	it	cs
    1522:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
    1524:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
    1528:	603b      	str	r3, [r7, #0]
	SysTick->LOAD = last_load - 1;
    152a:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
    152c:	6994      	ldr	r4, [r2, #24]
	SysTick->LOAD = last_load - 1;
    152e:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    1530:	2300      	movs	r3, #0
	if (val1 < val2) {
    1532:	42a1      	cmp	r1, r4
    1534:	eba1 0104 	sub.w	r1, r1, r4
		cycle_count += (val1 + (last_load_ - val2));
    1538:	bf38      	it	cc
    153a:	1949      	addcc	r1, r1, r5
		cycle_count += (val1 - val2);
    153c:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
    153e:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 - val2);
    1540:	f8cc 0000 	str.w	r0, [ip]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1544:	4811      	ldr	r0, [pc, #68]	; (158c <sys_clock_set_timeout+0x120>)
    1546:	f001 fe81 	bl	324c <z_spin_unlock_valid>
    154a:	b968      	cbnz	r0, 1568 <sys_clock_set_timeout+0xfc>
    154c:	23ac      	movs	r3, #172	; 0xac
    154e:	4a10      	ldr	r2, [pc, #64]	; (1590 <sys_clock_set_timeout+0x124>)
    1550:	4917      	ldr	r1, [pc, #92]	; (15b0 <sys_clock_set_timeout+0x144>)
    1552:	4811      	ldr	r0, [pc, #68]	; (1598 <sys_clock_set_timeout+0x12c>)
    1554:	f005 fbb2 	bl	6cbc <printk>
    1558:	490c      	ldr	r1, [pc, #48]	; (158c <sys_clock_set_timeout+0x120>)
    155a:	4816      	ldr	r0, [pc, #88]	; (15b4 <sys_clock_set_timeout+0x148>)
    155c:	f005 fbae 	bl	6cbc <printk>
    1560:	21ac      	movs	r1, #172	; 0xac
    1562:	480b      	ldr	r0, [pc, #44]	; (1590 <sys_clock_set_timeout+0x124>)
    1564:	f005 fc74 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    1568:	f386 8811 	msr	BASEPRI, r6
    156c:	f3bf 8f6f 	isb	sy
    1570:	e78c      	b.n	148c <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1572:	f240 3345 	movw	r3, #837	; 0x345
	uint32_t last_load_ = last_load;
    1576:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1578:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    157c:	bf08      	it	eq
    157e:	461c      	moveq	r4, r3
    1580:	e786      	b.n	1490 <sys_clock_set_timeout+0x24>
    1582:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1586:	e7cd      	b.n	1524 <sys_clock_set_timeout+0xb8>
    1588:	00009cc8 	.word	0x00009cc8
    158c:	00009ccc 	.word	0x00009ccc
    1590:	000082f4 	.word	0x000082f4
    1594:	0000831a 	.word	0x0000831a
    1598:	00008182 	.word	0x00008182
    159c:	0000832f 	.word	0x0000832f
    15a0:	00009cc4 	.word	0x00009cc4
    15a4:	00009cbc 	.word	0x00009cbc
    15a8:	00009cc0 	.word	0x00009cc0
    15ac:	00ff6ea0 	.word	0x00ff6ea0
    15b0:	00008347 	.word	0x00008347
    15b4:	0000835e 	.word	0x0000835e

000015b8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    15b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    15ba:	f04f 0320 	mov.w	r3, #32
    15be:	f3ef 8511 	mrs	r5, BASEPRI
    15c2:	f383 8811 	msr	BASEPRI, r3
    15c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    15ca:	481c      	ldr	r0, [pc, #112]	; (163c <sys_clock_elapsed+0x84>)
    15cc:	f001 fe30 	bl	3230 <z_spin_lock_valid>
    15d0:	b968      	cbnz	r0, 15ee <sys_clock_elapsed+0x36>
    15d2:	2381      	movs	r3, #129	; 0x81
    15d4:	4a1a      	ldr	r2, [pc, #104]	; (1640 <sys_clock_elapsed+0x88>)
    15d6:	491b      	ldr	r1, [pc, #108]	; (1644 <sys_clock_elapsed+0x8c>)
    15d8:	481b      	ldr	r0, [pc, #108]	; (1648 <sys_clock_elapsed+0x90>)
    15da:	f005 fb6f 	bl	6cbc <printk>
    15de:	4917      	ldr	r1, [pc, #92]	; (163c <sys_clock_elapsed+0x84>)
    15e0:	481a      	ldr	r0, [pc, #104]	; (164c <sys_clock_elapsed+0x94>)
    15e2:	f005 fb6b 	bl	6cbc <printk>
    15e6:	2181      	movs	r1, #129	; 0x81
    15e8:	4815      	ldr	r0, [pc, #84]	; (1640 <sys_clock_elapsed+0x88>)
    15ea:	f005 fc31 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    15ee:	4813      	ldr	r0, [pc, #76]	; (163c <sys_clock_elapsed+0x84>)
    15f0:	f001 fe3a 	bl	3268 <z_spin_lock_set_owner>
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    15f4:	f7ff fee0 	bl	13b8 <elapsed>
    15f8:	4b15      	ldr	r3, [pc, #84]	; (1650 <sys_clock_elapsed+0x98>)
    15fa:	681c      	ldr	r4, [r3, #0]
    15fc:	4b15      	ldr	r3, [pc, #84]	; (1654 <sys_clock_elapsed+0x9c>)
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	1ae4      	subs	r4, r4, r3
    1602:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1604:	480d      	ldr	r0, [pc, #52]	; (163c <sys_clock_elapsed+0x84>)
    1606:	f001 fe21 	bl	324c <z_spin_unlock_valid>
    160a:	b968      	cbnz	r0, 1628 <sys_clock_elapsed+0x70>
    160c:	23ac      	movs	r3, #172	; 0xac
    160e:	4a0c      	ldr	r2, [pc, #48]	; (1640 <sys_clock_elapsed+0x88>)
    1610:	4911      	ldr	r1, [pc, #68]	; (1658 <sys_clock_elapsed+0xa0>)
    1612:	480d      	ldr	r0, [pc, #52]	; (1648 <sys_clock_elapsed+0x90>)
    1614:	f005 fb52 	bl	6cbc <printk>
    1618:	4908      	ldr	r1, [pc, #32]	; (163c <sys_clock_elapsed+0x84>)
    161a:	4810      	ldr	r0, [pc, #64]	; (165c <sys_clock_elapsed+0xa4>)
    161c:	f005 fb4e 	bl	6cbc <printk>
    1620:	21ac      	movs	r1, #172	; 0xac
    1622:	4807      	ldr	r0, [pc, #28]	; (1640 <sys_clock_elapsed+0x88>)
    1624:	f005 fc14 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    1628:	f385 8811 	msr	BASEPRI, r5
    162c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
    1630:	f644 6020 	movw	r0, #20000	; 0x4e20
    1634:	fbb4 f0f0 	udiv	r0, r4, r0
    1638:	bd38      	pop	{r3, r4, r5, pc}
    163a:	bf00      	nop
    163c:	00009ccc 	.word	0x00009ccc
    1640:	000082f4 	.word	0x000082f4
    1644:	0000831a 	.word	0x0000831a
    1648:	00008182 	.word	0x00008182
    164c:	0000832f 	.word	0x0000832f
    1650:	00009cc4 	.word	0x00009cc4
    1654:	00009cc0 	.word	0x00009cc0
    1658:	00008347 	.word	0x00008347
    165c:	0000835e 	.word	0x0000835e

00001660 <cache_instr_enable>:
	uint32_t base = DT_REG_ADDR(DT_NODELABEL(syscon));

	sys_write32(0, base + CACHE_FUNC_CTRL_REG);
}

void cache_instr_enable(void)
    1660:	2200      	movs	r2, #0
    1662:	4b04      	ldr	r3, [pc, #16]	; (1674 <cache_instr_enable+0x14>)
    1664:	f8c3 2a48 	str.w	r2, [r3, #2632]	; 0xa48
    1668:	2201      	movs	r2, #1
    166a:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    166e:	f8c3 2a48 	str.w	r2, [r3, #2632]	; 0xa48
    1672:	4770      	bx	lr
    1674:	7e6e2000 	.word	0x7e6e2000

00001678 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1678:	4a0a      	ldr	r2, [pc, #40]	; (16a4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    167a:	490b      	ldr	r1, [pc, #44]	; (16a8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    167c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    167e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1680:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    1684:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1688:	4908      	ldr	r1, [pc, #32]	; (16ac <arch_swap+0x34>)
    168a:	684b      	ldr	r3, [r1, #4]
    168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1690:	604b      	str	r3, [r1, #4]
    1692:	2300      	movs	r3, #0
    1694:	f383 8811 	msr	BASEPRI, r3
    1698:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    169c:	6893      	ldr	r3, [r2, #8]
}
    169e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    16a2:	4770      	bx	lr
    16a4:	00009d3c 	.word	0x00009d3c
    16a8:	00007fe8 	.word	0x00007fe8
    16ac:	e000ed00 	.word	0xe000ed00

000016b0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    16b0:	4910      	ldr	r1, [pc, #64]	; (16f4 <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    16b2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    16b4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    16b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    16ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    16be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16c4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    16c8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    16cc:	4f0a      	ldr	r7, [pc, #40]	; (16f8 <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    16ce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    16d2:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    16d4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    16d6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    16d8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    16dc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    16de:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    16e2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    16e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    16ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    16ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    16f2:	4770      	bx	lr
    ldr r1, =_kernel
    16f4:	00009d3c 	.word	0x00009d3c
    ldr v4, =_SCS_ICSR
    16f8:	e000ed04 	.word	0xe000ed04

000016fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    16fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1700:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1702:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1706:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    170a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    170c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1710:	2902      	cmp	r1, #2
    beq _oops
    1712:	d0ff      	beq.n	1714 <_oops>

00001714 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1714:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1716:	f005 fbe4 	bl	6ee2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    171a:	bd01      	pop	{r0, pc}

0000171c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    171c:	b200      	sxth	r0, r0
  if ((int32_t)(IRQn) >= 0)
    171e:	2800      	cmp	r0, #0
    1720:	db07      	blt.n	1732 <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1722:	2301      	movs	r3, #1
    1724:	0941      	lsrs	r1, r0, #5
    1726:	4a03      	ldr	r2, [pc, #12]	; (1734 <arch_irq_enable+0x18>)
    1728:	f000 001f 	and.w	r0, r0, #31
    172c:	4083      	lsls	r3, r0
    172e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1732:	4770      	bx	lr
    1734:	e000e100 	.word	0xe000e100

00001738 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1738:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    173a:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    173c:	2d07      	cmp	r5, #7
{
    173e:	4604      	mov	r4, r0
    1740:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1742:	d90f      	bls.n	1764 <z_arm_irq_priority_set+0x2c>
    1744:	2358      	movs	r3, #88	; 0x58
    1746:	4a10      	ldr	r2, [pc, #64]	; (1788 <z_arm_irq_priority_set+0x50>)
    1748:	4910      	ldr	r1, [pc, #64]	; (178c <z_arm_irq_priority_set+0x54>)
    174a:	4811      	ldr	r0, [pc, #68]	; (1790 <z_arm_irq_priority_set+0x58>)
    174c:	f005 fab6 	bl	6cbc <printk>
    1750:	4631      	mov	r1, r6
    1752:	4810      	ldr	r0, [pc, #64]	; (1794 <z_arm_irq_priority_set+0x5c>)
    1754:	2307      	movs	r3, #7
    1756:	4622      	mov	r2, r4
    1758:	f005 fab0 	bl	6cbc <printk>
    175c:	2158      	movs	r1, #88	; 0x58
    175e:	480a      	ldr	r0, [pc, #40]	; (1788 <z_arm_irq_priority_set+0x50>)
    1760:	f005 fb76 	bl	6e50 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1764:	b220      	sxth	r0, r4
  if ((int32_t)(IRQn) >= 0)
    1766:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1768:	bfac      	ite	ge
    176a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    176e:	4b0a      	ldrlt	r3, [pc, #40]	; (1798 <z_arm_irq_priority_set+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1770:	ea4f 1545 	mov.w	r5, r5, lsl #5
    1774:	b2ed      	uxtb	r5, r5
    1776:	bfab      	itete	ge
    1778:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    177c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1780:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1784:	541d      	strblt	r5, [r3, r0]
}
    1786:	bd70      	pop	{r4, r5, r6, pc}
    1788:	00008373 	.word	0x00008373
    178c:	000083a9 	.word	0x000083a9
    1790:	00008182 	.word	0x00008182
    1794:	000083c4 	.word	0x000083c4
    1798:	e000ed14 	.word	0xe000ed14

0000179c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    179c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    17a0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    17a2:	490b      	ldr	r1, [pc, #44]	; (17d0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    17a4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    17a8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    17aa:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    17ae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    17b2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    17b4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    17b8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    17bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    17c0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    17c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    17c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    17c8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    17ca:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    17ce:	4770      	bx	lr
    17d0:	00006cf1 	.word	0x00006cf1

000017d4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    17d4:	4b07      	ldr	r3, [pc, #28]	; (17f4 <arch_switch_to_main_thread+0x20>)
    17d6:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    17d8:	4610      	mov	r0, r2
    17da:	f381 8809 	msr	PSP, r1
    17de:	2100      	movs	r1, #0
    17e0:	b663      	cpsie	if
    17e2:	f381 8811 	msr	BASEPRI, r1
    17e6:	f3bf 8f6f 	isb	sy
    17ea:	2200      	movs	r2, #0
    17ec:	2300      	movs	r3, #0
    17ee:	f005 fa7f 	bl	6cf0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    17f2:	bf00      	nop
    17f4:	00009d3c 	.word	0x00009d3c

000017f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    17f8:	4901      	ldr	r1, [pc, #4]	; (1800 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    17fa:	2210      	movs	r2, #16
	str	r2, [r1]
    17fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    17fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1800:	e000ed10 	.word	0xe000ed10

00001804 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1804:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1806:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1808:	f380 8811 	msr	BASEPRI, r0
	isb
    180c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1810:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1814:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1816:	b662      	cpsie	i
	isb
    1818:	f3bf 8f6f 	isb	sy

	bx	lr
    181c:	4770      	bx	lr
    181e:	bf00      	nop

00001820 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1820:	bf30      	wfi
    b z_SysNmiOnReset
    1822:	f7ff bffd 	b.w	1820 <z_SysNmiOnReset>
    1826:	bf00      	nop

00001828 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1828:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    182a:	4b07      	ldr	r3, [pc, #28]	; (1848 <z_arm_prep_c+0x20>)
    182c:	4a07      	ldr	r2, [pc, #28]	; (184c <z_arm_prep_c+0x24>)
    182e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1832:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1838:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    183c:	f001 fbe0 	bl	3000 <z_bss_zero>
	z_data_copy();
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1840:	f000 f94c 	bl	1adc <z_arm_interrupt_init>
	z_cstart();
    1844:	f001 fc04 	bl	3050 <z_cstart>
    1848:	00000000 	.word	0x00000000
    184c:	e000ed00 	.word	0xe000ed00

00001850 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1850:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1852:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1856:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    185a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    185e:	4904      	ldr	r1, [pc, #16]	; (1870 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1860:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1862:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1864:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1866:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    186a:	4902      	ldr	r1, [pc, #8]	; (1874 <_isr_wrapper+0x24>)
	bx r1
    186c:	4708      	bx	r1
    186e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1870:	00007734 	.word	0x00007734
	ldr r1, =z_arm_int_exit
    1874:	00001ab5 	.word	0x00001ab5

00001878 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1878:	f7ff fc78 	bl	116c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    187c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    187e:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    1882:	480b      	ldr	r0, [pc, #44]	; (18b0 <__start+0x38>)
    ldr r1, =0xaa
    1884:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1888:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    188c:	f005 fd6e 	bl	736c <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1890:	4807      	ldr	r0, [pc, #28]	; (18b0 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1892:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1896:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1898:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    189c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    18a0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    18a2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    18a4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    18a8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    18ac:	f7ff ffbc 	bl	1828 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    18b0:	0000aeb0 	.word	0x0000aeb0

000018b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18be:	4672      	mov	r2, lr
	bl z_arm_fault
    18c0:	f000 f85a 	bl	1978 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    18c4:	bd01      	pop	{r0, pc}
    18c6:	bf00      	nop

000018c8 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    18c8:	4b0b      	ldr	r3, [pc, #44]	; (18f8 <bus_fault.constprop.0+0x30>)
    18ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    18cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    18ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18d0:	0592      	lsls	r2, r2, #22
    18d2:	d508      	bpl.n	18e6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    18d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    18d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18d8:	0412      	lsls	r2, r2, #16
    18da:	d504      	bpl.n	18e6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    18dc:	b118      	cbz	r0, 18e6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    18de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    18e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    18e6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    18e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    18ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18ee:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    18f2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    18f4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    18f6:	4770      	bx	lr
    18f8:	e000ed00 	.word	0xe000ed00

000018fc <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18fc:	4b19      	ldr	r3, [pc, #100]	; (1964 <mem_manage_fault.constprop.0+0x68>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    18fe:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1906:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1908:	0791      	lsls	r1, r2, #30
    190a:	d508      	bpl.n	191e <mem_manage_fault.constprop.0+0x22>
		uint32_t temp = SCB->MMFAR;
    190c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    190e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1910:	0612      	lsls	r2, r2, #24
    1912:	d504      	bpl.n	191e <mem_manage_fault.constprop.0+0x22>
			if (from_hard_fault != 0) {
    1914:	b118      	cbz	r0, 191e <mem_manage_fault.constprop.0+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    191c:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    191e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1922:	06d1      	lsls	r1, r2, #27
    1924:	d402      	bmi.n	192c <mem_manage_fault.constprop.0+0x30>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1928:	079a      	lsls	r2, r3, #30
    192a:	d512      	bpl.n	1952 <mem_manage_fault.constprop.0+0x56>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    192c:	4b0d      	ldr	r3, [pc, #52]	; (1964 <mem_manage_fault.constprop.0+0x68>)
    192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1930:	06db      	lsls	r3, r3, #27
    1932:	d50e      	bpl.n	1952 <mem_manage_fault.constprop.0+0x56>
    1934:	490c      	ldr	r1, [pc, #48]	; (1968 <mem_manage_fault.constprop.0+0x6c>)
    1936:	f240 134f 	movw	r3, #335	; 0x14f
    193a:	4a0c      	ldr	r2, [pc, #48]	; (196c <mem_manage_fault.constprop.0+0x70>)
    193c:	480c      	ldr	r0, [pc, #48]	; (1970 <mem_manage_fault.constprop.0+0x74>)
    193e:	f005 f9bd 	bl	6cbc <printk>
    1942:	480c      	ldr	r0, [pc, #48]	; (1974 <mem_manage_fault.constprop.0+0x78>)
    1944:	f005 f9ba 	bl	6cbc <printk>
    1948:	f240 114f 	movw	r1, #335	; 0x14f
    194c:	4807      	ldr	r0, [pc, #28]	; (196c <mem_manage_fault.constprop.0+0x70>)
    194e:	f005 fa7f 	bl	6e50 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    1952:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1954:	4a03      	ldr	r2, [pc, #12]	; (1964 <mem_manage_fault.constprop.0+0x68>)
    1956:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1958:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    195c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    195e:	7020      	strb	r0, [r4, #0]
}
    1960:	bd10      	pop	{r4, pc}
    1962:	bf00      	nop
    1964:	e000ed00 	.word	0xe000ed00
    1968:	0000843e 	.word	0x0000843e
    196c:	00008404 	.word	0x00008404
    1970:	00008182 	.word	0x00008182
    1974:	00008488 	.word	0x00008488

00001978 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    197a:	4b45      	ldr	r3, [pc, #276]	; (1a90 <z_arm_fault+0x118>)
{
    197c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    197e:	685e      	ldr	r6, [r3, #4]
    1980:	2400      	movs	r4, #0
{
    1982:	b08b      	sub	sp, #44	; 0x2c
    1984:	f3c6 0608 	ubfx	r6, r6, #0, #9
    1988:	f384 8811 	msr	BASEPRI, r4
    198c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1990:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1994:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1998:	d108      	bne.n	19ac <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    199a:	f002 030c 	and.w	r3, r2, #12
    199e:	2b08      	cmp	r3, #8
    19a0:	d004      	beq.n	19ac <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    19a2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    19a4:	bf4c      	ite	mi
    19a6:	460d      	movmi	r5, r1
			*nested_exc = true;
    19a8:	2401      	movpl	r4, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    19aa:	b97d      	cbnz	r5, 19cc <z_arm_fault+0x54>
    19ac:	f240 33e1 	movw	r3, #993	; 0x3e1
    19b0:	4a38      	ldr	r2, [pc, #224]	; (1a94 <z_arm_fault+0x11c>)
    19b2:	4939      	ldr	r1, [pc, #228]	; (1a98 <z_arm_fault+0x120>)
    19b4:	4839      	ldr	r0, [pc, #228]	; (1a9c <z_arm_fault+0x124>)
    19b6:	f005 f981 	bl	6cbc <printk>
    19ba:	4839      	ldr	r0, [pc, #228]	; (1aa0 <z_arm_fault+0x128>)
    19bc:	f005 f97e 	bl	6cbc <printk>
    19c0:	f240 31e1 	movw	r1, #993	; 0x3e1
    19c4:	4833      	ldr	r0, [pc, #204]	; (1a94 <z_arm_fault+0x11c>)
    19c6:	f005 fa43 	bl	6e50 <assert_post_action>
    19ca:	2500      	movs	r5, #0
	*recoverable = false;
    19cc:	2300      	movs	r3, #0
    19ce:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    19d2:	1ef3      	subs	r3, r6, #3
    19d4:	2b03      	cmp	r3, #3
    19d6:	d82c      	bhi.n	1a32 <z_arm_fault+0xba>
    19d8:	e8df f003 	tbb	[pc, r3]
    19dc:	534f4b02 	.word	0x534f4b02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    19e0:	4b2b      	ldr	r3, [pc, #172]	; (1a90 <z_arm_fault+0x118>)
    19e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19e4:	0791      	lsls	r1, r2, #30
    19e6:	d424      	bmi.n	1a32 <z_arm_fault+0xba>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    19e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19ea:	0052      	lsls	r2, r2, #1
    19ec:	d521      	bpl.n	1a32 <z_arm_fault+0xba>
		if (SCB_MMFSR != 0) {
    19ee:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    19f2:	b12a      	cbz	r2, 1a00 <z_arm_fault+0x88>
			reason = mem_manage_fault(esf, 1, recoverable);
    19f4:	2001      	movs	r0, #1
    19f6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    19fa:	f7ff ff7f 	bl	18fc <mem_manage_fault.constprop.0>
    19fe:	e007      	b.n	1a10 <z_arm_fault+0x98>
		} else if (SCB_BFSR != 0) {
    1a00:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1a04:	b132      	cbz	r2, 1a14 <z_arm_fault+0x9c>
			reason = bus_fault(esf, 1, recoverable);
    1a06:	2001      	movs	r0, #1
    1a08:	f10d 0107 	add.w	r1, sp, #7
    1a0c:	f7ff ff5c 	bl	18c8 <bus_fault.constprop.0>
    1a10:	4603      	mov	r3, r0
    1a12:	e00f      	b.n	1a34 <z_arm_fault+0xbc>
		} else if (SCB_UFSR != 0) {
    1a14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1a16:	b292      	uxth	r2, r2
    1a18:	b15a      	cbz	r2, 1a32 <z_arm_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a28:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1a2c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1a30:	629a      	str	r2, [r3, #40]	; 0x28
	__ASSERT(esf != NULL,
    1a32:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1a34:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1a38:	b9ca      	cbnz	r2, 1a6e <z_arm_fault+0xf6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1a3a:	462a      	mov	r2, r5
    1a3c:	ae02      	add	r6, sp, #8
    1a3e:	f105 0720 	add.w	r7, r5, #32
    1a42:	4635      	mov	r5, r6
    1a44:	6810      	ldr	r0, [r2, #0]
    1a46:	6851      	ldr	r1, [r2, #4]
    1a48:	3208      	adds	r2, #8
    1a4a:	c503      	stmia	r5!, {r0, r1}
    1a4c:	42ba      	cmp	r2, r7
    1a4e:	462e      	mov	r6, r5
    1a50:	d1f7      	bne.n	1a42 <z_arm_fault+0xca>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a54:	b1bc      	cbz	r4, 1a86 <z_arm_fault+0x10e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1a56:	f3c2 0108 	ubfx	r1, r2, #0, #9
    1a5a:	b921      	cbnz	r1, 1a66 <z_arm_fault+0xee>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1a5c:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    1a60:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a64:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1a66:	4618      	mov	r0, r3
    1a68:	a902      	add	r1, sp, #8
    1a6a:	f005 fa38 	bl	6ede <z_arm_fatal_error>
}
    1a6e:	b00b      	add	sp, #44	; 0x2c
    1a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1a72:	2000      	movs	r0, #0
    1a74:	f10d 0107 	add.w	r1, sp, #7
    1a78:	e7bf      	b.n	19fa <z_arm_fault+0x82>
		reason = bus_fault(esf, 0, recoverable);
    1a7a:	2000      	movs	r0, #0
    1a7c:	f10d 0107 	add.w	r1, sp, #7
    1a80:	e7c4      	b.n	1a0c <z_arm_fault+0x94>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a82:	4b03      	ldr	r3, [pc, #12]	; (1a90 <z_arm_fault+0x118>)
    1a84:	e7c9      	b.n	1a1a <z_arm_fault+0xa2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a86:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    1a8a:	f022 0201 	bic.w	r2, r2, #1
    1a8e:	e7e9      	b.n	1a64 <z_arm_fault+0xec>
    1a90:	e000ed00 	.word	0xe000ed00
    1a94:	00008404 	.word	0x00008404
    1a98:	000084ec 	.word	0x000084ec
    1a9c:	00008182 	.word	0x00008182
    1aa0:	000084ff 	.word	0x000084ff

00001aa4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1aa4:	4a02      	ldr	r2, [pc, #8]	; (1ab0 <z_arm_fault_init+0xc>)
    1aa6:	6953      	ldr	r3, [r2, #20]
    1aa8:	f043 0310 	orr.w	r3, r3, #16
    1aac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1aae:	4770      	bx	lr
    1ab0:	e000ed00 	.word	0xe000ed00

00001ab4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ab4:	4b07      	ldr	r3, [pc, #28]	; (1ad4 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1ab6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ab8:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
    1aba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1abc:	d003      	beq.n	1ac6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1abe:	4906      	ldr	r1, [pc, #24]	; (1ad8 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ac4:	600a      	str	r2, [r1, #0]

00001ac6 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
    1ac6:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
    1ac8:	f001 fb9a 	bl	3200 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
    1acc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ad0:	4770      	bx	lr
    1ad2:	0000      	.short	0x0000
	ldr r3, =_kernel
    1ad4:	00009d3c 	.word	0x00009d3c
	ldr r1, =_SCS_ICSR
    1ad8:	e000ed04 	.word	0xe000ed04

00001adc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1adc:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ade:	2120      	movs	r1, #32
    1ae0:	4803      	ldr	r0, [pc, #12]	; (1af0 <z_arm_interrupt_init+0x14>)
    1ae2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1ae4:	3301      	adds	r3, #1
    1ae6:	2bf0      	cmp	r3, #240	; 0xf0
    1ae8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1aec:	d1f9      	bne.n	1ae2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1aee:	4770      	bx	lr
    1af0:	e000e100 	.word	0xe000e100

00001af4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <z_impl_k_thread_abort+0x1c>)
    1af6:	689b      	ldr	r3, [r3, #8]
    1af8:	4283      	cmp	r3, r0
    1afa:	d107      	bne.n	1b0c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1afc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1b00:	b123      	cbz	r3, 1b0c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b02:	4a04      	ldr	r2, [pc, #16]	; (1b14 <z_impl_k_thread_abort+0x20>)
    1b04:	6853      	ldr	r3, [r2, #4]
    1b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1b0a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1b0c:	f002 beda 	b.w	48c4 <z_thread_abort>
    1b10:	00009d3c 	.word	0x00009d3c
    1b14:	e000ed00 	.word	0xe000ed00

00001b18 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    1b18:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    1b1a:	4b0a      	ldr	r3, [pc, #40]	; (1b44 <malloc_prepare+0x2c>)
    1b1c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
    1b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    1b24:	d20c      	bcs.n	1b40 <malloc_prepare+0x28>
    1b26:	4908      	ldr	r1, [pc, #32]	; (1b48 <malloc_prepare+0x30>)
    1b28:	237f      	movs	r3, #127	; 0x7f
    1b2a:	4a08      	ldr	r2, [pc, #32]	; (1b4c <malloc_prepare+0x34>)
    1b2c:	4808      	ldr	r0, [pc, #32]	; (1b50 <malloc_prepare+0x38>)
    1b2e:	f005 f8c5 	bl	6cbc <printk>
    1b32:	4808      	ldr	r0, [pc, #32]	; (1b54 <malloc_prepare+0x3c>)
    1b34:	f005 f8c2 	bl	6cbc <printk>
    1b38:	217f      	movs	r1, #127	; 0x7f
    1b3a:	4804      	ldr	r0, [pc, #16]	; (1b4c <malloc_prepare+0x34>)
    1b3c:	f005 f988 	bl	6e50 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    1b40:	2000      	movs	r0, #0
    1b42:	bd08      	pop	{r3, pc}
    1b44:	0000bab0 	.word	0x0000bab0
    1b48:	0000856d 	.word	0x0000856d
    1b4c:	0000853d 	.word	0x0000853d
    1b50:	00008182 	.word	0x00008182
    1b54:	000085af 	.word	0x000085af

00001b58 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b58:	4b01      	ldr	r3, [pc, #4]	; (1b60 <__stdout_hook_install+0x8>)
    1b5a:	6018      	str	r0, [r3, #0]
}
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop
    1b60:	0000996c 	.word	0x0000996c

00001b64 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    1b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b66:	4606      	mov	r6, r0
    1b68:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    1b6a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    1b6c:	4f06      	ldr	r7, [pc, #24]	; (1b88 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    1b6e:	42ac      	cmp	r4, r5
    1b70:	da08      	bge.n	1b84 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    1b72:	683b      	ldr	r3, [r7, #0]
    1b74:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    1b76:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    1b78:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    1b7a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    1b7e:	d001      	beq.n	1b84 <z_impl_zephyr_read_stdin+0x20>
    1b80:	280d      	cmp	r0, #13
    1b82:	d1f4      	bne.n	1b6e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    1b84:	4620      	mov	r0, r4
    1b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b88:	00009968 	.word	0x00009968

00001b8c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    1b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8e:	460d      	mov	r5, r1
    1b90:	4f09      	ldr	r7, [pc, #36]	; (1bb8 <z_impl_zephyr_write_stdout+0x2c>)
    1b92:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    1b94:	f1c0 0401 	rsb	r4, r0, #1
    1b98:	19a3      	adds	r3, r4, r6
    1b9a:	429d      	cmp	r5, r3
    1b9c:	dc01      	bgt.n	1ba2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    1b9e:	4628      	mov	r0, r5
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    1ba2:	7873      	ldrb	r3, [r6, #1]
    1ba4:	2b0a      	cmp	r3, #10
    1ba6:	d102      	bne.n	1bae <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    1ba8:	200d      	movs	r0, #13
    1baa:	683b      	ldr	r3, [r7, #0]
    1bac:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    1bae:	683b      	ldr	r3, [r7, #0]
    1bb0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    1bb4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    1bb6:	e7ef      	b.n	1b98 <z_impl_zephyr_write_stdout+0xc>
    1bb8:	0000996c 	.word	0x0000996c

00001bbc <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
    1bbc:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    1bbe:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    1bc0:	4801      	ldr	r0, [pc, #4]	; (1bc8 <_exit+0xc>)
    1bc2:	f7ff ffe3 	bl	1b8c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    1bc6:	e7fe      	b.n	1bc6 <_exit+0xa>
    1bc8:	00008636 	.word	0x00008636

00001bcc <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    1bcc:	4906      	ldr	r1, [pc, #24]	; (1be8 <_sbrk+0x1c>)
{
    1bce:	b510      	push	{r4, lr}
	ptr = ((char *)HEAP_BASE) + heap_sz;
    1bd0:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1bd2:	18c2      	adds	r2, r0, r3
    1bd4:	4805      	ldr	r0, [pc, #20]	; (1bec <_sbrk+0x20>)
    1bd6:	f1c0 7480 	rsb	r4, r0, #16777216	; 0x1000000
    1bda:	42a2      	cmp	r2, r4
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
    1bdc:	bf2e      	itee	cs
    1bde:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    1be2:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    1be4:	600a      	strcc	r2, [r1, #0]
	}

	return ret;
}
    1be6:	bd10      	pop	{r4, pc}
    1be8:	00009cd0 	.word	0x00009cd0
    1bec:	0000bab0 	.word	0x0000bab0

00001bf0 <__malloc_lock>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1bf8:	4801      	ldr	r0, [pc, #4]	; (1c00 <__malloc_lock+0x10>)
    1bfa:	f001 bd49 	b.w	3690 <z_impl_k_mutex_lock>
    1bfe:	bf00      	nop
    1c00:	00009954 	.word	0x00009954

00001c04 <__malloc_unlock>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1c04:	4801      	ldr	r0, [pc, #4]	; (1c0c <__malloc_unlock+0x8>)
    1c06:	f001 be3d 	b.w	3884 <z_impl_k_mutex_unlock>
    1c0a:	bf00      	nop
    1c0c:	00009954 	.word	0x00009954

00001c10 <uart_aspeed_poll_in>:

	uint32_t iir_cache;
};

static int uart_aspeed_poll_in(const struct device *dev, unsigned char *c)
{
    1c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c12:	460d      	mov	r5, r1
	int rc = -1;
	uint32_t rptr, wptr;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1c14:	6904      	ldr	r4, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1c16:	6846      	ldr	r6, [r0, #4]
	__asm__ volatile(
    1c18:	f04f 0320 	mov.w	r3, #32
    1c1c:	f3ef 8711 	mrs	r7, BASEPRI
    1c20:	f383 8811 	msr	BASEPRI, r3
    1c24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c28:	4620      	mov	r0, r4
    1c2a:	f001 fb01 	bl	3230 <z_spin_lock_valid>
    1c2e:	b968      	cbnz	r0, 1c4c <uart_aspeed_poll_in+0x3c>
    1c30:	2381      	movs	r3, #129	; 0x81
    1c32:	4a23      	ldr	r2, [pc, #140]	; (1cc0 <uart_aspeed_poll_in+0xb0>)
    1c34:	4923      	ldr	r1, [pc, #140]	; (1cc4 <uart_aspeed_poll_in+0xb4>)
    1c36:	4824      	ldr	r0, [pc, #144]	; (1cc8 <uart_aspeed_poll_in+0xb8>)
    1c38:	f005 f840 	bl	6cbc <printk>
    1c3c:	4621      	mov	r1, r4
    1c3e:	4823      	ldr	r0, [pc, #140]	; (1ccc <uart_aspeed_poll_in+0xbc>)
    1c40:	f005 f83c 	bl	6cbc <printk>
    1c44:	2181      	movs	r1, #129	; 0x81
    1c46:	481e      	ldr	r0, [pc, #120]	; (1cc0 <uart_aspeed_poll_in+0xb0>)
    1c48:	f005 f902 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    1c4c:	4620      	mov	r0, r4
    1c4e:	f001 fb0b 	bl	3268 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    1c52:	f896 3020 	ldrb.w	r3, [r6, #32]
    1c56:	b34b      	cbz	r3, 1cac <uart_aspeed_poll_in+0x9c>
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c58:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1c5a:	491d      	ldr	r1, [pc, #116]	; (1cd0 <uart_aspeed_poll_in+0xc0>)
		wptr = sys_read32(udma_base + UDMA_CHX_RX_WR_PTR(dev_cfg->dma_ch));
    1c5c:	481d      	ldr	r0, [pc, #116]	; (1cd4 <uart_aspeed_poll_in+0xc4>)
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c5e:	0152      	lsls	r2, r2, #5
    1c60:	5853      	ldr	r3, [r2, r1]
    1c62:	5812      	ldr	r2, [r2, r0]

		if (rptr != wptr) {
    1c64:	429a      	cmp	r2, r3
    1c66:	d028      	beq.n	1cba <uart_aspeed_poll_in+0xaa>
			*c = data->rx_rb[rptr];
    1c68:	6962      	ldr	r2, [r4, #20]
    1c6a:	5cd2      	ldrb	r2, [r2, r3]
			rc = 0;
			sys_write32((rptr + 1) % UDMA_RX_RBSZ, udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c6c:	3301      	adds	r3, #1
			*c = data->rx_rb[rptr];
    1c6e:	702a      	strb	r2, [r5, #0]
			sys_write32((rptr + 1) % UDMA_RX_RBSZ, udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c70:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1c76:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1c78:	5053      	str	r3, [r2, r1]
			rc = 0;
    1c7a:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1c7c:	4620      	mov	r0, r4
    1c7e:	f001 fae5 	bl	324c <z_spin_unlock_valid>
    1c82:	b968      	cbnz	r0, 1ca0 <uart_aspeed_poll_in+0x90>
    1c84:	23ac      	movs	r3, #172	; 0xac
    1c86:	4a0e      	ldr	r2, [pc, #56]	; (1cc0 <uart_aspeed_poll_in+0xb0>)
    1c88:	4913      	ldr	r1, [pc, #76]	; (1cd8 <uart_aspeed_poll_in+0xc8>)
    1c8a:	480f      	ldr	r0, [pc, #60]	; (1cc8 <uart_aspeed_poll_in+0xb8>)
    1c8c:	f005 f816 	bl	6cbc <printk>
    1c90:	4621      	mov	r1, r4
    1c92:	4812      	ldr	r0, [pc, #72]	; (1cdc <uart_aspeed_poll_in+0xcc>)
    1c94:	f005 f812 	bl	6cbc <printk>
    1c98:	21ac      	movs	r1, #172	; 0xac
    1c9a:	4809      	ldr	r0, [pc, #36]	; (1cc0 <uart_aspeed_poll_in+0xb0>)
    1c9c:	f005 f8d8 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    1ca0:	f387 8811 	msr	BASEPRI, r7
    1ca4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&data->lock, key);

	return rc;
}
    1ca8:	4628      	mov	r0, r5
    1caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_DR) {
    1cac:	6873      	ldr	r3, [r6, #4]
	return *(volatile uint32_t *)addr;
    1cae:	695a      	ldr	r2, [r3, #20]
    1cb0:	07d2      	lsls	r2, r2, #31
    1cb2:	d502      	bpl.n	1cba <uart_aspeed_poll_in+0xaa>
    1cb4:	681b      	ldr	r3, [r3, #0]
			*c = (unsigned char)sys_read32(dev_cfg->base + UART_RBR);
    1cb6:	702b      	strb	r3, [r5, #0]
			rc = 0;
    1cb8:	e7df      	b.n	1c7a <uart_aspeed_poll_in+0x6a>
	int rc = -1;
    1cba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1cbe:	e7dd      	b.n	1c7c <uart_aspeed_poll_in+0x6c>
    1cc0:	000082f4 	.word	0x000082f4
    1cc4:	0000831a 	.word	0x0000831a
    1cc8:	00008182 	.word	0x00008182
    1ccc:	0000832f 	.word	0x0000832f
    1cd0:	7e79e050 	.word	0x7e79e050
    1cd4:	7e79e054 	.word	0x7e79e054
    1cd8:	00008347 	.word	0x00008347
    1cdc:	0000835e 	.word	0x0000835e

00001ce0 <uart_aspeed_poll_out>:

static void uart_aspeed_poll_out(const struct device *dev,
				 unsigned char c)
{
    1ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ce2:	460d      	mov	r5, r1
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1ce4:	6904      	ldr	r4, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1ce6:	6846      	ldr	r6, [r0, #4]
	__asm__ volatile(
    1ce8:	f04f 0320 	mov.w	r3, #32
    1cec:	f3ef 8711 	mrs	r7, BASEPRI
    1cf0:	f383 8811 	msr	BASEPRI, r3
    1cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1cf8:	4620      	mov	r0, r4
    1cfa:	f001 fa99 	bl	3230 <z_spin_lock_valid>
    1cfe:	b968      	cbnz	r0, 1d1c <uart_aspeed_poll_out+0x3c>
    1d00:	2381      	movs	r3, #129	; 0x81
    1d02:	4a24      	ldr	r2, [pc, #144]	; (1d94 <uart_aspeed_poll_out+0xb4>)
    1d04:	4924      	ldr	r1, [pc, #144]	; (1d98 <uart_aspeed_poll_out+0xb8>)
    1d06:	4825      	ldr	r0, [pc, #148]	; (1d9c <uart_aspeed_poll_out+0xbc>)
    1d08:	f004 ffd8 	bl	6cbc <printk>
    1d0c:	4621      	mov	r1, r4
    1d0e:	4824      	ldr	r0, [pc, #144]	; (1da0 <uart_aspeed_poll_out+0xc0>)
    1d10:	f004 ffd4 	bl	6cbc <printk>
    1d14:	2181      	movs	r1, #129	; 0x81
    1d16:	481f      	ldr	r0, [pc, #124]	; (1d94 <uart_aspeed_poll_out+0xb4>)
    1d18:	f005 f89a 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    1d1c:	4620      	mov	r0, r4
    1d1e:	f001 faa3 	bl	3268 <z_spin_lock_set_owner>
	uint32_t rptr, wptr;

	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    1d22:	f896 3020 	ldrb.w	r3, [r6, #32]
    1d26:	b363      	cbz	r3, 1d82 <uart_aspeed_poll_out+0xa2>
		do {
			rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    1d28:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1d2a:	491e      	ldr	r1, [pc, #120]	; (1da4 <uart_aspeed_poll_out+0xc4>)
			wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1d2c:	4a1e      	ldr	r2, [pc, #120]	; (1da8 <uart_aspeed_poll_out+0xc8>)
			rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    1d2e:	3302      	adds	r3, #2
    1d30:	eb01 1143 	add.w	r1, r1, r3, lsl #5
			wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1d34:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    1d38:	f8d1 c000 	ldr.w	ip, [r1]
    1d3c:	6810      	ldr	r0, [r2, #0]
		} while (((wptr + 1) % UDMA_TX_RBSZ) == rptr);
    1d3e:	1c43      	adds	r3, r0, #1
    1d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1d44:	4563      	cmp	r3, ip
    1d46:	d0f7      	beq.n	1d38 <uart_aspeed_poll_out+0x58>

		data->tx_rb[wptr] = c;
    1d48:	68e2      	ldr	r2, [r4, #12]
		sys_write32((wptr + 1) % UDMA_TX_RBSZ, udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1d4a:	4918      	ldr	r1, [pc, #96]	; (1dac <uart_aspeed_poll_out+0xcc>)
		data->tx_rb[wptr] = c;
    1d4c:	5415      	strb	r5, [r2, r0]
		sys_write32((wptr + 1) % UDMA_TX_RBSZ, udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1d4e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1d50:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1d52:	5053      	str	r3, [r2, r1]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1d54:	4620      	mov	r0, r4
    1d56:	f001 fa79 	bl	324c <z_spin_unlock_valid>
    1d5a:	b968      	cbnz	r0, 1d78 <uart_aspeed_poll_out+0x98>
    1d5c:	23ac      	movs	r3, #172	; 0xac
    1d5e:	4a0d      	ldr	r2, [pc, #52]	; (1d94 <uart_aspeed_poll_out+0xb4>)
    1d60:	4913      	ldr	r1, [pc, #76]	; (1db0 <uart_aspeed_poll_out+0xd0>)
    1d62:	480e      	ldr	r0, [pc, #56]	; (1d9c <uart_aspeed_poll_out+0xbc>)
    1d64:	f004 ffaa 	bl	6cbc <printk>
    1d68:	4621      	mov	r1, r4
    1d6a:	4812      	ldr	r0, [pc, #72]	; (1db4 <uart_aspeed_poll_out+0xd4>)
    1d6c:	f004 ffa6 	bl	6cbc <printk>
    1d70:	21ac      	movs	r1, #172	; 0xac
    1d72:	4808      	ldr	r0, [pc, #32]	; (1d94 <uart_aspeed_poll_out+0xb4>)
    1d74:	f005 f86c 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    1d78:	f387 8811 	msr	BASEPRI, r7
    1d7c:	f3bf 8f6f 	isb	sy
			;
		sys_write32(c, dev_cfg->base + UART_THR);
	}

	k_spin_unlock(&data->lock, key);
}
    1d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while (!(sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_THRE))
    1d82:	6873      	ldr	r3, [r6, #4]
    1d84:	f103 0114 	add.w	r1, r3, #20
	return *(volatile uint32_t *)addr;
    1d88:	680a      	ldr	r2, [r1, #0]
    1d8a:	0692      	lsls	r2, r2, #26
    1d8c:	d5fc      	bpl.n	1d88 <uart_aspeed_poll_out+0xa8>
	*(volatile uint32_t *)addr = data;
    1d8e:	601d      	str	r5, [r3, #0]
}
    1d90:	e7e0      	b.n	1d54 <uart_aspeed_poll_out+0x74>
    1d92:	bf00      	nop
    1d94:	000082f4 	.word	0x000082f4
    1d98:	0000831a 	.word	0x0000831a
    1d9c:	00008182 	.word	0x00008182
    1da0:	0000832f 	.word	0x0000832f
    1da4:	7e79e000 	.word	0x7e79e000
    1da8:	7e79e004 	.word	0x7e79e004
    1dac:	7e79e044 	.word	0x7e79e044
    1db0:	00008347 	.word	0x00008347
    1db4:	0000835e 	.word	0x0000835e

00001db8 <uart_aspeed_err_check>:

static int uart_aspeed_err_check(const struct device *dev)
{
    1db8:	b570      	push	{r4, r5, r6, lr}
	int check;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1dba:	6845      	ldr	r5, [r0, #4]

	k_spinlock_key_t key = k_spin_lock(&data->lock);
    1dbc:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    1dbe:	f04f 0320 	mov.w	r3, #32
    1dc2:	f3ef 8611 	mrs	r6, BASEPRI
    1dc6:	f383 8811 	msr	BASEPRI, r3
    1dca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1dce:	4620      	mov	r0, r4
    1dd0:	f001 fa2e 	bl	3230 <z_spin_lock_valid>
    1dd4:	b968      	cbnz	r0, 1df2 <uart_aspeed_err_check+0x3a>
    1dd6:	2381      	movs	r3, #129	; 0x81
    1dd8:	4a15      	ldr	r2, [pc, #84]	; (1e30 <uart_aspeed_err_check+0x78>)
    1dda:	4916      	ldr	r1, [pc, #88]	; (1e34 <uart_aspeed_err_check+0x7c>)
    1ddc:	4816      	ldr	r0, [pc, #88]	; (1e38 <uart_aspeed_err_check+0x80>)
    1dde:	f004 ff6d 	bl	6cbc <printk>
    1de2:	4621      	mov	r1, r4
    1de4:	4815      	ldr	r0, [pc, #84]	; (1e3c <uart_aspeed_err_check+0x84>)
    1de6:	f004 ff69 	bl	6cbc <printk>
    1dea:	2181      	movs	r1, #129	; 0x81
    1dec:	4810      	ldr	r0, [pc, #64]	; (1e30 <uart_aspeed_err_check+0x78>)
    1dee:	f005 f82f 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    1df2:	4620      	mov	r0, r4
    1df4:	f001 fa38 	bl	3268 <z_spin_lock_set_owner>

	check = sys_read32(dev_cfg->base + UART_LSR) &
    1df8:	686b      	ldr	r3, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1dfa:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    1dfc:	695d      	ldr	r5, [r3, #20]
    1dfe:	f001 fa25 	bl	324c <z_spin_unlock_valid>
    1e02:	b968      	cbnz	r0, 1e20 <uart_aspeed_err_check+0x68>
    1e04:	23ac      	movs	r3, #172	; 0xac
    1e06:	4a0a      	ldr	r2, [pc, #40]	; (1e30 <uart_aspeed_err_check+0x78>)
    1e08:	490d      	ldr	r1, [pc, #52]	; (1e40 <uart_aspeed_err_check+0x88>)
    1e0a:	480b      	ldr	r0, [pc, #44]	; (1e38 <uart_aspeed_err_check+0x80>)
    1e0c:	f004 ff56 	bl	6cbc <printk>
    1e10:	4621      	mov	r1, r4
    1e12:	480c      	ldr	r0, [pc, #48]	; (1e44 <uart_aspeed_err_check+0x8c>)
    1e14:	f004 ff52 	bl	6cbc <printk>
    1e18:	21ac      	movs	r1, #172	; 0xac
    1e1a:	4805      	ldr	r0, [pc, #20]	; (1e30 <uart_aspeed_err_check+0x78>)
    1e1c:	f005 f818 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    1e20:	f386 8811 	msr	BASEPRI, r6
    1e24:	f3bf 8f6f 	isb	sy
		(UART_LSR_BI | UART_LSR_FE | UART_LSR_PE | UART_LSR_OE | UART_LSR_DR);

	k_spin_unlock(&data->lock, key);

	return (check >> 1);
}
    1e28:	f3c5 0043 	ubfx	r0, r5, #1, #4
    1e2c:	bd70      	pop	{r4, r5, r6, pc}
    1e2e:	bf00      	nop
    1e30:	000082f4 	.word	0x000082f4
    1e34:	0000831a 	.word	0x0000831a
    1e38:	00008182 	.word	0x00008182
    1e3c:	0000832f 	.word	0x0000832f
    1e40:	00008347 	.word	0x00008347
    1e44:	0000835e 	.word	0x0000835e

00001e48 <uart_aspeed_fifo_fill>:
}

static int uart_aspeed_fifo_fill(const struct device *dev,
				  const uint8_t *tx_data,
				  int size)
{
    1e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	uint32_t rptr = 0, wptr = 0;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1e4c:	6847      	ldr	r7, [r0, #4]
{
    1e4e:	4688      	mov	r8, r1
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    1e50:	f897 3020 	ldrb.w	r3, [r7, #32]
{
    1e54:	4616      	mov	r6, r2
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1e56:	6905      	ldr	r5, [r0, #16]
	if (dev_cfg->dma) {
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d052      	beq.n	1f02 <uart_aspeed_fifo_fill+0xba>
	__asm__ volatile(
    1e5c:	f04f 0320 	mov.w	r3, #32
    1e60:	f3ef 8911 	mrs	r9, BASEPRI
    1e64:	f383 8811 	msr	BASEPRI, r3
    1e68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1e6c:	4840      	ldr	r0, [pc, #256]	; (1f70 <uart_aspeed_fifo_fill+0x128>)
    1e6e:	f001 f9df 	bl	3230 <z_spin_lock_valid>
    1e72:	b968      	cbnz	r0, 1e90 <uart_aspeed_fifo_fill+0x48>
    1e74:	2381      	movs	r3, #129	; 0x81
    1e76:	4a3f      	ldr	r2, [pc, #252]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1e78:	493f      	ldr	r1, [pc, #252]	; (1f78 <uart_aspeed_fifo_fill+0x130>)
    1e7a:	4840      	ldr	r0, [pc, #256]	; (1f7c <uart_aspeed_fifo_fill+0x134>)
    1e7c:	f004 ff1e 	bl	6cbc <printk>
    1e80:	493b      	ldr	r1, [pc, #236]	; (1f70 <uart_aspeed_fifo_fill+0x128>)
    1e82:	483f      	ldr	r0, [pc, #252]	; (1f80 <uart_aspeed_fifo_fill+0x138>)
    1e84:	f004 ff1a 	bl	6cbc <printk>
    1e88:	2181      	movs	r1, #129	; 0x81
    1e8a:	483a      	ldr	r0, [pc, #232]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1e8c:	f004 ffe0 	bl	6e50 <assert_post_action>
		key = k_spin_lock(&udma_lock);

		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));

		for (i = 0; i < size; ++i) {
    1e90:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
    1e92:	4837      	ldr	r0, [pc, #220]	; (1f70 <uart_aspeed_fifo_fill+0x128>)
    1e94:	f001 f9e8 	bl	3268 <z_spin_lock_set_owner>
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    1e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e9a:	4a3a      	ldr	r2, [pc, #232]	; (1f84 <uart_aspeed_fifo_fill+0x13c>)
    1e9c:	3302      	adds	r3, #2
    1e9e:	015b      	lsls	r3, r3, #5
    1ea0:	5899      	ldr	r1, [r3, r2]
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1ea2:	3204      	adds	r2, #4
    1ea4:	589b      	ldr	r3, [r3, r2]
		for (i = 0; i < size; ++i) {
    1ea6:	42b4      	cmp	r4, r6
    1ea8:	da04      	bge.n	1eb4 <uart_aspeed_fifo_fill+0x6c>
			if (((wptr + 1) % UDMA_TX_RBSZ) == rptr)
    1eaa:	1c5a      	adds	r2, r3, #1
    1eac:	f3c2 0209 	ubfx	r2, r2, #0, #10
    1eb0:	428a      	cmp	r2, r1
    1eb2:	d119      	bne.n	1ee8 <uart_aspeed_fifo_fill+0xa0>

			data->tx_rb[wptr] = tx_data[i];
			wptr = (wptr + 1) % UDMA_TX_RBSZ;
		}

		if (i)
    1eb4:	bb04      	cbnz	r4, 1ef8 <uart_aspeed_fifo_fill+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1eb6:	482e      	ldr	r0, [pc, #184]	; (1f70 <uart_aspeed_fifo_fill+0x128>)
    1eb8:	f001 f9c8 	bl	324c <z_spin_unlock_valid>
    1ebc:	b968      	cbnz	r0, 1eda <uart_aspeed_fifo_fill+0x92>
    1ebe:	4932      	ldr	r1, [pc, #200]	; (1f88 <uart_aspeed_fifo_fill+0x140>)
    1ec0:	23ac      	movs	r3, #172	; 0xac
    1ec2:	4a2c      	ldr	r2, [pc, #176]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1ec4:	482d      	ldr	r0, [pc, #180]	; (1f7c <uart_aspeed_fifo_fill+0x134>)
    1ec6:	f004 fef9 	bl	6cbc <printk>
    1eca:	4929      	ldr	r1, [pc, #164]	; (1f70 <uart_aspeed_fifo_fill+0x128>)
    1ecc:	482f      	ldr	r0, [pc, #188]	; (1f8c <uart_aspeed_fifo_fill+0x144>)
    1ece:	f004 fef5 	bl	6cbc <printk>
    1ed2:	21ac      	movs	r1, #172	; 0xac
    1ed4:	4827      	ldr	r0, [pc, #156]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1ed6:	f004 ffbb 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    1eda:	f389 8811 	msr	BASEPRI, r9
    1ede:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return i;
}
    1ee2:	4620      	mov	r0, r4
    1ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			data->tx_rb[wptr] = tx_data[i];
    1ee8:	f818 c004 	ldrb.w	ip, [r8, r4]
    1eec:	68e8      	ldr	r0, [r5, #12]
		for (i = 0; i < size; ++i) {
    1eee:	3401      	adds	r4, #1
			data->tx_rb[wptr] = tx_data[i];
    1ef0:	f800 c003 	strb.w	ip, [r0, r3]
		for (i = 0; i < size; ++i) {
    1ef4:	4613      	mov	r3, r2
    1ef6:	e7d6      	b.n	1ea6 <uart_aspeed_fifo_fill+0x5e>
			sys_write32(wptr, udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1efa:	4925      	ldr	r1, [pc, #148]	; (1f90 <uart_aspeed_fifo_fill+0x148>)
    1efc:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1efe:	5053      	str	r3, [r2, r1]
}
    1f00:	e7d9      	b.n	1eb6 <uart_aspeed_fifo_fill+0x6e>
	__asm__ volatile(
    1f02:	f04f 0320 	mov.w	r3, #32
    1f06:	f3ef 8911 	mrs	r9, BASEPRI
    1f0a:	f383 8811 	msr	BASEPRI, r3
    1f0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f12:	4628      	mov	r0, r5
    1f14:	f001 f98c 	bl	3230 <z_spin_lock_valid>
    1f18:	b968      	cbnz	r0, 1f36 <uart_aspeed_fifo_fill+0xee>
    1f1a:	2381      	movs	r3, #129	; 0x81
    1f1c:	4a15      	ldr	r2, [pc, #84]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1f1e:	4916      	ldr	r1, [pc, #88]	; (1f78 <uart_aspeed_fifo_fill+0x130>)
    1f20:	4816      	ldr	r0, [pc, #88]	; (1f7c <uart_aspeed_fifo_fill+0x134>)
    1f22:	f004 fecb 	bl	6cbc <printk>
    1f26:	4629      	mov	r1, r5
    1f28:	4815      	ldr	r0, [pc, #84]	; (1f80 <uart_aspeed_fifo_fill+0x138>)
    1f2a:	f004 fec7 	bl	6cbc <printk>
    1f2e:	2181      	movs	r1, #129	; 0x81
    1f30:	4810      	ldr	r0, [pc, #64]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1f32:	f004 ff8d 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    1f36:	4628      	mov	r0, r5
    1f38:	f001 f996 	bl	3268 <z_spin_lock_set_owner>
		for (i = 0; i < size; ++i) {
    1f3c:	2400      	movs	r4, #0
    1f3e:	42b4      	cmp	r4, r6
    1f40:	da03      	bge.n	1f4a <uart_aspeed_fifo_fill+0x102>
			if (!(sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_THRE))
    1f42:	687b      	ldr	r3, [r7, #4]
	return *(volatile uint32_t *)addr;
    1f44:	695a      	ldr	r2, [r3, #20]
    1f46:	0692      	lsls	r2, r2, #26
    1f48:	d40c      	bmi.n	1f64 <uart_aspeed_fifo_fill+0x11c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1f4a:	4628      	mov	r0, r5
    1f4c:	f001 f97e 	bl	324c <z_spin_unlock_valid>
    1f50:	2800      	cmp	r0, #0
    1f52:	d1c2      	bne.n	1eda <uart_aspeed_fifo_fill+0x92>
    1f54:	490c      	ldr	r1, [pc, #48]	; (1f88 <uart_aspeed_fifo_fill+0x140>)
    1f56:	23ac      	movs	r3, #172	; 0xac
    1f58:	4a06      	ldr	r2, [pc, #24]	; (1f74 <uart_aspeed_fifo_fill+0x12c>)
    1f5a:	4808      	ldr	r0, [pc, #32]	; (1f7c <uart_aspeed_fifo_fill+0x134>)
    1f5c:	f004 feae 	bl	6cbc <printk>
    1f60:	4629      	mov	r1, r5
    1f62:	e7b3      	b.n	1ecc <uart_aspeed_fifo_fill+0x84>
			sys_write32(tx_data[i], dev_cfg->base + UART_THR);
    1f64:	f818 2004 	ldrb.w	r2, [r8, r4]
		for (i = 0; i < size; ++i) {
    1f68:	3401      	adds	r4, #1
	*(volatile uint32_t *)addr = data;
    1f6a:	601a      	str	r2, [r3, #0]
    1f6c:	e7e7      	b.n	1f3e <uart_aspeed_fifo_fill+0xf6>
    1f6e:	bf00      	nop
    1f70:	00009d00 	.word	0x00009d00
    1f74:	000082f4 	.word	0x000082f4
    1f78:	0000831a 	.word	0x0000831a
    1f7c:	00008182 	.word	0x00008182
    1f80:	0000832f 	.word	0x0000832f
    1f84:	7e79e000 	.word	0x7e79e000
    1f88:	00008347 	.word	0x00008347
    1f8c:	0000835e 	.word	0x0000835e
    1f90:	7e79e044 	.word	0x7e79e044

00001f94 <uart_aspeed_fifo_read>:

static int uart_aspeed_fifo_read(const struct device *dev, uint8_t *rx_data,
				  const int size)
{
    1f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	uint32_t rptr = 0, wptr = 0;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1f98:	6847      	ldr	r7, [r0, #4]
{
    1f9a:	4688      	mov	r8, r1
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    1f9c:	f897 3020 	ldrb.w	r3, [r7, #32]
{
    1fa0:	4616      	mov	r6, r2
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1fa2:	6905      	ldr	r5, [r0, #16]
	if (dev_cfg->dma) {
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d04e      	beq.n	2046 <uart_aspeed_fifo_read+0xb2>
    1fa8:	f04f 0320 	mov.w	r3, #32
    1fac:	f3ef 8911 	mrs	r9, BASEPRI
    1fb0:	f383 8811 	msr	BASEPRI, r3
    1fb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1fb8:	483e      	ldr	r0, [pc, #248]	; (20b4 <uart_aspeed_fifo_read+0x120>)
    1fba:	f001 f939 	bl	3230 <z_spin_lock_valid>
    1fbe:	b968      	cbnz	r0, 1fdc <uart_aspeed_fifo_read+0x48>
    1fc0:	2381      	movs	r3, #129	; 0x81
    1fc2:	4a3d      	ldr	r2, [pc, #244]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    1fc4:	493d      	ldr	r1, [pc, #244]	; (20bc <uart_aspeed_fifo_read+0x128>)
    1fc6:	483e      	ldr	r0, [pc, #248]	; (20c0 <uart_aspeed_fifo_read+0x12c>)
    1fc8:	f004 fe78 	bl	6cbc <printk>
    1fcc:	4939      	ldr	r1, [pc, #228]	; (20b4 <uart_aspeed_fifo_read+0x120>)
    1fce:	483d      	ldr	r0, [pc, #244]	; (20c4 <uart_aspeed_fifo_read+0x130>)
    1fd0:	f004 fe74 	bl	6cbc <printk>
    1fd4:	2181      	movs	r1, #129	; 0x81
    1fd6:	4838      	ldr	r0, [pc, #224]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    1fd8:	f004 ff3a 	bl	6e50 <assert_post_action>
		key = k_spin_lock(&udma_lock);

		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
		wptr = sys_read32(udma_base + UDMA_CHX_RX_WR_PTR(dev_cfg->dma_ch));

		for (i = 0; i < size; ++i) {
    1fdc:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
    1fde:	4835      	ldr	r0, [pc, #212]	; (20b4 <uart_aspeed_fifo_read+0x120>)
    1fe0:	f001 f942 	bl	3268 <z_spin_lock_set_owner>
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1fe6:	4938      	ldr	r1, [pc, #224]	; (20c8 <uart_aspeed_fifo_read+0x134>)
		wptr = sys_read32(udma_base + UDMA_CHX_RX_WR_PTR(dev_cfg->dma_ch));
    1fe8:	4838      	ldr	r0, [pc, #224]	; (20cc <uart_aspeed_fifo_read+0x138>)
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1fea:	0152      	lsls	r2, r2, #5
	return *(volatile uint32_t *)addr;
    1fec:	5853      	ldr	r3, [r2, r1]
    1fee:	5812      	ldr	r2, [r2, r0]
		for (i = 0; i < size; ++i) {
    1ff0:	42b4      	cmp	r4, r6
    1ff2:	da01      	bge.n	1ff8 <uart_aspeed_fifo_read+0x64>
			if (rptr == wptr)
    1ff4:	4293      	cmp	r3, r2
    1ff6:	d119      	bne.n	202c <uart_aspeed_fifo_read+0x98>

			rx_data[i] = data->rx_rb[rptr];
			rptr = (rptr + 1) % UDMA_RX_RBSZ;
		}

		if (i)
    1ff8:	bb0c      	cbnz	r4, 203e <uart_aspeed_fifo_read+0xaa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ffa:	482e      	ldr	r0, [pc, #184]	; (20b4 <uart_aspeed_fifo_read+0x120>)
    1ffc:	f001 f926 	bl	324c <z_spin_unlock_valid>
    2000:	b968      	cbnz	r0, 201e <uart_aspeed_fifo_read+0x8a>
    2002:	4933      	ldr	r1, [pc, #204]	; (20d0 <uart_aspeed_fifo_read+0x13c>)
    2004:	23ac      	movs	r3, #172	; 0xac
    2006:	4a2c      	ldr	r2, [pc, #176]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    2008:	482d      	ldr	r0, [pc, #180]	; (20c0 <uart_aspeed_fifo_read+0x12c>)
    200a:	f004 fe57 	bl	6cbc <printk>
    200e:	4929      	ldr	r1, [pc, #164]	; (20b4 <uart_aspeed_fifo_read+0x120>)
    2010:	4830      	ldr	r0, [pc, #192]	; (20d4 <uart_aspeed_fifo_read+0x140>)
    2012:	f004 fe53 	bl	6cbc <printk>
    2016:	21ac      	movs	r1, #172	; 0xac
    2018:	4827      	ldr	r0, [pc, #156]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    201a:	f004 ff19 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    201e:	f389 8811 	msr	BASEPRI, r9
    2022:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return i;
}
    2026:	4620      	mov	r0, r4
    2028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			rx_data[i] = data->rx_rb[rptr];
    202c:	6968      	ldr	r0, [r5, #20]
    202e:	5cc0      	ldrb	r0, [r0, r3]
			rptr = (rptr + 1) % UDMA_RX_RBSZ;
    2030:	3301      	adds	r3, #1
			rx_data[i] = data->rx_rb[rptr];
    2032:	f808 0004 	strb.w	r0, [r8, r4]
			rptr = (rptr + 1) % UDMA_RX_RBSZ;
    2036:	f3c3 0309 	ubfx	r3, r3, #0, #10
		for (i = 0; i < size; ++i) {
    203a:	3401      	adds	r4, #1
    203c:	e7d8      	b.n	1ff0 <uart_aspeed_fifo_read+0x5c>
			sys_write32(rptr, udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    203e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2040:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    2042:	5053      	str	r3, [r2, r1]
}
    2044:	e7d9      	b.n	1ffa <uart_aspeed_fifo_read+0x66>
	__asm__ volatile(
    2046:	f04f 0320 	mov.w	r3, #32
    204a:	f3ef 8911 	mrs	r9, BASEPRI
    204e:	f383 8811 	msr	BASEPRI, r3
    2052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2056:	4628      	mov	r0, r5
    2058:	f001 f8ea 	bl	3230 <z_spin_lock_valid>
    205c:	b968      	cbnz	r0, 207a <uart_aspeed_fifo_read+0xe6>
    205e:	2381      	movs	r3, #129	; 0x81
    2060:	4a15      	ldr	r2, [pc, #84]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    2062:	4916      	ldr	r1, [pc, #88]	; (20bc <uart_aspeed_fifo_read+0x128>)
    2064:	4816      	ldr	r0, [pc, #88]	; (20c0 <uart_aspeed_fifo_read+0x12c>)
    2066:	f004 fe29 	bl	6cbc <printk>
    206a:	4629      	mov	r1, r5
    206c:	4815      	ldr	r0, [pc, #84]	; (20c4 <uart_aspeed_fifo_read+0x130>)
    206e:	f004 fe25 	bl	6cbc <printk>
    2072:	2181      	movs	r1, #129	; 0x81
    2074:	4810      	ldr	r0, [pc, #64]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    2076:	f004 feeb 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    207a:	4628      	mov	r0, r5
    207c:	f001 f8f4 	bl	3268 <z_spin_lock_set_owner>
		for (i = 0; i < size; ++i) {
    2080:	2400      	movs	r4, #0
    2082:	42b4      	cmp	r4, r6
    2084:	da03      	bge.n	208e <uart_aspeed_fifo_read+0xfa>
			if (!(sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_DR))
    2086:	687b      	ldr	r3, [r7, #4]
	return *(volatile uint32_t *)addr;
    2088:	695a      	ldr	r2, [r3, #20]
    208a:	07d2      	lsls	r2, r2, #31
    208c:	d40c      	bmi.n	20a8 <uart_aspeed_fifo_read+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    208e:	4628      	mov	r0, r5
    2090:	f001 f8dc 	bl	324c <z_spin_unlock_valid>
    2094:	2800      	cmp	r0, #0
    2096:	d1c2      	bne.n	201e <uart_aspeed_fifo_read+0x8a>
    2098:	490d      	ldr	r1, [pc, #52]	; (20d0 <uart_aspeed_fifo_read+0x13c>)
    209a:	23ac      	movs	r3, #172	; 0xac
    209c:	4a06      	ldr	r2, [pc, #24]	; (20b8 <uart_aspeed_fifo_read+0x124>)
    209e:	4808      	ldr	r0, [pc, #32]	; (20c0 <uart_aspeed_fifo_read+0x12c>)
    20a0:	f004 fe0c 	bl	6cbc <printk>
    20a4:	4629      	mov	r1, r5
    20a6:	e7b3      	b.n	2010 <uart_aspeed_fifo_read+0x7c>
    20a8:	681b      	ldr	r3, [r3, #0]
			rx_data[i] = (uint8_t)sys_read32(dev_cfg->base + UART_RBR);
    20aa:	f808 3004 	strb.w	r3, [r8, r4]
		for (i = 0; i < size; ++i) {
    20ae:	3401      	adds	r4, #1
    20b0:	e7e7      	b.n	2082 <uart_aspeed_fifo_read+0xee>
    20b2:	bf00      	nop
    20b4:	00009d00 	.word	0x00009d00
    20b8:	000082f4 	.word	0x000082f4
    20bc:	0000831a 	.word	0x0000831a
    20c0:	00008182 	.word	0x00008182
    20c4:	0000832f 	.word	0x0000832f
    20c8:	7e79e050 	.word	0x7e79e050
    20cc:	7e79e054 	.word	0x7e79e054
    20d0:	00008347 	.word	0x00008347
    20d4:	0000835e 	.word	0x0000835e

000020d8 <uart_aspeed_irq_tx_enable>:

static void uart_aspeed_irq_tx_enable(const struct device *dev)
{
    20d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    20da:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    20dc:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    20de:	f895 3020 	ldrb.w	r3, [r5, #32]
    20e2:	2b00      	cmp	r3, #0
    20e4:	d03a      	beq.n	215c <uart_aspeed_irq_tx_enable+0x84>
    20e6:	f04f 0320 	mov.w	r3, #32
    20ea:	f3ef 8411 	mrs	r4, BASEPRI
    20ee:	f383 8811 	msr	BASEPRI, r3
    20f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    20f6:	4836      	ldr	r0, [pc, #216]	; (21d0 <uart_aspeed_irq_tx_enable+0xf8>)
    20f8:	f001 f89a 	bl	3230 <z_spin_lock_valid>
    20fc:	b968      	cbnz	r0, 211a <uart_aspeed_irq_tx_enable+0x42>
    20fe:	2381      	movs	r3, #129	; 0x81
    2100:	4a34      	ldr	r2, [pc, #208]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    2102:	4935      	ldr	r1, [pc, #212]	; (21d8 <uart_aspeed_irq_tx_enable+0x100>)
    2104:	4835      	ldr	r0, [pc, #212]	; (21dc <uart_aspeed_irq_tx_enable+0x104>)
    2106:	f004 fdd9 	bl	6cbc <printk>
    210a:	4931      	ldr	r1, [pc, #196]	; (21d0 <uart_aspeed_irq_tx_enable+0xf8>)
    210c:	4834      	ldr	r0, [pc, #208]	; (21e0 <uart_aspeed_irq_tx_enable+0x108>)
    210e:	f004 fdd5 	bl	6cbc <printk>
    2112:	2181      	movs	r1, #129	; 0x81
    2114:	482f      	ldr	r0, [pc, #188]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    2116:	f004 fe9b 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    211a:	482d      	ldr	r0, [pc, #180]	; (21d0 <uart_aspeed_irq_tx_enable+0xf8>)
    211c:	f001 f8a4 	bl	3268 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_TX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    2120:	2301      	movs	r3, #1
    2122:	4a30      	ldr	r2, [pc, #192]	; (21e4 <uart_aspeed_irq_tx_enable+0x10c>)
    2124:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2126:	6b11      	ldr	r1, [r2, #48]	; 0x30
    2128:	4083      	lsls	r3, r0
    212a:	430b      	orrs	r3, r1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    212c:	4828      	ldr	r0, [pc, #160]	; (21d0 <uart_aspeed_irq_tx_enable+0xf8>)
	*(volatile uint32_t *)addr = data;
    212e:	6313      	str	r3, [r2, #48]	; 0x30
    2130:	f001 f88c 	bl	324c <z_spin_unlock_valid>
    2134:	b968      	cbnz	r0, 2152 <uart_aspeed_irq_tx_enable+0x7a>
    2136:	23ac      	movs	r3, #172	; 0xac
    2138:	4a26      	ldr	r2, [pc, #152]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    213a:	492b      	ldr	r1, [pc, #172]	; (21e8 <uart_aspeed_irq_tx_enable+0x110>)
    213c:	4827      	ldr	r0, [pc, #156]	; (21dc <uart_aspeed_irq_tx_enable+0x104>)
    213e:	f004 fdbd 	bl	6cbc <printk>
    2142:	4923      	ldr	r1, [pc, #140]	; (21d0 <uart_aspeed_irq_tx_enable+0xf8>)
    2144:	4829      	ldr	r0, [pc, #164]	; (21ec <uart_aspeed_irq_tx_enable+0x114>)
    2146:	f004 fdb9 	bl	6cbc <printk>
    214a:	21ac      	movs	r1, #172	; 0xac
    214c:	4821      	ldr	r0, [pc, #132]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    214e:	f004 fe7f 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2152:	f384 8811 	msr	BASEPRI, r4
    2156:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ETBEI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    215a:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    215c:	f04f 0320 	mov.w	r3, #32
    2160:	f3ef 8611 	mrs	r6, BASEPRI
    2164:	f383 8811 	msr	BASEPRI, r3
    2168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    216c:	4620      	mov	r0, r4
    216e:	f001 f85f 	bl	3230 <z_spin_lock_valid>
    2172:	b968      	cbnz	r0, 2190 <uart_aspeed_irq_tx_enable+0xb8>
    2174:	2381      	movs	r3, #129	; 0x81
    2176:	4a17      	ldr	r2, [pc, #92]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    2178:	4917      	ldr	r1, [pc, #92]	; (21d8 <uart_aspeed_irq_tx_enable+0x100>)
    217a:	4818      	ldr	r0, [pc, #96]	; (21dc <uart_aspeed_irq_tx_enable+0x104>)
    217c:	f004 fd9e 	bl	6cbc <printk>
    2180:	4621      	mov	r1, r4
    2182:	4817      	ldr	r0, [pc, #92]	; (21e0 <uart_aspeed_irq_tx_enable+0x108>)
    2184:	f004 fd9a 	bl	6cbc <printk>
    2188:	2181      	movs	r1, #129	; 0x81
    218a:	4812      	ldr	r0, [pc, #72]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    218c:	f004 fe60 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2190:	4620      	mov	r0, r4
    2192:	f001 f869 	bl	3268 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ETBEI;
    2196:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2198:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    219a:	6853      	ldr	r3, [r2, #4]
    219c:	f043 0302 	orr.w	r3, r3, #2
	*(volatile uint32_t *)addr = data;
    21a0:	6053      	str	r3, [r2, #4]
    21a2:	f001 f853 	bl	324c <z_spin_unlock_valid>
    21a6:	b968      	cbnz	r0, 21c4 <uart_aspeed_irq_tx_enable+0xec>
    21a8:	23ac      	movs	r3, #172	; 0xac
    21aa:	4a0a      	ldr	r2, [pc, #40]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    21ac:	490e      	ldr	r1, [pc, #56]	; (21e8 <uart_aspeed_irq_tx_enable+0x110>)
    21ae:	480b      	ldr	r0, [pc, #44]	; (21dc <uart_aspeed_irq_tx_enable+0x104>)
    21b0:	f004 fd84 	bl	6cbc <printk>
    21b4:	4621      	mov	r1, r4
    21b6:	480d      	ldr	r0, [pc, #52]	; (21ec <uart_aspeed_irq_tx_enable+0x114>)
    21b8:	f004 fd80 	bl	6cbc <printk>
    21bc:	21ac      	movs	r1, #172	; 0xac
    21be:	4805      	ldr	r0, [pc, #20]	; (21d4 <uart_aspeed_irq_tx_enable+0xfc>)
    21c0:	f004 fe46 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    21c4:	f386 8811 	msr	BASEPRI, r6
    21c8:	f3bf 8f6f 	isb	sy
}
    21cc:	e7c5      	b.n	215a <uart_aspeed_irq_tx_enable+0x82>
    21ce:	bf00      	nop
    21d0:	00009d00 	.word	0x00009d00
    21d4:	000082f4 	.word	0x000082f4
    21d8:	0000831a 	.word	0x0000831a
    21dc:	00008182 	.word	0x00008182
    21e0:	0000832f 	.word	0x0000832f
    21e4:	7e79e000 	.word	0x7e79e000
    21e8:	00008347 	.word	0x00008347
    21ec:	0000835e 	.word	0x0000835e

000021f0 <uart_aspeed_irq_tx_disable>:

static void uart_aspeed_irq_tx_disable(const struct device *dev)
{
    21f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    21f2:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    21f4:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    21f6:	f895 3020 	ldrb.w	r3, [r5, #32]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d03b      	beq.n	2276 <uart_aspeed_irq_tx_disable+0x86>
	__asm__ volatile(
    21fe:	f04f 0320 	mov.w	r3, #32
    2202:	f3ef 8411 	mrs	r4, BASEPRI
    2206:	f383 8811 	msr	BASEPRI, r3
    220a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    220e:	4836      	ldr	r0, [pc, #216]	; (22e8 <uart_aspeed_irq_tx_disable+0xf8>)
    2210:	f001 f80e 	bl	3230 <z_spin_lock_valid>
    2214:	b968      	cbnz	r0, 2232 <uart_aspeed_irq_tx_disable+0x42>
    2216:	2381      	movs	r3, #129	; 0x81
    2218:	4a34      	ldr	r2, [pc, #208]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    221a:	4935      	ldr	r1, [pc, #212]	; (22f0 <uart_aspeed_irq_tx_disable+0x100>)
    221c:	4835      	ldr	r0, [pc, #212]	; (22f4 <uart_aspeed_irq_tx_disable+0x104>)
    221e:	f004 fd4d 	bl	6cbc <printk>
    2222:	4931      	ldr	r1, [pc, #196]	; (22e8 <uart_aspeed_irq_tx_disable+0xf8>)
    2224:	4834      	ldr	r0, [pc, #208]	; (22f8 <uart_aspeed_irq_tx_disable+0x108>)
    2226:	f004 fd49 	bl	6cbc <printk>
    222a:	2181      	movs	r1, #129	; 0x81
    222c:	482f      	ldr	r0, [pc, #188]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    222e:	f004 fe0f 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2232:	482d      	ldr	r0, [pc, #180]	; (22e8 <uart_aspeed_irq_tx_disable+0xf8>)
    2234:	f001 f818 	bl	3268 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_TX_DMA_INT_EN) & ~(0x1 << dev_cfg->dma_ch);
    2238:	2201      	movs	r2, #1
	return *(volatile uint32_t *)addr;
    223a:	4930      	ldr	r1, [pc, #192]	; (22fc <uart_aspeed_irq_tx_disable+0x10c>)
    223c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    223e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2240:	4082      	lsls	r2, r0
    2242:	ea23 0302 	bic.w	r3, r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2246:	4828      	ldr	r0, [pc, #160]	; (22e8 <uart_aspeed_irq_tx_disable+0xf8>)
	*(volatile uint32_t *)addr = data;
    2248:	630b      	str	r3, [r1, #48]	; 0x30
    224a:	f000 ffff 	bl	324c <z_spin_unlock_valid>
    224e:	b968      	cbnz	r0, 226c <uart_aspeed_irq_tx_disable+0x7c>
    2250:	23ac      	movs	r3, #172	; 0xac
    2252:	4a26      	ldr	r2, [pc, #152]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    2254:	492a      	ldr	r1, [pc, #168]	; (2300 <uart_aspeed_irq_tx_disable+0x110>)
    2256:	4827      	ldr	r0, [pc, #156]	; (22f4 <uart_aspeed_irq_tx_disable+0x104>)
    2258:	f004 fd30 	bl	6cbc <printk>
    225c:	4922      	ldr	r1, [pc, #136]	; (22e8 <uart_aspeed_irq_tx_disable+0xf8>)
    225e:	4829      	ldr	r0, [pc, #164]	; (2304 <uart_aspeed_irq_tx_disable+0x114>)
    2260:	f004 fd2c 	bl	6cbc <printk>
    2264:	21ac      	movs	r1, #172	; 0xac
    2266:	4821      	ldr	r0, [pc, #132]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    2268:	f004 fdf2 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    226c:	f384 8811 	msr	BASEPRI, r4
    2270:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ETBEI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    2274:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2276:	f04f 0320 	mov.w	r3, #32
    227a:	f3ef 8611 	mrs	r6, BASEPRI
    227e:	f383 8811 	msr	BASEPRI, r3
    2282:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2286:	4620      	mov	r0, r4
    2288:	f000 ffd2 	bl	3230 <z_spin_lock_valid>
    228c:	b968      	cbnz	r0, 22aa <uart_aspeed_irq_tx_disable+0xba>
    228e:	2381      	movs	r3, #129	; 0x81
    2290:	4a16      	ldr	r2, [pc, #88]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    2292:	4917      	ldr	r1, [pc, #92]	; (22f0 <uart_aspeed_irq_tx_disable+0x100>)
    2294:	4817      	ldr	r0, [pc, #92]	; (22f4 <uart_aspeed_irq_tx_disable+0x104>)
    2296:	f004 fd11 	bl	6cbc <printk>
    229a:	4621      	mov	r1, r4
    229c:	4816      	ldr	r0, [pc, #88]	; (22f8 <uart_aspeed_irq_tx_disable+0x108>)
    229e:	f004 fd0d 	bl	6cbc <printk>
    22a2:	2181      	movs	r1, #129	; 0x81
    22a4:	4811      	ldr	r0, [pc, #68]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    22a6:	f004 fdd3 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    22aa:	4620      	mov	r0, r4
    22ac:	f000 ffdc 	bl	3268 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ETBEI;
    22b0:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    22b2:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    22b4:	6853      	ldr	r3, [r2, #4]
    22b6:	f023 0302 	bic.w	r3, r3, #2
	*(volatile uint32_t *)addr = data;
    22ba:	6053      	str	r3, [r2, #4]
    22bc:	f000 ffc6 	bl	324c <z_spin_unlock_valid>
    22c0:	b968      	cbnz	r0, 22de <uart_aspeed_irq_tx_disable+0xee>
    22c2:	23ac      	movs	r3, #172	; 0xac
    22c4:	4a09      	ldr	r2, [pc, #36]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    22c6:	490e      	ldr	r1, [pc, #56]	; (2300 <uart_aspeed_irq_tx_disable+0x110>)
    22c8:	480a      	ldr	r0, [pc, #40]	; (22f4 <uart_aspeed_irq_tx_disable+0x104>)
    22ca:	f004 fcf7 	bl	6cbc <printk>
    22ce:	4621      	mov	r1, r4
    22d0:	480c      	ldr	r0, [pc, #48]	; (2304 <uart_aspeed_irq_tx_disable+0x114>)
    22d2:	f004 fcf3 	bl	6cbc <printk>
    22d6:	21ac      	movs	r1, #172	; 0xac
    22d8:	4804      	ldr	r0, [pc, #16]	; (22ec <uart_aspeed_irq_tx_disable+0xfc>)
    22da:	f004 fdb9 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    22de:	f386 8811 	msr	BASEPRI, r6
    22e2:	f3bf 8f6f 	isb	sy
}
    22e6:	e7c5      	b.n	2274 <uart_aspeed_irq_tx_disable+0x84>
    22e8:	00009d00 	.word	0x00009d00
    22ec:	000082f4 	.word	0x000082f4
    22f0:	0000831a 	.word	0x0000831a
    22f4:	00008182 	.word	0x00008182
    22f8:	0000832f 	.word	0x0000832f
    22fc:	7e79e000 	.word	0x7e79e000
    2300:	00008347 	.word	0x00008347
    2304:	0000835e 	.word	0x0000835e

00002308 <uart_aspeed_irq_tx_ready>:

static int uart_aspeed_irq_tx_ready(const struct device *dev)
{
    2308:	b570      	push	{r4, r5, r6, lr}
	int ret;
	uint32_t iir_ai;
	uint32_t sts, rptr, wptr;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    230a:	6844      	ldr	r4, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    230c:	6905      	ldr	r5, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    230e:	f894 3020 	ldrb.w	r3, [r4, #32]
    2312:	2b00      	cmp	r3, #0
    2314:	d046      	beq.n	23a4 <uart_aspeed_irq_tx_ready+0x9c>
	__asm__ volatile(
    2316:	f04f 0320 	mov.w	r3, #32
    231a:	f3ef 8511 	mrs	r5, BASEPRI
    231e:	f383 8811 	msr	BASEPRI, r3
    2322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2326:	483c      	ldr	r0, [pc, #240]	; (2418 <uart_aspeed_irq_tx_ready+0x110>)
    2328:	f000 ff82 	bl	3230 <z_spin_lock_valid>
    232c:	b968      	cbnz	r0, 234a <uart_aspeed_irq_tx_ready+0x42>
    232e:	2381      	movs	r3, #129	; 0x81
    2330:	4a3a      	ldr	r2, [pc, #232]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    2332:	493b      	ldr	r1, [pc, #236]	; (2420 <uart_aspeed_irq_tx_ready+0x118>)
    2334:	483b      	ldr	r0, [pc, #236]	; (2424 <uart_aspeed_irq_tx_ready+0x11c>)
    2336:	f004 fcc1 	bl	6cbc <printk>
    233a:	4937      	ldr	r1, [pc, #220]	; (2418 <uart_aspeed_irq_tx_ready+0x110>)
    233c:	483a      	ldr	r0, [pc, #232]	; (2428 <uart_aspeed_irq_tx_ready+0x120>)
    233e:	f004 fcbd 	bl	6cbc <printk>
    2342:	2181      	movs	r1, #129	; 0x81
    2344:	4835      	ldr	r0, [pc, #212]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    2346:	f004 fd83 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    234a:	4833      	ldr	r0, [pc, #204]	; (2418 <uart_aspeed_irq_tx_ready+0x110>)
    234c:	f000 ff8c 	bl	3268 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		sts = sys_read32(udma_base + UDMA_TX_DMA_INT_STS);
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    2350:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2352:	4936      	ldr	r1, [pc, #216]	; (242c <uart_aspeed_irq_tx_ready+0x124>)
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    2354:	4836      	ldr	r0, [pc, #216]	; (2430 <uart_aspeed_irq_tx_ready+0x128>)
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    2356:	1c93      	adds	r3, r2, #2
    2358:	015b      	lsls	r3, r3, #5
    235a:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    235c:	58c9      	ldr	r1, [r1, r3]
    235e:	5818      	ldr	r0, [r3, r0]
		ret = ((sts & (0x1 << dev_cfg->dma_ch)) ? 1 : 0) | (rptr == wptr);
    2360:	2301      	movs	r3, #1
    2362:	4093      	lsls	r3, r2
    2364:	4233      	tst	r3, r6
    2366:	bf14      	ite	ne
    2368:	2401      	movne	r4, #1
    236a:	2400      	moveq	r4, #0
    236c:	4288      	cmp	r0, r1
    236e:	bf08      	it	eq
    2370:	f044 0401 	orreq.w	r4, r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2374:	4828      	ldr	r0, [pc, #160]	; (2418 <uart_aspeed_irq_tx_ready+0x110>)
    2376:	f000 ff69 	bl	324c <z_spin_unlock_valid>
    237a:	b968      	cbnz	r0, 2398 <uart_aspeed_irq_tx_ready+0x90>
    237c:	23ac      	movs	r3, #172	; 0xac
    237e:	4a27      	ldr	r2, [pc, #156]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    2380:	492c      	ldr	r1, [pc, #176]	; (2434 <uart_aspeed_irq_tx_ready+0x12c>)
    2382:	4828      	ldr	r0, [pc, #160]	; (2424 <uart_aspeed_irq_tx_ready+0x11c>)
    2384:	f004 fc9a 	bl	6cbc <printk>
    2388:	4923      	ldr	r1, [pc, #140]	; (2418 <uart_aspeed_irq_tx_ready+0x110>)
    238a:	482b      	ldr	r0, [pc, #172]	; (2438 <uart_aspeed_irq_tx_ready+0x130>)
    238c:	f004 fc96 	bl	6cbc <printk>
    2390:	21ac      	movs	r1, #172	; 0xac
    2392:	4822      	ldr	r0, [pc, #136]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    2394:	f004 fd5c 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2398:	f385 8811 	msr	BASEPRI, r5
    239c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return ret;
}
    23a0:	4620      	mov	r0, r4
    23a2:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    23a4:	f04f 0320 	mov.w	r3, #32
    23a8:	f3ef 8611 	mrs	r6, BASEPRI
    23ac:	f383 8811 	msr	BASEPRI, r3
    23b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    23b4:	4628      	mov	r0, r5
    23b6:	f000 ff3b 	bl	3230 <z_spin_lock_valid>
    23ba:	b968      	cbnz	r0, 23d8 <uart_aspeed_irq_tx_ready+0xd0>
    23bc:	2381      	movs	r3, #129	; 0x81
    23be:	4a17      	ldr	r2, [pc, #92]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    23c0:	4917      	ldr	r1, [pc, #92]	; (2420 <uart_aspeed_irq_tx_ready+0x118>)
    23c2:	4818      	ldr	r0, [pc, #96]	; (2424 <uart_aspeed_irq_tx_ready+0x11c>)
    23c4:	f004 fc7a 	bl	6cbc <printk>
    23c8:	4629      	mov	r1, r5
    23ca:	4817      	ldr	r0, [pc, #92]	; (2428 <uart_aspeed_irq_tx_ready+0x120>)
    23cc:	f004 fc76 	bl	6cbc <printk>
    23d0:	2181      	movs	r1, #129	; 0x81
    23d2:	4812      	ldr	r0, [pc, #72]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    23d4:	f004 fd3c 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    23d8:	4628      	mov	r0, r5
    23da:	f000 ff45 	bl	3268 <z_spin_lock_set_owner>
		iir_ai = (data->iir_cache & UART_IIR_AI_MASK) >> UART_IIR_AI_SHIFT;
    23de:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    23e0:	4628      	mov	r0, r5
    23e2:	f3c4 0442 	ubfx	r4, r4, #1, #3
		ret = (iir_ai == UART_IIR_AI_THRE) ? 1 : 0;
    23e6:	1e63      	subs	r3, r4, #1
    23e8:	425c      	negs	r4, r3
    23ea:	415c      	adcs	r4, r3
    23ec:	f000 ff2e 	bl	324c <z_spin_unlock_valid>
    23f0:	b968      	cbnz	r0, 240e <uart_aspeed_irq_tx_ready+0x106>
    23f2:	23ac      	movs	r3, #172	; 0xac
    23f4:	4a09      	ldr	r2, [pc, #36]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    23f6:	490f      	ldr	r1, [pc, #60]	; (2434 <uart_aspeed_irq_tx_ready+0x12c>)
    23f8:	480a      	ldr	r0, [pc, #40]	; (2424 <uart_aspeed_irq_tx_ready+0x11c>)
    23fa:	f004 fc5f 	bl	6cbc <printk>
    23fe:	4629      	mov	r1, r5
    2400:	480d      	ldr	r0, [pc, #52]	; (2438 <uart_aspeed_irq_tx_ready+0x130>)
    2402:	f004 fc5b 	bl	6cbc <printk>
    2406:	21ac      	movs	r1, #172	; 0xac
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <uart_aspeed_irq_tx_ready+0x114>)
    240a:	f004 fd21 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    240e:	f386 8811 	msr	BASEPRI, r6
    2412:	f3bf 8f6f 	isb	sy
	return ret;
    2416:	e7c3      	b.n	23a0 <uart_aspeed_irq_tx_ready+0x98>
    2418:	00009d00 	.word	0x00009d00
    241c:	000082f4 	.word	0x000082f4
    2420:	0000831a 	.word	0x0000831a
    2424:	00008182 	.word	0x00008182
    2428:	0000832f 	.word	0x0000832f
    242c:	7e79e000 	.word	0x7e79e000
    2430:	7e79e004 	.word	0x7e79e004
    2434:	00008347 	.word	0x00008347
    2438:	0000835e 	.word	0x0000835e

0000243c <uart_aspeed_irq_tx_complete>:

static int uart_aspeed_irq_tx_complete(const struct device *dev)
{
    243c:	b570      	push	{r4, r5, r6, lr}
	int ret;
	uint32_t lsr;
	uint32_t rptr, wptr;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    243e:	6844      	ldr	r4, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2440:	6905      	ldr	r5, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    2442:	f894 3020 	ldrb.w	r3, [r4, #32]
    2446:	2b00      	cmp	r3, #0
    2448:	d03e      	beq.n	24c8 <uart_aspeed_irq_tx_complete+0x8c>
	__asm__ volatile(
    244a:	f04f 0320 	mov.w	r3, #32
    244e:	f3ef 8511 	mrs	r5, BASEPRI
    2452:	f383 8811 	msr	BASEPRI, r3
    2456:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    245a:	4839      	ldr	r0, [pc, #228]	; (2540 <uart_aspeed_irq_tx_complete+0x104>)
    245c:	f000 fee8 	bl	3230 <z_spin_lock_valid>
    2460:	b968      	cbnz	r0, 247e <uart_aspeed_irq_tx_complete+0x42>
    2462:	2381      	movs	r3, #129	; 0x81
    2464:	4a37      	ldr	r2, [pc, #220]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    2466:	4938      	ldr	r1, [pc, #224]	; (2548 <uart_aspeed_irq_tx_complete+0x10c>)
    2468:	4838      	ldr	r0, [pc, #224]	; (254c <uart_aspeed_irq_tx_complete+0x110>)
    246a:	f004 fc27 	bl	6cbc <printk>
    246e:	4934      	ldr	r1, [pc, #208]	; (2540 <uart_aspeed_irq_tx_complete+0x104>)
    2470:	4837      	ldr	r0, [pc, #220]	; (2550 <uart_aspeed_irq_tx_complete+0x114>)
    2472:	f004 fc23 	bl	6cbc <printk>
    2476:	2181      	movs	r1, #129	; 0x81
    2478:	4832      	ldr	r0, [pc, #200]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    247a:	f004 fce9 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    247e:	4830      	ldr	r0, [pc, #192]	; (2540 <uart_aspeed_irq_tx_complete+0x104>)
    2480:	f000 fef2 	bl	3268 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    2484:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2486:	4a33      	ldr	r2, [pc, #204]	; (2554 <uart_aspeed_irq_tx_complete+0x118>)
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    2488:	4933      	ldr	r1, [pc, #204]	; (2558 <uart_aspeed_irq_tx_complete+0x11c>)
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    248a:	3302      	adds	r3, #2
    248c:	015b      	lsls	r3, r3, #5
    248e:	589a      	ldr	r2, [r3, r2]
    2490:	585c      	ldr	r4, [r3, r1]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2492:	482b      	ldr	r0, [pc, #172]	; (2540 <uart_aspeed_irq_tx_complete+0x104>)
		ret = (rptr == wptr) ? 1 : 0;
    2494:	1aa2      	subs	r2, r4, r2
    2496:	4254      	negs	r4, r2
    2498:	4154      	adcs	r4, r2
    249a:	f000 fed7 	bl	324c <z_spin_unlock_valid>
    249e:	b968      	cbnz	r0, 24bc <uart_aspeed_irq_tx_complete+0x80>
    24a0:	23ac      	movs	r3, #172	; 0xac
    24a2:	4a28      	ldr	r2, [pc, #160]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    24a4:	492d      	ldr	r1, [pc, #180]	; (255c <uart_aspeed_irq_tx_complete+0x120>)
    24a6:	4829      	ldr	r0, [pc, #164]	; (254c <uart_aspeed_irq_tx_complete+0x110>)
    24a8:	f004 fc08 	bl	6cbc <printk>
    24ac:	4924      	ldr	r1, [pc, #144]	; (2540 <uart_aspeed_irq_tx_complete+0x104>)
    24ae:	482c      	ldr	r0, [pc, #176]	; (2560 <uart_aspeed_irq_tx_complete+0x124>)
    24b0:	f004 fc04 	bl	6cbc <printk>
    24b4:	21ac      	movs	r1, #172	; 0xac
    24b6:	4823      	ldr	r0, [pc, #140]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    24b8:	f004 fcca 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    24bc:	f385 8811 	msr	BASEPRI, r5
    24c0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return ret;
}
    24c4:	4620      	mov	r0, r4
    24c6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    24c8:	f04f 0320 	mov.w	r3, #32
    24cc:	f3ef 8611 	mrs	r6, BASEPRI
    24d0:	f383 8811 	msr	BASEPRI, r3
    24d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    24d8:	4628      	mov	r0, r5
    24da:	f000 fea9 	bl	3230 <z_spin_lock_valid>
    24de:	b968      	cbnz	r0, 24fc <uart_aspeed_irq_tx_complete+0xc0>
    24e0:	2381      	movs	r3, #129	; 0x81
    24e2:	4a18      	ldr	r2, [pc, #96]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    24e4:	4918      	ldr	r1, [pc, #96]	; (2548 <uart_aspeed_irq_tx_complete+0x10c>)
    24e6:	4819      	ldr	r0, [pc, #100]	; (254c <uart_aspeed_irq_tx_complete+0x110>)
    24e8:	f004 fbe8 	bl	6cbc <printk>
    24ec:	4629      	mov	r1, r5
    24ee:	4818      	ldr	r0, [pc, #96]	; (2550 <uart_aspeed_irq_tx_complete+0x114>)
    24f0:	f004 fbe4 	bl	6cbc <printk>
    24f4:	2181      	movs	r1, #129	; 0x81
    24f6:	4813      	ldr	r0, [pc, #76]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    24f8:	f004 fcaa 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    24fc:	4628      	mov	r0, r5
    24fe:	f000 feb3 	bl	3268 <z_spin_lock_set_owner>
		lsr = sys_read32(dev_cfg->base + UART_LSR);
    2502:	6863      	ldr	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2504:	4628      	mov	r0, r5
    2506:	695c      	ldr	r4, [r3, #20]
		ret = (lsr & (UART_LSR_TEMT | UART_LSR_THRE)) ==
    2508:	f004 0460 	and.w	r4, r4, #96	; 0x60
		       (UART_LSR_TEMT | UART_LSR_THRE) ? 1 : 0;
    250c:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
    2510:	425c      	negs	r4, r3
    2512:	415c      	adcs	r4, r3
    2514:	f000 fe9a 	bl	324c <z_spin_unlock_valid>
    2518:	b968      	cbnz	r0, 2536 <uart_aspeed_irq_tx_complete+0xfa>
    251a:	23ac      	movs	r3, #172	; 0xac
    251c:	4a09      	ldr	r2, [pc, #36]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    251e:	490f      	ldr	r1, [pc, #60]	; (255c <uart_aspeed_irq_tx_complete+0x120>)
    2520:	480a      	ldr	r0, [pc, #40]	; (254c <uart_aspeed_irq_tx_complete+0x110>)
    2522:	f004 fbcb 	bl	6cbc <printk>
    2526:	4629      	mov	r1, r5
    2528:	480d      	ldr	r0, [pc, #52]	; (2560 <uart_aspeed_irq_tx_complete+0x124>)
    252a:	f004 fbc7 	bl	6cbc <printk>
    252e:	21ac      	movs	r1, #172	; 0xac
    2530:	4804      	ldr	r0, [pc, #16]	; (2544 <uart_aspeed_irq_tx_complete+0x108>)
    2532:	f004 fc8d 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2536:	f386 8811 	msr	BASEPRI, r6
    253a:	f3bf 8f6f 	isb	sy
	return ret;
    253e:	e7c1      	b.n	24c4 <uart_aspeed_irq_tx_complete+0x88>
    2540:	00009d00 	.word	0x00009d00
    2544:	000082f4 	.word	0x000082f4
    2548:	0000831a 	.word	0x0000831a
    254c:	00008182 	.word	0x00008182
    2550:	0000832f 	.word	0x0000832f
    2554:	7e79e000 	.word	0x7e79e000
    2558:	7e79e004 	.word	0x7e79e004
    255c:	00008347 	.word	0x00008347
    2560:	0000835e 	.word	0x0000835e

00002564 <uart_aspeed_irq_rx_enable>:

static void uart_aspeed_irq_rx_enable(const struct device *dev)
{
    2564:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2566:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2568:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    256a:	f895 3020 	ldrb.w	r3, [r5, #32]
    256e:	2b00      	cmp	r3, #0
    2570:	d03a      	beq.n	25e8 <uart_aspeed_irq_rx_enable+0x84>
	__asm__ volatile(
    2572:	f04f 0320 	mov.w	r3, #32
    2576:	f3ef 8411 	mrs	r4, BASEPRI
    257a:	f383 8811 	msr	BASEPRI, r3
    257e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2582:	4836      	ldr	r0, [pc, #216]	; (265c <uart_aspeed_irq_rx_enable+0xf8>)
    2584:	f000 fe54 	bl	3230 <z_spin_lock_valid>
    2588:	b968      	cbnz	r0, 25a6 <uart_aspeed_irq_rx_enable+0x42>
    258a:	2381      	movs	r3, #129	; 0x81
    258c:	4a34      	ldr	r2, [pc, #208]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    258e:	4935      	ldr	r1, [pc, #212]	; (2664 <uart_aspeed_irq_rx_enable+0x100>)
    2590:	4835      	ldr	r0, [pc, #212]	; (2668 <uart_aspeed_irq_rx_enable+0x104>)
    2592:	f004 fb93 	bl	6cbc <printk>
    2596:	4931      	ldr	r1, [pc, #196]	; (265c <uart_aspeed_irq_rx_enable+0xf8>)
    2598:	4834      	ldr	r0, [pc, #208]	; (266c <uart_aspeed_irq_rx_enable+0x108>)
    259a:	f004 fb8f 	bl	6cbc <printk>
    259e:	2181      	movs	r1, #129	; 0x81
    25a0:	482f      	ldr	r0, [pc, #188]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    25a2:	f004 fc55 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    25a6:	482d      	ldr	r0, [pc, #180]	; (265c <uart_aspeed_irq_rx_enable+0xf8>)
    25a8:	f000 fe5e 	bl	3268 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_RX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    25ac:	2301      	movs	r3, #1
    25ae:	4a30      	ldr	r2, [pc, #192]	; (2670 <uart_aspeed_irq_rx_enable+0x10c>)
    25b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    25b2:	6b91      	ldr	r1, [r2, #56]	; 0x38
    25b4:	4083      	lsls	r3, r0
    25b6:	430b      	orrs	r3, r1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    25b8:	4828      	ldr	r0, [pc, #160]	; (265c <uart_aspeed_irq_rx_enable+0xf8>)
	*(volatile uint32_t *)addr = data;
    25ba:	6393      	str	r3, [r2, #56]	; 0x38
    25bc:	f000 fe46 	bl	324c <z_spin_unlock_valid>
    25c0:	b968      	cbnz	r0, 25de <uart_aspeed_irq_rx_enable+0x7a>
    25c2:	23ac      	movs	r3, #172	; 0xac
    25c4:	4a26      	ldr	r2, [pc, #152]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    25c6:	492b      	ldr	r1, [pc, #172]	; (2674 <uart_aspeed_irq_rx_enable+0x110>)
    25c8:	4827      	ldr	r0, [pc, #156]	; (2668 <uart_aspeed_irq_rx_enable+0x104>)
    25ca:	f004 fb77 	bl	6cbc <printk>
    25ce:	4923      	ldr	r1, [pc, #140]	; (265c <uart_aspeed_irq_rx_enable+0xf8>)
    25d0:	4829      	ldr	r0, [pc, #164]	; (2678 <uart_aspeed_irq_rx_enable+0x114>)
    25d2:	f004 fb73 	bl	6cbc <printk>
    25d6:	21ac      	movs	r1, #172	; 0xac
    25d8:	4821      	ldr	r0, [pc, #132]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    25da:	f004 fc39 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    25de:	f384 8811 	msr	BASEPRI, r4
    25e2:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ERBFI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    25e6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    25e8:	f04f 0320 	mov.w	r3, #32
    25ec:	f3ef 8611 	mrs	r6, BASEPRI
    25f0:	f383 8811 	msr	BASEPRI, r3
    25f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    25f8:	4620      	mov	r0, r4
    25fa:	f000 fe19 	bl	3230 <z_spin_lock_valid>
    25fe:	b968      	cbnz	r0, 261c <uart_aspeed_irq_rx_enable+0xb8>
    2600:	2381      	movs	r3, #129	; 0x81
    2602:	4a17      	ldr	r2, [pc, #92]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    2604:	4917      	ldr	r1, [pc, #92]	; (2664 <uart_aspeed_irq_rx_enable+0x100>)
    2606:	4818      	ldr	r0, [pc, #96]	; (2668 <uart_aspeed_irq_rx_enable+0x104>)
    2608:	f004 fb58 	bl	6cbc <printk>
    260c:	4621      	mov	r1, r4
    260e:	4817      	ldr	r0, [pc, #92]	; (266c <uart_aspeed_irq_rx_enable+0x108>)
    2610:	f004 fb54 	bl	6cbc <printk>
    2614:	2181      	movs	r1, #129	; 0x81
    2616:	4812      	ldr	r0, [pc, #72]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    2618:	f004 fc1a 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    261c:	4620      	mov	r0, r4
    261e:	f000 fe23 	bl	3268 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ERBFI;
    2622:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2624:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    2626:	6853      	ldr	r3, [r2, #4]
    2628:	f043 0301 	orr.w	r3, r3, #1
	*(volatile uint32_t *)addr = data;
    262c:	6053      	str	r3, [r2, #4]
    262e:	f000 fe0d 	bl	324c <z_spin_unlock_valid>
    2632:	b968      	cbnz	r0, 2650 <uart_aspeed_irq_rx_enable+0xec>
    2634:	23ac      	movs	r3, #172	; 0xac
    2636:	4a0a      	ldr	r2, [pc, #40]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    2638:	490e      	ldr	r1, [pc, #56]	; (2674 <uart_aspeed_irq_rx_enable+0x110>)
    263a:	480b      	ldr	r0, [pc, #44]	; (2668 <uart_aspeed_irq_rx_enable+0x104>)
    263c:	f004 fb3e 	bl	6cbc <printk>
    2640:	4621      	mov	r1, r4
    2642:	480d      	ldr	r0, [pc, #52]	; (2678 <uart_aspeed_irq_rx_enable+0x114>)
    2644:	f004 fb3a 	bl	6cbc <printk>
    2648:	21ac      	movs	r1, #172	; 0xac
    264a:	4805      	ldr	r0, [pc, #20]	; (2660 <uart_aspeed_irq_rx_enable+0xfc>)
    264c:	f004 fc00 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2650:	f386 8811 	msr	BASEPRI, r6
    2654:	f3bf 8f6f 	isb	sy
}
    2658:	e7c5      	b.n	25e6 <uart_aspeed_irq_rx_enable+0x82>
    265a:	bf00      	nop
    265c:	00009d00 	.word	0x00009d00
    2660:	000082f4 	.word	0x000082f4
    2664:	0000831a 	.word	0x0000831a
    2668:	00008182 	.word	0x00008182
    266c:	0000832f 	.word	0x0000832f
    2670:	7e79e000 	.word	0x7e79e000
    2674:	00008347 	.word	0x00008347
    2678:	0000835e 	.word	0x0000835e

0000267c <uart_aspeed_irq_rx_disable>:

static void uart_aspeed_irq_rx_disable(const struct device *dev)
{
    267c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    267e:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2680:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    2682:	f895 3020 	ldrb.w	r3, [r5, #32]
    2686:	2b00      	cmp	r3, #0
    2688:	d03b      	beq.n	2702 <uart_aspeed_irq_rx_disable+0x86>
	__asm__ volatile(
    268a:	f04f 0320 	mov.w	r3, #32
    268e:	f3ef 8411 	mrs	r4, BASEPRI
    2692:	f383 8811 	msr	BASEPRI, r3
    2696:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    269a:	4836      	ldr	r0, [pc, #216]	; (2774 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x64>)
    269c:	f000 fdc8 	bl	3230 <z_spin_lock_valid>
    26a0:	b968      	cbnz	r0, 26be <uart_aspeed_irq_rx_disable+0x42>
    26a2:	2381      	movs	r3, #129	; 0x81
    26a4:	4a34      	ldr	r2, [pc, #208]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    26a6:	4935      	ldr	r1, [pc, #212]	; (277c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x6c>)
    26a8:	4835      	ldr	r0, [pc, #212]	; (2780 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x70>)
    26aa:	f004 fb07 	bl	6cbc <printk>
    26ae:	4931      	ldr	r1, [pc, #196]	; (2774 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x64>)
    26b0:	4834      	ldr	r0, [pc, #208]	; (2784 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x74>)
    26b2:	f004 fb03 	bl	6cbc <printk>
    26b6:	2181      	movs	r1, #129	; 0x81
    26b8:	482f      	ldr	r0, [pc, #188]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    26ba:	f004 fbc9 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    26be:	482d      	ldr	r0, [pc, #180]	; (2774 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x64>)
    26c0:	f000 fdd2 	bl	3268 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_RX_DMA_INT_EN) & ~(0x1 << dev_cfg->dma_ch);
    26c4:	2201      	movs	r2, #1
	return *(volatile uint32_t *)addr;
    26c6:	4930      	ldr	r1, [pc, #192]	; (2788 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x78>)
    26c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    26ca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    26cc:	4082      	lsls	r2, r0
    26ce:	ea23 0302 	bic.w	r3, r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26d2:	4828      	ldr	r0, [pc, #160]	; (2774 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x64>)
	*(volatile uint32_t *)addr = data;
    26d4:	638b      	str	r3, [r1, #56]	; 0x38
    26d6:	f000 fdb9 	bl	324c <z_spin_unlock_valid>
    26da:	b968      	cbnz	r0, 26f8 <uart_aspeed_irq_rx_disable+0x7c>
    26dc:	23ac      	movs	r3, #172	; 0xac
    26de:	4a26      	ldr	r2, [pc, #152]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    26e0:	492a      	ldr	r1, [pc, #168]	; (278c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x7c>)
    26e2:	4827      	ldr	r0, [pc, #156]	; (2780 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x70>)
    26e4:	f004 faea 	bl	6cbc <printk>
    26e8:	4922      	ldr	r1, [pc, #136]	; (2774 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x64>)
    26ea:	4829      	ldr	r0, [pc, #164]	; (2790 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x80>)
    26ec:	f004 fae6 	bl	6cbc <printk>
    26f0:	21ac      	movs	r1, #172	; 0xac
    26f2:	4821      	ldr	r0, [pc, #132]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    26f4:	f004 fbac 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    26f8:	f384 8811 	msr	BASEPRI, r4
    26fc:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ERBFI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    2700:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2702:	f04f 0320 	mov.w	r3, #32
    2706:	f3ef 8611 	mrs	r6, BASEPRI
    270a:	f383 8811 	msr	BASEPRI, r3
    270e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2712:	4620      	mov	r0, r4
    2714:	f000 fd8c 	bl	3230 <z_spin_lock_valid>
    2718:	b968      	cbnz	r0, 2736 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x26>
    271a:	2381      	movs	r3, #129	; 0x81
    271c:	4a16      	ldr	r2, [pc, #88]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    271e:	4917      	ldr	r1, [pc, #92]	; (277c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x6c>)
    2720:	4817      	ldr	r0, [pc, #92]	; (2780 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x70>)
    2722:	f004 facb 	bl	6cbc <printk>
    2726:	4621      	mov	r1, r4
    2728:	4816      	ldr	r0, [pc, #88]	; (2784 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x74>)
    272a:	f004 fac7 	bl	6cbc <printk>
    272e:	2181      	movs	r1, #129	; 0x81
    2730:	4811      	ldr	r0, [pc, #68]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    2732:	f004 fb8d 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2736:	4620      	mov	r0, r4
    2738:	f000 fd96 	bl	3268 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ERBFI;
    273c:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    273e:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    2740:	6853      	ldr	r3, [r2, #4]
    2742:	f023 0301 	bic.w	r3, r3, #1
	*(volatile uint32_t *)addr = data;
    2746:	6053      	str	r3, [r2, #4]
    2748:	f000 fd80 	bl	324c <z_spin_unlock_valid>
    274c:	b968      	cbnz	r0, 276a <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x5a>
    274e:	23ac      	movs	r3, #172	; 0xac
    2750:	4a09      	ldr	r2, [pc, #36]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    2752:	490e      	ldr	r1, [pc, #56]	; (278c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x7c>)
    2754:	480a      	ldr	r0, [pc, #40]	; (2780 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x70>)
    2756:	f004 fab1 	bl	6cbc <printk>
    275a:	4621      	mov	r1, r4
    275c:	480c      	ldr	r0, [pc, #48]	; (2790 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x80>)
    275e:	f004 faad 	bl	6cbc <printk>
    2762:	21ac      	movs	r1, #172	; 0xac
    2764:	4804      	ldr	r0, [pc, #16]	; (2778 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x68>)
    2766:	f004 fb73 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    276a:	f386 8811 	msr	BASEPRI, r6
    276e:	f3bf 8f6f 	isb	sy
}
    2772:	e7c5      	b.n	2700 <uart_aspeed_irq_rx_disable+0x84>
    2774:	00009d00 	.word	0x00009d00
    2778:	000082f4 	.word	0x000082f4
    277c:	0000831a 	.word	0x0000831a
    2780:	00008182 	.word	0x00008182
    2784:	0000832f 	.word	0x0000832f
    2788:	7e79e000 	.word	0x7e79e000
    278c:	00008347 	.word	0x00008347
    2790:	0000835e 	.word	0x0000835e

00002794 <uart_aspeed_irq_rx_ready>:

static int uart_aspeed_irq_rx_ready(const struct device *dev)
{
    2794:	b570      	push	{r4, r5, r6, lr}
	int ret;
	uint32_t iir_ai, sts;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2796:	6905      	ldr	r5, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2798:	6844      	ldr	r4, [r0, #4]
	__asm__ volatile(
    279a:	f04f 0320 	mov.w	r3, #32
    279e:	f3ef 8611 	mrs	r6, BASEPRI
    27a2:	f383 8811 	msr	BASEPRI, r3
    27a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    27aa:	4628      	mov	r0, r5
    27ac:	f000 fd40 	bl	3230 <z_spin_lock_valid>
    27b0:	b968      	cbnz	r0, 27ce <uart_aspeed_irq_rx_ready+0x3a>
    27b2:	2381      	movs	r3, #129	; 0x81
    27b4:	4a1d      	ldr	r2, [pc, #116]	; (282c <uart_aspeed_irq_rx_ready+0x98>)
    27b6:	491e      	ldr	r1, [pc, #120]	; (2830 <uart_aspeed_irq_rx_ready+0x9c>)
    27b8:	481e      	ldr	r0, [pc, #120]	; (2834 <uart_aspeed_irq_rx_ready+0xa0>)
    27ba:	f004 fa7f 	bl	6cbc <printk>
    27be:	4629      	mov	r1, r5
    27c0:	481d      	ldr	r0, [pc, #116]	; (2838 <uart_aspeed_irq_rx_ready+0xa4>)
    27c2:	f004 fa7b 	bl	6cbc <printk>
    27c6:	2181      	movs	r1, #129	; 0x81
    27c8:	4818      	ldr	r0, [pc, #96]	; (282c <uart_aspeed_irq_rx_ready+0x98>)
    27ca:	f004 fb41 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    27ce:	4628      	mov	r0, r5
    27d0:	f000 fd4a 	bl	3268 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    27d4:	f894 3020 	ldrb.w	r3, [r4, #32]
    27d8:	b303      	cbz	r3, 281c <uart_aspeed_irq_rx_ready+0x88>
	return *(volatile uint32_t *)addr;
    27da:	4b18      	ldr	r3, [pc, #96]	; (283c <uart_aspeed_irq_rx_ready+0xa8>)
		sts = sys_read32(udma_base + UDMA_RX_DMA_INT_STS);
		ret = (sts & (0x1 << dev_cfg->dma_ch)) ? 1 : 0;
    27dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    27de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    27e0:	2301      	movs	r3, #1
    27e2:	408b      	lsls	r3, r1
    27e4:	4213      	tst	r3, r2
    27e6:	bf14      	ite	ne
    27e8:	2401      	movne	r4, #1
    27ea:	2400      	moveq	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27ec:	4628      	mov	r0, r5
    27ee:	f000 fd2d 	bl	324c <z_spin_unlock_valid>
    27f2:	b968      	cbnz	r0, 2810 <uart_aspeed_irq_rx_ready+0x7c>
    27f4:	23ac      	movs	r3, #172	; 0xac
    27f6:	4a0d      	ldr	r2, [pc, #52]	; (282c <uart_aspeed_irq_rx_ready+0x98>)
    27f8:	4911      	ldr	r1, [pc, #68]	; (2840 <uart_aspeed_irq_rx_ready+0xac>)
    27fa:	480e      	ldr	r0, [pc, #56]	; (2834 <uart_aspeed_irq_rx_ready+0xa0>)
    27fc:	f004 fa5e 	bl	6cbc <printk>
    2800:	4629      	mov	r1, r5
    2802:	4810      	ldr	r0, [pc, #64]	; (2844 <uart_aspeed_irq_rx_ready+0xb0>)
    2804:	f004 fa5a 	bl	6cbc <printk>
    2808:	21ac      	movs	r1, #172	; 0xac
    280a:	4808      	ldr	r0, [pc, #32]	; (282c <uart_aspeed_irq_rx_ready+0x98>)
    280c:	f004 fb20 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2810:	f386 8811 	msr	BASEPRI, r6
    2814:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
    2818:	4620      	mov	r0, r4
    281a:	bd70      	pop	{r4, r5, r6, pc}
		iir_ai = (data->iir_cache & UART_IIR_AI_MASK) >> UART_IIR_AI_SHIFT;
    281c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		ret = (iir_ai == UART_IIR_AI_RDA || iir_ai == UART_IIR_AI_TMOUT) ? 1 : 0;
    281e:	f3c4 0441 	ubfx	r4, r4, #1, #2
    2822:	1ea3      	subs	r3, r4, #2
    2824:	425c      	negs	r4, r3
    2826:	415c      	adcs	r4, r3
    2828:	e7e0      	b.n	27ec <uart_aspeed_irq_rx_ready+0x58>
    282a:	bf00      	nop
    282c:	000082f4 	.word	0x000082f4
    2830:	0000831a 	.word	0x0000831a
    2834:	00008182 	.word	0x00008182
    2838:	0000832f 	.word	0x0000832f
    283c:	7e79e000 	.word	0x7e79e000
    2840:	00008347 	.word	0x00008347
    2844:	0000835e 	.word	0x0000835e

00002848 <uart_aspeed_irq_err_enable>:

static void uart_aspeed_irq_err_enable(const struct device *dev)
{
    2848:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    284a:	6845      	ldr	r5, [r0, #4]
	k_spinlock_key_t key;

	if (dev_cfg->dma)
    284c:	f895 3020 	ldrb.w	r3, [r5, #32]
    2850:	2b00      	cmp	r3, #0
    2852:	d138      	bne.n	28c6 <uart_aspeed_irq_err_enable+0x7e>
		return;

	key = k_spin_lock(&data->lock);
    2854:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    2856:	f04f 0320 	mov.w	r3, #32
    285a:	f3ef 8611 	mrs	r6, BASEPRI
    285e:	f383 8811 	msr	BASEPRI, r3
    2862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2866:	4620      	mov	r0, r4
    2868:	f000 fce2 	bl	3230 <z_spin_lock_valid>
    286c:	b968      	cbnz	r0, 288a <uart_aspeed_irq_err_enable+0x42>
    286e:	2381      	movs	r3, #129	; 0x81
    2870:	4a15      	ldr	r2, [pc, #84]	; (28c8 <uart_aspeed_irq_err_enable+0x80>)
    2872:	4916      	ldr	r1, [pc, #88]	; (28cc <uart_aspeed_irq_err_enable+0x84>)
    2874:	4816      	ldr	r0, [pc, #88]	; (28d0 <uart_aspeed_irq_err_enable+0x88>)
    2876:	f004 fa21 	bl	6cbc <printk>
    287a:	4621      	mov	r1, r4
    287c:	4815      	ldr	r0, [pc, #84]	; (28d4 <uart_aspeed_irq_err_enable+0x8c>)
    287e:	f004 fa1d 	bl	6cbc <printk>
    2882:	2181      	movs	r1, #129	; 0x81
    2884:	4810      	ldr	r0, [pc, #64]	; (28c8 <uart_aspeed_irq_err_enable+0x80>)
    2886:	f004 fae3 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    288a:	4620      	mov	r0, r4
    288c:	f000 fcec 	bl	3268 <z_spin_lock_set_owner>

	reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ELSI;
    2890:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2892:	4620      	mov	r0, r4
    2894:	6853      	ldr	r3, [r2, #4]
    2896:	f043 0304 	orr.w	r3, r3, #4
	*(volatile uint32_t *)addr = data;
    289a:	6053      	str	r3, [r2, #4]
    289c:	f000 fcd6 	bl	324c <z_spin_unlock_valid>
    28a0:	b968      	cbnz	r0, 28be <uart_aspeed_irq_err_enable+0x76>
    28a2:	23ac      	movs	r3, #172	; 0xac
    28a4:	4a08      	ldr	r2, [pc, #32]	; (28c8 <uart_aspeed_irq_err_enable+0x80>)
    28a6:	490c      	ldr	r1, [pc, #48]	; (28d8 <uart_aspeed_irq_err_enable+0x90>)
    28a8:	4809      	ldr	r0, [pc, #36]	; (28d0 <uart_aspeed_irq_err_enable+0x88>)
    28aa:	f004 fa07 	bl	6cbc <printk>
    28ae:	4621      	mov	r1, r4
    28b0:	480a      	ldr	r0, [pc, #40]	; (28dc <uart_aspeed_irq_err_enable+0x94>)
    28b2:	f004 fa03 	bl	6cbc <printk>
    28b6:	21ac      	movs	r1, #172	; 0xac
    28b8:	4803      	ldr	r0, [pc, #12]	; (28c8 <uart_aspeed_irq_err_enable+0x80>)
    28ba:	f004 fac9 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    28be:	f386 8811 	msr	BASEPRI, r6
    28c2:	f3bf 8f6f 	isb	sy
	sys_write32(reg, dev_cfg->base + UART_IER);

	k_spin_unlock(&data->lock, key);
}
    28c6:	bd70      	pop	{r4, r5, r6, pc}
    28c8:	000082f4 	.word	0x000082f4
    28cc:	0000831a 	.word	0x0000831a
    28d0:	00008182 	.word	0x00008182
    28d4:	0000832f 	.word	0x0000832f
    28d8:	00008347 	.word	0x00008347
    28dc:	0000835e 	.word	0x0000835e

000028e0 <uart_aspeed_irq_err_disable>:

static void uart_aspeed_irq_err_disable(const struct device *dev)
{
    28e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    28e2:	6845      	ldr	r5, [r0, #4]
	k_spinlock_key_t key;

	if (dev_cfg->dma)
    28e4:	f895 3020 	ldrb.w	r3, [r5, #32]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d138      	bne.n	295e <uart_aspeed_irq_err_disable+0x7e>
		return;

	key = k_spin_lock(&data->lock);
    28ec:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    28ee:	f04f 0320 	mov.w	r3, #32
    28f2:	f3ef 8611 	mrs	r6, BASEPRI
    28f6:	f383 8811 	msr	BASEPRI, r3
    28fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28fe:	4620      	mov	r0, r4
    2900:	f000 fc96 	bl	3230 <z_spin_lock_valid>
    2904:	b968      	cbnz	r0, 2922 <uart_aspeed_irq_err_disable+0x42>
    2906:	2381      	movs	r3, #129	; 0x81
    2908:	4a15      	ldr	r2, [pc, #84]	; (2960 <uart_aspeed_irq_err_disable+0x80>)
    290a:	4916      	ldr	r1, [pc, #88]	; (2964 <uart_aspeed_irq_err_disable+0x84>)
    290c:	4816      	ldr	r0, [pc, #88]	; (2968 <uart_aspeed_irq_err_disable+0x88>)
    290e:	f004 f9d5 	bl	6cbc <printk>
    2912:	4621      	mov	r1, r4
    2914:	4815      	ldr	r0, [pc, #84]	; (296c <uart_aspeed_irq_err_disable+0x8c>)
    2916:	f004 f9d1 	bl	6cbc <printk>
    291a:	2181      	movs	r1, #129	; 0x81
    291c:	4810      	ldr	r0, [pc, #64]	; (2960 <uart_aspeed_irq_err_disable+0x80>)
    291e:	f004 fa97 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2922:	4620      	mov	r0, r4
    2924:	f000 fca0 	bl	3268 <z_spin_lock_set_owner>

	reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ELSI;
    2928:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    292a:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    292c:	6853      	ldr	r3, [r2, #4]
    292e:	f023 0304 	bic.w	r3, r3, #4
	*(volatile uint32_t *)addr = data;
    2932:	6053      	str	r3, [r2, #4]
    2934:	f000 fc8a 	bl	324c <z_spin_unlock_valid>
    2938:	b968      	cbnz	r0, 2956 <uart_aspeed_irq_err_disable+0x76>
    293a:	23ac      	movs	r3, #172	; 0xac
    293c:	4a08      	ldr	r2, [pc, #32]	; (2960 <uart_aspeed_irq_err_disable+0x80>)
    293e:	490c      	ldr	r1, [pc, #48]	; (2970 <uart_aspeed_irq_err_disable+0x90>)
    2940:	4809      	ldr	r0, [pc, #36]	; (2968 <uart_aspeed_irq_err_disable+0x88>)
    2942:	f004 f9bb 	bl	6cbc <printk>
    2946:	4621      	mov	r1, r4
    2948:	480a      	ldr	r0, [pc, #40]	; (2974 <uart_aspeed_irq_err_disable+0x94>)
    294a:	f004 f9b7 	bl	6cbc <printk>
    294e:	21ac      	movs	r1, #172	; 0xac
    2950:	4803      	ldr	r0, [pc, #12]	; (2960 <uart_aspeed_irq_err_disable+0x80>)
    2952:	f004 fa7d 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2956:	f386 8811 	msr	BASEPRI, r6
    295a:	f3bf 8f6f 	isb	sy
	sys_write32(reg, dev_cfg->base + UART_IER);

	k_spin_unlock(&data->lock, key);
}
    295e:	bd70      	pop	{r4, r5, r6, pc}
    2960:	000082f4 	.word	0x000082f4
    2964:	0000831a 	.word	0x0000831a
    2968:	00008182 	.word	0x00008182
    296c:	0000832f 	.word	0x0000832f
    2970:	00008347 	.word	0x00008347
    2974:	0000835e 	.word	0x0000835e

00002978 <uart_aspeed_irq_is_pending>:

static int uart_aspeed_irq_is_pending(const struct device *dev)
{
    2978:	b570      	push	{r4, r5, r6, lr}
	int ret;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    297a:	6905      	ldr	r5, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    297c:	6844      	ldr	r4, [r0, #4]
	__asm__ volatile(
    297e:	f04f 0320 	mov.w	r3, #32
    2982:	f3ef 8611 	mrs	r6, BASEPRI
    2986:	f383 8811 	msr	BASEPRI, r3
    298a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    298e:	4628      	mov	r0, r5
    2990:	f000 fc4e 	bl	3230 <z_spin_lock_valid>
    2994:	b968      	cbnz	r0, 29b2 <uart_aspeed_irq_is_pending+0x3a>
    2996:	2381      	movs	r3, #129	; 0x81
    2998:	4a1c      	ldr	r2, [pc, #112]	; (2a0c <uart_aspeed_irq_is_pending+0x94>)
    299a:	491d      	ldr	r1, [pc, #116]	; (2a10 <uart_aspeed_irq_is_pending+0x98>)
    299c:	481d      	ldr	r0, [pc, #116]	; (2a14 <uart_aspeed_irq_is_pending+0x9c>)
    299e:	f004 f98d 	bl	6cbc <printk>
    29a2:	4629      	mov	r1, r5
    29a4:	481c      	ldr	r0, [pc, #112]	; (2a18 <uart_aspeed_irq_is_pending+0xa0>)
    29a6:	f004 f989 	bl	6cbc <printk>
    29aa:	2181      	movs	r1, #129	; 0x81
    29ac:	4817      	ldr	r0, [pc, #92]	; (2a0c <uart_aspeed_irq_is_pending+0x94>)
    29ae:	f004 fa4f 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    29b2:	4628      	mov	r0, r5
    29b4:	f000 fc58 	bl	3268 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    29b8:	f894 3020 	ldrb.w	r3, [r4, #32]
    29bc:	b303      	cbz	r3, 2a00 <uart_aspeed_irq_is_pending+0x88>
	return *(volatile uint32_t *)addr;
    29be:	4b17      	ldr	r3, [pc, #92]	; (2a1c <uart_aspeed_irq_is_pending+0xa4>)
    29c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    29c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		ret = ((sys_read32(udma_base + UDMA_TX_DMA_INT_STS) |
    29c4:	4313      	orrs	r3, r2
		       sys_read32(udma_base + UDMA_RX_DMA_INT_STS)) &
    29c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
		       dev_cfg->dma_ch) ? 1 : 0;
    29c8:	4213      	tst	r3, r2
    29ca:	bf14      	ite	ne
    29cc:	2401      	movne	r4, #1
    29ce:	2400      	moveq	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    29d0:	4628      	mov	r0, r5
    29d2:	f000 fc3b 	bl	324c <z_spin_unlock_valid>
    29d6:	b968      	cbnz	r0, 29f4 <uart_aspeed_irq_is_pending+0x7c>
    29d8:	23ac      	movs	r3, #172	; 0xac
    29da:	4a0c      	ldr	r2, [pc, #48]	; (2a0c <uart_aspeed_irq_is_pending+0x94>)
    29dc:	4910      	ldr	r1, [pc, #64]	; (2a20 <uart_aspeed_irq_is_pending+0xa8>)
    29de:	480d      	ldr	r0, [pc, #52]	; (2a14 <uart_aspeed_irq_is_pending+0x9c>)
    29e0:	f004 f96c 	bl	6cbc <printk>
    29e4:	4629      	mov	r1, r5
    29e6:	480f      	ldr	r0, [pc, #60]	; (2a24 <uart_aspeed_irq_is_pending+0xac>)
    29e8:	f004 f968 	bl	6cbc <printk>
    29ec:	21ac      	movs	r1, #172	; 0xac
    29ee:	4807      	ldr	r0, [pc, #28]	; (2a0c <uart_aspeed_irq_is_pending+0x94>)
    29f0:	f004 fa2e 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    29f4:	f386 8811 	msr	BASEPRI, r6
    29f8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
    29fc:	4620      	mov	r0, r4
    29fe:	bd70      	pop	{r4, r5, r6, pc}
		ret = (!(data->iir_cache & UART_IIR_IPN)) ? 1 : 0;
    2a00:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    2a02:	43e4      	mvns	r4, r4
    2a04:	f004 0401 	and.w	r4, r4, #1
    2a08:	e7e2      	b.n	29d0 <uart_aspeed_irq_is_pending+0x58>
    2a0a:	bf00      	nop
    2a0c:	000082f4 	.word	0x000082f4
    2a10:	0000831a 	.word	0x0000831a
    2a14:	00008182 	.word	0x00008182
    2a18:	0000832f 	.word	0x0000832f
    2a1c:	7e79e000 	.word	0x7e79e000
    2a20:	00008347 	.word	0x00008347
    2a24:	0000835e 	.word	0x0000835e

00002a28 <uart_aspeed_irq_update>:

static int uart_aspeed_irq_update(const struct device *dev)
{
    2a28:	b570      	push	{r4, r5, r6, lr}
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2a2a:	6845      	ldr	r5, [r0, #4]
	k_spinlock_key_t key;

	if (dev_cfg->dma)
    2a2c:	f895 3020 	ldrb.w	r3, [r5, #32]
    2a30:	2b00      	cmp	r3, #0
    2a32:	d136      	bne.n	2aa2 <uart_aspeed_irq_update+0x7a>
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2a34:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    2a36:	f04f 0320 	mov.w	r3, #32
    2a3a:	f3ef 8611 	mrs	r6, BASEPRI
    2a3e:	f383 8811 	msr	BASEPRI, r3
    2a42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a46:	4620      	mov	r0, r4
    2a48:	f000 fbf2 	bl	3230 <z_spin_lock_valid>
    2a4c:	b968      	cbnz	r0, 2a6a <uart_aspeed_irq_update+0x42>
    2a4e:	2381      	movs	r3, #129	; 0x81
    2a50:	4a15      	ldr	r2, [pc, #84]	; (2aa8 <uart_aspeed_irq_update+0x80>)
    2a52:	4916      	ldr	r1, [pc, #88]	; (2aac <uart_aspeed_irq_update+0x84>)
    2a54:	4816      	ldr	r0, [pc, #88]	; (2ab0 <uart_aspeed_irq_update+0x88>)
    2a56:	f004 f931 	bl	6cbc <printk>
    2a5a:	4621      	mov	r1, r4
    2a5c:	4815      	ldr	r0, [pc, #84]	; (2ab4 <uart_aspeed_irq_update+0x8c>)
    2a5e:	f004 f92d 	bl	6cbc <printk>
    2a62:	2181      	movs	r1, #129	; 0x81
    2a64:	4810      	ldr	r0, [pc, #64]	; (2aa8 <uart_aspeed_irq_update+0x80>)
    2a66:	f004 f9f3 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2a6a:	4620      	mov	r0, r4
    2a6c:	f000 fbfc 	bl	3268 <z_spin_lock_set_owner>
		return 1;

	key = k_spin_lock(&data->lock);

	data->iir_cache = sys_read32(dev_cfg->base + UART_IIR);
    2a70:	686b      	ldr	r3, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2a72:	4620      	mov	r0, r4
    2a74:	689b      	ldr	r3, [r3, #8]
    2a76:	6263      	str	r3, [r4, #36]	; 0x24
    2a78:	f000 fbe8 	bl	324c <z_spin_unlock_valid>
    2a7c:	b968      	cbnz	r0, 2a9a <uart_aspeed_irq_update+0x72>
    2a7e:	23ac      	movs	r3, #172	; 0xac
    2a80:	4a09      	ldr	r2, [pc, #36]	; (2aa8 <uart_aspeed_irq_update+0x80>)
    2a82:	490d      	ldr	r1, [pc, #52]	; (2ab8 <uart_aspeed_irq_update+0x90>)
    2a84:	480a      	ldr	r0, [pc, #40]	; (2ab0 <uart_aspeed_irq_update+0x88>)
    2a86:	f004 f919 	bl	6cbc <printk>
    2a8a:	4621      	mov	r1, r4
    2a8c:	480b      	ldr	r0, [pc, #44]	; (2abc <uart_aspeed_irq_update+0x94>)
    2a8e:	f004 f915 	bl	6cbc <printk>
    2a92:	21ac      	movs	r1, #172	; 0xac
    2a94:	4804      	ldr	r0, [pc, #16]	; (2aa8 <uart_aspeed_irq_update+0x80>)
    2a96:	f004 f9db 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2a9a:	f386 8811 	msr	BASEPRI, r6
    2a9e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&data->lock, key);

	return 1;
}
    2aa2:	2001      	movs	r0, #1
    2aa4:	bd70      	pop	{r4, r5, r6, pc}
    2aa6:	bf00      	nop
    2aa8:	000082f4 	.word	0x000082f4
    2aac:	0000831a 	.word	0x0000831a
    2ab0:	00008182 	.word	0x00008182
    2ab4:	0000832f 	.word	0x0000832f
    2ab8:	00008347 	.word	0x00008347
    2abc:	0000835e 	.word	0x0000835e

00002ac0 <uart_aspeed_irq_callback_set>:

static void uart_aspeed_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb,
					 void *cb_data)
{
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	460e      	mov	r6, r1
    2ac4:	4615      	mov	r5, r2
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2ac6:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    2ac8:	f04f 0320 	mov.w	r3, #32
    2acc:	f3ef 8711 	mrs	r7, BASEPRI
    2ad0:	f383 8811 	msr	BASEPRI, r3
    2ad4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2ad8:	4620      	mov	r0, r4
    2ada:	f000 fba9 	bl	3230 <z_spin_lock_valid>
    2ade:	b968      	cbnz	r0, 2afc <uart_aspeed_irq_callback_set+0x3c>
    2ae0:	2381      	movs	r3, #129	; 0x81
    2ae2:	4a14      	ldr	r2, [pc, #80]	; (2b34 <uart_aspeed_irq_callback_set+0x74>)
    2ae4:	4914      	ldr	r1, [pc, #80]	; (2b38 <uart_aspeed_irq_callback_set+0x78>)
    2ae6:	4815      	ldr	r0, [pc, #84]	; (2b3c <uart_aspeed_irq_callback_set+0x7c>)
    2ae8:	f004 f8e8 	bl	6cbc <printk>
    2aec:	4621      	mov	r1, r4
    2aee:	4814      	ldr	r0, [pc, #80]	; (2b40 <uart_aspeed_irq_callback_set+0x80>)
    2af0:	f004 f8e4 	bl	6cbc <printk>
    2af4:	2181      	movs	r1, #129	; 0x81
    2af6:	480f      	ldr	r0, [pc, #60]	; (2b34 <uart_aspeed_irq_callback_set+0x74>)
    2af8:	f004 f9aa 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2afc:	4620      	mov	r0, r4
    2afe:	f000 fbb3 	bl	3268 <z_spin_lock_set_owner>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2b02:	4620      	mov	r0, r4
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	data->cb = cb;
	data->cb_data = cb_data;
    2b04:	e9c4 6507 	strd	r6, r5, [r4, #28]
    2b08:	f000 fba0 	bl	324c <z_spin_unlock_valid>
    2b0c:	b968      	cbnz	r0, 2b2a <uart_aspeed_irq_callback_set+0x6a>
    2b0e:	23ac      	movs	r3, #172	; 0xac
    2b10:	4a08      	ldr	r2, [pc, #32]	; (2b34 <uart_aspeed_irq_callback_set+0x74>)
    2b12:	490c      	ldr	r1, [pc, #48]	; (2b44 <uart_aspeed_irq_callback_set+0x84>)
    2b14:	4809      	ldr	r0, [pc, #36]	; (2b3c <uart_aspeed_irq_callback_set+0x7c>)
    2b16:	f004 f8d1 	bl	6cbc <printk>
    2b1a:	4621      	mov	r1, r4
    2b1c:	480a      	ldr	r0, [pc, #40]	; (2b48 <uart_aspeed_irq_callback_set+0x88>)
    2b1e:	f004 f8cd 	bl	6cbc <printk>
    2b22:	21ac      	movs	r1, #172	; 0xac
    2b24:	4803      	ldr	r0, [pc, #12]	; (2b34 <uart_aspeed_irq_callback_set+0x74>)
    2b26:	f004 f993 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2b2a:	f387 8811 	msr	BASEPRI, r7
    2b2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&data->lock, key);
}
    2b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b34:	000082f4 	.word	0x000082f4
    2b38:	0000831a 	.word	0x0000831a
    2b3c:	00008182 	.word	0x00008182
    2b40:	0000832f 	.word	0x0000832f
    2b44:	00008347 	.word	0x00008347
    2b48:	0000835e 	.word	0x0000835e

00002b4c <udma_aspeed_isr>:

static void udma_aspeed_isr(void *null_ptr)
{
    2b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    2b50:	f04f 0320 	mov.w	r3, #32
    2b54:	f3ef 8811 	mrs	r8, BASEPRI
    2b58:	f383 8811 	msr	BASEPRI, r3
    2b5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b60:	4824      	ldr	r0, [pc, #144]	; (2bf4 <udma_aspeed_isr+0xa8>)
    2b62:	f000 fb65 	bl	3230 <z_spin_lock_valid>
    2b66:	b968      	cbnz	r0, 2b84 <udma_aspeed_isr+0x38>
    2b68:	2381      	movs	r3, #129	; 0x81
    2b6a:	4a23      	ldr	r2, [pc, #140]	; (2bf8 <udma_aspeed_isr+0xac>)
    2b6c:	4923      	ldr	r1, [pc, #140]	; (2bfc <udma_aspeed_isr+0xb0>)
    2b6e:	4824      	ldr	r0, [pc, #144]	; (2c00 <udma_aspeed_isr+0xb4>)
    2b70:	f004 f8a4 	bl	6cbc <printk>
    2b74:	491f      	ldr	r1, [pc, #124]	; (2bf4 <udma_aspeed_isr+0xa8>)
    2b76:	4823      	ldr	r0, [pc, #140]	; (2c04 <udma_aspeed_isr+0xb8>)
    2b78:	f004 f8a0 	bl	6cbc <printk>
    2b7c:	2181      	movs	r1, #129	; 0x81
    2b7e:	481e      	ldr	r0, [pc, #120]	; (2bf8 <udma_aspeed_isr+0xac>)
    2b80:	f004 f966 	bl	6e50 <assert_post_action>
	/* invoke registered callback if any TX/RX interrupt */
	tx_sts = sys_read32(udma_base + UDMA_TX_DMA_INT_STS);
	rx_sts = sys_read32(udma_base + UDMA_RX_DMA_INT_STS);
	sts = tx_sts | rx_sts;

	for (i = 0; i < UDMA_MAX_CHANNEL; ++i) {
    2b84:	2400      	movs	r4, #0
		if (!(sts & (0x1 << i)))
    2b86:	f04f 0a01 	mov.w	sl, #1
    2b8a:	4d1f      	ldr	r5, [pc, #124]	; (2c08 <udma_aspeed_isr+0xbc>)
	z_spin_lock_set_owner(l);
    2b8c:	4819      	ldr	r0, [pc, #100]	; (2bf4 <udma_aspeed_isr+0xa8>)
    2b8e:	f000 fb6b 	bl	3268 <z_spin_lock_set_owner>
    2b92:	6b6f      	ldr	r7, [r5, #52]	; 0x34
    2b94:	6bee      	ldr	r6, [r5, #60]	; 0x3c
			continue;

		if (!udma_udev[i])
    2b96:	f8df b074 	ldr.w	fp, [pc, #116]	; 2c0c <udma_aspeed_isr+0xc0>
	sts = tx_sts | rx_sts;
    2b9a:	ea46 0907 	orr.w	r9, r6, r7
		if (!(sts & (0x1 << i)))
    2b9e:	fa0a f304 	lsl.w	r3, sl, r4
    2ba2:	ea13 0f09 	tst.w	r3, r9
    2ba6:	d007      	beq.n	2bb8 <udma_aspeed_isr+0x6c>
		if (!udma_udev[i])
    2ba8:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    2bac:	b120      	cbz	r0, 2bb8 <udma_aspeed_isr+0x6c>
			continue;

		data = (struct uart_aspeed_data *)udma_udev[i]->data;
    2bae:	6902      	ldr	r2, [r0, #16]
		if (data->cb)
    2bb0:	69d3      	ldr	r3, [r2, #28]
    2bb2:	b10b      	cbz	r3, 2bb8 <udma_aspeed_isr+0x6c>
			data->cb(udma_udev[i], data->cb_data);
    2bb4:	6a11      	ldr	r1, [r2, #32]
    2bb6:	4798      	blx	r3
	for (i = 0; i < UDMA_MAX_CHANNEL; ++i) {
    2bb8:	3401      	adds	r4, #1
    2bba:	2c0e      	cmp	r4, #14
    2bbc:	d1ef      	bne.n	2b9e <udma_aspeed_isr+0x52>
	*(volatile uint32_t *)addr = data;
    2bbe:	636f      	str	r7, [r5, #52]	; 0x34
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2bc0:	480c      	ldr	r0, [pc, #48]	; (2bf4 <udma_aspeed_isr+0xa8>)
    2bc2:	63ee      	str	r6, [r5, #60]	; 0x3c
    2bc4:	f000 fb42 	bl	324c <z_spin_unlock_valid>
    2bc8:	b968      	cbnz	r0, 2be6 <udma_aspeed_isr+0x9a>
    2bca:	23ac      	movs	r3, #172	; 0xac
    2bcc:	4a0a      	ldr	r2, [pc, #40]	; (2bf8 <udma_aspeed_isr+0xac>)
    2bce:	4910      	ldr	r1, [pc, #64]	; (2c10 <udma_aspeed_isr+0xc4>)
    2bd0:	480b      	ldr	r0, [pc, #44]	; (2c00 <udma_aspeed_isr+0xb4>)
    2bd2:	f004 f873 	bl	6cbc <printk>
    2bd6:	4907      	ldr	r1, [pc, #28]	; (2bf4 <udma_aspeed_isr+0xa8>)
    2bd8:	480e      	ldr	r0, [pc, #56]	; (2c14 <udma_aspeed_isr+0xc8>)
    2bda:	f004 f86f 	bl	6cbc <printk>
    2bde:	21ac      	movs	r1, #172	; 0xac
    2be0:	4805      	ldr	r0, [pc, #20]	; (2bf8 <udma_aspeed_isr+0xac>)
    2be2:	f004 f935 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2be6:	f388 8811 	msr	BASEPRI, r8
    2bea:	f3bf 8f6f 	isb	sy

	sys_write32(tx_sts, udma_base + UDMA_TX_DMA_INT_STS);
	sys_write32(rx_sts, udma_base + UDMA_RX_DMA_INT_STS);

	k_spin_unlock(&udma_lock, key);
}
    2bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bf2:	bf00      	nop
    2bf4:	00009d00 	.word	0x00009d00
    2bf8:	000082f4 	.word	0x000082f4
    2bfc:	0000831a 	.word	0x0000831a
    2c00:	00008182 	.word	0x00008182
    2c04:	0000832f 	.word	0x0000832f
    2c08:	7e79e000 	.word	0x7e79e000
    2c0c:	00009d04 	.word	0x00009d04
    2c10:	00008347 	.word	0x00008347
    2c14:	0000835e 	.word	0x0000835e

00002c18 <uart_aspeed_configure>:
{
    2c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2c1c:	460c      	mov	r4, r1
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2c1e:	6905      	ldr	r5, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2c20:	6847      	ldr	r7, [r0, #4]
	__asm__ volatile(
    2c22:	f04f 0320 	mov.w	r3, #32
    2c26:	f3ef 8611 	mrs	r6, BASEPRI
    2c2a:	f383 8811 	msr	BASEPRI, r3
    2c2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2c32:	4628      	mov	r0, r5
    2c34:	f000 fafc 	bl	3230 <z_spin_lock_valid>
    2c38:	b968      	cbnz	r0, 2c56 <uart_aspeed_configure+0x3e>
    2c3a:	2381      	movs	r3, #129	; 0x81
    2c3c:	4a3c      	ldr	r2, [pc, #240]	; (2d30 <uart_aspeed_configure+0x118>)
    2c3e:	493d      	ldr	r1, [pc, #244]	; (2d34 <uart_aspeed_configure+0x11c>)
    2c40:	483d      	ldr	r0, [pc, #244]	; (2d38 <uart_aspeed_configure+0x120>)
    2c42:	f004 f83b 	bl	6cbc <printk>
    2c46:	4629      	mov	r1, r5
    2c48:	483c      	ldr	r0, [pc, #240]	; (2d3c <uart_aspeed_configure+0x124>)
    2c4a:	f004 f837 	bl	6cbc <printk>
    2c4e:	2181      	movs	r1, #129	; 0x81
    2c50:	4837      	ldr	r0, [pc, #220]	; (2d30 <uart_aspeed_configure+0x118>)
    2c52:	f004 f8fd 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    2c56:	4628      	mov	r0, r5
    2c58:	f000 fb06 	bl	3268 <z_spin_lock_set_owner>
			       dev_cfg->clk_id, &clk_rate);
    2c5c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2c60:	4640      	mov	r0, r8
    2c62:	f004 f98c 	bl	6f7e <z_device_ready>
    2c66:	b138      	cbz	r0, 2c78 <uart_aspeed_configure+0x60>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
    2c68:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2c6c:	68db      	ldr	r3, [r3, #12]
    2c6e:	b11b      	cbz	r3, 2c78 <uart_aspeed_configure+0x60>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
    2c70:	4649      	mov	r1, r9
    2c72:	4640      	mov	r0, r8
    2c74:	aa01      	add	r2, sp, #4
    2c76:	4798      	blx	r3
	divisor = clk_rate / (16 * uart_cfg->baudrate);
    2c78:	6823      	ldr	r3, [r4, #0]
    2c7a:	9901      	ldr	r1, [sp, #4]
    2c7c:	011b      	lsls	r3, r3, #4
    2c7e:	fbb1 f1f3 	udiv	r1, r1, r3
	reg = sys_read32(dev_cfg->base + UART_LCR);
    2c82:	687a      	ldr	r2, [r7, #4]
	return *(volatile uint32_t *)addr;
    2c84:	68d3      	ldr	r3, [r2, #12]
	reg |= UART_LCR_DLAB;
    2c86:	f043 0080 	orr.w	r0, r3, #128	; 0x80
	*(volatile uint32_t *)addr = data;
    2c8a:	60d0      	str	r0, [r2, #12]
	sys_write32(divisor & 0xf, dev_cfg->base + UART_DLL);
    2c8c:	f001 000f 	and.w	r0, r1, #15
	sys_write32(divisor >> 8, dev_cfg->base + UART_DLH);
    2c90:	0a09      	lsrs	r1, r1, #8
    2c92:	6010      	str	r0, [r2, #0]
    2c94:	6051      	str	r1, [r2, #4]
	switch (uart_cfg->data_bits) {
    2c96:	79a1      	ldrb	r1, [r4, #6]
    2c98:	f023 0387 	bic.w	r3, r3, #135	; 0x87
    2c9c:	2903      	cmp	r1, #3
    2c9e:	d843      	bhi.n	2d28 <uart_aspeed_configure+0x110>
    2ca0:	e8df f001 	tbb	[pc, r1]
    2ca4:	39360204 	.word	0x39360204
		reg |= ((0x1 << UART_LCR_CLS_SHIFT) & UART_LCR_CLS_MASK);
    2ca8:	f043 0301 	orr.w	r3, r3, #1
	switch (uart_cfg->stop_bits) {
    2cac:	7961      	ldrb	r1, [r4, #5]
    2cae:	2901      	cmp	r1, #1
    2cb0:	d003      	beq.n	2cba <uart_aspeed_configure+0xa2>
    2cb2:	2903      	cmp	r1, #3
    2cb4:	d138      	bne.n	2d28 <uart_aspeed_configure+0x110>
		reg |= UART_LCR_STOP;
    2cb6:	f043 0304 	orr.w	r3, r3, #4
	switch (uart_cfg->parity) {
    2cba:	7921      	ldrb	r1, [r4, #4]
    2cbc:	2901      	cmp	r1, #1
    2cbe:	d02d      	beq.n	2d1c <uart_aspeed_configure+0x104>
    2cc0:	2902      	cmp	r1, #2
    2cc2:	d02e      	beq.n	2d22 <uart_aspeed_configure+0x10a>
    2cc4:	bb81      	cbnz	r1, 2d28 <uart_aspeed_configure+0x110>
		reg &= ~(UART_LCR_PARITY_EN);
    2cc6:	f023 0308 	bic.w	r3, r3, #8
    2cca:	60d3      	str	r3, [r2, #12]
    2ccc:	2387      	movs	r3, #135	; 0x87
    2cce:	6093      	str	r3, [r2, #8]
	data->uart_cfg = *uart_cfg;
    2cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
	int rc = 0;
    2cd4:	2400      	movs	r4, #0
	data->uart_cfg = *uart_cfg;
    2cd6:	1d2b      	adds	r3, r5, #4
    2cd8:	e883 0003 	stmia.w	r3, {r0, r1}
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2cdc:	4628      	mov	r0, r5
    2cde:	f000 fab5 	bl	324c <z_spin_unlock_valid>
    2ce2:	b968      	cbnz	r0, 2d00 <uart_aspeed_configure+0xe8>
    2ce4:	23ac      	movs	r3, #172	; 0xac
    2ce6:	4a12      	ldr	r2, [pc, #72]	; (2d30 <uart_aspeed_configure+0x118>)
    2ce8:	4915      	ldr	r1, [pc, #84]	; (2d40 <uart_aspeed_configure+0x128>)
    2cea:	4813      	ldr	r0, [pc, #76]	; (2d38 <uart_aspeed_configure+0x120>)
    2cec:	f003 ffe6 	bl	6cbc <printk>
    2cf0:	4629      	mov	r1, r5
    2cf2:	4814      	ldr	r0, [pc, #80]	; (2d44 <uart_aspeed_configure+0x12c>)
    2cf4:	f003 ffe2 	bl	6cbc <printk>
    2cf8:	21ac      	movs	r1, #172	; 0xac
    2cfa:	480d      	ldr	r0, [pc, #52]	; (2d30 <uart_aspeed_configure+0x118>)
    2cfc:	f004 f8a8 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2d00:	f386 8811 	msr	BASEPRI, r6
    2d04:	f3bf 8f6f 	isb	sy
};
    2d08:	4620      	mov	r0, r4
    2d0a:	b003      	add	sp, #12
    2d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reg |= ((0x2 << UART_LCR_CLS_SHIFT) & UART_LCR_CLS_MASK);
    2d10:	f043 0302 	orr.w	r3, r3, #2
		break;
    2d14:	e7ca      	b.n	2cac <uart_aspeed_configure+0x94>
		reg |= ((0x3 << UART_LCR_CLS_SHIFT) & UART_LCR_CLS_MASK);
    2d16:	f043 0303 	orr.w	r3, r3, #3
		break;
    2d1a:	e7c7      	b.n	2cac <uart_aspeed_configure+0x94>
		reg |= UART_LCR_PARITY_EN;
    2d1c:	f043 0308 	orr.w	r3, r3, #8
		break;
    2d20:	e7d3      	b.n	2cca <uart_aspeed_configure+0xb2>
		reg |= (UART_LCR_PARITY_EN | UART_LCR_PARITY_MODE);
    2d22:	f043 0318 	orr.w	r3, r3, #24
		break;
    2d26:	e7d0      	b.n	2cca <uart_aspeed_configure+0xb2>
	switch (uart_cfg->parity) {
    2d28:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2d2c:	e7d6      	b.n	2cdc <uart_aspeed_configure+0xc4>
    2d2e:	bf00      	nop
    2d30:	000082f4 	.word	0x000082f4
    2d34:	0000831a 	.word	0x0000831a
    2d38:	00008182 	.word	0x00008182
    2d3c:	0000832f 	.word	0x0000832f
    2d40:	00008347 	.word	0x00008347
    2d44:	0000835e 	.word	0x0000835e

00002d48 <uart_aspeed_init>:
	if (data->cb)
		data->cb(dev, data->cb_data);
}

static int uart_aspeed_init(const struct device *dev)
{
    2d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
	struct uart_config *uart_cfg = &data->uart_cfg;

	data->iir_cache = 0;
    2d4c:	2300      	movs	r3, #0
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2d4e:	6906      	ldr	r6, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2d50:	6845      	ldr	r5, [r0, #4]
{
    2d52:	4607      	mov	r7, r0
	data->cb = NULL;
	data->cb_data = NULL;

	clock_control_on(dev_cfg->clock_dev, dev_cfg->clk_id);
    2d54:	e9d5 4902 	ldrd	r4, r9, [r5, #8]
	data->cb_data = NULL;
    2d58:	e9c6 3307 	strd	r3, r3, [r6, #28]
	struct uart_config *uart_cfg = &data->uart_cfg;
    2d5c:	f106 0804 	add.w	r8, r6, #4
	data->iir_cache = 0;
    2d60:	6273      	str	r3, [r6, #36]	; 0x24
    2d62:	4620      	mov	r0, r4
    2d64:	f004 f90b 	bl	6f7e <z_device_ready>
    2d68:	b120      	cbz	r0, 2d74 <uart_aspeed_init+0x2c>
	return api->on(dev, sys);
    2d6a:	68a3      	ldr	r3, [r4, #8]
    2d6c:	4649      	mov	r1, r9
    2d6e:	4620      	mov	r0, r4
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	4798      	blx	r3

	if (dev_cfg->dma) {
    2d74:	f895 3020 	ldrb.w	r3, [r5, #32]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d063      	beq.n	2e44 <uart_aspeed_init+0xfc>
	if (udma_init)
    2d7c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 2e98 <uart_aspeed_init+0x150>
    2d80:	4c46      	ldr	r4, [pc, #280]	; (2e9c <uart_aspeed_init+0x154>)
    2d82:	f899 3000 	ldrb.w	r3, [r9]
    2d86:	b9fb      	cbnz	r3, 2dc8 <uart_aspeed_init+0x80>
    2d88:	4a45      	ldr	r2, [pc, #276]	; (2ea0 <uart_aspeed_init+0x158>)
	for (i = 0; i < UDMA_MAX_CHANNEL; ++i) {
    2d8a:	4946      	ldr	r1, [pc, #280]	; (2ea4 <uart_aspeed_init+0x15c>)
    2d8c:	6023      	str	r3, [r4, #0]
    2d8e:	6063      	str	r3, [r4, #4]
    2d90:	60a3      	str	r3, [r4, #8]
    2d92:	6013      	str	r3, [r2, #0]
    2d94:	60d3      	str	r3, [r2, #12]
    2d96:	3220      	adds	r2, #32
    2d98:	428a      	cmp	r2, r1
    2d9a:	d1fa      	bne.n	2d92 <uart_aspeed_init+0x4a>
    2d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2da0:	6362      	str	r2, [r4, #52]	; 0x34
    2da2:	6222      	str	r2, [r4, #32]
    2da4:	6223      	str	r3, [r4, #32]
    2da6:	63e2      	str	r2, [r4, #60]	; 0x3c
    2da8:	6262      	str	r2, [r4, #36]	; 0x24
    2daa:	6263      	str	r3, [r4, #36]	; 0x24
    2dac:	f44f 7300 	mov.w	r3, #512	; 0x200
	IRQ_CONNECT(DT_IRQ_BY_IDX(DT_INST(0, aspeed_udma), 0, irq),
    2db0:	2200      	movs	r2, #0
    2db2:	60e3      	str	r3, [r4, #12]
    2db4:	2101      	movs	r1, #1
    2db6:	2038      	movs	r0, #56	; 0x38
    2db8:	f7fe fcbe 	bl	1738 <z_arm_irq_priority_set>
	irq_enable(DT_IRQ_BY_IDX(DT_INST(0, aspeed_udma), 0, irq));
    2dbc:	2038      	movs	r0, #56	; 0x38
    2dbe:	f7fe fcad 	bl	171c <arch_irq_enable>
	udma_init = true;
    2dc2:	2301      	movs	r3, #1
    2dc4:	f889 3000 	strb.w	r3, [r9]
		udma_aspeed_init();

		udma_udev[dev_cfg->dma_ch] = dev;
    2dc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2dca:	4b37      	ldr	r3, [pc, #220]	; (2ea8 <uart_aspeed_init+0x160>)

		/* TX DMA init */
		data->tx_rb = udma_tx_rb[dev_cfg->dma_ch];
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2dcc:	4937      	ldr	r1, [pc, #220]	; (2eac <uart_aspeed_init+0x164>)
		udma_udev[dev_cfg->dma_ch] = dev;
    2dce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
		data->tx_rb = udma_tx_rb[dev_cfg->dma_ch];
    2dd2:	4b37      	ldr	r3, [pc, #220]	; (2eb0 <uart_aspeed_init+0x168>)
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2dd4:	f8d1 0a04 	ldr.w	r0, [r1, #2564]	; 0xa04
		data->tx_rb = udma_tx_rb[dev_cfg->dma_ch];
    2dd8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
    2ddc:	60f3      	str	r3, [r6, #12]
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2dde:	4403      	add	r3, r0
		sys_write32(data->tx_rb_addr, udma_base + UDMA_CHX_TX_BUF_BASE(dev_cfg->dma_ch));
    2de0:	4834      	ldr	r0, [pc, #208]	; (2eb4 <uart_aspeed_init+0x16c>)
    2de2:	0152      	lsls	r2, r2, #5
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2de4:	6133      	str	r3, [r6, #16]
    2de6:	5013      	str	r3, [r2, r0]

		reg = sys_read32(udma_base + UDMA_CHX_TX_CTRL(dev_cfg->dma_ch));
    2de8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2dea:	4a33      	ldr	r2, [pc, #204]	; (2eb8 <uart_aspeed_init+0x170>)
    2dec:	015b      	lsls	r3, r3, #5
	return *(volatile uint32_t *)addr;
    2dee:	5898      	ldr	r0, [r3, r2]
	*(volatile uint32_t *)addr = data;
    2df0:	5098      	str	r0, [r3, r2]
		reg |= (UDMA_BUFSZ_1KB << UDMA_TX_CTRL_BUFSZ_SHIFT) & UDMA_TX_CTRL_BUFSZ_MASK;
		sys_write32(reg, udma_base + UDMA_CHX_TX_CTRL(dev_cfg->dma_ch));

		reg = sys_read32(udma_base + UDMA_TX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    2df2:	2301      	movs	r3, #1
    2df4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2df6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2df8:	fa03 f202 	lsl.w	r2, r3, r2
    2dfc:	4302      	orrs	r2, r0
	*(volatile uint32_t *)addr = data;
    2dfe:	6322      	str	r2, [r4, #48]	; 0x30
		sys_write32(reg, udma_base + UDMA_TX_DMA_INT_EN);

		reg = sys_read32(udma_base + UDMA_TX_DMA_EN) | (0x1 << dev_cfg->dma_ch);
    2e00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2e02:	6820      	ldr	r0, [r4, #0]
    2e04:	fa03 f202 	lsl.w	r2, r3, r2
    2e08:	4302      	orrs	r2, r0
	*(volatile uint32_t *)addr = data;
    2e0a:	6022      	str	r2, [r4, #0]
		sys_write32(reg, udma_base + UDMA_TX_DMA_EN);

		/* RX DMA init */
		data->rx_rb = udma_rx_rb[dev_cfg->dma_ch];
    2e0c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2e0e:	4a2b      	ldr	r2, [pc, #172]	; (2ebc <uart_aspeed_init+0x174>)
		data->rx_rb_addr = TO_PHY_ADDR(data->rx_rb);
    2e10:	f8d1 1a04 	ldr.w	r1, [r1, #2564]	; 0xa04
		data->rx_rb = udma_rx_rb[dev_cfg->dma_ch];
    2e14:	eb02 2280 	add.w	r2, r2, r0, lsl #10
    2e18:	6172      	str	r2, [r6, #20]
		data->rx_rb_addr = TO_PHY_ADDR(data->rx_rb);
    2e1a:	440a      	add	r2, r1
		sys_write32(data->rx_rb_addr, udma_base + UDMA_CHX_RX_BUF_BASE(dev_cfg->dma_ch));
    2e1c:	4928      	ldr	r1, [pc, #160]	; (2ec0 <uart_aspeed_init+0x178>)
    2e1e:	0140      	lsls	r0, r0, #5
		data->rx_rb_addr = TO_PHY_ADDR(data->rx_rb);
    2e20:	61b2      	str	r2, [r6, #24]
    2e22:	5042      	str	r2, [r0, r1]

		reg = sys_read32(udma_base + UDMA_CHX_RX_CTRL(dev_cfg->dma_ch));
    2e24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2e26:	3104      	adds	r1, #4
    2e28:	0152      	lsls	r2, r2, #5
	return *(volatile uint32_t *)addr;
    2e2a:	5850      	ldr	r0, [r2, r1]
	*(volatile uint32_t *)addr = data;
    2e2c:	5050      	str	r0, [r2, r1]
		reg |= (UDMA_BUFSZ_1KB << UDMA_RX_CTRL_BUFSZ_SHIFT) & UDMA_RX_CTRL_BUFSZ_MASK;
		sys_write32(reg, udma_base + UDMA_CHX_RX_CTRL(dev_cfg->dma_ch));

		reg = sys_read32(udma_base + UDMA_RX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    2e2e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2e30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2e32:	fa03 f202 	lsl.w	r2, r3, r2
    2e36:	430a      	orrs	r2, r1
	*(volatile uint32_t *)addr = data;
    2e38:	63a2      	str	r2, [r4, #56]	; 0x38
		sys_write32(reg, udma_base + UDMA_RX_DMA_INT_EN);

		reg = sys_read32(udma_base + UDMA_RX_DMA_EN) | (0x1 << dev_cfg->dma_ch);
    2e3a:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2e3c:	6862      	ldr	r2, [r4, #4]
    2e3e:	408b      	lsls	r3, r1
    2e40:	4313      	orrs	r3, r2
	*(volatile uint32_t *)addr = data;
    2e42:	6063      	str	r3, [r4, #4]
		sys_write32(reg, udma_base + UDMA_RX_DMA_EN);
	}

	if (dev_cfg->virt) {
    2e44:	7c2b      	ldrb	r3, [r5, #16]
    2e46:	b1b3      	cbz	r3, 2e76 <uart_aspeed_init+0x12e>
		sys_write32((dev_cfg->virt_port >> 0), dev_cfg->base + VUART_ADDRL);
    2e48:	686a      	ldr	r2, [r5, #4]
    2e4a:	696b      	ldr	r3, [r5, #20]
    2e4c:	6293      	str	r3, [r2, #40]	; 0x28
		sys_write32((dev_cfg->virt_port >> 8), dev_cfg->base + VUART_ADDRH);
    2e4e:	0a1b      	lsrs	r3, r3, #8
    2e50:	62d3      	str	r3, [r2, #44]	; 0x2c

		reg = sys_read32(dev_cfg->base + VUART_GCRB) & ~VUART_GCRB_HOST_SIRQ_MASK;
		reg |= ((dev_cfg->virt_sirq << VUART_GCRB_HOST_SIRQ_SHIFT) &
    2e52:	69ab      	ldr	r3, [r5, #24]
	return *(volatile uint32_t *)addr;
    2e54:	6a51      	ldr	r1, [r2, #36]	; 0x24
    2e56:	011b      	lsls	r3, r3, #4
		reg = sys_read32(dev_cfg->base + VUART_GCRB) & ~VUART_GCRB_HOST_SIRQ_MASK;
    2e58:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
		reg |= ((dev_cfg->virt_sirq << VUART_GCRB_HOST_SIRQ_SHIFT) &
    2e5c:	b2db      	uxtb	r3, r3
    2e5e:	430b      	orrs	r3, r1
	*(volatile uint32_t *)addr = data;
    2e60:	6253      	str	r3, [r2, #36]	; 0x24
		sys_write32(reg, dev_cfg->base + VUART_GCRB);

		reg = sys_read32(dev_cfg->base + VUART_GCRA) |
				 VUART_GCRA_DISABLE_HOST_TX_DISCARD |
				 VUART_GCRA_VUART_EN |
				 ((dev_cfg->virt_sirq_pol) ? VUART_GCRA_SIRQ_POLARITY : 0);
    2e62:	69e9      	ldr	r1, [r5, #28]
	return *(volatile uint32_t *)addr;
    2e64:	6a13      	ldr	r3, [r2, #32]
    2e66:	3900      	subs	r1, #0
    2e68:	bf18      	it	ne
    2e6a:	2101      	movne	r1, #1
				 VUART_GCRA_VUART_EN |
    2e6c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
		reg = sys_read32(dev_cfg->base + VUART_GCRA) |
    2e70:	f043 0321 	orr.w	r3, r3, #33	; 0x21
	*(volatile uint32_t *)addr = data;
    2e74:	6213      	str	r3, [r2, #32]
		sys_write32(reg, dev_cfg->base + VUART_GCRA);
	}

	uart_cfg->baudrate = 115200;
	uart_cfg->parity = UART_CFG_PARITY_NONE;
    2e76:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2e7a:	4b12      	ldr	r3, [pc, #72]	; (2ec4 <uart_aspeed_init+0x17c>)
	uart_cfg->stop_bits = UART_CFG_STOP_BITS_1;
	uart_cfg->data_bits = UART_CFG_DATA_BITS_8;
	uart_cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;

	rc = uart_aspeed_configure(dev, uart_cfg);
    2e7c:	4641      	mov	r1, r8
	uart_cfg->parity = UART_CFG_PARITY_NONE;
    2e7e:	e9c6 2301 	strd	r2, r3, [r6, #4]
	rc = uart_aspeed_configure(dev, uart_cfg);
    2e82:	4638      	mov	r0, r7
    2e84:	f7ff fec8 	bl	2c18 <uart_aspeed_configure>
    2e88:	4604      	mov	r4, r0

	dev_cfg->irq_config_func(dev);
    2e8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e8c:	4638      	mov	r0, r7
    2e8e:	4798      	blx	r3

	return rc;
}
    2e90:	4620      	mov	r0, r4
    2e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e96:	bf00      	nop
    2e98:	00009da8 	.word	0x00009da8
    2e9c:	7e79e000 	.word	0x7e79e000
    2ea0:	7e79e044 	.word	0x7e79e044
    2ea4:	7e79e204 	.word	0x7e79e204
    2ea8:	00009d04 	.word	0x00009d04
    2eac:	7e6e2000 	.word	0x7e6e2000
    2eb0:	01003800 	.word	0x01003800
    2eb4:	7e79e048 	.word	0x7e79e048
    2eb8:	7e79e04c 	.word	0x7e79e04c
    2ebc:	01000000 	.word	0x01000000
    2ec0:	7e79e058 	.word	0x7e79e058
    2ec4:	00030100 	.word	0x00030100

00002ec8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2ec8:	4b0e      	ldr	r3, [pc, #56]	; (2f04 <z_sys_init_run_level+0x3c>)
{
    2eca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2ecc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2ed0:	3001      	adds	r0, #1
    2ed2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2ed6:	42a6      	cmp	r6, r4
    2ed8:	d800      	bhi.n	2edc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2eda:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2edc:	e9d4 3500 	ldrd	r3, r5, [r4]
    2ee0:	4628      	mov	r0, r5
    2ee2:	4798      	blx	r3
		if (dev != NULL) {
    2ee4:	b165      	cbz	r5, 2f00 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    2ee6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    2ee8:	b130      	cbz	r0, 2ef8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2eea:	2800      	cmp	r0, #0
    2eec:	bfb8      	it	lt
    2eee:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    2ef0:	28ff      	cmp	r0, #255	; 0xff
    2ef2:	bfa8      	it	ge
    2ef4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    2ef6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2ef8:	785a      	ldrb	r2, [r3, #1]
    2efa:	f042 0201 	orr.w	r2, r2, #1
    2efe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2f00:	3408      	adds	r4, #8
    2f02:	e7e8      	b.n	2ed6 <z_sys_init_run_level+0xe>
    2f04:	00007fd4 	.word	0x00007fd4

00002f08 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    2f08:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    2f0a:	4605      	mov	r5, r0
    2f0c:	b910      	cbnz	r0, 2f14 <z_impl_device_get_binding+0xc>
		return NULL;
    2f0e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    2f10:	4620      	mov	r0, r4
    2f12:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    2f14:	7803      	ldrb	r3, [r0, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d0f9      	beq.n	2f0e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f1a:	4c0e      	ldr	r4, [pc, #56]	; (2f54 <z_impl_device_get_binding+0x4c>)
    2f1c:	4e0e      	ldr	r6, [pc, #56]	; (2f58 <z_impl_device_get_binding+0x50>)
    2f1e:	42b4      	cmp	r4, r6
    2f20:	d108      	bne.n	2f34 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f22:	4c0c      	ldr	r4, [pc, #48]	; (2f54 <z_impl_device_get_binding+0x4c>)
    2f24:	42b4      	cmp	r4, r6
    2f26:	d0f2      	beq.n	2f0e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2f28:	4620      	mov	r0, r4
    2f2a:	f004 f828 	bl	6f7e <z_device_ready>
    2f2e:	b950      	cbnz	r0, 2f46 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f30:	3418      	adds	r4, #24
    2f32:	e7f7      	b.n	2f24 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    2f34:	4620      	mov	r0, r4
    2f36:	f004 f822 	bl	6f7e <z_device_ready>
    2f3a:	b110      	cbz	r0, 2f42 <z_impl_device_get_binding+0x3a>
    2f3c:	6823      	ldr	r3, [r4, #0]
    2f3e:	42ab      	cmp	r3, r5
    2f40:	d0e6      	beq.n	2f10 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f42:	3418      	adds	r4, #24
    2f44:	e7eb      	b.n	2f1e <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2f46:	4628      	mov	r0, r5
    2f48:	6821      	ldr	r1, [r4, #0]
    2f4a:	f7fd fbd3 	bl	6f4 <strcmp>
    2f4e:	2800      	cmp	r0, #0
    2f50:	d1ee      	bne.n	2f30 <z_impl_device_get_binding+0x28>
    2f52:	e7dd      	b.n	2f10 <z_impl_device_get_binding+0x8>
    2f54:	000099dc 	.word	0x000099dc
    2f58:	00009a54 	.word	0x00009a54

00002f5c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f5e:	4605      	mov	r5, r0
    2f60:	460c      	mov	r4, r1
	__asm__ volatile(
    2f62:	f04f 0320 	mov.w	r3, #32
    2f66:	f3ef 8711 	mrs	r7, BASEPRI
    2f6a:	f383 8811 	msr	BASEPRI, r3
    2f6e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    2f72:	f001 fc91 	bl	4898 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    2f76:	4621      	mov	r1, r4
    2f78:	4606      	mov	r6, r0
    2f7a:	4628      	mov	r0, r5
    2f7c:	f004 f812 	bl	6fa4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    2f80:	2d04      	cmp	r5, #4
    2f82:	d127      	bne.n	2fd4 <z_fatal_error+0x78>
    2f84:	4918      	ldr	r1, [pc, #96]	; (2fe8 <z_fatal_error+0x8c>)
    2f86:	238f      	movs	r3, #143	; 0x8f
    2f88:	4a18      	ldr	r2, [pc, #96]	; (2fec <z_fatal_error+0x90>)
    2f8a:	4819      	ldr	r0, [pc, #100]	; (2ff0 <z_fatal_error+0x94>)
    2f8c:	f003 fe96 	bl	6cbc <printk>
    2f90:	4818      	ldr	r0, [pc, #96]	; (2ff4 <z_fatal_error+0x98>)
    2f92:	f003 fe93 	bl	6cbc <printk>
    2f96:	218f      	movs	r1, #143	; 0x8f
    2f98:	4814      	ldr	r0, [pc, #80]	; (2fec <z_fatal_error+0x90>)
    2f9a:	f003 ff59 	bl	6e50 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    2f9e:	b184      	cbz	r4, 2fc2 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    2fa0:	69e3      	ldr	r3, [r4, #28]
    2fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2fa6:	b163      	cbz	r3, 2fc2 <z_fatal_error+0x66>
#if defined(CONFIG_STACK_SENTINEL)
			if (reason != K_ERR_STACK_CHK_FAIL) {
				__ASSERT(0,
    2fa8:	4913      	ldr	r1, [pc, #76]	; (2ff8 <z_fatal_error+0x9c>)
    2faa:	2396      	movs	r3, #150	; 0x96
    2fac:	4a0f      	ldr	r2, [pc, #60]	; (2fec <z_fatal_error+0x90>)
    2fae:	4810      	ldr	r0, [pc, #64]	; (2ff0 <z_fatal_error+0x94>)
    2fb0:	f003 fe84 	bl	6cbc <printk>
    2fb4:	4811      	ldr	r0, [pc, #68]	; (2ffc <z_fatal_error+0xa0>)
    2fb6:	f003 fe81 	bl	6cbc <printk>
    2fba:	2196      	movs	r1, #150	; 0x96
    2fbc:	480b      	ldr	r0, [pc, #44]	; (2fec <z_fatal_error+0x90>)
    2fbe:	f003 ff47 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    2fc2:	f387 8811 	msr	BASEPRI, r7
    2fc6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    2fca:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    2fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2fd0:	f7fe bd90 	b.w	1af4 <z_impl_k_thread_abort>
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    2fd4:	2c00      	cmp	r4, #0
    2fd6:	d0f4      	beq.n	2fc2 <z_fatal_error+0x66>
    2fd8:	69e3      	ldr	r3, [r4, #28]
    2fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d0ef      	beq.n	2fc2 <z_fatal_error+0x66>
			if (reason != K_ERR_STACK_CHK_FAIL) {
    2fe2:	2d02      	cmp	r5, #2
    2fe4:	d0ed      	beq.n	2fc2 <z_fatal_error+0x66>
    2fe6:	e7df      	b.n	2fa8 <z_fatal_error+0x4c>
    2fe8:	0000865e 	.word	0x0000865e
    2fec:	0000863c 	.word	0x0000863c
    2ff0:	00008182 	.word	0x00008182
    2ff4:	0000867b 	.word	0x0000867b
    2ff8:	00008901 	.word	0x00008901
    2ffc:	000086b0 	.word	0x000086b0

00003000 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3000:	4802      	ldr	r0, [pc, #8]	; (300c <z_bss_zero+0xc>)
    3002:	4a03      	ldr	r2, [pc, #12]	; (3010 <z_bss_zero+0x10>)
    3004:	2100      	movs	r1, #0
    3006:	1a12      	subs	r2, r2, r0
    3008:	f004 b9b0 	b.w	736c <memset>
    300c:	00009a58 	.word	0x00009a58
    3010:	00009dac 	.word	0x00009dac

00003014 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3014:	2201      	movs	r2, #1
{
    3016:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3018:	4b0b      	ldr	r3, [pc, #44]	; (3048 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    301a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    301c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    301e:	f7ff ff53 	bl	2ec8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3022:	f002 f859 	bl	50d8 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
    3026:	f7fe f8bf 	bl	11a8 <__do_global_ctors_aux>
	__do_init_array_aux();
    302a:	f7fe f8af 	bl	118c <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    302e:	2003      	movs	r0, #3
    3030:	f7ff ff4a 	bl	2ec8 <z_sys_init_run_level>

	z_init_static_threads();
    3034:	f000 fa8e 	bl	3554 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    3038:	f7fd fb6e 	bl	718 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    303c:	4a03      	ldr	r2, [pc, #12]	; (304c <bg_thread_main+0x38>)
    303e:	7b13      	ldrb	r3, [r2, #12]
    3040:	f023 0301 	bic.w	r3, r3, #1
    3044:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3046:	bd08      	pop	{r3, pc}
    3048:	00009da9 	.word	0x00009da9
    304c:	00009b10 	.word	0x00009b10

00003050 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3050:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3054:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 3140 <z_cstart+0xf0>
    3058:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    305a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    305e:	4d39      	ldr	r5, [pc, #228]	; (3144 <z_cstart+0xf4>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3060:	2400      	movs	r4, #0
    3062:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3064:	f04f 0a01 	mov.w	sl, #1
    3068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    306c:	616b      	str	r3, [r5, #20]
    306e:	23e0      	movs	r3, #224	; 0xe0
    3070:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3074:	77ec      	strb	r4, [r5, #31]
    3076:	762c      	strb	r4, [r5, #24]
    3078:	766c      	strb	r4, [r5, #25]
    307a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    307c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    307e:	4e32      	ldr	r6, [pc, #200]	; (3148 <z_cstart+0xf8>)
    3080:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3084:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3086:	f7fe fd0d 	bl	1aa4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    308a:	f7fe fbb5 	bl	17f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    308e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3092:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3094:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3096:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    309a:	4d2c      	ldr	r5, [pc, #176]	; (314c <z_cstart+0xfc>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    309c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	_current_cpu->current = dummy_thread;
    30a0:	ab0a      	add	r3, sp, #40	; 0x28
    30a2:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    30a4:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    30a8:	f003 ff68 	bl	6f7c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    30ac:	4620      	mov	r0, r4
    30ae:	f7ff ff0b 	bl	2ec8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    30b2:	2001      	movs	r0, #1
    30b4:	f7ff ff08 	bl	2ec8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30b8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3150 <z_cstart+0x100>
	z_sched_init();
    30bc:	f001 fb3e 	bl	473c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30c0:	4b24      	ldr	r3, [pc, #144]	; (3154 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
    30c2:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    30c8:	4923      	ldr	r1, [pc, #140]	; (3158 <z_cstart+0x108>)
    30ca:	9305      	str	r3, [sp, #20]
    30cc:	4630      	mov	r0, r6
    30ce:	4643      	mov	r3, r8
    30d0:	e9cd 4a03 	strd	r4, sl, [sp, #12]
    30d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    30d8:	9400      	str	r4, [sp, #0]
    30da:	f000 f923 	bl	3324 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    30de:	7b73      	ldrb	r3, [r6, #13]
    30e0:	9007      	str	r0, [sp, #28]
    30e2:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    30e6:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
    30e8:	f10d 0b20 	add.w	fp, sp, #32
    30ec:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    30ee:	f000 fdcb 	bl	3c88 <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
    30f2:	4623      	mov	r3, r4
    30f4:	2108      	movs	r1, #8
    30f6:	4a19      	ldr	r2, [pc, #100]	; (315c <z_cstart+0x10c>)
    30f8:	4658      	mov	r0, fp
    30fa:	f003 fdec 	bl	6cd6 <snprintk>
	z_setup_new_thread(thread, stack,
    30fe:	2338      	movs	r3, #56	; 0x38
    3100:	4f17      	ldr	r7, [pc, #92]	; (3160 <z_cstart+0x110>)
    3102:	f44f 7280 	mov.w	r2, #256	; 0x100
    3106:	e9cd 4302 	strd	r4, r3, [sp, #8]
    310a:	4916      	ldr	r1, [pc, #88]	; (3164 <z_cstart+0x114>)
    310c:	4b16      	ldr	r3, [pc, #88]	; (3168 <z_cstart+0x118>)
    310e:	4638      	mov	r0, r7
    3110:	e9cd ab04 	strd	sl, fp, [sp, #16]
    3114:	e9cd 5400 	strd	r5, r4, [sp]
    3118:	f000 f904 	bl	3324 <z_setup_new_thread>
    311c:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    311e:	4642      	mov	r2, r8
    3120:	f023 0304 	bic.w	r3, r3, #4
    3124:	737b      	strb	r3, [r7, #13]
    3126:	4630      	mov	r0, r6
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3128:	f105 0318 	add.w	r3, r5, #24
    312c:	9907      	ldr	r1, [sp, #28]
	list->tail = (sys_dnode_t *)list;
    312e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3132:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    3134:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    3136:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    313a:	f7fe fb4b 	bl	17d4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    313e:	bf00      	nop
    3140:	0000b6b0 	.word	0x0000b6b0
    3144:	e000ed00 	.word	0xe000ed00
    3148:	00009b10 	.word	0x00009b10
    314c:	00009d3c 	.word	0x00009d3c
    3150:	00003015 	.word	0x00003015
    3154:	000086e1 	.word	0x000086e1
    3158:	00009eb0 	.word	0x00009eb0
    315c:	000086e6 	.word	0x000086e6
    3160:	00009a58 	.word	0x00009a58
    3164:	00009db0 	.word	0x00009db0
    3168:	00003649 	.word	0x00003649

0000316c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    316e:	4c16      	ldr	r4, [pc, #88]	; (31c8 <init_mem_slab_module+0x5c>)
    3170:	4d16      	ldr	r5, [pc, #88]	; (31cc <init_mem_slab_module+0x60>)
    3172:	4e17      	ldr	r6, [pc, #92]	; (31d0 <init_mem_slab_module+0x64>)
    3174:	42ac      	cmp	r4, r5
    3176:	d90c      	bls.n	3192 <init_mem_slab_module+0x26>
    3178:	4916      	ldr	r1, [pc, #88]	; (31d4 <init_mem_slab_module+0x68>)
    317a:	233c      	movs	r3, #60	; 0x3c
    317c:	4632      	mov	r2, r6
    317e:	4816      	ldr	r0, [pc, #88]	; (31d8 <init_mem_slab_module+0x6c>)
    3180:	f003 fd9c 	bl	6cbc <printk>
    3184:	4815      	ldr	r0, [pc, #84]	; (31dc <init_mem_slab_module+0x70>)
    3186:	f003 fd99 	bl	6cbc <printk>
    318a:	213c      	movs	r1, #60	; 0x3c
    318c:	4630      	mov	r0, r6
    318e:	f003 fe5f 	bl	6e50 <assert_post_action>
    3192:	42ac      	cmp	r4, r5
    3194:	d301      	bcc.n	319a <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3196:	2000      	movs	r0, #0
	return rc;
}
    3198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    319a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    319e:	ea42 0301 	orr.w	r3, r2, r1
    31a2:	f013 0303 	ands.w	r3, r3, #3
    31a6:	d10b      	bne.n	31c0 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    31a8:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    31aa:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    31ac:	4283      	cmp	r3, r0
    31ae:	d101      	bne.n	31b4 <init_mem_slab_module+0x48>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    31b0:	3420      	adds	r4, #32
    31b2:	e7df      	b.n	3174 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    31b4:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    31b6:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    31b8:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    31ba:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    31bc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    31be:	e7f5      	b.n	31ac <init_mem_slab_module+0x40>
	return rc;
    31c0:	f06f 0015 	mvn.w	r0, #21
    31c4:	e7e8      	b.n	3198 <init_mem_slab_module+0x2c>
    31c6:	bf00      	nop
    31c8:	00009a54 	.word	0x00009a54
    31cc:	00009a54 	.word	0x00009a54
    31d0:	000086f0 	.word	0x000086f0
    31d4:	00008715 	.word	0x00008715
    31d8:	00008182 	.word	0x00008182
    31dc:	00008732 	.word	0x00008732

000031e0 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    31e0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    31e2:	4604      	mov	r4, r0
    31e4:	b908      	cbnz	r0, 31ea <z_impl_k_thread_name_set+0xa>
		thread = _current;
    31e6:	4b05      	ldr	r3, [pc, #20]	; (31fc <z_impl_k_thread_name_set+0x1c>)
    31e8:	689c      	ldr	r4, [r3, #8]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    31ea:	221f      	movs	r2, #31
    31ec:	f104 0078 	add.w	r0, r4, #120	; 0x78
    31f0:	f004 f9ca 	bl	7588 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    31f4:	2000      	movs	r0, #0
    31f6:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    31fa:	bd10      	pop	{r4, pc}
    31fc:	00009d3c 	.word	0x00009d3c

00003200 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
    3200:	4b0a      	ldr	r3, [pc, #40]	; (322c <z_check_stack_sentinel+0x2c>)
    3202:	689b      	ldr	r3, [r3, #8]
    3204:	7b5a      	ldrb	r2, [r3, #13]
    3206:	07d2      	lsls	r2, r2, #31
    3208:	d40e      	bmi.n	3228 <z_check_stack_sentinel+0x28>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
    320a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	if (*stack != STACK_SENTINEL) {
    320e:	681a      	ldr	r2, [r3, #0]
    3210:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
    3214:	d008      	beq.n	3228 <z_check_stack_sentinel+0x28>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
    3216:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
    321a:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
    321c:	4040      	eors	r0, r0
    321e:	f380 8811 	msr	BASEPRI, r0
    3222:	f04f 0002 	mov.w	r0, #2
    3226:	df02      	svc	2
	}
}
    3228:	4770      	bx	lr
    322a:	bf00      	nop
    322c:	00009d3c 	.word	0x00009d3c

00003230 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    3230:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    3232:	b138      	cbz	r0, 3244 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    3234:	4b04      	ldr	r3, [pc, #16]	; (3248 <z_spin_lock_valid+0x18>)
    3236:	f000 0003 	and.w	r0, r0, #3
    323a:	7d1b      	ldrb	r3, [r3, #20]
    323c:	1ac0      	subs	r0, r0, r3
    323e:	bf18      	it	ne
    3240:	2001      	movne	r0, #1
    3242:	4770      	bx	lr
			return false;
		}
	}
	return true;
    3244:	2001      	movs	r0, #1
}
    3246:	4770      	bx	lr
    3248:	00009d3c 	.word	0x00009d3c

0000324c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    324c:	4a05      	ldr	r2, [pc, #20]	; (3264 <z_spin_unlock_valid+0x18>)
{
    324e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3250:	7d11      	ldrb	r1, [r2, #20]
    3252:	6892      	ldr	r2, [r2, #8]
    3254:	430a      	orrs	r2, r1
    3256:	6801      	ldr	r1, [r0, #0]
    3258:	2000      	movs	r0, #0
    325a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    325c:	bf04      	itt	eq
    325e:	6018      	streq	r0, [r3, #0]
	return true;
    3260:	2001      	moveq	r0, #1
}
    3262:	4770      	bx	lr
    3264:	00009d3c 	.word	0x00009d3c

00003268 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3268:	4b02      	ldr	r3, [pc, #8]	; (3274 <z_spin_lock_set_owner+0xc>)
    326a:	7d1a      	ldrb	r2, [r3, #20]
    326c:	689b      	ldr	r3, [r3, #8]
    326e:	4313      	orrs	r3, r2
    3270:	6003      	str	r3, [r0, #0]
}
    3272:	4770      	bx	lr
    3274:	00009d3c 	.word	0x00009d3c

00003278 <z_thread_monitor_exit>:
{
    3278:	b538      	push	{r3, r4, r5, lr}
    327a:	4604      	mov	r4, r0
	__asm__ volatile(
    327c:	f04f 0320 	mov.w	r3, #32
    3280:	f3ef 8511 	mrs	r5, BASEPRI
    3284:	f383 8811 	msr	BASEPRI, r3
    3288:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    328c:	481d      	ldr	r0, [pc, #116]	; (3304 <z_thread_monitor_exit+0x8c>)
    328e:	f7ff ffcf 	bl	3230 <z_spin_lock_valid>
    3292:	b968      	cbnz	r0, 32b0 <z_thread_monitor_exit+0x38>
    3294:	2381      	movs	r3, #129	; 0x81
    3296:	4a1c      	ldr	r2, [pc, #112]	; (3308 <z_thread_monitor_exit+0x90>)
    3298:	491c      	ldr	r1, [pc, #112]	; (330c <z_thread_monitor_exit+0x94>)
    329a:	481d      	ldr	r0, [pc, #116]	; (3310 <z_thread_monitor_exit+0x98>)
    329c:	f003 fd0e 	bl	6cbc <printk>
    32a0:	4918      	ldr	r1, [pc, #96]	; (3304 <z_thread_monitor_exit+0x8c>)
    32a2:	481c      	ldr	r0, [pc, #112]	; (3314 <z_thread_monitor_exit+0x9c>)
    32a4:	f003 fd0a 	bl	6cbc <printk>
    32a8:	2181      	movs	r1, #129	; 0x81
    32aa:	4817      	ldr	r0, [pc, #92]	; (3308 <z_thread_monitor_exit+0x90>)
    32ac:	f003 fdd0 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    32b0:	4814      	ldr	r0, [pc, #80]	; (3304 <z_thread_monitor_exit+0x8c>)
    32b2:	f7ff ffd9 	bl	3268 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    32b6:	4a18      	ldr	r2, [pc, #96]	; (3318 <z_thread_monitor_exit+0xa0>)
    32b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    32ba:	42a3      	cmp	r3, r4
    32bc:	d119      	bne.n	32f2 <z_thread_monitor_exit+0x7a>
		_kernel.threads = _kernel.threads->next_thread;
    32be:	6f63      	ldr	r3, [r4, #116]	; 0x74
    32c0:	62d3      	str	r3, [r2, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    32c2:	4810      	ldr	r0, [pc, #64]	; (3304 <z_thread_monitor_exit+0x8c>)
    32c4:	f7ff ffc2 	bl	324c <z_spin_unlock_valid>
    32c8:	b968      	cbnz	r0, 32e6 <z_thread_monitor_exit+0x6e>
    32ca:	23ac      	movs	r3, #172	; 0xac
    32cc:	4a0e      	ldr	r2, [pc, #56]	; (3308 <z_thread_monitor_exit+0x90>)
    32ce:	4913      	ldr	r1, [pc, #76]	; (331c <z_thread_monitor_exit+0xa4>)
    32d0:	480f      	ldr	r0, [pc, #60]	; (3310 <z_thread_monitor_exit+0x98>)
    32d2:	f003 fcf3 	bl	6cbc <printk>
    32d6:	490b      	ldr	r1, [pc, #44]	; (3304 <z_thread_monitor_exit+0x8c>)
    32d8:	4811      	ldr	r0, [pc, #68]	; (3320 <z_thread_monitor_exit+0xa8>)
    32da:	f003 fcef 	bl	6cbc <printk>
    32de:	21ac      	movs	r1, #172	; 0xac
    32e0:	4809      	ldr	r0, [pc, #36]	; (3308 <z_thread_monitor_exit+0x90>)
    32e2:	f003 fdb5 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    32e6:	f385 8811 	msr	BASEPRI, r5
    32ea:	f3bf 8f6f 	isb	sy
}
    32ee:	bd38      	pop	{r3, r4, r5, pc}
    32f0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    32f2:	2b00      	cmp	r3, #0
    32f4:	d0e5      	beq.n	32c2 <z_thread_monitor_exit+0x4a>
			(thread != prev_thread->next_thread)) {
    32f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    32f8:	42a2      	cmp	r2, r4
    32fa:	d1f9      	bne.n	32f0 <z_thread_monitor_exit+0x78>
			prev_thread->next_thread = thread->next_thread;
    32fc:	6f62      	ldr	r2, [r4, #116]	; 0x74
    32fe:	675a      	str	r2, [r3, #116]	; 0x74
    3300:	e7df      	b.n	32c2 <z_thread_monitor_exit+0x4a>
    3302:	bf00      	nop
    3304:	00009d6c 	.word	0x00009d6c
    3308:	000082f4 	.word	0x000082f4
    330c:	0000831a 	.word	0x0000831a
    3310:	00008182 	.word	0x00008182
    3314:	0000832f 	.word	0x0000832f
    3318:	00009d3c 	.word	0x00009d3c
    331c:	00008347 	.word	0x00008347
    3320:	0000835e 	.word	0x0000835e

00003324 <z_setup_new_thread>:
{
    3324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3328:	b085      	sub	sp, #20
    332a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    332e:	4604      	mov	r4, r0
	Z_ASSERT_VALID_PRIO(prio, entry);
    3330:	f1b9 0f38 	cmp.w	r9, #56	; 0x38
{
    3334:	460e      	mov	r6, r1
    3336:	4615      	mov	r5, r2
    3338:	4698      	mov	r8, r3
    333a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    333e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	Z_ASSERT_VALID_PRIO(prio, entry);
    3342:	f040 8082 	bne.w	344a <z_setup_new_thread+0x126>
    3346:	4b4f      	ldr	r3, [pc, #316]	; (3484 <z_setup_new_thread+0x160>)
    3348:	4598      	cmp	r8, r3
    334a:	f040 8083 	bne.w	3454 <z_setup_new_thread+0x130>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    334e:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3352:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
    3356:	9b12      	ldr	r3, [sp, #72]	; 0x48
	thread_base->pended_on = NULL;
    3358:	2700      	movs	r7, #0
	thread_base->user_options = (uint8_t)options;
    335a:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    335c:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    335e:	3507      	adds	r5, #7
    3360:	f025 0507 	bic.w	r5, r5, #7
__ssp_bos_icheck3(memset, void *, int)
    3364:	462a      	mov	r2, r5
	thread_base->thread_state = (uint8_t)initial_state;
    3366:	7363      	strb	r3, [r4, #13]
	thread_base->prio = priority;
    3368:	f884 900e 	strb.w	r9, [r4, #14]
    336c:	21aa      	movs	r1, #170	; 0xaa
    336e:	4630      	mov	r0, r6
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3370:	e9c4 7706 	strd	r7, r7, [r4, #24]
	thread_base->pended_on = NULL;
    3374:	60a7      	str	r7, [r4, #8]
	thread_base->sched_locked = 0U;
    3376:	73e7      	strb	r7, [r4, #15]
    3378:	f003 fff8 	bl	736c <memset>
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
    337c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
    3380:	6033      	str	r3, [r6, #0]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3382:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.size = stack_buf_size;
    3384:	e9c4 6527 	strd	r6, r5, [r4, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    3388:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    338c:	9302      	str	r3, [sp, #8]
    338e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	stack_ptr = (char *)stack + stack_obj_size;
    3390:	eb06 0905 	add.w	r9, r6, r5
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3394:	e9cd b300 	strd	fp, r3, [sp]
    3398:	464a      	mov	r2, r9
    339a:	4643      	mov	r3, r8
    339c:	4631      	mov	r1, r6
    339e:	4620      	mov	r0, r4
    33a0:	f7fe f9fc 	bl	179c <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    33a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->entry.parameter1 = p1;
    33a6:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    33aa:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    33ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    33ae:	6567      	str	r7, [r4, #84]	; 0x54
	new_thread->entry.parameter3 = p3;
    33b0:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    33b2:	f04f 0320 	mov.w	r3, #32
    33b6:	f3ef 8611 	mrs	r6, BASEPRI
    33ba:	f383 8811 	msr	BASEPRI, r3
    33be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    33c2:	4831      	ldr	r0, [pc, #196]	; (3488 <z_setup_new_thread+0x164>)
    33c4:	f7ff ff34 	bl	3230 <z_spin_lock_valid>
    33c8:	b968      	cbnz	r0, 33e6 <z_setup_new_thread+0xc2>
    33ca:	2381      	movs	r3, #129	; 0x81
    33cc:	4a2f      	ldr	r2, [pc, #188]	; (348c <z_setup_new_thread+0x168>)
    33ce:	4930      	ldr	r1, [pc, #192]	; (3490 <z_setup_new_thread+0x16c>)
    33d0:	4830      	ldr	r0, [pc, #192]	; (3494 <z_setup_new_thread+0x170>)
    33d2:	f003 fc73 	bl	6cbc <printk>
    33d6:	492c      	ldr	r1, [pc, #176]	; (3488 <z_setup_new_thread+0x164>)
    33d8:	482f      	ldr	r0, [pc, #188]	; (3498 <z_setup_new_thread+0x174>)
    33da:	f003 fc6f 	bl	6cbc <printk>
    33de:	2181      	movs	r1, #129	; 0x81
    33e0:	482a      	ldr	r0, [pc, #168]	; (348c <z_setup_new_thread+0x168>)
    33e2:	f003 fd35 	bl	6e50 <assert_post_action>
	new_thread->next_thread = _kernel.threads;
    33e6:	4d2d      	ldr	r5, [pc, #180]	; (349c <z_setup_new_thread+0x178>)
	z_spin_lock_set_owner(l);
    33e8:	4827      	ldr	r0, [pc, #156]	; (3488 <z_setup_new_thread+0x164>)
    33ea:	f7ff ff3d 	bl	3268 <z_spin_lock_set_owner>
    33ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	_kernel.threads = new_thread;
    33f0:	62ec      	str	r4, [r5, #44]	; 0x2c
	new_thread->next_thread = _kernel.threads;
    33f2:	6763      	str	r3, [r4, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    33f4:	f7ff ff2a 	bl	324c <z_spin_unlock_valid>
    33f8:	b968      	cbnz	r0, 3416 <z_setup_new_thread+0xf2>
    33fa:	23ac      	movs	r3, #172	; 0xac
    33fc:	4a23      	ldr	r2, [pc, #140]	; (348c <z_setup_new_thread+0x168>)
    33fe:	4928      	ldr	r1, [pc, #160]	; (34a0 <z_setup_new_thread+0x17c>)
    3400:	4824      	ldr	r0, [pc, #144]	; (3494 <z_setup_new_thread+0x170>)
    3402:	f003 fc5b 	bl	6cbc <printk>
    3406:	4920      	ldr	r1, [pc, #128]	; (3488 <z_setup_new_thread+0x164>)
    3408:	4826      	ldr	r0, [pc, #152]	; (34a4 <z_setup_new_thread+0x180>)
    340a:	f003 fc57 	bl	6cbc <printk>
    340e:	21ac      	movs	r1, #172	; 0xac
    3410:	481e      	ldr	r0, [pc, #120]	; (348c <z_setup_new_thread+0x168>)
    3412:	f003 fd1d 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    3416:	f386 8811 	msr	BASEPRI, r6
    341a:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    341e:	f1ba 0f00 	cmp.w	sl, #0
    3422:	d02b      	beq.n	347c <z_setup_new_thread+0x158>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    3424:	221f      	movs	r2, #31
    3426:	4651      	mov	r1, sl
    3428:	f104 0078 	add.w	r0, r4, #120	; 0x78
    342c:	f004 f8ac 	bl	7588 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3430:	2300      	movs	r3, #0
    3432:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
    3436:	68ab      	ldr	r3, [r5, #8]
    3438:	b10b      	cbz	r3, 343e <z_setup_new_thread+0x11a>
	new_thread->resource_pool = _current->resource_pool;
    343a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
    343e:	4648      	mov	r0, r9
    3440:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    3444:	b005      	add	sp, #20
    3446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    344a:	f109 0310 	add.w	r3, r9, #16
    344e:	2b47      	cmp	r3, #71	; 0x47
    3450:	f67f af7d 	bls.w	334e <z_setup_new_thread+0x2a>
    3454:	f44f 7302 	mov.w	r3, #520	; 0x208
    3458:	4a13      	ldr	r2, [pc, #76]	; (34a8 <z_setup_new_thread+0x184>)
    345a:	4914      	ldr	r1, [pc, #80]	; (34ac <z_setup_new_thread+0x188>)
    345c:	480d      	ldr	r0, [pc, #52]	; (3494 <z_setup_new_thread+0x170>)
    345e:	f003 fc2d 	bl	6cbc <printk>
    3462:	4649      	mov	r1, r9
    3464:	f06f 030f 	mvn.w	r3, #15
    3468:	2237      	movs	r2, #55	; 0x37
    346a:	4811      	ldr	r0, [pc, #68]	; (34b0 <z_setup_new_thread+0x18c>)
    346c:	f003 fc26 	bl	6cbc <printk>
    3470:	f44f 7102 	mov.w	r1, #520	; 0x208
    3474:	480c      	ldr	r0, [pc, #48]	; (34a8 <z_setup_new_thread+0x184>)
    3476:	f003 fceb 	bl	6e50 <assert_post_action>
    347a:	e768      	b.n	334e <z_setup_new_thread+0x2a>
		new_thread->name[0] = '\0';
    347c:	f884 a078 	strb.w	sl, [r4, #120]	; 0x78
    3480:	e7d9      	b.n	3436 <z_setup_new_thread+0x112>
    3482:	bf00      	nop
    3484:	00003649 	.word	0x00003649
    3488:	00009d6c 	.word	0x00009d6c
    348c:	000082f4 	.word	0x000082f4
    3490:	0000831a 	.word	0x0000831a
    3494:	00008182 	.word	0x00008182
    3498:	0000832f 	.word	0x0000832f
    349c:	00009d3c 	.word	0x00009d3c
    34a0:	00008347 	.word	0x00008347
    34a4:	0000835e 	.word	0x0000835e
    34a8:	00008751 	.word	0x00008751
    34ac:	000087a5 	.word	0x000087a5
    34b0:	00008825 	.word	0x00008825

000034b4 <z_impl_k_thread_create>:
{
    34b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    34b8:	b087      	sub	sp, #28
    34ba:	4604      	mov	r4, r0
    34bc:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    34c0:	460f      	mov	r7, r1
    34c2:	4690      	mov	r8, r2
    34c4:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    34c6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    34ca:	b173      	cbz	r3, 34ea <z_impl_k_thread_create+0x36>
    34cc:	491c      	ldr	r1, [pc, #112]	; (3540 <z_impl_k_thread_create+0x8c>)
    34ce:	f240 2371 	movw	r3, #625	; 0x271
    34d2:	4a1c      	ldr	r2, [pc, #112]	; (3544 <z_impl_k_thread_create+0x90>)
    34d4:	481c      	ldr	r0, [pc, #112]	; (3548 <z_impl_k_thread_create+0x94>)
    34d6:	f003 fbf1 	bl	6cbc <printk>
    34da:	481c      	ldr	r0, [pc, #112]	; (354c <z_impl_k_thread_create+0x98>)
    34dc:	f003 fbee 	bl	6cbc <printk>
    34e0:	f240 2171 	movw	r1, #625	; 0x271
    34e4:	4817      	ldr	r0, [pc, #92]	; (3544 <z_impl_k_thread_create+0x90>)
    34e6:	f003 fcb3 	bl	6e50 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    34ea:	2300      	movs	r3, #0
    34ec:	9305      	str	r3, [sp, #20]
    34ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    34f0:	4642      	mov	r2, r8
    34f2:	9304      	str	r3, [sp, #16]
    34f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    34f6:	4639      	mov	r1, r7
    34f8:	9303      	str	r3, [sp, #12]
    34fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34fc:	4620      	mov	r0, r4
    34fe:	9302      	str	r3, [sp, #8]
    3500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3502:	9301      	str	r3, [sp, #4]
    3504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3506:	9300      	str	r3, [sp, #0]
    3508:	464b      	mov	r3, r9
    350a:	f7ff ff0b 	bl	3324 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    350e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3512:	bf08      	it	eq
    3514:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    3518:	d005      	beq.n	3526 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    351a:	ea55 0306 	orrs.w	r3, r5, r6
    351e:	d106      	bne.n	352e <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    3520:	4620      	mov	r0, r4
    3522:	f000 fc3d 	bl	3da0 <z_sched_start>
}
    3526:	4620      	mov	r0, r4
    3528:	b007      	add	sp, #28
    352a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    352e:	4632      	mov	r2, r6
    3530:	462b      	mov	r3, r5
    3532:	4907      	ldr	r1, [pc, #28]	; (3550 <z_impl_k_thread_create+0x9c>)
    3534:	f104 0018 	add.w	r0, r4, #24
    3538:	f001 fb38 	bl	4bac <z_add_timeout>
    353c:	e7f3      	b.n	3526 <z_impl_k_thread_create+0x72>
    353e:	bf00      	nop
    3540:	00008856 	.word	0x00008856
    3544:	00008751 	.word	0x00008751
    3548:	00008182 	.word	0x00008182
    354c:	00008868 	.word	0x00008868
    3550:	000045e5 	.word	0x000045e5

00003554 <z_init_static_threads>:
{
    3554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3558:	4c34      	ldr	r4, [pc, #208]	; (362c <z_init_static_threads+0xd8>)
	_FOREACH_STATIC_THREAD(thread_data) {
    355a:	4d35      	ldr	r5, [pc, #212]	; (3630 <z_init_static_threads+0xdc>)
    355c:	4f35      	ldr	r7, [pc, #212]	; (3634 <z_init_static_threads+0xe0>)
{
    355e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3560:	42ac      	cmp	r4, r5
    3562:	4626      	mov	r6, r4
    3564:	d90e      	bls.n	3584 <z_init_static_threads+0x30>
    3566:	4934      	ldr	r1, [pc, #208]	; (3638 <z_init_static_threads+0xe4>)
    3568:	f44f 7336 	mov.w	r3, #728	; 0x2d8
    356c:	463a      	mov	r2, r7
    356e:	4833      	ldr	r0, [pc, #204]	; (363c <z_init_static_threads+0xe8>)
    3570:	f003 fba4 	bl	6cbc <printk>
    3574:	4832      	ldr	r0, [pc, #200]	; (3640 <z_init_static_threads+0xec>)
    3576:	f003 fba1 	bl	6cbc <printk>
    357a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    357e:	4638      	mov	r0, r7
    3580:	f003 fc66 	bl	6e50 <assert_post_action>
    3584:	42ae      	cmp	r6, r5
    3586:	f104 0430 	add.w	r4, r4, #48	; 0x30
    358a:	d31e      	bcc.n	35ca <z_init_static_threads+0x76>
	k_sched_lock();
    358c:	f000 fc5c 	bl	3e48 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3590:	4c26      	ldr	r4, [pc, #152]	; (362c <z_init_static_threads+0xd8>)
    3592:	4e28      	ldr	r6, [pc, #160]	; (3634 <z_init_static_threads+0xe0>)
    3594:	4f28      	ldr	r7, [pc, #160]	; (3638 <z_init_static_threads+0xe4>)
    3596:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 363c <z_init_static_threads+0xe8>
    359a:	42ac      	cmp	r4, r5
    359c:	d90e      	bls.n	35bc <z_init_static_threads+0x68>
    359e:	4639      	mov	r1, r7
    35a0:	f240 23f7 	movw	r3, #759	; 0x2f7
    35a4:	4632      	mov	r2, r6
    35a6:	4640      	mov	r0, r8
    35a8:	f003 fb88 	bl	6cbc <printk>
    35ac:	4824      	ldr	r0, [pc, #144]	; (3640 <z_init_static_threads+0xec>)
    35ae:	f003 fb85 	bl	6cbc <printk>
    35b2:	f240 21f7 	movw	r1, #759	; 0x2f7
    35b6:	4630      	mov	r0, r6
    35b8:	f003 fc4a 	bl	6e50 <assert_post_action>
    35bc:	42ac      	cmp	r4, r5
    35be:	d320      	bcc.n	3602 <z_init_static_threads+0xae>
}
    35c0:	b006      	add	sp, #24
    35c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_sched_unlock();
    35c6:	f000 bcb3 	b.w	3f30 <k_sched_unlock>
		z_setup_new_thread(
    35ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
    35ce:	9305      	str	r3, [sp, #20]
    35d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    35d4:	9304      	str	r3, [sp, #16]
    35d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    35da:	9303      	str	r3, [sp, #12]
    35dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    35e0:	9302      	str	r3, [sp, #8]
    35e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    35e6:	9301      	str	r3, [sp, #4]
    35e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    35ec:	9300      	str	r3, [sp, #0]
    35ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    35f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    35f6:	f7ff fe95 	bl	3324 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    35fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
    35fe:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3600:	e7ae      	b.n	3560 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3602:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3604:	1c53      	adds	r3, r2, #1
    3606:	d00a      	beq.n	361e <z_init_static_threads+0xca>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
    3608:	230a      	movs	r3, #10
					    K_MSEC(thread_data->init_delay));
    360a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    360e:	fb82 2303 	smull	r2, r3, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3612:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
    3616:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3618:	d103      	bne.n	3622 <z_init_static_threads+0xce>
	z_sched_start(thread);
    361a:	f000 fbc1 	bl	3da0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    361e:	3430      	adds	r4, #48	; 0x30
    3620:	e7bb      	b.n	359a <z_init_static_threads+0x46>
    3622:	4908      	ldr	r1, [pc, #32]	; (3644 <z_init_static_threads+0xf0>)
    3624:	3018      	adds	r0, #24
    3626:	f001 fac1 	bl	4bac <z_add_timeout>
    362a:	e7f8      	b.n	361e <z_init_static_threads+0xca>
    362c:	00009a54 	.word	0x00009a54
    3630:	00009a54 	.word	0x00009a54
    3634:	00008751 	.word	0x00008751
    3638:	0000888d 	.word	0x0000888d
    363c:	00008182 	.word	0x00008182
    3640:	00008732 	.word	0x00008732
    3644:	000045e5 	.word	0x000045e5

00003648 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3648:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    364a:	4b0d      	ldr	r3, [pc, #52]	; (3680 <idle+0x38>)
    364c:	689b      	ldr	r3, [r3, #8]
    364e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3652:	2b00      	cmp	r3, #0
    3654:	da09      	bge.n	366a <idle+0x22>
    3656:	490b      	ldr	r1, [pc, #44]	; (3684 <idle+0x3c>)
    3658:	480b      	ldr	r0, [pc, #44]	; (3688 <idle+0x40>)
    365a:	2346      	movs	r3, #70	; 0x46
    365c:	4a0b      	ldr	r2, [pc, #44]	; (368c <idle+0x44>)
    365e:	f003 fb2d 	bl	6cbc <printk>
    3662:	2146      	movs	r1, #70	; 0x46
    3664:	4809      	ldr	r0, [pc, #36]	; (368c <idle+0x44>)
    3666:	f003 fbf3 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    366a:	f04f 0220 	mov.w	r2, #32
    366e:	f3ef 8311 	mrs	r3, BASEPRI
    3672:	f382 8811 	msr	BASEPRI, r2
    3676:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    367a:	f7fe f8c3 	bl	1804 <arch_cpu_idle>
    367e:	e7f4      	b.n	366a <idle+0x22>
    3680:	00009d3c 	.word	0x00009d3c
    3684:	000088db 	.word	0x000088db
    3688:	00008182 	.word	0x00008182
    368c:	000088ba 	.word	0x000088ba

00003690 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3694:	4604      	mov	r4, r0
    3696:	4617      	mov	r7, r2
    3698:	461e      	mov	r6, r3
    369a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    369e:	b163      	cbz	r3, 36ba <z_impl_k_mutex_lock+0x2a>
    36a0:	496d      	ldr	r1, [pc, #436]	; (3858 <z_impl_k_mutex_lock+0x1c8>)
    36a2:	2365      	movs	r3, #101	; 0x65
    36a4:	4a6d      	ldr	r2, [pc, #436]	; (385c <z_impl_k_mutex_lock+0x1cc>)
    36a6:	486e      	ldr	r0, [pc, #440]	; (3860 <z_impl_k_mutex_lock+0x1d0>)
    36a8:	f003 fb08 	bl	6cbc <printk>
    36ac:	486d      	ldr	r0, [pc, #436]	; (3864 <z_impl_k_mutex_lock+0x1d4>)
    36ae:	f003 fb05 	bl	6cbc <printk>
    36b2:	2165      	movs	r1, #101	; 0x65
    36b4:	4869      	ldr	r0, [pc, #420]	; (385c <z_impl_k_mutex_lock+0x1cc>)
    36b6:	f003 fbcb 	bl	6e50 <assert_post_action>
    36ba:	f04f 0320 	mov.w	r3, #32
    36be:	f3ef 8811 	mrs	r8, BASEPRI
    36c2:	f383 8811 	msr	BASEPRI, r3
    36c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    36ca:	4867      	ldr	r0, [pc, #412]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    36cc:	f7ff fdb0 	bl	3230 <z_spin_lock_valid>
    36d0:	b968      	cbnz	r0, 36ee <z_impl_k_mutex_lock+0x5e>
    36d2:	2381      	movs	r3, #129	; 0x81
    36d4:	4a65      	ldr	r2, [pc, #404]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    36d6:	4966      	ldr	r1, [pc, #408]	; (3870 <z_impl_k_mutex_lock+0x1e0>)
    36d8:	4861      	ldr	r0, [pc, #388]	; (3860 <z_impl_k_mutex_lock+0x1d0>)
    36da:	f003 faef 	bl	6cbc <printk>
    36de:	4962      	ldr	r1, [pc, #392]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    36e0:	4864      	ldr	r0, [pc, #400]	; (3874 <z_impl_k_mutex_lock+0x1e4>)
    36e2:	f003 faeb 	bl	6cbc <printk>
    36e6:	2181      	movs	r1, #129	; 0x81
    36e8:	4860      	ldr	r0, [pc, #384]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    36ea:	f003 fbb1 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    36ee:	485e      	ldr	r0, [pc, #376]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    36f0:	f7ff fdba 	bl	3268 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    36f4:	68e3      	ldr	r3, [r4, #12]
    36f6:	4a60      	ldr	r2, [pc, #384]	; (3878 <z_impl_k_mutex_lock+0x1e8>)
    36f8:	b30b      	cbz	r3, 373e <z_impl_k_mutex_lock+0xae>
    36fa:	68a0      	ldr	r0, [r4, #8]
    36fc:	6891      	ldr	r1, [r2, #8]
    36fe:	4288      	cmp	r0, r1
    3700:	d03d      	beq.n	377e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3702:	ea57 0306 	orrs.w	r3, r7, r6
    3706:	d13c      	bne.n	3782 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3708:	4857      	ldr	r0, [pc, #348]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    370a:	f7ff fd9f 	bl	324c <z_spin_unlock_valid>
    370e:	b968      	cbnz	r0, 372c <z_impl_k_mutex_lock+0x9c>
    3710:	23ac      	movs	r3, #172	; 0xac
    3712:	4a56      	ldr	r2, [pc, #344]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    3714:	4959      	ldr	r1, [pc, #356]	; (387c <z_impl_k_mutex_lock+0x1ec>)
    3716:	4852      	ldr	r0, [pc, #328]	; (3860 <z_impl_k_mutex_lock+0x1d0>)
    3718:	f003 fad0 	bl	6cbc <printk>
    371c:	4952      	ldr	r1, [pc, #328]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    371e:	4858      	ldr	r0, [pc, #352]	; (3880 <z_impl_k_mutex_lock+0x1f0>)
    3720:	f003 facc 	bl	6cbc <printk>
    3724:	21ac      	movs	r1, #172	; 0xac
    3726:	4851      	ldr	r0, [pc, #324]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    3728:	f003 fb92 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    372c:	f388 8811 	msr	BASEPRI, r8
    3730:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3734:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3738:	b002      	add	sp, #8
    373a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    373e:	6891      	ldr	r1, [r2, #8]
    3740:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3744:	3301      	adds	r3, #1
    3746:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3748:	6893      	ldr	r3, [r2, #8]
    374a:	4847      	ldr	r0, [pc, #284]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    374c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    374e:	60a3      	str	r3, [r4, #8]
    3750:	f7ff fd7c 	bl	324c <z_spin_unlock_valid>
    3754:	b968      	cbnz	r0, 3772 <z_impl_k_mutex_lock+0xe2>
    3756:	23ac      	movs	r3, #172	; 0xac
    3758:	4a44      	ldr	r2, [pc, #272]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    375a:	4948      	ldr	r1, [pc, #288]	; (387c <z_impl_k_mutex_lock+0x1ec>)
    375c:	4840      	ldr	r0, [pc, #256]	; (3860 <z_impl_k_mutex_lock+0x1d0>)
    375e:	f003 faad 	bl	6cbc <printk>
    3762:	4941      	ldr	r1, [pc, #260]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    3764:	4846      	ldr	r0, [pc, #280]	; (3880 <z_impl_k_mutex_lock+0x1f0>)
    3766:	f003 faa9 	bl	6cbc <printk>
    376a:	21ac      	movs	r1, #172	; 0xac
    376c:	483f      	ldr	r0, [pc, #252]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    376e:	f003 fb6f 	bl	6e50 <assert_post_action>
    3772:	f388 8811 	msr	BASEPRI, r8
    3776:	f3bf 8f6f 	isb	sy
		return 0;
    377a:	2000      	movs	r0, #0
    377c:	e7dc      	b.n	3738 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    377e:	6921      	ldr	r1, [r4, #16]
    3780:	e7e0      	b.n	3744 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3782:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3786:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    378a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    378e:	4299      	cmp	r1, r3
    3790:	bfa8      	it	ge
    3792:	4619      	movge	r1, r3
    3794:	4291      	cmp	r1, r2
    3796:	bfb8      	it	lt
    3798:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    379a:	428b      	cmp	r3, r1
    379c:	dd53      	ble.n	3846 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    379e:	f003 fc0c 	bl	6fba <adjust_owner_prio.isra.0>
    37a2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    37a4:	4622      	mov	r2, r4
    37a6:	4641      	mov	r1, r8
    37a8:	e9cd 7600 	strd	r7, r6, [sp]
    37ac:	482e      	ldr	r0, [pc, #184]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    37ae:	f000 fd17 	bl	41e0 <z_pend_curr>
	if (got_mutex == 0) {
    37b2:	2800      	cmp	r0, #0
    37b4:	d0e1      	beq.n	377a <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    37b6:	f04f 0320 	mov.w	r3, #32
    37ba:	f3ef 8611 	mrs	r6, BASEPRI
    37be:	f383 8811 	msr	BASEPRI, r3
    37c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    37c6:	4828      	ldr	r0, [pc, #160]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    37c8:	f7ff fd32 	bl	3230 <z_spin_lock_valid>
    37cc:	b968      	cbnz	r0, 37ea <z_impl_k_mutex_lock+0x15a>
    37ce:	2381      	movs	r3, #129	; 0x81
    37d0:	4a26      	ldr	r2, [pc, #152]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    37d2:	4927      	ldr	r1, [pc, #156]	; (3870 <z_impl_k_mutex_lock+0x1e0>)
    37d4:	4822      	ldr	r0, [pc, #136]	; (3860 <z_impl_k_mutex_lock+0x1d0>)
    37d6:	f003 fa71 	bl	6cbc <printk>
    37da:	4923      	ldr	r1, [pc, #140]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    37dc:	4825      	ldr	r0, [pc, #148]	; (3874 <z_impl_k_mutex_lock+0x1e4>)
    37de:	f003 fa6d 	bl	6cbc <printk>
    37e2:	2181      	movs	r1, #129	; 0x81
    37e4:	4821      	ldr	r0, [pc, #132]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    37e6:	f003 fb33 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    37ea:	481f      	ldr	r0, [pc, #124]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    37ec:	f7ff fd3c 	bl	3268 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    37f0:	6823      	ldr	r3, [r4, #0]
    37f2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37f4:	429c      	cmp	r4, r3
    37f6:	d00a      	beq.n	380e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    37f8:	b14b      	cbz	r3, 380e <z_impl_k_mutex_lock+0x17e>
    37fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    37fe:	4299      	cmp	r1, r3
    3800:	bfa8      	it	ge
    3802:	4619      	movge	r1, r3
    3804:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3808:	4299      	cmp	r1, r3
    380a:	bfb8      	it	lt
    380c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    380e:	68a0      	ldr	r0, [r4, #8]
    3810:	f003 fbd3 	bl	6fba <adjust_owner_prio.isra.0>
    3814:	b9c8      	cbnz	r0, 384a <z_impl_k_mutex_lock+0x1ba>
    3816:	b9c5      	cbnz	r5, 384a <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3818:	4813      	ldr	r0, [pc, #76]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    381a:	f7ff fd17 	bl	324c <z_spin_unlock_valid>
    381e:	b968      	cbnz	r0, 383c <z_impl_k_mutex_lock+0x1ac>
    3820:	23ac      	movs	r3, #172	; 0xac
    3822:	4a12      	ldr	r2, [pc, #72]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    3824:	4915      	ldr	r1, [pc, #84]	; (387c <z_impl_k_mutex_lock+0x1ec>)
    3826:	480e      	ldr	r0, [pc, #56]	; (3860 <z_impl_k_mutex_lock+0x1d0>)
    3828:	f003 fa48 	bl	6cbc <printk>
    382c:	490e      	ldr	r1, [pc, #56]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    382e:	4814      	ldr	r0, [pc, #80]	; (3880 <z_impl_k_mutex_lock+0x1f0>)
    3830:	f003 fa44 	bl	6cbc <printk>
    3834:	21ac      	movs	r1, #172	; 0xac
    3836:	480d      	ldr	r0, [pc, #52]	; (386c <z_impl_k_mutex_lock+0x1dc>)
    3838:	f003 fb0a 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    383c:	f386 8811 	msr	BASEPRI, r6
    3840:	f3bf 8f6f 	isb	sy
    3844:	e005      	b.n	3852 <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    3846:	2500      	movs	r5, #0
    3848:	e7ac      	b.n	37a4 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    384a:	4631      	mov	r1, r6
    384c:	4806      	ldr	r0, [pc, #24]	; (3868 <z_impl_k_mutex_lock+0x1d8>)
    384e:	f000 fa63 	bl	3d18 <z_reschedule>
	return -EAGAIN;
    3852:	f06f 000a 	mvn.w	r0, #10
    3856:	e76f      	b.n	3738 <z_impl_k_mutex_lock+0xa8>
    3858:	00008856 	.word	0x00008856
    385c:	00008903 	.word	0x00008903
    3860:	00008182 	.word	0x00008182
    3864:	00008925 	.word	0x00008925
    3868:	00009d70 	.word	0x00009d70
    386c:	000082f4 	.word	0x000082f4
    3870:	0000831a 	.word	0x0000831a
    3874:	0000832f 	.word	0x0000832f
    3878:	00009d3c 	.word	0x00009d3c
    387c:	00008347 	.word	0x00008347
    3880:	0000835e 	.word	0x0000835e

00003884 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3884:	b538      	push	{r3, r4, r5, lr}
    3886:	4604      	mov	r4, r0
    3888:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    388c:	b163      	cbz	r3, 38a8 <z_impl_k_mutex_unlock+0x24>
    388e:	4950      	ldr	r1, [pc, #320]	; (39d0 <z_impl_k_mutex_unlock+0x14c>)
    3890:	23c7      	movs	r3, #199	; 0xc7
    3892:	4a50      	ldr	r2, [pc, #320]	; (39d4 <z_impl_k_mutex_unlock+0x150>)
    3894:	4850      	ldr	r0, [pc, #320]	; (39d8 <z_impl_k_mutex_unlock+0x154>)
    3896:	f003 fa11 	bl	6cbc <printk>
    389a:	4850      	ldr	r0, [pc, #320]	; (39dc <z_impl_k_mutex_unlock+0x158>)
    389c:	f003 fa0e 	bl	6cbc <printk>
    38a0:	21c7      	movs	r1, #199	; 0xc7
    38a2:	484c      	ldr	r0, [pc, #304]	; (39d4 <z_impl_k_mutex_unlock+0x150>)
    38a4:	f003 fad4 	bl	6e50 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    38a8:	68a3      	ldr	r3, [r4, #8]
    38aa:	2b00      	cmp	r3, #0
    38ac:	f000 808a 	beq.w	39c4 <z_impl_k_mutex_unlock+0x140>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    38b0:	4d4b      	ldr	r5, [pc, #300]	; (39e0 <z_impl_k_mutex_unlock+0x15c>)
    38b2:	68aa      	ldr	r2, [r5, #8]
    38b4:	4293      	cmp	r3, r2
    38b6:	f040 8088 	bne.w	39ca <z_impl_k_mutex_unlock+0x146>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    38ba:	68e3      	ldr	r3, [r4, #12]
    38bc:	b94b      	cbnz	r3, 38d2 <z_impl_k_mutex_unlock+0x4e>
    38be:	4949      	ldr	r1, [pc, #292]	; (39e4 <z_impl_k_mutex_unlock+0x160>)
    38c0:	4845      	ldr	r0, [pc, #276]	; (39d8 <z_impl_k_mutex_unlock+0x154>)
    38c2:	23df      	movs	r3, #223	; 0xdf
    38c4:	4a43      	ldr	r2, [pc, #268]	; (39d4 <z_impl_k_mutex_unlock+0x150>)
    38c6:	f003 f9f9 	bl	6cbc <printk>
    38ca:	21df      	movs	r1, #223	; 0xdf
    38cc:	4841      	ldr	r0, [pc, #260]	; (39d4 <z_impl_k_mutex_unlock+0x150>)
    38ce:	f003 fabf 	bl	6e50 <assert_post_action>
    38d2:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    38d6:	b163      	cbz	r3, 38f2 <z_impl_k_mutex_unlock+0x6e>
    38d8:	493d      	ldr	r1, [pc, #244]	; (39d0 <z_impl_k_mutex_unlock+0x14c>)
    38da:	23fd      	movs	r3, #253	; 0xfd
    38dc:	4a42      	ldr	r2, [pc, #264]	; (39e8 <z_impl_k_mutex_unlock+0x164>)
    38de:	483e      	ldr	r0, [pc, #248]	; (39d8 <z_impl_k_mutex_unlock+0x154>)
    38e0:	f003 f9ec 	bl	6cbc <printk>
    38e4:	4841      	ldr	r0, [pc, #260]	; (39ec <z_impl_k_mutex_unlock+0x168>)
    38e6:	f003 f9e9 	bl	6cbc <printk>
    38ea:	21fd      	movs	r1, #253	; 0xfd
    38ec:	483e      	ldr	r0, [pc, #248]	; (39e8 <z_impl_k_mutex_unlock+0x164>)
    38ee:	f003 faaf 	bl	6e50 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    38f2:	68ab      	ldr	r3, [r5, #8]
    38f4:	7bdb      	ldrb	r3, [r3, #15]
    38f6:	2b01      	cmp	r3, #1
    38f8:	d10c      	bne.n	3914 <z_impl_k_mutex_unlock+0x90>
    38fa:	493d      	ldr	r1, [pc, #244]	; (39f0 <z_impl_k_mutex_unlock+0x16c>)
    38fc:	23fe      	movs	r3, #254	; 0xfe
    38fe:	4a3a      	ldr	r2, [pc, #232]	; (39e8 <z_impl_k_mutex_unlock+0x164>)
    3900:	4835      	ldr	r0, [pc, #212]	; (39d8 <z_impl_k_mutex_unlock+0x154>)
    3902:	f003 f9db 	bl	6cbc <printk>
    3906:	4839      	ldr	r0, [pc, #228]	; (39ec <z_impl_k_mutex_unlock+0x168>)
    3908:	f003 f9d8 	bl	6cbc <printk>
    390c:	21fe      	movs	r1, #254	; 0xfe
    390e:	4836      	ldr	r0, [pc, #216]	; (39e8 <z_impl_k_mutex_unlock+0x164>)
    3910:	f003 fa9e 	bl	6e50 <assert_post_action>

	--_current->base.sched_locked;
    3914:	68aa      	ldr	r2, [r5, #8]
    3916:	7bd3      	ldrb	r3, [r2, #15]
    3918:	3b01      	subs	r3, #1
    391a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    391c:	68e3      	ldr	r3, [r4, #12]
    391e:	2b01      	cmp	r3, #1
    3920:	d005      	beq.n	392e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    3922:	3b01      	subs	r3, #1
    3924:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3926:	f000 fb03 	bl	3f30 <k_sched_unlock>

	return 0;
    392a:	2000      	movs	r0, #0
}
    392c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    392e:	f04f 0320 	mov.w	r3, #32
    3932:	f3ef 8511 	mrs	r5, BASEPRI
    3936:	f383 8811 	msr	BASEPRI, r3
    393a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    393e:	482d      	ldr	r0, [pc, #180]	; (39f4 <z_impl_k_mutex_unlock+0x170>)
    3940:	f7ff fc76 	bl	3230 <z_spin_lock_valid>
    3944:	b968      	cbnz	r0, 3962 <z_impl_k_mutex_unlock+0xde>
    3946:	2381      	movs	r3, #129	; 0x81
    3948:	4a2b      	ldr	r2, [pc, #172]	; (39f8 <z_impl_k_mutex_unlock+0x174>)
    394a:	492c      	ldr	r1, [pc, #176]	; (39fc <z_impl_k_mutex_unlock+0x178>)
    394c:	4822      	ldr	r0, [pc, #136]	; (39d8 <z_impl_k_mutex_unlock+0x154>)
    394e:	f003 f9b5 	bl	6cbc <printk>
    3952:	4928      	ldr	r1, [pc, #160]	; (39f4 <z_impl_k_mutex_unlock+0x170>)
    3954:	482a      	ldr	r0, [pc, #168]	; (3a00 <z_impl_k_mutex_unlock+0x17c>)
    3956:	f003 f9b1 	bl	6cbc <printk>
    395a:	2181      	movs	r1, #129	; 0x81
    395c:	4826      	ldr	r0, [pc, #152]	; (39f8 <z_impl_k_mutex_unlock+0x174>)
    395e:	f003 fa77 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    3962:	4824      	ldr	r0, [pc, #144]	; (39f4 <z_impl_k_mutex_unlock+0x170>)
    3964:	f7ff fc80 	bl	3268 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3968:	6921      	ldr	r1, [r4, #16]
    396a:	68a0      	ldr	r0, [r4, #8]
    396c:	f003 fb25 	bl	6fba <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3970:	4620      	mov	r0, r4
    3972:	f000 fe91 	bl	4698 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3976:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3978:	b160      	cbz	r0, 3994 <z_impl_k_mutex_unlock+0x110>
		mutex->owner_orig_prio = new_owner->base.prio;
    397a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    397e:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3980:	2200      	movs	r2, #0
    3982:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    3986:	f000 f97f 	bl	3c88 <z_ready_thread>
		z_reschedule(&lock, key);
    398a:	4629      	mov	r1, r5
    398c:	4819      	ldr	r0, [pc, #100]	; (39f4 <z_impl_k_mutex_unlock+0x170>)
    398e:	f000 f9c3 	bl	3d18 <z_reschedule>
    3992:	e7c8      	b.n	3926 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    3994:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3996:	4817      	ldr	r0, [pc, #92]	; (39f4 <z_impl_k_mutex_unlock+0x170>)
    3998:	f7ff fc58 	bl	324c <z_spin_unlock_valid>
    399c:	b968      	cbnz	r0, 39ba <z_impl_k_mutex_unlock+0x136>
    399e:	23ac      	movs	r3, #172	; 0xac
    39a0:	4a15      	ldr	r2, [pc, #84]	; (39f8 <z_impl_k_mutex_unlock+0x174>)
    39a2:	4918      	ldr	r1, [pc, #96]	; (3a04 <z_impl_k_mutex_unlock+0x180>)
    39a4:	480c      	ldr	r0, [pc, #48]	; (39d8 <z_impl_k_mutex_unlock+0x154>)
    39a6:	f003 f989 	bl	6cbc <printk>
    39aa:	4912      	ldr	r1, [pc, #72]	; (39f4 <z_impl_k_mutex_unlock+0x170>)
    39ac:	4816      	ldr	r0, [pc, #88]	; (3a08 <z_impl_k_mutex_unlock+0x184>)
    39ae:	f003 f985 	bl	6cbc <printk>
    39b2:	21ac      	movs	r1, #172	; 0xac
    39b4:	4810      	ldr	r0, [pc, #64]	; (39f8 <z_impl_k_mutex_unlock+0x174>)
    39b6:	f003 fa4b 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    39ba:	f385 8811 	msr	BASEPRI, r5
    39be:	f3bf 8f6f 	isb	sy
    39c2:	e7b0      	b.n	3926 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    39c4:	f06f 0015 	mvn.w	r0, #21
    39c8:	e7b0      	b.n	392c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    39ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    39ce:	e7ad      	b.n	392c <z_impl_k_mutex_unlock+0xa8>
    39d0:	00008856 	.word	0x00008856
    39d4:	00008903 	.word	0x00008903
    39d8:	00008182 	.word	0x00008182
    39dc:	00008925 	.word	0x00008925
    39e0:	00009d3c 	.word	0x00009d3c
    39e4:	0000894a 	.word	0x0000894a
    39e8:	00008961 	.word	0x00008961
    39ec:	0000898c 	.word	0x0000898c
    39f0:	0000898f 	.word	0x0000898f
    39f4:	00009d70 	.word	0x00009d70
    39f8:	000082f4 	.word	0x000082f4
    39fc:	0000831a 	.word	0x0000831a
    3a00:	0000832f 	.word	0x0000832f
    3a04:	00008347 	.word	0x00008347
    3a08:	0000835e 	.word	0x0000835e

00003a0c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3a0c:	b538      	push	{r3, r4, r5, lr}
    3a0e:	4604      	mov	r4, r0
	__asm__ volatile(
    3a10:	f04f 0320 	mov.w	r3, #32
    3a14:	f3ef 8511 	mrs	r5, BASEPRI
    3a18:	f383 8811 	msr	BASEPRI, r3
    3a1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a20:	4817      	ldr	r0, [pc, #92]	; (3a80 <z_impl_k_sem_give+0x74>)
    3a22:	f7ff fc05 	bl	3230 <z_spin_lock_valid>
    3a26:	b968      	cbnz	r0, 3a44 <z_impl_k_sem_give+0x38>
    3a28:	2381      	movs	r3, #129	; 0x81
    3a2a:	4a16      	ldr	r2, [pc, #88]	; (3a84 <z_impl_k_sem_give+0x78>)
    3a2c:	4916      	ldr	r1, [pc, #88]	; (3a88 <z_impl_k_sem_give+0x7c>)
    3a2e:	4817      	ldr	r0, [pc, #92]	; (3a8c <z_impl_k_sem_give+0x80>)
    3a30:	f003 f944 	bl	6cbc <printk>
    3a34:	4912      	ldr	r1, [pc, #72]	; (3a80 <z_impl_k_sem_give+0x74>)
    3a36:	4816      	ldr	r0, [pc, #88]	; (3a90 <z_impl_k_sem_give+0x84>)
    3a38:	f003 f940 	bl	6cbc <printk>
    3a3c:	2181      	movs	r1, #129	; 0x81
    3a3e:	4811      	ldr	r0, [pc, #68]	; (3a84 <z_impl_k_sem_give+0x78>)
    3a40:	f003 fa06 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    3a44:	480e      	ldr	r0, [pc, #56]	; (3a80 <z_impl_k_sem_give+0x74>)
    3a46:	f7ff fc0f 	bl	3268 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3a4a:	4620      	mov	r0, r4
    3a4c:	f000 fe24 	bl	4698 <z_unpend_first_thread>

	if (thread != NULL) {
    3a50:	b150      	cbz	r0, 3a68 <z_impl_k_sem_give+0x5c>
    3a52:	2200      	movs	r2, #0
    3a54:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3a58:	f000 f916 	bl	3c88 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3a5c:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3a62:	4807      	ldr	r0, [pc, #28]	; (3a80 <z_impl_k_sem_give+0x74>)
    3a64:	f000 b958 	b.w	3d18 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3a68:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3a6c:	429a      	cmp	r2, r3
    3a6e:	bf18      	it	ne
    3a70:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    3a72:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3a74:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    3a76:	f104 0010 	add.w	r0, r4, #16
    3a7a:	f003 fac5 	bl	7008 <z_handle_obj_poll_events>
}
    3a7e:	e7ed      	b.n	3a5c <z_impl_k_sem_give+0x50>
    3a80:	00009d74 	.word	0x00009d74
    3a84:	000082f4 	.word	0x000082f4
    3a88:	0000831a 	.word	0x0000831a
    3a8c:	00008182 	.word	0x00008182
    3a90:	0000832f 	.word	0x0000832f

00003a94 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3a94:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3a96:	4c08      	ldr	r4, [pc, #32]	; (3ab8 <z_reset_time_slice+0x24>)
    3a98:	6823      	ldr	r3, [r4, #0]
    3a9a:	b15b      	cbz	r3, 3ab4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3a9c:	f7fd fd8c 	bl	15b8 <sys_clock_elapsed>
    3aa0:	4603      	mov	r3, r0
    3aa2:	6820      	ldr	r0, [r4, #0]
    3aa4:	4a05      	ldr	r2, [pc, #20]	; (3abc <z_reset_time_slice+0x28>)
    3aa6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    3aa8:	2100      	movs	r1, #0
	}
}
    3aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3aae:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3ab0:	f001 b992 	b.w	4dd8 <z_set_timeout_expiry>
}
    3ab4:	bd10      	pop	{r4, pc}
    3ab6:	bf00      	nop
    3ab8:	00009d80 	.word	0x00009d80
    3abc:	00009d3c 	.word	0x00009d3c

00003ac0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3ac0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3ac2:	4c16      	ldr	r4, [pc, #88]	; (3b1c <update_cache+0x5c>)
    3ac4:	4623      	mov	r3, r4
    3ac6:	f853 5f24 	ldr.w	r5, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3aca:	429d      	cmp	r5, r3
    3acc:	d000      	beq.n	3ad0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3ace:	b905      	cbnz	r5, 3ad2 <update_cache+0x12>
    3ad0:	68e5      	ldr	r5, [r4, #12]
	__ASSERT(_current != NULL, "");
    3ad2:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    3ad4:	b120      	cbz	r0, 3ae0 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3ad6:	68a3      	ldr	r3, [r4, #8]
    3ad8:	42ab      	cmp	r3, r5
    3ada:	d11b      	bne.n	3b14 <update_cache+0x54>
			z_reset_time_slice();
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3adc:	462b      	mov	r3, r5
    3ade:	e017      	b.n	3b10 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    3ae0:	b963      	cbnz	r3, 3afc <update_cache+0x3c>
    3ae2:	490f      	ldr	r1, [pc, #60]	; (3b20 <update_cache+0x60>)
    3ae4:	2381      	movs	r3, #129	; 0x81
    3ae6:	4a0f      	ldr	r2, [pc, #60]	; (3b24 <update_cache+0x64>)
    3ae8:	480f      	ldr	r0, [pc, #60]	; (3b28 <update_cache+0x68>)
    3aea:	f003 f8e7 	bl	6cbc <printk>
    3aee:	480f      	ldr	r0, [pc, #60]	; (3b2c <update_cache+0x6c>)
    3af0:	f003 f8e4 	bl	6cbc <printk>
    3af4:	2181      	movs	r1, #129	; 0x81
    3af6:	480b      	ldr	r0, [pc, #44]	; (3b24 <update_cache+0x64>)
    3af8:	f003 f9aa 	bl	6e50 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    3afc:	68a3      	ldr	r3, [r4, #8]
    3afe:	7b5a      	ldrb	r2, [r3, #13]
    3b00:	06d2      	lsls	r2, r2, #27
    3b02:	d1e8      	bne.n	3ad6 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3b04:	69aa      	ldr	r2, [r5, #24]
    3b06:	2a00      	cmp	r2, #0
    3b08:	d1e5      	bne.n	3ad6 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    3b0a:	89da      	ldrh	r2, [r3, #14]
    3b0c:	2a7f      	cmp	r2, #127	; 0x7f
    3b0e:	d9e2      	bls.n	3ad6 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    3b10:	6223      	str	r3, [r4, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3b12:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice();
    3b14:	f7ff ffbe 	bl	3a94 <z_reset_time_slice>
    3b18:	e7e0      	b.n	3adc <update_cache+0x1c>
    3b1a:	bf00      	nop
    3b1c:	00009d3c 	.word	0x00009d3c
    3b20:	000089e2 	.word	0x000089e2
    3b24:	000089c0 	.word	0x000089c0
    3b28:	00008182 	.word	0x00008182
    3b2c:	0000898c 	.word	0x0000898c

00003b30 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    3b30:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3b32:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3b36:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3b38:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3b3a:	7b43      	ldrb	r3, [r0, #13]
    3b3c:	db3c      	blt.n	3bb8 <ready_thread+0x88>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3b3e:	06da      	lsls	r2, r3, #27
    3b40:	d13a      	bne.n	3bb8 <ready_thread+0x88>
    3b42:	6982      	ldr	r2, [r0, #24]
    3b44:	2a00      	cmp	r2, #0
    3b46:	d137      	bne.n	3bb8 <ready_thread+0x88>
	thread->base.thread_state |= _THREAD_QUEUED;
    3b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b4c:	7343      	strb	r3, [r0, #13]

ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3b4e:	4b1b      	ldr	r3, [pc, #108]	; (3bbc <ready_thread+0x8c>)
    3b50:	4298      	cmp	r0, r3
    3b52:	d10b      	bne.n	3b6c <ready_thread+0x3c>
    3b54:	491a      	ldr	r1, [pc, #104]	; (3bc0 <ready_thread+0x90>)
    3b56:	481b      	ldr	r0, [pc, #108]	; (3bc4 <ready_thread+0x94>)
    3b58:	f240 33a6 	movw	r3, #934	; 0x3a6
    3b5c:	4a1a      	ldr	r2, [pc, #104]	; (3bc8 <ready_thread+0x98>)
    3b5e:	f003 f8ad 	bl	6cbc <printk>
    3b62:	f240 31a6 	movw	r1, #934	; 0x3a6
    3b66:	4818      	ldr	r0, [pc, #96]	; (3bc8 <ready_thread+0x98>)
    3b68:	f003 f972 	bl	6e50 <assert_post_action>
	return list->head == list;
    3b6c:	4a17      	ldr	r2, [pc, #92]	; (3bcc <ready_thread+0x9c>)
    3b6e:	4610      	mov	r0, r2
    3b70:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b74:	4283      	cmp	r3, r0
    3b76:	d11d      	bne.n	3bb4 <ready_thread+0x84>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3b78:	6a91      	ldr	r1, [r2, #40]	; 0x28
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3b7a:	e9c4 0100 	strd	r0, r1, [r4]

	tail->next = node;
    3b7e:	600c      	str	r4, [r1, #0]
	list->tail = node;
    3b80:	6294      	str	r4, [r2, #40]	; 0x28
}
    3b82:	e012      	b.n	3baa <ready_thread+0x7a>
	return (node == list->tail) ? NULL : node->next;
    3b84:	428b      	cmp	r3, r1
    3b86:	d0f8      	beq.n	3b7a <ready_thread+0x4a>
    3b88:	681b      	ldr	r3, [r3, #0]

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d0f5      	beq.n	3b7a <ready_thread+0x4a>
	int32_t b1 = thread_1->base.prio;
    3b8e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3b92:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    3b96:	42ae      	cmp	r6, r5
    3b98:	d0f4      	beq.n	3b84 <ready_thread+0x54>
		return b2 - b1;
    3b9a:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3b9c:	2d00      	cmp	r5, #0
    3b9e:	ddf1      	ble.n	3b84 <ready_thread+0x54>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3ba0:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3ba2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3ba6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3ba8:	605c      	str	r4, [r3, #4]
		update_cache(0);
    3baa:	2000      	movs	r0, #0
}
    3bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    3bb0:	f7ff bf86 	b.w	3ac0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3bb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3bb6:	e7e8      	b.n	3b8a <ready_thread+0x5a>
}
    3bb8:	bd70      	pop	{r4, r5, r6, pc}
    3bba:	bf00      	nop
    3bbc:	00009a58 	.word	0x00009a58
    3bc0:	00008a09 	.word	0x00008a09
    3bc4:	00008182 	.word	0x00008182
    3bc8:	000089c0 	.word	0x000089c0
    3bcc:	00009d3c 	.word	0x00009d3c

00003bd0 <k_sched_time_slice_set>:
{
    3bd0:	b570      	push	{r4, r5, r6, lr}
    3bd2:	4604      	mov	r4, r0
    3bd4:	460d      	mov	r5, r1
    3bd6:	f04f 0320 	mov.w	r3, #32
    3bda:	f3ef 8611 	mrs	r6, BASEPRI
    3bde:	f383 8811 	msr	BASEPRI, r3
    3be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3be6:	481e      	ldr	r0, [pc, #120]	; (3c60 <k_sched_time_slice_set+0x90>)
    3be8:	f7ff fb22 	bl	3230 <z_spin_lock_valid>
    3bec:	b968      	cbnz	r0, 3c0a <k_sched_time_slice_set+0x3a>
    3bee:	2381      	movs	r3, #129	; 0x81
    3bf0:	4a1c      	ldr	r2, [pc, #112]	; (3c64 <k_sched_time_slice_set+0x94>)
    3bf2:	491d      	ldr	r1, [pc, #116]	; (3c68 <k_sched_time_slice_set+0x98>)
    3bf4:	481d      	ldr	r0, [pc, #116]	; (3c6c <k_sched_time_slice_set+0x9c>)
    3bf6:	f003 f861 	bl	6cbc <printk>
    3bfa:	4919      	ldr	r1, [pc, #100]	; (3c60 <k_sched_time_slice_set+0x90>)
    3bfc:	481c      	ldr	r0, [pc, #112]	; (3c70 <k_sched_time_slice_set+0xa0>)
    3bfe:	f003 f85d 	bl	6cbc <printk>
    3c02:	2181      	movs	r1, #129	; 0x81
    3c04:	4817      	ldr	r0, [pc, #92]	; (3c64 <k_sched_time_slice_set+0x94>)
    3c06:	f003 f923 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    3c0a:	4815      	ldr	r0, [pc, #84]	; (3c60 <k_sched_time_slice_set+0x90>)
    3c0c:	f7ff fb2c 	bl	3268 <z_spin_lock_set_owner>
			return ((uint32_t)t) * (to_hz / from_hz);
    3c10:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3c12:	2c00      	cmp	r4, #0
    3c14:	fb04 f303 	mul.w	r3, r4, r3
    3c18:	dd02      	ble.n	3c20 <k_sched_time_slice_set+0x50>
			slice_time = MAX(2, slice_time);
    3c1a:	2b02      	cmp	r3, #2
    3c1c:	bfb8      	it	lt
    3c1e:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
    3c20:	2100      	movs	r1, #0
    3c22:	4a14      	ldr	r2, [pc, #80]	; (3c74 <k_sched_time_slice_set+0xa4>)
    3c24:	6111      	str	r1, [r2, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
    3c26:	4a14      	ldr	r2, [pc, #80]	; (3c78 <k_sched_time_slice_set+0xa8>)
    3c28:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
    3c2a:	4b14      	ldr	r3, [pc, #80]	; (3c7c <k_sched_time_slice_set+0xac>)
    3c2c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3c2e:	f7ff ff31 	bl	3a94 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c32:	480b      	ldr	r0, [pc, #44]	; (3c60 <k_sched_time_slice_set+0x90>)
    3c34:	f7ff fb0a 	bl	324c <z_spin_unlock_valid>
    3c38:	b968      	cbnz	r0, 3c56 <k_sched_time_slice_set+0x86>
    3c3a:	23ac      	movs	r3, #172	; 0xac
    3c3c:	4a09      	ldr	r2, [pc, #36]	; (3c64 <k_sched_time_slice_set+0x94>)
    3c3e:	4910      	ldr	r1, [pc, #64]	; (3c80 <k_sched_time_slice_set+0xb0>)
    3c40:	480a      	ldr	r0, [pc, #40]	; (3c6c <k_sched_time_slice_set+0x9c>)
    3c42:	f003 f83b 	bl	6cbc <printk>
    3c46:	4906      	ldr	r1, [pc, #24]	; (3c60 <k_sched_time_slice_set+0x90>)
    3c48:	480e      	ldr	r0, [pc, #56]	; (3c84 <k_sched_time_slice_set+0xb4>)
    3c4a:	f003 f837 	bl	6cbc <printk>
    3c4e:	21ac      	movs	r1, #172	; 0xac
    3c50:	4804      	ldr	r0, [pc, #16]	; (3c64 <k_sched_time_slice_set+0x94>)
    3c52:	f003 f8fd 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    3c56:	f386 8811 	msr	BASEPRI, r6
    3c5a:	f3bf 8f6f 	isb	sy
}
    3c5e:	bd70      	pop	{r4, r5, r6, pc}
    3c60:	00009d84 	.word	0x00009d84
    3c64:	000082f4 	.word	0x000082f4
    3c68:	0000831a 	.word	0x0000831a
    3c6c:	00008182 	.word	0x00008182
    3c70:	0000832f 	.word	0x0000832f
    3c74:	00009d3c 	.word	0x00009d3c
    3c78:	00009d80 	.word	0x00009d80
    3c7c:	00009d7c 	.word	0x00009d7c
    3c80:	00008347 	.word	0x00008347
    3c84:	0000835e 	.word	0x0000835e

00003c88 <z_ready_thread>:
{
    3c88:	b538      	push	{r3, r4, r5, lr}
    3c8a:	4604      	mov	r4, r0
	__asm__ volatile(
    3c8c:	f04f 0320 	mov.w	r3, #32
    3c90:	f3ef 8511 	mrs	r5, BASEPRI
    3c94:	f383 8811 	msr	BASEPRI, r3
    3c98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3c9c:	4817      	ldr	r0, [pc, #92]	; (3cfc <z_ready_thread+0x74>)
    3c9e:	f7ff fac7 	bl	3230 <z_spin_lock_valid>
    3ca2:	b968      	cbnz	r0, 3cc0 <z_ready_thread+0x38>
    3ca4:	2381      	movs	r3, #129	; 0x81
    3ca6:	4a16      	ldr	r2, [pc, #88]	; (3d00 <z_ready_thread+0x78>)
    3ca8:	4916      	ldr	r1, [pc, #88]	; (3d04 <z_ready_thread+0x7c>)
    3caa:	4817      	ldr	r0, [pc, #92]	; (3d08 <z_ready_thread+0x80>)
    3cac:	f003 f806 	bl	6cbc <printk>
    3cb0:	4912      	ldr	r1, [pc, #72]	; (3cfc <z_ready_thread+0x74>)
    3cb2:	4816      	ldr	r0, [pc, #88]	; (3d0c <z_ready_thread+0x84>)
    3cb4:	f003 f802 	bl	6cbc <printk>
    3cb8:	2181      	movs	r1, #129	; 0x81
    3cba:	4811      	ldr	r0, [pc, #68]	; (3d00 <z_ready_thread+0x78>)
    3cbc:	f003 f8c8 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    3cc0:	480e      	ldr	r0, [pc, #56]	; (3cfc <z_ready_thread+0x74>)
    3cc2:	f7ff fad1 	bl	3268 <z_spin_lock_set_owner>
			ready_thread(thread);
    3cc6:	4620      	mov	r0, r4
    3cc8:	f7ff ff32 	bl	3b30 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ccc:	480b      	ldr	r0, [pc, #44]	; (3cfc <z_ready_thread+0x74>)
    3cce:	f7ff fabd 	bl	324c <z_spin_unlock_valid>
    3cd2:	b968      	cbnz	r0, 3cf0 <z_ready_thread+0x68>
    3cd4:	23ac      	movs	r3, #172	; 0xac
    3cd6:	4a0a      	ldr	r2, [pc, #40]	; (3d00 <z_ready_thread+0x78>)
    3cd8:	490d      	ldr	r1, [pc, #52]	; (3d10 <z_ready_thread+0x88>)
    3cda:	480b      	ldr	r0, [pc, #44]	; (3d08 <z_ready_thread+0x80>)
    3cdc:	f002 ffee 	bl	6cbc <printk>
    3ce0:	4906      	ldr	r1, [pc, #24]	; (3cfc <z_ready_thread+0x74>)
    3ce2:	480c      	ldr	r0, [pc, #48]	; (3d14 <z_ready_thread+0x8c>)
    3ce4:	f002 ffea 	bl	6cbc <printk>
    3ce8:	21ac      	movs	r1, #172	; 0xac
    3cea:	4805      	ldr	r0, [pc, #20]	; (3d00 <z_ready_thread+0x78>)
    3cec:	f003 f8b0 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    3cf0:	f385 8811 	msr	BASEPRI, r5
    3cf4:	f3bf 8f6f 	isb	sy
}
    3cf8:	bd38      	pop	{r3, r4, r5, pc}
    3cfa:	bf00      	nop
    3cfc:	00009d84 	.word	0x00009d84
    3d00:	000082f4 	.word	0x000082f4
    3d04:	0000831a 	.word	0x0000831a
    3d08:	00008182 	.word	0x00008182
    3d0c:	0000832f 	.word	0x0000832f
    3d10:	00008347 	.word	0x00008347
    3d14:	0000835e 	.word	0x0000835e

00003d18 <z_reschedule>:
{
    3d18:	b538      	push	{r3, r4, r5, lr}
    3d1a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3d1c:	460d      	mov	r5, r1
    3d1e:	b9e9      	cbnz	r1, 3d5c <z_reschedule+0x44>
    3d20:	f3ef 8305 	mrs	r3, IPSR
    3d24:	b9d3      	cbnz	r3, 3d5c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    3d26:	4b19      	ldr	r3, [pc, #100]	; (3d8c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    3d28:	6a1a      	ldr	r2, [r3, #32]
    3d2a:	689b      	ldr	r3, [r3, #8]
    3d2c:	429a      	cmp	r2, r3
    3d2e:	d015      	beq.n	3d5c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d30:	f7ff fa8c 	bl	324c <z_spin_unlock_valid>
    3d34:	b968      	cbnz	r0, 3d52 <z_reschedule+0x3a>
    3d36:	23c3      	movs	r3, #195	; 0xc3
    3d38:	4a15      	ldr	r2, [pc, #84]	; (3d90 <z_reschedule+0x78>)
    3d3a:	4916      	ldr	r1, [pc, #88]	; (3d94 <z_reschedule+0x7c>)
    3d3c:	4816      	ldr	r0, [pc, #88]	; (3d98 <z_reschedule+0x80>)
    3d3e:	f002 ffbd 	bl	6cbc <printk>
    3d42:	4621      	mov	r1, r4
    3d44:	4815      	ldr	r0, [pc, #84]	; (3d9c <z_reschedule+0x84>)
    3d46:	f002 ffb9 	bl	6cbc <printk>
    3d4a:	21c3      	movs	r1, #195	; 0xc3
    3d4c:	4810      	ldr	r0, [pc, #64]	; (3d90 <z_reschedule+0x78>)
    3d4e:	f003 f87f 	bl	6e50 <assert_post_action>
}
    3d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_swap_irqlock(key.key);
    3d56:	2000      	movs	r0, #0
    3d58:	f003 b937 	b.w	6fca <z_swap_irqlock>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d5c:	4620      	mov	r0, r4
    3d5e:	f7ff fa75 	bl	324c <z_spin_unlock_valid>
    3d62:	b968      	cbnz	r0, 3d80 <z_reschedule+0x68>
    3d64:	23ac      	movs	r3, #172	; 0xac
    3d66:	4a0a      	ldr	r2, [pc, #40]	; (3d90 <z_reschedule+0x78>)
    3d68:	490a      	ldr	r1, [pc, #40]	; (3d94 <z_reschedule+0x7c>)
    3d6a:	480b      	ldr	r0, [pc, #44]	; (3d98 <z_reschedule+0x80>)
    3d6c:	f002 ffa6 	bl	6cbc <printk>
    3d70:	4621      	mov	r1, r4
    3d72:	480a      	ldr	r0, [pc, #40]	; (3d9c <z_reschedule+0x84>)
    3d74:	f002 ffa2 	bl	6cbc <printk>
    3d78:	21ac      	movs	r1, #172	; 0xac
    3d7a:	4805      	ldr	r0, [pc, #20]	; (3d90 <z_reschedule+0x78>)
    3d7c:	f003 f868 	bl	6e50 <assert_post_action>
    3d80:	f385 8811 	msr	BASEPRI, r5
    3d84:	f3bf 8f6f 	isb	sy
    3d88:	bd38      	pop	{r3, r4, r5, pc}
    3d8a:	bf00      	nop
    3d8c:	00009d3c 	.word	0x00009d3c
    3d90:	000082f4 	.word	0x000082f4
    3d94:	00008347 	.word	0x00008347
    3d98:	00008182 	.word	0x00008182
    3d9c:	0000835e 	.word	0x0000835e

00003da0 <z_sched_start>:
{
    3da0:	b538      	push	{r3, r4, r5, lr}
    3da2:	4604      	mov	r4, r0
	__asm__ volatile(
    3da4:	f04f 0320 	mov.w	r3, #32
    3da8:	f3ef 8511 	mrs	r5, BASEPRI
    3dac:	f383 8811 	msr	BASEPRI, r3
    3db0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3db4:	481d      	ldr	r0, [pc, #116]	; (3e2c <z_sched_start+0x8c>)
    3db6:	f7ff fa3b 	bl	3230 <z_spin_lock_valid>
    3dba:	b968      	cbnz	r0, 3dd8 <z_sched_start+0x38>
    3dbc:	2381      	movs	r3, #129	; 0x81
    3dbe:	4a1c      	ldr	r2, [pc, #112]	; (3e30 <z_sched_start+0x90>)
    3dc0:	491c      	ldr	r1, [pc, #112]	; (3e34 <z_sched_start+0x94>)
    3dc2:	481d      	ldr	r0, [pc, #116]	; (3e38 <z_sched_start+0x98>)
    3dc4:	f002 ff7a 	bl	6cbc <printk>
    3dc8:	4918      	ldr	r1, [pc, #96]	; (3e2c <z_sched_start+0x8c>)
    3dca:	481c      	ldr	r0, [pc, #112]	; (3e3c <z_sched_start+0x9c>)
    3dcc:	f002 ff76 	bl	6cbc <printk>
    3dd0:	2181      	movs	r1, #129	; 0x81
    3dd2:	4817      	ldr	r0, [pc, #92]	; (3e30 <z_sched_start+0x90>)
    3dd4:	f003 f83c 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    3dd8:	4814      	ldr	r0, [pc, #80]	; (3e2c <z_sched_start+0x8c>)
    3dda:	f7ff fa45 	bl	3268 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3dde:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    3de0:	075a      	lsls	r2, r3, #29
    3de2:	d416      	bmi.n	3e12 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3de4:	4811      	ldr	r0, [pc, #68]	; (3e2c <z_sched_start+0x8c>)
    3de6:	f7ff fa31 	bl	324c <z_spin_unlock_valid>
    3dea:	b968      	cbnz	r0, 3e08 <z_sched_start+0x68>
    3dec:	23ac      	movs	r3, #172	; 0xac
    3dee:	4a10      	ldr	r2, [pc, #64]	; (3e30 <z_sched_start+0x90>)
    3df0:	4913      	ldr	r1, [pc, #76]	; (3e40 <z_sched_start+0xa0>)
    3df2:	4811      	ldr	r0, [pc, #68]	; (3e38 <z_sched_start+0x98>)
    3df4:	f002 ff62 	bl	6cbc <printk>
    3df8:	490c      	ldr	r1, [pc, #48]	; (3e2c <z_sched_start+0x8c>)
    3dfa:	4812      	ldr	r0, [pc, #72]	; (3e44 <z_sched_start+0xa4>)
    3dfc:	f002 ff5e 	bl	6cbc <printk>
    3e00:	21ac      	movs	r1, #172	; 0xac
    3e02:	480b      	ldr	r0, [pc, #44]	; (3e30 <z_sched_start+0x90>)
    3e04:	f003 f824 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    3e08:	f385 8811 	msr	BASEPRI, r5
    3e0c:	f3bf 8f6f 	isb	sy
}
    3e10:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3e12:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    3e16:	4620      	mov	r0, r4
    3e18:	7363      	strb	r3, [r4, #13]
    3e1a:	f7ff fe89 	bl	3b30 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3e1e:	4629      	mov	r1, r5
}
    3e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    3e24:	4801      	ldr	r0, [pc, #4]	; (3e2c <z_sched_start+0x8c>)
    3e26:	f7ff bf77 	b.w	3d18 <z_reschedule>
    3e2a:	bf00      	nop
    3e2c:	00009d84 	.word	0x00009d84
    3e30:	000082f4 	.word	0x000082f4
    3e34:	0000831a 	.word	0x0000831a
    3e38:	00008182 	.word	0x00008182
    3e3c:	0000832f 	.word	0x0000832f
    3e40:	00008347 	.word	0x00008347
    3e44:	0000835e 	.word	0x0000835e

00003e48 <k_sched_lock>:
{
    3e48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3e4a:	f04f 0320 	mov.w	r3, #32
    3e4e:	f3ef 8511 	mrs	r5, BASEPRI
    3e52:	f383 8811 	msr	BASEPRI, r3
    3e56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e5a:	4829      	ldr	r0, [pc, #164]	; (3f00 <k_sched_lock+0xb8>)
    3e5c:	f7ff f9e8 	bl	3230 <z_spin_lock_valid>
    3e60:	b968      	cbnz	r0, 3e7e <k_sched_lock+0x36>
    3e62:	2381      	movs	r3, #129	; 0x81
    3e64:	4a27      	ldr	r2, [pc, #156]	; (3f04 <k_sched_lock+0xbc>)
    3e66:	4928      	ldr	r1, [pc, #160]	; (3f08 <k_sched_lock+0xc0>)
    3e68:	4828      	ldr	r0, [pc, #160]	; (3f0c <k_sched_lock+0xc4>)
    3e6a:	f002 ff27 	bl	6cbc <printk>
    3e6e:	4924      	ldr	r1, [pc, #144]	; (3f00 <k_sched_lock+0xb8>)
    3e70:	4827      	ldr	r0, [pc, #156]	; (3f10 <k_sched_lock+0xc8>)
    3e72:	f002 ff23 	bl	6cbc <printk>
    3e76:	2181      	movs	r1, #129	; 0x81
    3e78:	4822      	ldr	r0, [pc, #136]	; (3f04 <k_sched_lock+0xbc>)
    3e7a:	f002 ffe9 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    3e7e:	4820      	ldr	r0, [pc, #128]	; (3f00 <k_sched_lock+0xb8>)
    3e80:	f7ff f9f2 	bl	3268 <z_spin_lock_set_owner>
    3e84:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    3e88:	b163      	cbz	r3, 3ea4 <k_sched_lock+0x5c>
    3e8a:	4922      	ldr	r1, [pc, #136]	; (3f14 <k_sched_lock+0xcc>)
    3e8c:	23fd      	movs	r3, #253	; 0xfd
    3e8e:	4a22      	ldr	r2, [pc, #136]	; (3f18 <k_sched_lock+0xd0>)
    3e90:	481e      	ldr	r0, [pc, #120]	; (3f0c <k_sched_lock+0xc4>)
    3e92:	f002 ff13 	bl	6cbc <printk>
    3e96:	4821      	ldr	r0, [pc, #132]	; (3f1c <k_sched_lock+0xd4>)
    3e98:	f002 ff10 	bl	6cbc <printk>
    3e9c:	21fd      	movs	r1, #253	; 0xfd
    3e9e:	481e      	ldr	r0, [pc, #120]	; (3f18 <k_sched_lock+0xd0>)
    3ea0:	f002 ffd6 	bl	6e50 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    3ea4:	4c1e      	ldr	r4, [pc, #120]	; (3f20 <k_sched_lock+0xd8>)
    3ea6:	68a3      	ldr	r3, [r4, #8]
    3ea8:	7bdb      	ldrb	r3, [r3, #15]
    3eaa:	2b01      	cmp	r3, #1
    3eac:	d10c      	bne.n	3ec8 <k_sched_lock+0x80>
    3eae:	491d      	ldr	r1, [pc, #116]	; (3f24 <k_sched_lock+0xdc>)
    3eb0:	23fe      	movs	r3, #254	; 0xfe
    3eb2:	4a19      	ldr	r2, [pc, #100]	; (3f18 <k_sched_lock+0xd0>)
    3eb4:	4815      	ldr	r0, [pc, #84]	; (3f0c <k_sched_lock+0xc4>)
    3eb6:	f002 ff01 	bl	6cbc <printk>
    3eba:	4818      	ldr	r0, [pc, #96]	; (3f1c <k_sched_lock+0xd4>)
    3ebc:	f002 fefe 	bl	6cbc <printk>
    3ec0:	21fe      	movs	r1, #254	; 0xfe
    3ec2:	4815      	ldr	r0, [pc, #84]	; (3f18 <k_sched_lock+0xd0>)
    3ec4:	f002 ffc4 	bl	6e50 <assert_post_action>
	--_current->base.sched_locked;
    3ec8:	68a2      	ldr	r2, [r4, #8]
    3eca:	7bd3      	ldrb	r3, [r2, #15]
    3ecc:	3b01      	subs	r3, #1
    3ece:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ed0:	480b      	ldr	r0, [pc, #44]	; (3f00 <k_sched_lock+0xb8>)
    3ed2:	f7ff f9bb 	bl	324c <z_spin_unlock_valid>
    3ed6:	b968      	cbnz	r0, 3ef4 <k_sched_lock+0xac>
    3ed8:	23ac      	movs	r3, #172	; 0xac
    3eda:	4a0a      	ldr	r2, [pc, #40]	; (3f04 <k_sched_lock+0xbc>)
    3edc:	4912      	ldr	r1, [pc, #72]	; (3f28 <k_sched_lock+0xe0>)
    3ede:	480b      	ldr	r0, [pc, #44]	; (3f0c <k_sched_lock+0xc4>)
    3ee0:	f002 feec 	bl	6cbc <printk>
    3ee4:	4906      	ldr	r1, [pc, #24]	; (3f00 <k_sched_lock+0xb8>)
    3ee6:	4811      	ldr	r0, [pc, #68]	; (3f2c <k_sched_lock+0xe4>)
    3ee8:	f002 fee8 	bl	6cbc <printk>
    3eec:	21ac      	movs	r1, #172	; 0xac
    3eee:	4805      	ldr	r0, [pc, #20]	; (3f04 <k_sched_lock+0xbc>)
    3ef0:	f002 ffae 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    3ef4:	f385 8811 	msr	BASEPRI, r5
    3ef8:	f3bf 8f6f 	isb	sy
}
    3efc:	bd38      	pop	{r3, r4, r5, pc}
    3efe:	bf00      	nop
    3f00:	00009d84 	.word	0x00009d84
    3f04:	000082f4 	.word	0x000082f4
    3f08:	0000831a 	.word	0x0000831a
    3f0c:	00008182 	.word	0x00008182
    3f10:	0000832f 	.word	0x0000832f
    3f14:	00008856 	.word	0x00008856
    3f18:	00008961 	.word	0x00008961
    3f1c:	0000898c 	.word	0x0000898c
    3f20:	00009d3c 	.word	0x00009d3c
    3f24:	0000898f 	.word	0x0000898f
    3f28:	00008347 	.word	0x00008347
    3f2c:	0000835e 	.word	0x0000835e

00003f30 <k_sched_unlock>:
{
    3f30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3f32:	f04f 0320 	mov.w	r3, #32
    3f36:	f3ef 8511 	mrs	r5, BASEPRI
    3f3a:	f383 8811 	msr	BASEPRI, r3
    3f3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f42:	482d      	ldr	r0, [pc, #180]	; (3ff8 <k_sched_unlock+0xc8>)
    3f44:	f7ff f974 	bl	3230 <z_spin_lock_valid>
    3f48:	b968      	cbnz	r0, 3f66 <k_sched_unlock+0x36>
    3f4a:	2381      	movs	r3, #129	; 0x81
    3f4c:	4a2b      	ldr	r2, [pc, #172]	; (3ffc <k_sched_unlock+0xcc>)
    3f4e:	492c      	ldr	r1, [pc, #176]	; (4000 <CONFIG_SRAM_NC_SIZE>)
    3f50:	482c      	ldr	r0, [pc, #176]	; (4004 <CONFIG_SRAM_NC_SIZE+0x4>)
    3f52:	f002 feb3 	bl	6cbc <printk>
    3f56:	4928      	ldr	r1, [pc, #160]	; (3ff8 <k_sched_unlock+0xc8>)
    3f58:	482b      	ldr	r0, [pc, #172]	; (4008 <CONFIG_SRAM_NC_SIZE+0x8>)
    3f5a:	f002 feaf 	bl	6cbc <printk>
    3f5e:	2181      	movs	r1, #129	; 0x81
    3f60:	4826      	ldr	r0, [pc, #152]	; (3ffc <k_sched_unlock+0xcc>)
    3f62:	f002 ff75 	bl	6e50 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    3f66:	4c29      	ldr	r4, [pc, #164]	; (400c <CONFIG_SRAM_NC_SIZE+0xc>)
	z_spin_lock_set_owner(l);
    3f68:	4823      	ldr	r0, [pc, #140]	; (3ff8 <k_sched_unlock+0xc8>)
    3f6a:	f7ff f97d 	bl	3268 <z_spin_lock_set_owner>
    3f6e:	68a3      	ldr	r3, [r4, #8]
    3f70:	7bdb      	ldrb	r3, [r3, #15]
    3f72:	b973      	cbnz	r3, 3f92 <k_sched_unlock+0x62>
    3f74:	4926      	ldr	r1, [pc, #152]	; (4010 <CONFIG_SRAM_NC_SIZE+0x10>)
    3f76:	f44f 7351 	mov.w	r3, #836	; 0x344
    3f7a:	4a26      	ldr	r2, [pc, #152]	; (4014 <CONFIG_SRAM_NC_SIZE+0x14>)
    3f7c:	4821      	ldr	r0, [pc, #132]	; (4004 <CONFIG_SRAM_NC_SIZE+0x4>)
    3f7e:	f002 fe9d 	bl	6cbc <printk>
    3f82:	4825      	ldr	r0, [pc, #148]	; (4018 <CONFIG_SRAM_NC_SIZE+0x18>)
    3f84:	f002 fe9a 	bl	6cbc <printk>
    3f88:	f44f 7151 	mov.w	r1, #836	; 0x344
    3f8c:	4821      	ldr	r0, [pc, #132]	; (4014 <CONFIG_SRAM_NC_SIZE+0x14>)
    3f8e:	f002 ff5f 	bl	6e50 <assert_post_action>
    3f92:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    3f96:	b173      	cbz	r3, 3fb6 <k_sched_unlock+0x86>
    3f98:	4920      	ldr	r1, [pc, #128]	; (401c <CONFIG_SRAM_NC_SIZE+0x1c>)
    3f9a:	f240 3345 	movw	r3, #837	; 0x345
    3f9e:	4a1d      	ldr	r2, [pc, #116]	; (4014 <CONFIG_SRAM_NC_SIZE+0x14>)
    3fa0:	4818      	ldr	r0, [pc, #96]	; (4004 <CONFIG_SRAM_NC_SIZE+0x4>)
    3fa2:	f002 fe8b 	bl	6cbc <printk>
    3fa6:	481c      	ldr	r0, [pc, #112]	; (4018 <CONFIG_SRAM_NC_SIZE+0x18>)
    3fa8:	f002 fe88 	bl	6cbc <printk>
    3fac:	f240 3145 	movw	r1, #837	; 0x345
    3fb0:	4818      	ldr	r0, [pc, #96]	; (4014 <CONFIG_SRAM_NC_SIZE+0x14>)
    3fb2:	f002 ff4d 	bl	6e50 <assert_post_action>
		++_current->base.sched_locked;
    3fb6:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    3fb8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3fba:	7bd3      	ldrb	r3, [r2, #15]
    3fbc:	3301      	adds	r3, #1
    3fbe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3fc0:	f7ff fd7e 	bl	3ac0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3fc4:	480c      	ldr	r0, [pc, #48]	; (3ff8 <k_sched_unlock+0xc8>)
    3fc6:	f7ff f941 	bl	324c <z_spin_unlock_valid>
    3fca:	b968      	cbnz	r0, 3fe8 <k_sched_unlock+0xb8>
    3fcc:	23ac      	movs	r3, #172	; 0xac
    3fce:	4a0b      	ldr	r2, [pc, #44]	; (3ffc <k_sched_unlock+0xcc>)
    3fd0:	4913      	ldr	r1, [pc, #76]	; (4020 <CONFIG_SRAM_NC_SIZE+0x20>)
    3fd2:	480c      	ldr	r0, [pc, #48]	; (4004 <CONFIG_SRAM_NC_SIZE+0x4>)
    3fd4:	f002 fe72 	bl	6cbc <printk>
    3fd8:	4907      	ldr	r1, [pc, #28]	; (3ff8 <k_sched_unlock+0xc8>)
    3fda:	4812      	ldr	r0, [pc, #72]	; (4024 <CONFIG_SRAM_NC_SIZE+0x24>)
    3fdc:	f002 fe6e 	bl	6cbc <printk>
    3fe0:	21ac      	movs	r1, #172	; 0xac
    3fe2:	4806      	ldr	r0, [pc, #24]	; (3ffc <k_sched_unlock+0xcc>)
    3fe4:	f002 ff34 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    3fe8:	f385 8811 	msr	BASEPRI, r5
    3fec:	f3bf 8f6f 	isb	sy
}
    3ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    3ff4:	f002 bffe 	b.w	6ff4 <z_reschedule_unlocked>
    3ff8:	00009d84 	.word	0x00009d84
    3ffc:	000082f4 	.word	0x000082f4
    4000:	0000831a 	.word	0x0000831a
    4004:	00008182 	.word	0x00008182
    4008:	0000832f 	.word	0x0000832f
    400c:	00009d3c 	.word	0x00009d3c
    4010:	00008a2a 	.word	0x00008a2a
    4014:	000089c0 	.word	0x000089c0
    4018:	0000898c 	.word	0x0000898c
    401c:	00008856 	.word	0x00008856
    4020:	00008347 	.word	0x00008347
    4024:	0000835e 	.word	0x0000835e

00004028 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4028:	4b0c      	ldr	r3, [pc, #48]	; (405c <z_priq_dumb_remove+0x34>)
{
    402a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    402c:	4299      	cmp	r1, r3
{
    402e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4030:	d10b      	bne.n	404a <z_priq_dumb_remove+0x22>
    4032:	490b      	ldr	r1, [pc, #44]	; (4060 <z_priq_dumb_remove+0x38>)
    4034:	480b      	ldr	r0, [pc, #44]	; (4064 <z_priq_dumb_remove+0x3c>)
    4036:	f240 33b5 	movw	r3, #949	; 0x3b5
    403a:	4a0b      	ldr	r2, [pc, #44]	; (4068 <z_priq_dumb_remove+0x40>)
    403c:	f002 fe3e 	bl	6cbc <printk>
    4040:	f240 31b5 	movw	r1, #949	; 0x3b5
    4044:	4808      	ldr	r0, [pc, #32]	; (4068 <z_priq_dumb_remove+0x40>)
    4046:	f002 ff03 	bl	6e50 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    404a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    404e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4050:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4052:	2300      	movs	r3, #0
	node->prev = NULL;
    4054:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4058:	bd10      	pop	{r4, pc}
    405a:	bf00      	nop
    405c:	00009a58 	.word	0x00009a58
    4060:	00008a09 	.word	0x00008a09
    4064:	00008182 	.word	0x00008182
    4068:	000089c0 	.word	0x000089c0

0000406c <unready_thread>:
{
    406c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    406e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4072:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4074:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    4076:	7b43      	ldrb	r3, [r0, #13]
    4078:	da06      	bge.n	4088 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    407a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    407e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4080:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4082:	4806      	ldr	r0, [pc, #24]	; (409c <unready_thread+0x30>)
    4084:	f7ff ffd0 	bl	4028 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4088:	4b05      	ldr	r3, [pc, #20]	; (40a0 <unready_thread+0x34>)
    408a:	6898      	ldr	r0, [r3, #8]
    408c:	1b03      	subs	r3, r0, r4
    408e:	4258      	negs	r0, r3
    4090:	4158      	adcs	r0, r3
}
    4092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4096:	f7ff bd13 	b.w	3ac0 <update_cache>
    409a:	bf00      	nop
    409c:	00009d60 	.word	0x00009d60
    40a0:	00009d3c 	.word	0x00009d3c

000040a4 <add_to_waitq_locked>:
{
    40a4:	b538      	push	{r3, r4, r5, lr}
    40a6:	4604      	mov	r4, r0
    40a8:	460d      	mov	r5, r1
	unready_thread(thread);
    40aa:	f7ff ffdf 	bl	406c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    40ae:	7b63      	ldrb	r3, [r4, #13]
    40b0:	f043 0302 	orr.w	r3, r3, #2
    40b4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    40b6:	b365      	cbz	r5, 4112 <add_to_waitq_locked+0x6e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    40b8:	4b16      	ldr	r3, [pc, #88]	; (4114 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    40ba:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    40bc:	429c      	cmp	r4, r3
    40be:	d10b      	bne.n	40d8 <add_to_waitq_locked+0x34>
    40c0:	4915      	ldr	r1, [pc, #84]	; (4118 <add_to_waitq_locked+0x74>)
    40c2:	4816      	ldr	r0, [pc, #88]	; (411c <add_to_waitq_locked+0x78>)
    40c4:	f240 33a6 	movw	r3, #934	; 0x3a6
    40c8:	4a15      	ldr	r2, [pc, #84]	; (4120 <add_to_waitq_locked+0x7c>)
    40ca:	f002 fdf7 	bl	6cbc <printk>
    40ce:	f240 31a6 	movw	r1, #934	; 0x3a6
    40d2:	4813      	ldr	r0, [pc, #76]	; (4120 <add_to_waitq_locked+0x7c>)
    40d4:	f002 febc 	bl	6e50 <assert_post_action>
	return list->head == list;
    40d8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40da:	429d      	cmp	r5, r3
    40dc:	d109      	bne.n	40f2 <add_to_waitq_locked+0x4e>
	sys_dnode_t *const tail = list->tail;
    40de:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    40e0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    40e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    40e6:	606c      	str	r4, [r5, #4]
}
    40e8:	e013      	b.n	4112 <add_to_waitq_locked+0x6e>
	return (node == list->tail) ? NULL : node->next;
    40ea:	686a      	ldr	r2, [r5, #4]
    40ec:	429a      	cmp	r2, r3
    40ee:	d0f6      	beq.n	40de <add_to_waitq_locked+0x3a>
    40f0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    40f2:	2b00      	cmp	r3, #0
    40f4:	d0f3      	beq.n	40de <add_to_waitq_locked+0x3a>
	int32_t b1 = thread_1->base.prio;
    40f6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    40fa:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    40fe:	4291      	cmp	r1, r2
    4100:	d0f3      	beq.n	40ea <add_to_waitq_locked+0x46>
		return b2 - b1;
    4102:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4104:	2a00      	cmp	r2, #0
    4106:	ddf0      	ble.n	40ea <add_to_waitq_locked+0x46>
	sys_dnode_t *const prev = successor->prev;
    4108:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    410a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    410e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4110:	605c      	str	r4, [r3, #4]
}
    4112:	bd38      	pop	{r3, r4, r5, pc}
    4114:	00009a58 	.word	0x00009a58
    4118:	00008a09 	.word	0x00008a09
    411c:	00008182 	.word	0x00008182
    4120:	000089c0 	.word	0x000089c0

00004124 <pend>:
{
    4124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4128:	4604      	mov	r4, r0
    412a:	4688      	mov	r8, r1
    412c:	4616      	mov	r6, r2
    412e:	461d      	mov	r5, r3
	__asm__ volatile(
    4130:	f04f 0320 	mov.w	r3, #32
    4134:	f3ef 8711 	mrs	r7, BASEPRI
    4138:	f383 8811 	msr	BASEPRI, r3
    413c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4140:	481f      	ldr	r0, [pc, #124]	; (41c0 <pend+0x9c>)
    4142:	f7ff f875 	bl	3230 <z_spin_lock_valid>
    4146:	b968      	cbnz	r0, 4164 <pend+0x40>
    4148:	2381      	movs	r3, #129	; 0x81
    414a:	4a1e      	ldr	r2, [pc, #120]	; (41c4 <pend+0xa0>)
    414c:	491e      	ldr	r1, [pc, #120]	; (41c8 <pend+0xa4>)
    414e:	481f      	ldr	r0, [pc, #124]	; (41cc <pend+0xa8>)
    4150:	f002 fdb4 	bl	6cbc <printk>
    4154:	491a      	ldr	r1, [pc, #104]	; (41c0 <pend+0x9c>)
    4156:	481e      	ldr	r0, [pc, #120]	; (41d0 <pend+0xac>)
    4158:	f002 fdb0 	bl	6cbc <printk>
    415c:	2181      	movs	r1, #129	; 0x81
    415e:	4819      	ldr	r0, [pc, #100]	; (41c4 <pend+0xa0>)
    4160:	f002 fe76 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4164:	4816      	ldr	r0, [pc, #88]	; (41c0 <pend+0x9c>)
    4166:	f7ff f87f 	bl	3268 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    416a:	4620      	mov	r0, r4
    416c:	4641      	mov	r1, r8
    416e:	f7ff ff99 	bl	40a4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4172:	4813      	ldr	r0, [pc, #76]	; (41c0 <pend+0x9c>)
    4174:	f7ff f86a 	bl	324c <z_spin_unlock_valid>
    4178:	b968      	cbnz	r0, 4196 <pend+0x72>
    417a:	23ac      	movs	r3, #172	; 0xac
    417c:	4a11      	ldr	r2, [pc, #68]	; (41c4 <pend+0xa0>)
    417e:	4915      	ldr	r1, [pc, #84]	; (41d4 <pend+0xb0>)
    4180:	4812      	ldr	r0, [pc, #72]	; (41cc <pend+0xa8>)
    4182:	f002 fd9b 	bl	6cbc <printk>
    4186:	490e      	ldr	r1, [pc, #56]	; (41c0 <pend+0x9c>)
    4188:	4813      	ldr	r0, [pc, #76]	; (41d8 <pend+0xb4>)
    418a:	f002 fd97 	bl	6cbc <printk>
    418e:	21ac      	movs	r1, #172	; 0xac
    4190:	480c      	ldr	r0, [pc, #48]	; (41c4 <pend+0xa0>)
    4192:	f002 fe5d 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4196:	f387 8811 	msr	BASEPRI, r7
    419a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    419e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    41a2:	bf08      	it	eq
    41a4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    41a8:	d008      	beq.n	41bc <pend+0x98>
    41aa:	4632      	mov	r2, r6
    41ac:	462b      	mov	r3, r5
    41ae:	f104 0018 	add.w	r0, r4, #24
    41b2:	490a      	ldr	r1, [pc, #40]	; (41dc <pend+0xb8>)
}
    41b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41b8:	f000 bcf8 	b.w	4bac <z_add_timeout>
    41bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41c0:	00009d84 	.word	0x00009d84
    41c4:	000082f4 	.word	0x000082f4
    41c8:	0000831a 	.word	0x0000831a
    41cc:	00008182 	.word	0x00008182
    41d0:	0000832f 	.word	0x0000832f
    41d4:	00008347 	.word	0x00008347
    41d8:	0000835e 	.word	0x0000835e
    41dc:	000045e5 	.word	0x000045e5

000041e0 <z_pend_curr>:
{
    41e0:	b538      	push	{r3, r4, r5, lr}
    41e2:	4604      	mov	r4, r0
	pending_current = _current;
    41e4:	4b10      	ldr	r3, [pc, #64]	; (4228 <z_pend_curr+0x48>)
{
    41e6:	460d      	mov	r5, r1
	pending_current = _current;
    41e8:	6898      	ldr	r0, [r3, #8]
    41ea:	4b10      	ldr	r3, [pc, #64]	; (422c <z_pend_curr+0x4c>)
{
    41ec:	4611      	mov	r1, r2
	pending_current = _current;
    41ee:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    41f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    41f4:	f7ff ff96 	bl	4124 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41f8:	4620      	mov	r0, r4
    41fa:	f7ff f827 	bl	324c <z_spin_unlock_valid>
    41fe:	b968      	cbnz	r0, 421c <z_pend_curr+0x3c>
    4200:	23c3      	movs	r3, #195	; 0xc3
    4202:	4a0b      	ldr	r2, [pc, #44]	; (4230 <z_pend_curr+0x50>)
    4204:	490b      	ldr	r1, [pc, #44]	; (4234 <z_pend_curr+0x54>)
    4206:	480c      	ldr	r0, [pc, #48]	; (4238 <z_pend_curr+0x58>)
    4208:	f002 fd58 	bl	6cbc <printk>
    420c:	4621      	mov	r1, r4
    420e:	480b      	ldr	r0, [pc, #44]	; (423c <z_pend_curr+0x5c>)
    4210:	f002 fd54 	bl	6cbc <printk>
    4214:	21c3      	movs	r1, #195	; 0xc3
    4216:	4806      	ldr	r0, [pc, #24]	; (4230 <z_pend_curr+0x50>)
    4218:	f002 fe1a 	bl	6e50 <assert_post_action>
    421c:	4628      	mov	r0, r5
}
    421e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4222:	f002 bed2 	b.w	6fca <z_swap_irqlock>
    4226:	bf00      	nop
    4228:	00009d3c 	.word	0x00009d3c
    422c:	00009d78 	.word	0x00009d78
    4230:	000082f4 	.word	0x000082f4
    4234:	00008347 	.word	0x00008347
    4238:	00008182 	.word	0x00008182
    423c:	0000835e 	.word	0x0000835e

00004240 <move_thread_to_end_of_prio_q>:
{
    4240:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4242:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4246:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4248:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    424a:	7b43      	ldrb	r3, [r0, #13]
    424c:	da06      	bge.n	425c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    424e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    4252:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4254:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4256:	481e      	ldr	r0, [pc, #120]	; (42d0 <move_thread_to_end_of_prio_q+0x90>)
    4258:	f7ff fee6 	bl	4028 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    425c:	7b63      	ldrb	r3, [r4, #13]
    425e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4262:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4264:	4b1b      	ldr	r3, [pc, #108]	; (42d4 <move_thread_to_end_of_prio_q+0x94>)
    4266:	429c      	cmp	r4, r3
    4268:	d10b      	bne.n	4282 <move_thread_to_end_of_prio_q+0x42>
    426a:	491b      	ldr	r1, [pc, #108]	; (42d8 <move_thread_to_end_of_prio_q+0x98>)
    426c:	481b      	ldr	r0, [pc, #108]	; (42dc <move_thread_to_end_of_prio_q+0x9c>)
    426e:	f240 33a6 	movw	r3, #934	; 0x3a6
    4272:	4a1b      	ldr	r2, [pc, #108]	; (42e0 <move_thread_to_end_of_prio_q+0xa0>)
    4274:	f002 fd22 	bl	6cbc <printk>
    4278:	f240 31a6 	movw	r1, #934	; 0x3a6
    427c:	4818      	ldr	r0, [pc, #96]	; (42e0 <move_thread_to_end_of_prio_q+0xa0>)
    427e:	f002 fde7 	bl	6e50 <assert_post_action>
	return list->head == list;
    4282:	4a18      	ldr	r2, [pc, #96]	; (42e4 <move_thread_to_end_of_prio_q+0xa4>)
    4284:	4610      	mov	r0, r2
    4286:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
    428a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    428c:	4283      	cmp	r3, r0
    428e:	d107      	bne.n	42a0 <move_thread_to_end_of_prio_q+0x60>
	node->prev = tail;
    4290:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4294:	600c      	str	r4, [r1, #0]
	list->tail = node;
    4296:	6294      	str	r4, [r2, #40]	; 0x28
}
    4298:	e012      	b.n	42c0 <move_thread_to_end_of_prio_q+0x80>
	return (node == list->tail) ? NULL : node->next;
    429a:	4299      	cmp	r1, r3
    429c:	d0f8      	beq.n	4290 <move_thread_to_end_of_prio_q+0x50>
    429e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42a0:	2b00      	cmp	r3, #0
    42a2:	d0f5      	beq.n	4290 <move_thread_to_end_of_prio_q+0x50>
	int32_t b1 = thread_1->base.prio;
    42a4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    42a8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    42ac:	42ae      	cmp	r6, r5
    42ae:	d0f4      	beq.n	429a <move_thread_to_end_of_prio_q+0x5a>
		return b2 - b1;
    42b0:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    42b2:	2d00      	cmp	r5, #0
    42b4:	ddf1      	ble.n	429a <move_thread_to_end_of_prio_q+0x5a>
	sys_dnode_t *const prev = successor->prev;
    42b6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    42b8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    42bc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    42be:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    42c0:	6890      	ldr	r0, [r2, #8]
    42c2:	1b03      	subs	r3, r0, r4
    42c4:	4258      	negs	r0, r3
    42c6:	4158      	adcs	r0, r3
}
    42c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    42cc:	f7ff bbf8 	b.w	3ac0 <update_cache>
    42d0:	00009d60 	.word	0x00009d60
    42d4:	00009a58 	.word	0x00009a58
    42d8:	00008a09 	.word	0x00008a09
    42dc:	00008182 	.word	0x00008182
    42e0:	000089c0 	.word	0x000089c0
    42e4:	00009d3c 	.word	0x00009d3c

000042e8 <z_time_slice>:
{
    42e8:	b538      	push	{r3, r4, r5, lr}
    42ea:	4604      	mov	r4, r0
	__asm__ volatile(
    42ec:	f04f 0320 	mov.w	r3, #32
    42f0:	f3ef 8511 	mrs	r5, BASEPRI
    42f4:	f383 8811 	msr	BASEPRI, r3
    42f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    42fc:	4829      	ldr	r0, [pc, #164]	; (43a4 <z_time_slice+0xbc>)
    42fe:	f7fe ff97 	bl	3230 <z_spin_lock_valid>
    4302:	b968      	cbnz	r0, 4320 <z_time_slice+0x38>
    4304:	2381      	movs	r3, #129	; 0x81
    4306:	4a28      	ldr	r2, [pc, #160]	; (43a8 <z_time_slice+0xc0>)
    4308:	4928      	ldr	r1, [pc, #160]	; (43ac <z_time_slice+0xc4>)
    430a:	4829      	ldr	r0, [pc, #164]	; (43b0 <z_time_slice+0xc8>)
    430c:	f002 fcd6 	bl	6cbc <printk>
    4310:	4924      	ldr	r1, [pc, #144]	; (43a4 <z_time_slice+0xbc>)
    4312:	4828      	ldr	r0, [pc, #160]	; (43b4 <z_time_slice+0xcc>)
    4314:	f002 fcd2 	bl	6cbc <printk>
    4318:	2181      	movs	r1, #129	; 0x81
    431a:	4823      	ldr	r0, [pc, #140]	; (43a8 <z_time_slice+0xc0>)
    431c:	f002 fd98 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4320:	4820      	ldr	r0, [pc, #128]	; (43a4 <z_time_slice+0xbc>)
    4322:	f7fe ffa1 	bl	3268 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4326:	4b24      	ldr	r3, [pc, #144]	; (43b8 <z_time_slice+0xd0>)
    4328:	4a24      	ldr	r2, [pc, #144]	; (43bc <z_time_slice+0xd4>)
    432a:	6898      	ldr	r0, [r3, #8]
    432c:	6811      	ldr	r1, [r2, #0]
    432e:	4288      	cmp	r0, r1
    4330:	d118      	bne.n	4364 <z_time_slice+0x7c>
			z_reset_time_slice();
    4332:	f7ff fbaf 	bl	3a94 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4336:	481b      	ldr	r0, [pc, #108]	; (43a4 <z_time_slice+0xbc>)
    4338:	f7fe ff88 	bl	324c <z_spin_unlock_valid>
    433c:	b968      	cbnz	r0, 435a <z_time_slice+0x72>
    433e:	23ac      	movs	r3, #172	; 0xac
    4340:	4a19      	ldr	r2, [pc, #100]	; (43a8 <z_time_slice+0xc0>)
    4342:	491f      	ldr	r1, [pc, #124]	; (43c0 <z_time_slice+0xd8>)
    4344:	481a      	ldr	r0, [pc, #104]	; (43b0 <z_time_slice+0xc8>)
    4346:	f002 fcb9 	bl	6cbc <printk>
    434a:	4916      	ldr	r1, [pc, #88]	; (43a4 <z_time_slice+0xbc>)
    434c:	481d      	ldr	r0, [pc, #116]	; (43c4 <z_time_slice+0xdc>)
    434e:	f002 fcb5 	bl	6cbc <printk>
    4352:	21ac      	movs	r1, #172	; 0xac
    4354:	4814      	ldr	r0, [pc, #80]	; (43a8 <z_time_slice+0xc0>)
    4356:	f002 fd7b 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    435a:	f385 8811 	msr	BASEPRI, r5
    435e:	f3bf 8f6f 	isb	sy
}
    4362:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4364:	2100      	movs	r1, #0
    4366:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4368:	4a17      	ldr	r2, [pc, #92]	; (43c8 <z_time_slice+0xe0>)
    436a:	6812      	ldr	r2, [r2, #0]
    436c:	b1ba      	cbz	r2, 439e <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    436e:	89c2      	ldrh	r2, [r0, #14]
    4370:	2a7f      	cmp	r2, #127	; 0x7f
    4372:	d814      	bhi.n	439e <z_time_slice+0xb6>
		&& !z_is_thread_prevented_from_running(thread)
    4374:	7b42      	ldrb	r2, [r0, #13]
    4376:	06d2      	lsls	r2, r2, #27
    4378:	d111      	bne.n	439e <z_time_slice+0xb6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    437a:	4a14      	ldr	r2, [pc, #80]	; (43cc <z_time_slice+0xe4>)
    437c:	f990 100e 	ldrsb.w	r1, [r0, #14]
    4380:	6812      	ldr	r2, [r2, #0]
    4382:	4291      	cmp	r1, r2
    4384:	db0b      	blt.n	439e <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    4386:	4a12      	ldr	r2, [pc, #72]	; (43d0 <z_time_slice+0xe8>)
    4388:	4290      	cmp	r0, r2
    438a:	d008      	beq.n	439e <z_time_slice+0xb6>
		if (ticks >= _current_cpu->slice_ticks) {
    438c:	691a      	ldr	r2, [r3, #16]
    438e:	42a2      	cmp	r2, r4
    4390:	dc02      	bgt.n	4398 <z_time_slice+0xb0>
			move_thread_to_end_of_prio_q(_current);
    4392:	f7ff ff55 	bl	4240 <move_thread_to_end_of_prio_q>
    4396:	e7cc      	b.n	4332 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    4398:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
    439a:	611a      	str	r2, [r3, #16]
    439c:	e7cb      	b.n	4336 <z_time_slice+0x4e>
    439e:	2200      	movs	r2, #0
    43a0:	e7fb      	b.n	439a <z_time_slice+0xb2>
    43a2:	bf00      	nop
    43a4:	00009d84 	.word	0x00009d84
    43a8:	000082f4 	.word	0x000082f4
    43ac:	0000831a 	.word	0x0000831a
    43b0:	00008182 	.word	0x00008182
    43b4:	0000832f 	.word	0x0000832f
    43b8:	00009d3c 	.word	0x00009d3c
    43bc:	00009d78 	.word	0x00009d78
    43c0:	00008347 	.word	0x00008347
    43c4:	0000835e 	.word	0x0000835e
    43c8:	00009d80 	.word	0x00009d80
    43cc:	00009d7c 	.word	0x00009d7c
    43d0:	00009a58 	.word	0x00009a58

000043d4 <z_set_prio>:
{
    43d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43d6:	4604      	mov	r4, r0
    43d8:	460d      	mov	r5, r1
	__asm__ volatile(
    43da:	f04f 0320 	mov.w	r3, #32
    43de:	f3ef 8611 	mrs	r6, BASEPRI
    43e2:	f383 8811 	msr	BASEPRI, r3
    43e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    43ea:	483b      	ldr	r0, [pc, #236]	; (44d8 <z_set_prio+0x104>)
    43ec:	f7fe ff20 	bl	3230 <z_spin_lock_valid>
    43f0:	b968      	cbnz	r0, 440e <z_set_prio+0x3a>
    43f2:	2381      	movs	r3, #129	; 0x81
    43f4:	4a39      	ldr	r2, [pc, #228]	; (44dc <z_set_prio+0x108>)
    43f6:	493a      	ldr	r1, [pc, #232]	; (44e0 <z_set_prio+0x10c>)
    43f8:	483a      	ldr	r0, [pc, #232]	; (44e4 <z_set_prio+0x110>)
    43fa:	f002 fc5f 	bl	6cbc <printk>
    43fe:	4936      	ldr	r1, [pc, #216]	; (44d8 <z_set_prio+0x104>)
    4400:	4839      	ldr	r0, [pc, #228]	; (44e8 <z_set_prio+0x114>)
    4402:	f002 fc5b 	bl	6cbc <printk>
    4406:	2181      	movs	r1, #129	; 0x81
    4408:	4834      	ldr	r0, [pc, #208]	; (44dc <z_set_prio+0x108>)
    440a:	f002 fd21 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    440e:	4832      	ldr	r0, [pc, #200]	; (44d8 <z_set_prio+0x104>)
    4410:	f7fe ff2a 	bl	3268 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    4414:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4416:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4418:	06da      	lsls	r2, r3, #27
    441a:	d128      	bne.n	446e <z_set_prio+0x9a>
    441c:	69a2      	ldr	r2, [r4, #24]
    441e:	bb32      	cbnz	r2, 446e <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4424:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4426:	4621      	mov	r1, r4
    4428:	4830      	ldr	r0, [pc, #192]	; (44ec <z_set_prio+0x118>)
    442a:	f7ff fdfd 	bl	4028 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    442e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4430:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4432:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4436:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4438:	4b2d      	ldr	r3, [pc, #180]	; (44f0 <z_set_prio+0x11c>)
    443a:	429c      	cmp	r4, r3
    443c:	d10b      	bne.n	4456 <z_set_prio+0x82>
    443e:	492d      	ldr	r1, [pc, #180]	; (44f4 <z_set_prio+0x120>)
    4440:	4828      	ldr	r0, [pc, #160]	; (44e4 <z_set_prio+0x110>)
    4442:	f240 33a6 	movw	r3, #934	; 0x3a6
    4446:	4a2c      	ldr	r2, [pc, #176]	; (44f8 <z_set_prio+0x124>)
    4448:	f002 fc38 	bl	6cbc <printk>
    444c:	f240 31a6 	movw	r1, #934	; 0x3a6
    4450:	4829      	ldr	r0, [pc, #164]	; (44f8 <z_set_prio+0x124>)
    4452:	f002 fcfd 	bl	6e50 <assert_post_action>
	return list->head == list;
    4456:	4a29      	ldr	r2, [pc, #164]	; (44fc <z_set_prio+0x128>)
    4458:	4610      	mov	r0, r2
    445a:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    445e:	4283      	cmp	r3, r0
    4460:	d137      	bne.n	44d2 <z_set_prio+0xfe>
	return (node == list->tail) ? NULL : node->next;
    4462:	6a91      	ldr	r1, [r2, #40]	; 0x28
	node->prev = tail;
    4464:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4468:	600c      	str	r4, [r1, #0]
	list->tail = node;
    446a:	6294      	str	r4, [r2, #40]	; 0x28
}
    446c:	e02c      	b.n	44c8 <z_set_prio+0xf4>
			thread->base.prio = prio;
    446e:	73a5      	strb	r5, [r4, #14]
    4470:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4472:	4819      	ldr	r0, [pc, #100]	; (44d8 <z_set_prio+0x104>)
    4474:	f7fe feea 	bl	324c <z_spin_unlock_valid>
    4478:	b968      	cbnz	r0, 4496 <z_set_prio+0xc2>
    447a:	23ac      	movs	r3, #172	; 0xac
    447c:	4a17      	ldr	r2, [pc, #92]	; (44dc <z_set_prio+0x108>)
    447e:	4920      	ldr	r1, [pc, #128]	; (4500 <z_set_prio+0x12c>)
    4480:	4818      	ldr	r0, [pc, #96]	; (44e4 <z_set_prio+0x110>)
    4482:	f002 fc1b 	bl	6cbc <printk>
    4486:	4914      	ldr	r1, [pc, #80]	; (44d8 <z_set_prio+0x104>)
    4488:	481e      	ldr	r0, [pc, #120]	; (4504 <z_set_prio+0x130>)
    448a:	f002 fc17 	bl	6cbc <printk>
    448e:	21ac      	movs	r1, #172	; 0xac
    4490:	4812      	ldr	r0, [pc, #72]	; (44dc <z_set_prio+0x108>)
    4492:	f002 fcdd 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4496:	f386 8811 	msr	BASEPRI, r6
    449a:	f3bf 8f6f 	isb	sy
}
    449e:	4620      	mov	r0, r4
    44a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    44a2:	428b      	cmp	r3, r1
    44a4:	d0de      	beq.n	4464 <z_set_prio+0x90>
    44a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44a8:	2b00      	cmp	r3, #0
    44aa:	d0db      	beq.n	4464 <z_set_prio+0x90>
	int32_t b1 = thread_1->base.prio;
    44ac:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    44b0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    44b4:	42af      	cmp	r7, r5
    44b6:	d0f4      	beq.n	44a2 <z_set_prio+0xce>
		return b2 - b1;
    44b8:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    44ba:	2d00      	cmp	r5, #0
    44bc:	ddf1      	ble.n	44a2 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
    44be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    44c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    44c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    44c6:	605c      	str	r4, [r3, #4]
			update_cache(1);
    44c8:	2001      	movs	r0, #1
    44ca:	f7ff faf9 	bl	3ac0 <update_cache>
    44ce:	2401      	movs	r4, #1
    44d0:	e7cf      	b.n	4472 <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    44d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
    44d4:	e7e8      	b.n	44a8 <z_set_prio+0xd4>
    44d6:	bf00      	nop
    44d8:	00009d84 	.word	0x00009d84
    44dc:	000082f4 	.word	0x000082f4
    44e0:	0000831a 	.word	0x0000831a
    44e4:	00008182 	.word	0x00008182
    44e8:	0000832f 	.word	0x0000832f
    44ec:	00009d60 	.word	0x00009d60
    44f0:	00009a58 	.word	0x00009a58
    44f4:	00008a09 	.word	0x00008a09
    44f8:	000089c0 	.word	0x000089c0
    44fc:	00009d3c 	.word	0x00009d3c
    4500:	00008347 	.word	0x00008347
    4504:	0000835e 	.word	0x0000835e

00004508 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    4508:	6883      	ldr	r3, [r0, #8]
{
    450a:	b510      	push	{r4, lr}
    450c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    450e:	b95b      	cbnz	r3, 4528 <unpend_thread_no_timeout+0x20>
    4510:	490b      	ldr	r1, [pc, #44]	; (4540 <unpend_thread_no_timeout+0x38>)
    4512:	480c      	ldr	r0, [pc, #48]	; (4544 <unpend_thread_no_timeout+0x3c>)
    4514:	f240 2342 	movw	r3, #578	; 0x242
    4518:	4a0b      	ldr	r2, [pc, #44]	; (4548 <unpend_thread_no_timeout+0x40>)
    451a:	f002 fbcf 	bl	6cbc <printk>
    451e:	f240 2142 	movw	r1, #578	; 0x242
    4522:	4809      	ldr	r0, [pc, #36]	; (4548 <unpend_thread_no_timeout+0x40>)
    4524:	f002 fc94 	bl	6e50 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4528:	4621      	mov	r1, r4
    452a:	68a0      	ldr	r0, [r4, #8]
    452c:	f7ff fd7c 	bl	4028 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4530:	7b63      	ldrb	r3, [r4, #13]
    4532:	f023 0302 	bic.w	r3, r3, #2
    4536:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4538:	2300      	movs	r3, #0
    453a:	60a3      	str	r3, [r4, #8]
}
    453c:	bd10      	pop	{r4, pc}
    453e:	bf00      	nop
    4540:	00008a5b 	.word	0x00008a5b
    4544:	00008182 	.word	0x00008182
    4548:	000089c0 	.word	0x000089c0

0000454c <z_unpend_thread>:
{
    454c:	b538      	push	{r3, r4, r5, lr}
    454e:	4604      	mov	r4, r0
	__asm__ volatile(
    4550:	f04f 0320 	mov.w	r3, #32
    4554:	f3ef 8511 	mrs	r5, BASEPRI
    4558:	f383 8811 	msr	BASEPRI, r3
    455c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4560:	4819      	ldr	r0, [pc, #100]	; (45c8 <z_unpend_thread+0x7c>)
    4562:	f7fe fe65 	bl	3230 <z_spin_lock_valid>
    4566:	b968      	cbnz	r0, 4584 <z_unpend_thread+0x38>
    4568:	2381      	movs	r3, #129	; 0x81
    456a:	4a18      	ldr	r2, [pc, #96]	; (45cc <z_unpend_thread+0x80>)
    456c:	4918      	ldr	r1, [pc, #96]	; (45d0 <z_unpend_thread+0x84>)
    456e:	4819      	ldr	r0, [pc, #100]	; (45d4 <z_unpend_thread+0x88>)
    4570:	f002 fba4 	bl	6cbc <printk>
    4574:	4914      	ldr	r1, [pc, #80]	; (45c8 <z_unpend_thread+0x7c>)
    4576:	4818      	ldr	r0, [pc, #96]	; (45d8 <z_unpend_thread+0x8c>)
    4578:	f002 fba0 	bl	6cbc <printk>
    457c:	2181      	movs	r1, #129	; 0x81
    457e:	4813      	ldr	r0, [pc, #76]	; (45cc <z_unpend_thread+0x80>)
    4580:	f002 fc66 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4584:	4810      	ldr	r0, [pc, #64]	; (45c8 <z_unpend_thread+0x7c>)
    4586:	f7fe fe6f 	bl	3268 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    458a:	4620      	mov	r0, r4
    458c:	f7ff ffbc 	bl	4508 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4590:	480d      	ldr	r0, [pc, #52]	; (45c8 <z_unpend_thread+0x7c>)
    4592:	f7fe fe5b 	bl	324c <z_spin_unlock_valid>
    4596:	b968      	cbnz	r0, 45b4 <z_unpend_thread+0x68>
    4598:	23ac      	movs	r3, #172	; 0xac
    459a:	4a0c      	ldr	r2, [pc, #48]	; (45cc <z_unpend_thread+0x80>)
    459c:	490f      	ldr	r1, [pc, #60]	; (45dc <z_unpend_thread+0x90>)
    459e:	480d      	ldr	r0, [pc, #52]	; (45d4 <z_unpend_thread+0x88>)
    45a0:	f002 fb8c 	bl	6cbc <printk>
    45a4:	4908      	ldr	r1, [pc, #32]	; (45c8 <z_unpend_thread+0x7c>)
    45a6:	480e      	ldr	r0, [pc, #56]	; (45e0 <z_unpend_thread+0x94>)
    45a8:	f002 fb88 	bl	6cbc <printk>
    45ac:	21ac      	movs	r1, #172	; 0xac
    45ae:	4807      	ldr	r0, [pc, #28]	; (45cc <z_unpend_thread+0x80>)
    45b0:	f002 fc4e 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    45b4:	f385 8811 	msr	BASEPRI, r5
    45b8:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    45bc:	f104 0018 	add.w	r0, r4, #24
}
    45c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    45c4:	f000 bbba 	b.w	4d3c <z_abort_timeout>
    45c8:	00009d84 	.word	0x00009d84
    45cc:	000082f4 	.word	0x000082f4
    45d0:	0000831a 	.word	0x0000831a
    45d4:	00008182 	.word	0x00008182
    45d8:	0000832f 	.word	0x0000832f
    45dc:	00008347 	.word	0x00008347
    45e0:	0000835e 	.word	0x0000835e

000045e4 <z_thread_timeout>:
{
    45e4:	b570      	push	{r4, r5, r6, lr}
    45e6:	4604      	mov	r4, r0
	__asm__ volatile(
    45e8:	f04f 0320 	mov.w	r3, #32
    45ec:	f3ef 8611 	mrs	r6, BASEPRI
    45f0:	f383 8811 	msr	BASEPRI, r3
    45f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    45f8:	4820      	ldr	r0, [pc, #128]	; (467c <z_thread_timeout+0x98>)
    45fa:	f7fe fe19 	bl	3230 <z_spin_lock_valid>
    45fe:	b968      	cbnz	r0, 461c <z_thread_timeout+0x38>
    4600:	2381      	movs	r3, #129	; 0x81
    4602:	4a1f      	ldr	r2, [pc, #124]	; (4680 <z_thread_timeout+0x9c>)
    4604:	491f      	ldr	r1, [pc, #124]	; (4684 <z_thread_timeout+0xa0>)
    4606:	4820      	ldr	r0, [pc, #128]	; (4688 <z_thread_timeout+0xa4>)
    4608:	f002 fb58 	bl	6cbc <printk>
    460c:	491b      	ldr	r1, [pc, #108]	; (467c <z_thread_timeout+0x98>)
    460e:	481f      	ldr	r0, [pc, #124]	; (468c <z_thread_timeout+0xa8>)
    4610:	f002 fb54 	bl	6cbc <printk>
    4614:	2181      	movs	r1, #129	; 0x81
    4616:	481a      	ldr	r0, [pc, #104]	; (4680 <z_thread_timeout+0x9c>)
    4618:	f002 fc1a 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    461c:	4817      	ldr	r0, [pc, #92]	; (467c <z_thread_timeout+0x98>)
    461e:	f7fe fe23 	bl	3268 <z_spin_lock_set_owner>
		if (!killed) {
    4622:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4626:	f013 0f28 	tst.w	r3, #40	; 0x28
    462a:	d110      	bne.n	464e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    462c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4630:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4634:	b113      	cbz	r3, 463c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    4636:	4628      	mov	r0, r5
    4638:	f7ff ff66 	bl	4508 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    463c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    4640:	4628      	mov	r0, r5
    4642:	f023 0314 	bic.w	r3, r3, #20
    4646:	f804 3c0b 	strb.w	r3, [r4, #-11]
    464a:	f7ff fa71 	bl	3b30 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    464e:	480b      	ldr	r0, [pc, #44]	; (467c <z_thread_timeout+0x98>)
    4650:	f7fe fdfc 	bl	324c <z_spin_unlock_valid>
    4654:	b968      	cbnz	r0, 4672 <z_thread_timeout+0x8e>
    4656:	23ac      	movs	r3, #172	; 0xac
    4658:	4a09      	ldr	r2, [pc, #36]	; (4680 <z_thread_timeout+0x9c>)
    465a:	490d      	ldr	r1, [pc, #52]	; (4690 <z_thread_timeout+0xac>)
    465c:	480a      	ldr	r0, [pc, #40]	; (4688 <z_thread_timeout+0xa4>)
    465e:	f002 fb2d 	bl	6cbc <printk>
    4662:	4906      	ldr	r1, [pc, #24]	; (467c <z_thread_timeout+0x98>)
    4664:	480b      	ldr	r0, [pc, #44]	; (4694 <z_thread_timeout+0xb0>)
    4666:	f002 fb29 	bl	6cbc <printk>
    466a:	21ac      	movs	r1, #172	; 0xac
    466c:	4804      	ldr	r0, [pc, #16]	; (4680 <z_thread_timeout+0x9c>)
    466e:	f002 fbef 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4672:	f386 8811 	msr	BASEPRI, r6
    4676:	f3bf 8f6f 	isb	sy
}
    467a:	bd70      	pop	{r4, r5, r6, pc}
    467c:	00009d84 	.word	0x00009d84
    4680:	000082f4 	.word	0x000082f4
    4684:	0000831a 	.word	0x0000831a
    4688:	00008182 	.word	0x00008182
    468c:	0000832f 	.word	0x0000832f
    4690:	00008347 	.word	0x00008347
    4694:	0000835e 	.word	0x0000835e

00004698 <z_unpend_first_thread>:
{
    4698:	b570      	push	{r4, r5, r6, lr}
    469a:	4605      	mov	r5, r0
	__asm__ volatile(
    469c:	f04f 0320 	mov.w	r3, #32
    46a0:	f3ef 8611 	mrs	r6, BASEPRI
    46a4:	f383 8811 	msr	BASEPRI, r3
    46a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46ac:	481c      	ldr	r0, [pc, #112]	; (4720 <z_unpend_first_thread+0x88>)
    46ae:	f7fe fdbf 	bl	3230 <z_spin_lock_valid>
    46b2:	b968      	cbnz	r0, 46d0 <z_unpend_first_thread+0x38>
    46b4:	2381      	movs	r3, #129	; 0x81
    46b6:	4a1b      	ldr	r2, [pc, #108]	; (4724 <z_unpend_first_thread+0x8c>)
    46b8:	491b      	ldr	r1, [pc, #108]	; (4728 <z_unpend_first_thread+0x90>)
    46ba:	481c      	ldr	r0, [pc, #112]	; (472c <z_unpend_first_thread+0x94>)
    46bc:	f002 fafe 	bl	6cbc <printk>
    46c0:	4917      	ldr	r1, [pc, #92]	; (4720 <z_unpend_first_thread+0x88>)
    46c2:	481b      	ldr	r0, [pc, #108]	; (4730 <z_unpend_first_thread+0x98>)
    46c4:	f002 fafa 	bl	6cbc <printk>
    46c8:	2181      	movs	r1, #129	; 0x81
    46ca:	4816      	ldr	r0, [pc, #88]	; (4724 <z_unpend_first_thread+0x8c>)
    46cc:	f002 fbc0 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    46d0:	4813      	ldr	r0, [pc, #76]	; (4720 <z_unpend_first_thread+0x88>)
    46d2:	f7fe fdc9 	bl	3268 <z_spin_lock_set_owner>
	return list->head == list;
    46d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46d8:	42a5      	cmp	r5, r4
    46da:	d01f      	beq.n	471c <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    46dc:	b134      	cbz	r4, 46ec <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    46de:	4620      	mov	r0, r4
    46e0:	f7ff ff12 	bl	4508 <unpend_thread_no_timeout>
    46e4:	f104 0018 	add.w	r0, r4, #24
    46e8:	f000 fb28 	bl	4d3c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46ec:	480c      	ldr	r0, [pc, #48]	; (4720 <z_unpend_first_thread+0x88>)
    46ee:	f7fe fdad 	bl	324c <z_spin_unlock_valid>
    46f2:	b968      	cbnz	r0, 4710 <z_unpend_first_thread+0x78>
    46f4:	23ac      	movs	r3, #172	; 0xac
    46f6:	4a0b      	ldr	r2, [pc, #44]	; (4724 <z_unpend_first_thread+0x8c>)
    46f8:	490e      	ldr	r1, [pc, #56]	; (4734 <z_unpend_first_thread+0x9c>)
    46fa:	480c      	ldr	r0, [pc, #48]	; (472c <z_unpend_first_thread+0x94>)
    46fc:	f002 fade 	bl	6cbc <printk>
    4700:	4907      	ldr	r1, [pc, #28]	; (4720 <z_unpend_first_thread+0x88>)
    4702:	480d      	ldr	r0, [pc, #52]	; (4738 <z_unpend_first_thread+0xa0>)
    4704:	f002 fada 	bl	6cbc <printk>
    4708:	21ac      	movs	r1, #172	; 0xac
    470a:	4806      	ldr	r0, [pc, #24]	; (4724 <z_unpend_first_thread+0x8c>)
    470c:	f002 fba0 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4710:	f386 8811 	msr	BASEPRI, r6
    4714:	f3bf 8f6f 	isb	sy
}
    4718:	4620      	mov	r0, r4
    471a:	bd70      	pop	{r4, r5, r6, pc}
    471c:	2400      	movs	r4, #0
    471e:	e7e5      	b.n	46ec <z_unpend_first_thread+0x54>
    4720:	00009d84 	.word	0x00009d84
    4724:	000082f4 	.word	0x000082f4
    4728:	0000831a 	.word	0x0000831a
    472c:	00008182 	.word	0x00008182
    4730:	0000832f 	.word	0x0000832f
    4734:	00008347 	.word	0x00008347
    4738:	0000835e 	.word	0x0000835e

0000473c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    473c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    473e:	4b04      	ldr	r3, [pc, #16]	; (4750 <z_sched_init+0x14>)
    4740:	4608      	mov	r0, r1
    4742:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    4746:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    474a:	f7ff ba41 	b.w	3bd0 <k_sched_time_slice_set>
    474e:	bf00      	nop
    4750:	00009d3c 	.word	0x00009d3c

00004754 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4756:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    475a:	b173      	cbz	r3, 477a <z_impl_k_yield+0x26>
    475c:	4940      	ldr	r1, [pc, #256]	; (4860 <z_impl_k_yield+0x10c>)
    475e:	f240 43a1 	movw	r3, #1185	; 0x4a1
    4762:	4a40      	ldr	r2, [pc, #256]	; (4864 <z_impl_k_yield+0x110>)
    4764:	4840      	ldr	r0, [pc, #256]	; (4868 <z_impl_k_yield+0x114>)
    4766:	f002 faa9 	bl	6cbc <printk>
    476a:	4840      	ldr	r0, [pc, #256]	; (486c <z_impl_k_yield+0x118>)
    476c:	f002 faa6 	bl	6cbc <printk>
    4770:	f240 41a1 	movw	r1, #1185	; 0x4a1
    4774:	483b      	ldr	r0, [pc, #236]	; (4864 <z_impl_k_yield+0x110>)
    4776:	f002 fb6b 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    477a:	f04f 0320 	mov.w	r3, #32
    477e:	f3ef 8611 	mrs	r6, BASEPRI
    4782:	f383 8811 	msr	BASEPRI, r3
    4786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    478a:	4839      	ldr	r0, [pc, #228]	; (4870 <z_impl_k_yield+0x11c>)
    478c:	f7fe fd50 	bl	3230 <z_spin_lock_valid>
    4790:	b968      	cbnz	r0, 47ae <z_impl_k_yield+0x5a>
    4792:	2381      	movs	r3, #129	; 0x81
    4794:	4a37      	ldr	r2, [pc, #220]	; (4874 <z_impl_k_yield+0x120>)
    4796:	4938      	ldr	r1, [pc, #224]	; (4878 <z_impl_k_yield+0x124>)
    4798:	4833      	ldr	r0, [pc, #204]	; (4868 <z_impl_k_yield+0x114>)
    479a:	f002 fa8f 	bl	6cbc <printk>
    479e:	4934      	ldr	r1, [pc, #208]	; (4870 <z_impl_k_yield+0x11c>)
    47a0:	4836      	ldr	r0, [pc, #216]	; (487c <z_impl_k_yield+0x128>)
    47a2:	f002 fa8b 	bl	6cbc <printk>
    47a6:	2181      	movs	r1, #129	; 0x81
    47a8:	4832      	ldr	r0, [pc, #200]	; (4874 <z_impl_k_yield+0x120>)
    47aa:	f002 fb51 	bl	6e50 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    47ae:	4d34      	ldr	r5, [pc, #208]	; (4880 <z_impl_k_yield+0x12c>)
	z_spin_lock_set_owner(l);
    47b0:	482f      	ldr	r0, [pc, #188]	; (4870 <z_impl_k_yield+0x11c>)
    47b2:	f7fe fd59 	bl	3268 <z_spin_lock_set_owner>
    47b6:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    47b8:	f105 0024 	add.w	r0, r5, #36	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47bc:	7b4b      	ldrb	r3, [r1, #13]
    47be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    47c2:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    47c4:	f7ff fc30 	bl	4028 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    47c8:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    47ca:	7b63      	ldrb	r3, [r4, #13]
    47cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47d0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    47d2:	4b2c      	ldr	r3, [pc, #176]	; (4884 <z_impl_k_yield+0x130>)
    47d4:	429c      	cmp	r4, r3
    47d6:	d10b      	bne.n	47f0 <z_impl_k_yield+0x9c>
    47d8:	492b      	ldr	r1, [pc, #172]	; (4888 <z_impl_k_yield+0x134>)
    47da:	4823      	ldr	r0, [pc, #140]	; (4868 <z_impl_k_yield+0x114>)
    47dc:	f240 33a6 	movw	r3, #934	; 0x3a6
    47e0:	4a20      	ldr	r2, [pc, #128]	; (4864 <z_impl_k_yield+0x110>)
    47e2:	f002 fa6b 	bl	6cbc <printk>
    47e6:	f240 31a6 	movw	r1, #934	; 0x3a6
    47ea:	481e      	ldr	r0, [pc, #120]	; (4864 <z_impl_k_yield+0x110>)
    47ec:	f002 fb30 	bl	6e50 <assert_post_action>
	return list->head == list;
    47f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47f2:	4826      	ldr	r0, [pc, #152]	; (488c <z_impl_k_yield+0x138>)
	return (node == list->tail) ? NULL : node->next;
    47f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47f6:	4283      	cmp	r3, r0
    47f8:	d107      	bne.n	480a <z_impl_k_yield+0xb6>
	node->prev = tail;
    47fa:	e9c4 0200 	strd	r0, r2, [r4]
	tail->next = node;
    47fe:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4800:	62ac      	str	r4, [r5, #40]	; 0x28
}
    4802:	e012      	b.n	482a <z_impl_k_yield+0xd6>
	return (node == list->tail) ? NULL : node->next;
    4804:	429a      	cmp	r2, r3
    4806:	d0f8      	beq.n	47fa <z_impl_k_yield+0xa6>
    4808:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    480a:	2b00      	cmp	r3, #0
    480c:	d0f5      	beq.n	47fa <z_impl_k_yield+0xa6>
	int32_t b1 = thread_1->base.prio;
    480e:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4812:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4816:	428f      	cmp	r7, r1
    4818:	d0f4      	beq.n	4804 <z_impl_k_yield+0xb0>
		return b2 - b1;
    481a:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    481c:	2900      	cmp	r1, #0
    481e:	ddf1      	ble.n	4804 <z_impl_k_yield+0xb0>
	sys_dnode_t *const prev = successor->prev;
    4820:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4822:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4826:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4828:	605c      	str	r4, [r3, #4]
	update_cache(1);
    482a:	2001      	movs	r0, #1
    482c:	f7ff f948 	bl	3ac0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4830:	480f      	ldr	r0, [pc, #60]	; (4870 <z_impl_k_yield+0x11c>)
    4832:	f7fe fd0b 	bl	324c <z_spin_unlock_valid>
    4836:	b968      	cbnz	r0, 4854 <z_impl_k_yield+0x100>
    4838:	23c3      	movs	r3, #195	; 0xc3
    483a:	4a0e      	ldr	r2, [pc, #56]	; (4874 <z_impl_k_yield+0x120>)
    483c:	4914      	ldr	r1, [pc, #80]	; (4890 <z_impl_k_yield+0x13c>)
    483e:	480a      	ldr	r0, [pc, #40]	; (4868 <z_impl_k_yield+0x114>)
    4840:	f002 fa3c 	bl	6cbc <printk>
    4844:	490a      	ldr	r1, [pc, #40]	; (4870 <z_impl_k_yield+0x11c>)
    4846:	4813      	ldr	r0, [pc, #76]	; (4894 <z_impl_k_yield+0x140>)
    4848:	f002 fa38 	bl	6cbc <printk>
    484c:	21c3      	movs	r1, #195	; 0xc3
    484e:	4809      	ldr	r0, [pc, #36]	; (4874 <z_impl_k_yield+0x120>)
    4850:	f002 fafe 	bl	6e50 <assert_post_action>
    4854:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    4856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    485a:	f002 bbb6 	b.w	6fca <z_swap_irqlock>
    485e:	bf00      	nop
    4860:	00008856 	.word	0x00008856
    4864:	000089c0 	.word	0x000089c0
    4868:	00008182 	.word	0x00008182
    486c:	0000898c 	.word	0x0000898c
    4870:	00009d84 	.word	0x00009d84
    4874:	000082f4 	.word	0x000082f4
    4878:	0000831a 	.word	0x0000831a
    487c:	0000832f 	.word	0x0000832f
    4880:	00009d3c 	.word	0x00009d3c
    4884:	00009a58 	.word	0x00009a58
    4888:	00008a09 	.word	0x00008a09
    488c:	00009d60 	.word	0x00009d60
    4890:	00008347 	.word	0x00008347
    4894:	0000835e 	.word	0x0000835e

00004898 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4898:	4b01      	ldr	r3, [pc, #4]	; (48a0 <z_impl_k_current_get+0x8>)
    489a:	6898      	ldr	r0, [r3, #8]
    489c:	4770      	bx	lr
    489e:	bf00      	nop
    48a0:	00009d3c 	.word	0x00009d3c

000048a4 <z_impl_k_is_preempt_thread>:
    48a4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    48a8:	b93b      	cbnz	r3, 48ba <z_impl_k_is_preempt_thread+0x16>
    48aa:	4b05      	ldr	r3, [pc, #20]	; (48c0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    48ac:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    48ae:	89d8      	ldrh	r0, [r3, #14]
    48b0:	287f      	cmp	r0, #127	; 0x7f
    48b2:	bf8c      	ite	hi
    48b4:	2000      	movhi	r0, #0
    48b6:	2001      	movls	r0, #1
    48b8:	4770      	bx	lr
    48ba:	2000      	movs	r0, #0
}
    48bc:	4770      	bx	lr
    48be:	bf00      	nop
    48c0:	00009d3c 	.word	0x00009d3c

000048c4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    48c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48c8:	4604      	mov	r4, r0
    48ca:	f04f 0320 	mov.w	r3, #32
    48ce:	f3ef 8611 	mrs	r6, BASEPRI
    48d2:	f383 8811 	msr	BASEPRI, r3
    48d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    48da:	4849      	ldr	r0, [pc, #292]	; (4a00 <z_thread_abort+0x13c>)
    48dc:	f7fe fca8 	bl	3230 <z_spin_lock_valid>
    48e0:	b968      	cbnz	r0, 48fe <z_thread_abort+0x3a>
    48e2:	2381      	movs	r3, #129	; 0x81
    48e4:	4a47      	ldr	r2, [pc, #284]	; (4a04 <z_thread_abort+0x140>)
    48e6:	4948      	ldr	r1, [pc, #288]	; (4a08 <z_thread_abort+0x144>)
    48e8:	4848      	ldr	r0, [pc, #288]	; (4a0c <z_thread_abort+0x148>)
    48ea:	f002 f9e7 	bl	6cbc <printk>
    48ee:	4944      	ldr	r1, [pc, #272]	; (4a00 <z_thread_abort+0x13c>)
    48f0:	4847      	ldr	r0, [pc, #284]	; (4a10 <z_thread_abort+0x14c>)
    48f2:	f002 f9e3 	bl	6cbc <printk>
    48f6:	2181      	movs	r1, #129	; 0x81
    48f8:	4842      	ldr	r0, [pc, #264]	; (4a04 <z_thread_abort+0x140>)
    48fa:	f002 faa9 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    48fe:	4840      	ldr	r0, [pc, #256]	; (4a00 <z_thread_abort+0x13c>)
    4900:	f7fe fcb2 	bl	3268 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4904:	7b63      	ldrb	r3, [r4, #13]
    4906:	071a      	lsls	r2, r3, #28
    4908:	d517      	bpl.n	493a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    490a:	483d      	ldr	r0, [pc, #244]	; (4a00 <z_thread_abort+0x13c>)
    490c:	f7fe fc9e 	bl	324c <z_spin_unlock_valid>
    4910:	b968      	cbnz	r0, 492e <z_thread_abort+0x6a>
    4912:	23ac      	movs	r3, #172	; 0xac
    4914:	4a3b      	ldr	r2, [pc, #236]	; (4a04 <z_thread_abort+0x140>)
    4916:	493f      	ldr	r1, [pc, #252]	; (4a14 <z_thread_abort+0x150>)
    4918:	483c      	ldr	r0, [pc, #240]	; (4a0c <z_thread_abort+0x148>)
    491a:	f002 f9cf 	bl	6cbc <printk>
    491e:	4938      	ldr	r1, [pc, #224]	; (4a00 <z_thread_abort+0x13c>)
    4920:	483d      	ldr	r0, [pc, #244]	; (4a18 <z_thread_abort+0x154>)
    4922:	f002 f9cb 	bl	6cbc <printk>
    4926:	21ac      	movs	r1, #172	; 0xac
    4928:	4836      	ldr	r0, [pc, #216]	; (4a04 <z_thread_abort+0x140>)
    492a:	f002 fa91 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    492e:	f386 8811 	msr	BASEPRI, r6
    4932:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    493a:	f023 0220 	bic.w	r2, r3, #32
    493e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4942:	09d2      	lsrs	r2, r2, #7
    4944:	d145      	bne.n	49d2 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4946:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    4948:	68a3      	ldr	r3, [r4, #8]
    494a:	b113      	cbz	r3, 4952 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    494c:	4620      	mov	r0, r4
    494e:	f7ff fddb 	bl	4508 <unpend_thread_no_timeout>
    4952:	f104 0018 	add.w	r0, r4, #24
    4956:	f000 f9f1 	bl	4d3c <z_abort_timeout>
    495a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    495e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4962:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4964:	42bd      	cmp	r5, r7
    4966:	d001      	beq.n	496c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4968:	2d00      	cmp	r5, #0
    496a:	d13c      	bne.n	49e6 <z_thread_abort+0x122>
		update_cache(1);
    496c:	2001      	movs	r0, #1
    496e:	f7ff f8a7 	bl	3ac0 <update_cache>
		z_thread_monitor_exit(thread);
    4972:	4620      	mov	r0, r4
    4974:	f7fe fc80 	bl	3278 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    4978:	4b28      	ldr	r3, [pc, #160]	; (4a1c <z_thread_abort+0x158>)
    497a:	689b      	ldr	r3, [r3, #8]
    497c:	42a3      	cmp	r3, r4
    497e:	d1c4      	bne.n	490a <z_thread_abort+0x46>
    4980:	f3ef 8305 	mrs	r3, IPSR
    4984:	2b00      	cmp	r3, #0
    4986:	d1c0      	bne.n	490a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4988:	481d      	ldr	r0, [pc, #116]	; (4a00 <z_thread_abort+0x13c>)
    498a:	f7fe fc5f 	bl	324c <z_spin_unlock_valid>
    498e:	b968      	cbnz	r0, 49ac <z_thread_abort+0xe8>
    4990:	23c3      	movs	r3, #195	; 0xc3
    4992:	4a1c      	ldr	r2, [pc, #112]	; (4a04 <z_thread_abort+0x140>)
    4994:	491f      	ldr	r1, [pc, #124]	; (4a14 <z_thread_abort+0x150>)
    4996:	481d      	ldr	r0, [pc, #116]	; (4a0c <z_thread_abort+0x148>)
    4998:	f002 f990 	bl	6cbc <printk>
    499c:	4918      	ldr	r1, [pc, #96]	; (4a00 <z_thread_abort+0x13c>)
    499e:	481e      	ldr	r0, [pc, #120]	; (4a18 <z_thread_abort+0x154>)
    49a0:	f002 f98c 	bl	6cbc <printk>
    49a4:	21c3      	movs	r1, #195	; 0xc3
    49a6:	4817      	ldr	r0, [pc, #92]	; (4a04 <z_thread_abort+0x140>)
    49a8:	f002 fa52 	bl	6e50 <assert_post_action>
    49ac:	4630      	mov	r0, r6
    49ae:	f002 fb0c 	bl	6fca <z_swap_irqlock>
		__ASSERT(false, "aborted _current back from dead");
    49b2:	f240 6301 	movw	r3, #1537	; 0x601
    49b6:	4a1a      	ldr	r2, [pc, #104]	; (4a20 <z_thread_abort+0x15c>)
    49b8:	491a      	ldr	r1, [pc, #104]	; (4a24 <z_thread_abort+0x160>)
    49ba:	4814      	ldr	r0, [pc, #80]	; (4a0c <z_thread_abort+0x148>)
    49bc:	f002 f97e 	bl	6cbc <printk>
    49c0:	4819      	ldr	r0, [pc, #100]	; (4a28 <z_thread_abort+0x164>)
    49c2:	f002 f97b 	bl	6cbc <printk>
    49c6:	f240 6101 	movw	r1, #1537	; 0x601
    49ca:	4815      	ldr	r0, [pc, #84]	; (4a20 <z_thread_abort+0x15c>)
    49cc:	f002 fa40 	bl	6e50 <assert_post_action>
    49d0:	e79b      	b.n	490a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    49d2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    49d6:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    49da:	4621      	mov	r1, r4
    49dc:	4813      	ldr	r0, [pc, #76]	; (4a2c <z_thread_abort+0x168>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    49de:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    49e0:	f7ff fb22 	bl	4028 <z_priq_dumb_remove>
}
    49e4:	e7b0      	b.n	4948 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    49e6:	4628      	mov	r0, r5
    49e8:	f7ff fd8e 	bl	4508 <unpend_thread_no_timeout>
    49ec:	f105 0018 	add.w	r0, r5, #24
    49f0:	f000 f9a4 	bl	4d3c <z_abort_timeout>
		ready_thread(thread);
    49f4:	4628      	mov	r0, r5
    49f6:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
    49fa:	f7ff f899 	bl	3b30 <ready_thread>
    49fe:	e7b0      	b.n	4962 <z_thread_abort+0x9e>
    4a00:	00009d84 	.word	0x00009d84
    4a04:	000082f4 	.word	0x000082f4
    4a08:	0000831a 	.word	0x0000831a
    4a0c:	00008182 	.word	0x00008182
    4a10:	0000832f 	.word	0x0000832f
    4a14:	00008347 	.word	0x00008347
    4a18:	0000835e 	.word	0x0000835e
    4a1c:	00009d3c 	.word	0x00009d3c
    4a20:	000089c0 	.word	0x000089c0
    4a24:	00008901 	.word	0x00008901
    4a28:	00008a72 	.word	0x00008a72
    4a2c:	00009d60 	.word	0x00009d60

00004a30 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    4a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a34:	4605      	mov	r5, r0
    4a36:	460f      	mov	r7, r1
    4a38:	4616      	mov	r6, r2
	__asm__ volatile(
    4a3a:	f04f 0320 	mov.w	r3, #32
    4a3e:	f3ef 8811 	mrs	r8, BASEPRI
    4a42:	f383 8811 	msr	BASEPRI, r3
    4a46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a4a:	4821      	ldr	r0, [pc, #132]	; (4ad0 <z_sched_wake+0xa0>)
    4a4c:	f7fe fbf0 	bl	3230 <z_spin_lock_valid>
    4a50:	b968      	cbnz	r0, 4a6e <z_sched_wake+0x3e>
    4a52:	2381      	movs	r3, #129	; 0x81
    4a54:	4a1f      	ldr	r2, [pc, #124]	; (4ad4 <z_sched_wake+0xa4>)
    4a56:	4920      	ldr	r1, [pc, #128]	; (4ad8 <z_sched_wake+0xa8>)
    4a58:	4820      	ldr	r0, [pc, #128]	; (4adc <z_sched_wake+0xac>)
    4a5a:	f002 f92f 	bl	6cbc <printk>
    4a5e:	491c      	ldr	r1, [pc, #112]	; (4ad0 <z_sched_wake+0xa0>)
    4a60:	481f      	ldr	r0, [pc, #124]	; (4ae0 <z_sched_wake+0xb0>)
    4a62:	f002 f92b 	bl	6cbc <printk>
    4a66:	2181      	movs	r1, #129	; 0x81
    4a68:	481a      	ldr	r0, [pc, #104]	; (4ad4 <z_sched_wake+0xa4>)
    4a6a:	f002 f9f1 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a6e:	4818      	ldr	r0, [pc, #96]	; (4ad0 <z_sched_wake+0xa0>)
    4a70:	f7fe fbfa 	bl	3268 <z_spin_lock_set_owner>
	return list->head == list;
    4a74:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a76:	42a5      	cmp	r5, r4
    4a78:	d027      	beq.n	4aca <z_sched_wake+0x9a>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
    4a7a:	b16c      	cbz	r4, 4a98 <z_sched_wake+0x68>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    4a7c:	4620      	mov	r0, r4
    4a7e:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4a82:	6166      	str	r6, [r4, #20]
    4a84:	f7ff fd40 	bl	4508 <unpend_thread_no_timeout>
    4a88:	f104 0018 	add.w	r0, r4, #24
    4a8c:	f000 f956 	bl	4d3c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    4a90:	4620      	mov	r0, r4
    4a92:	f7ff f84d 	bl	3b30 <ready_thread>
			ret = true;
    4a96:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a98:	480d      	ldr	r0, [pc, #52]	; (4ad0 <z_sched_wake+0xa0>)
    4a9a:	f7fe fbd7 	bl	324c <z_spin_unlock_valid>
    4a9e:	b968      	cbnz	r0, 4abc <z_sched_wake+0x8c>
    4aa0:	23ac      	movs	r3, #172	; 0xac
    4aa2:	4a0c      	ldr	r2, [pc, #48]	; (4ad4 <z_sched_wake+0xa4>)
    4aa4:	490f      	ldr	r1, [pc, #60]	; (4ae4 <z_sched_wake+0xb4>)
    4aa6:	480d      	ldr	r0, [pc, #52]	; (4adc <z_sched_wake+0xac>)
    4aa8:	f002 f908 	bl	6cbc <printk>
    4aac:	4908      	ldr	r1, [pc, #32]	; (4ad0 <z_sched_wake+0xa0>)
    4aae:	480e      	ldr	r0, [pc, #56]	; (4ae8 <z_sched_wake+0xb8>)
    4ab0:	f002 f904 	bl	6cbc <printk>
    4ab4:	21ac      	movs	r1, #172	; 0xac
    4ab6:	4807      	ldr	r0, [pc, #28]	; (4ad4 <z_sched_wake+0xa4>)
    4ab8:	f002 f9ca 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4abc:	f388 8811 	msr	BASEPRI, r8
    4ac0:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4ac4:	4620      	mov	r0, r4
    4ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool ret = false;
    4aca:	2400      	movs	r4, #0
    4acc:	e7e4      	b.n	4a98 <z_sched_wake+0x68>
    4ace:	bf00      	nop
    4ad0:	00009d84 	.word	0x00009d84
    4ad4:	000082f4 	.word	0x000082f4
    4ad8:	0000831a 	.word	0x0000831a
    4adc:	00008182 	.word	0x00008182
    4ae0:	0000832f 	.word	0x0000832f
    4ae4:	00008347 	.word	0x00008347
    4ae8:	0000835e 	.word	0x0000835e

00004aec <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4aec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4aee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    4af2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4af4:	e9cd 6700 	strd	r6, r7, [sp]
    4af8:	f7ff fb72 	bl	41e0 <z_pend_curr>

	if (data != NULL) {
    4afc:	b11c      	cbz	r4, 4b06 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    4afe:	4b03      	ldr	r3, [pc, #12]	; (4b0c <z_sched_wait+0x20>)
    4b00:	689b      	ldr	r3, [r3, #8]
    4b02:	695b      	ldr	r3, [r3, #20]
    4b04:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    4b06:	b002      	add	sp, #8
    4b08:	bdd0      	pop	{r4, r6, r7, pc}
    4b0a:	bf00      	nop
    4b0c:	00009d3c 	.word	0x00009d3c

00004b10 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4b10:	4b03      	ldr	r3, [pc, #12]	; (4b20 <elapsed+0x10>)
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	b90b      	cbnz	r3, 4b1a <elapsed+0xa>
    4b16:	f7fc bd4f 	b.w	15b8 <sys_clock_elapsed>
}
    4b1a:	2000      	movs	r0, #0
    4b1c:	4770      	bx	lr
    4b1e:	bf00      	nop
    4b20:	00009d88 	.word	0x00009d88

00004b24 <next_timeout>:
	return list->head == list;
    4b24:	4b12      	ldr	r3, [pc, #72]	; (4b70 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
    4b26:	b510      	push	{r4, lr}
    4b28:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b2a:	429c      	cmp	r4, r3
    4b2c:	d104      	bne.n	4b38 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4b2e:	f7ff ffef 	bl	4b10 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4b32:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4b36:	e012      	b.n	4b5e <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
    4b38:	f7ff ffea 	bl	4b10 <elapsed>
    4b3c:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4b3e:	2c00      	cmp	r4, #0
    4b40:	d0f7      	beq.n	4b32 <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4b42:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    4b46:	1a40      	subs	r0, r0, r1
    4b48:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4b4c:	2801      	cmp	r0, #1
    4b4e:	f173 0200 	sbcs.w	r2, r3, #0
    4b52:	db0b      	blt.n	4b6c <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4b54:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    4b58:	f173 0300 	sbcs.w	r3, r3, #0
    4b5c:	dae9      	bge.n	4b32 <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4b5e:	4b05      	ldr	r3, [pc, #20]	; (4b74 <next_timeout+0x50>)
    4b60:	691b      	ldr	r3, [r3, #16]
    4b62:	b113      	cbz	r3, 4b6a <next_timeout+0x46>
    4b64:	4298      	cmp	r0, r3
    4b66:	bfa8      	it	ge
    4b68:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4b6a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4b6c:	2000      	movs	r0, #0
    4b6e:	e7f6      	b.n	4b5e <next_timeout+0x3a>
    4b70:	00009970 	.word	0x00009970
    4b74:	00009d3c 	.word	0x00009d3c

00004b78 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    4b78:	4a0b      	ldr	r2, [pc, #44]	; (4ba8 <remove_timeout+0x30>)
{
    4b7a:	b530      	push	{r4, r5, lr}
    4b7c:	6852      	ldr	r2, [r2, #4]
    4b7e:	6803      	ldr	r3, [r0, #0]
    4b80:	4290      	cmp	r0, r2
    4b82:	d009      	beq.n	4b98 <remove_timeout+0x20>
	if (next(t) != NULL) {
    4b84:	b143      	cbz	r3, 4b98 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    4b86:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4b8a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4b8e:	1912      	adds	r2, r2, r4
    4b90:	eb41 0105 	adc.w	r1, r1, r5
    4b94:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    4b98:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    4b9a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4b9c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4b9e:	2300      	movs	r3, #0
	node->prev = NULL;
    4ba0:	e9c0 3300 	strd	r3, r3, [r0]
}
    4ba4:	bd30      	pop	{r4, r5, pc}
    4ba6:	bf00      	nop
    4ba8:	00009970 	.word	0x00009970

00004bac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4bb0:	bf08      	it	eq
    4bb2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bba:	4604      	mov	r4, r0
    4bbc:	460e      	mov	r6, r1
    4bbe:	461d      	mov	r5, r3
    4bc0:	4617      	mov	r7, r2
    4bc2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4bc4:	f000 8095 	beq.w	4cf2 <z_add_timeout+0x146>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    4bc8:	6803      	ldr	r3, [r0, #0]
    4bca:	b163      	cbz	r3, 4be6 <z_add_timeout+0x3a>
    4bcc:	494e      	ldr	r1, [pc, #312]	; (4d08 <z_add_timeout+0x15c>)
    4bce:	235d      	movs	r3, #93	; 0x5d
    4bd0:	4a4e      	ldr	r2, [pc, #312]	; (4d0c <z_add_timeout+0x160>)
    4bd2:	484f      	ldr	r0, [pc, #316]	; (4d10 <z_add_timeout+0x164>)
    4bd4:	f002 f872 	bl	6cbc <printk>
    4bd8:	484e      	ldr	r0, [pc, #312]	; (4d14 <z_add_timeout+0x168>)
    4bda:	f002 f86f 	bl	6cbc <printk>
    4bde:	215d      	movs	r1, #93	; 0x5d
    4be0:	484a      	ldr	r0, [pc, #296]	; (4d0c <z_add_timeout+0x160>)
    4be2:	f002 f935 	bl	6e50 <assert_post_action>
	to->fn = fn;
    4be6:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    4be8:	f04f 0320 	mov.w	r3, #32
    4bec:	f3ef 8611 	mrs	r6, BASEPRI
    4bf0:	f383 8811 	msr	BASEPRI, r3
    4bf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bf8:	4847      	ldr	r0, [pc, #284]	; (4d18 <z_add_timeout+0x16c>)
    4bfa:	f7fe fb19 	bl	3230 <z_spin_lock_valid>
    4bfe:	b968      	cbnz	r0, 4c1c <z_add_timeout+0x70>
    4c00:	2381      	movs	r3, #129	; 0x81
    4c02:	4a46      	ldr	r2, [pc, #280]	; (4d1c <z_add_timeout+0x170>)
    4c04:	4946      	ldr	r1, [pc, #280]	; (4d20 <z_add_timeout+0x174>)
    4c06:	4842      	ldr	r0, [pc, #264]	; (4d10 <z_add_timeout+0x164>)
    4c08:	f002 f858 	bl	6cbc <printk>
    4c0c:	4942      	ldr	r1, [pc, #264]	; (4d18 <z_add_timeout+0x16c>)
    4c0e:	4845      	ldr	r0, [pc, #276]	; (4d24 <z_add_timeout+0x178>)
    4c10:	f002 f854 	bl	6cbc <printk>
    4c14:	2181      	movs	r1, #129	; 0x81
    4c16:	4841      	ldr	r0, [pc, #260]	; (4d1c <z_add_timeout+0x170>)
    4c18:	f002 f91a 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c1c:	483e      	ldr	r0, [pc, #248]	; (4d18 <z_add_timeout+0x16c>)
    4c1e:	f7fe fb23 	bl	3268 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4c22:	f06f 0301 	mvn.w	r3, #1
    4c26:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4c2a:	1bda      	subs	r2, r3, r7
    4c2c:	eb6c 0208 	sbc.w	r2, ip, r8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4c30:	2a00      	cmp	r2, #0
    4c32:	db1e      	blt.n	4c72 <z_add_timeout+0xc6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4c34:	493c      	ldr	r1, [pc, #240]	; (4d28 <z_add_timeout+0x17c>)
    4c36:	e9d1 2000 	ldrd	r2, r0, [r1]
    4c3a:	1a9b      	subs	r3, r3, r2
    4c3c:	eb6c 0000 	sbc.w	r0, ip, r0
    4c40:	1bda      	subs	r2, r3, r7
    4c42:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    4c46:	2a01      	cmp	r2, #1
    4c48:	f170 0300 	sbcs.w	r3, r0, #0
    4c4c:	da01      	bge.n	4c52 <z_add_timeout+0xa6>
    4c4e:	2201      	movs	r2, #1
    4c50:	2000      	movs	r0, #0
    4c52:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
    4c56:	4a35      	ldr	r2, [pc, #212]	; (4d2c <z_add_timeout+0x180>)
    4c58:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    4c5a:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c5e:	4293      	cmp	r3, r2
    4c60:	bf08      	it	eq
    4c62:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    4c64:	b973      	cbnz	r3, 4c84 <z_add_timeout+0xd8>
	node->prev = tail;
    4c66:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    4c6a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4c6e:	6054      	str	r4, [r2, #4]
}
    4c70:	e01a      	b.n	4ca8 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
    4c72:	f7ff ff4d 	bl	4b10 <elapsed>
    4c76:	1c7a      	adds	r2, r7, #1
    4c78:	f145 0500 	adc.w	r5, r5, #0
    4c7c:	1812      	adds	r2, r2, r0
    4c7e:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4c82:	e7e6      	b.n	4c52 <z_add_timeout+0xa6>
			if (t->dticks > to->dticks) {
    4c84:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    4c88:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    4c8c:	4281      	cmp	r1, r0
    4c8e:	eb75 0e07 	sbcs.w	lr, r5, r7
    4c92:	da30      	bge.n	4cf6 <z_add_timeout+0x14a>
				t->dticks -= to->dticks;
    4c94:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    4c96:	6859      	ldr	r1, [r3, #4]
    4c98:	eb67 0705 	sbc.w	r7, r7, r5
    4c9c:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    4ca0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4ca4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4ca6:	605c      	str	r4, [r3, #4]
	return list->head == list;
    4ca8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4caa:	4293      	cmp	r3, r2
    4cac:	d00b      	beq.n	4cc6 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4cae:	429c      	cmp	r4, r3
    4cb0:	d109      	bne.n	4cc6 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4cb2:	f7ff ff37 	bl	4b24 <next_timeout>

			if (next_time == 0 ||
    4cb6:	b118      	cbz	r0, 4cc0 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
    4cb8:	4b1d      	ldr	r3, [pc, #116]	; (4d30 <z_add_timeout+0x184>)
			if (next_time == 0 ||
    4cba:	691b      	ldr	r3, [r3, #16]
    4cbc:	4283      	cmp	r3, r0
    4cbe:	d002      	beq.n	4cc6 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
    4cc0:	2100      	movs	r1, #0
    4cc2:	f7fc fbd3 	bl	146c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4cc6:	4814      	ldr	r0, [pc, #80]	; (4d18 <z_add_timeout+0x16c>)
    4cc8:	f7fe fac0 	bl	324c <z_spin_unlock_valid>
    4ccc:	b968      	cbnz	r0, 4cea <z_add_timeout+0x13e>
    4cce:	23ac      	movs	r3, #172	; 0xac
    4cd0:	4a12      	ldr	r2, [pc, #72]	; (4d1c <z_add_timeout+0x170>)
    4cd2:	4918      	ldr	r1, [pc, #96]	; (4d34 <z_add_timeout+0x188>)
    4cd4:	480e      	ldr	r0, [pc, #56]	; (4d10 <z_add_timeout+0x164>)
    4cd6:	f001 fff1 	bl	6cbc <printk>
    4cda:	490f      	ldr	r1, [pc, #60]	; (4d18 <z_add_timeout+0x16c>)
    4cdc:	4816      	ldr	r0, [pc, #88]	; (4d38 <z_add_timeout+0x18c>)
    4cde:	f001 ffed 	bl	6cbc <printk>
    4ce2:	21ac      	movs	r1, #172	; 0xac
    4ce4:	480d      	ldr	r0, [pc, #52]	; (4d1c <z_add_timeout+0x170>)
    4ce6:	f002 f8b3 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4cea:	f386 8811 	msr	BASEPRI, r6
    4cee:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			to->dticks -= t->dticks;
    4cf6:	1a09      	subs	r1, r1, r0
    4cf8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    4cfc:	4563      	cmp	r3, ip
    4cfe:	e9c4 1504 	strd	r1, r5, [r4, #16]
    4d02:	d0b0      	beq.n	4c66 <z_add_timeout+0xba>
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	e7ad      	b.n	4c64 <z_add_timeout+0xb8>
    4d08:	00008ab8 	.word	0x00008ab8
    4d0c:	00008a94 	.word	0x00008a94
    4d10:	00008182 	.word	0x00008182
    4d14:	0000898c 	.word	0x0000898c
    4d18:	00009d8c 	.word	0x00009d8c
    4d1c:	000082f4 	.word	0x000082f4
    4d20:	0000831a 	.word	0x0000831a
    4d24:	0000832f 	.word	0x0000832f
    4d28:	00009bc8 	.word	0x00009bc8
    4d2c:	00009970 	.word	0x00009970
    4d30:	00009d3c 	.word	0x00009d3c
    4d34:	00008347 	.word	0x00008347
    4d38:	0000835e 	.word	0x0000835e

00004d3c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    4d3c:	b538      	push	{r3, r4, r5, lr}
    4d3e:	4604      	mov	r4, r0
	__asm__ volatile(
    4d40:	f04f 0320 	mov.w	r3, #32
    4d44:	f3ef 8511 	mrs	r5, BASEPRI
    4d48:	f383 8811 	msr	BASEPRI, r3
    4d4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d50:	481a      	ldr	r0, [pc, #104]	; (4dbc <z_abort_timeout+0x80>)
    4d52:	f7fe fa6d 	bl	3230 <z_spin_lock_valid>
    4d56:	b968      	cbnz	r0, 4d74 <z_abort_timeout+0x38>
    4d58:	2381      	movs	r3, #129	; 0x81
    4d5a:	4a19      	ldr	r2, [pc, #100]	; (4dc0 <z_abort_timeout+0x84>)
    4d5c:	4919      	ldr	r1, [pc, #100]	; (4dc4 <z_abort_timeout+0x88>)
    4d5e:	481a      	ldr	r0, [pc, #104]	; (4dc8 <z_abort_timeout+0x8c>)
    4d60:	f001 ffac 	bl	6cbc <printk>
    4d64:	4915      	ldr	r1, [pc, #84]	; (4dbc <z_abort_timeout+0x80>)
    4d66:	4819      	ldr	r0, [pc, #100]	; (4dcc <z_abort_timeout+0x90>)
    4d68:	f001 ffa8 	bl	6cbc <printk>
    4d6c:	2181      	movs	r1, #129	; 0x81
    4d6e:	4814      	ldr	r0, [pc, #80]	; (4dc0 <z_abort_timeout+0x84>)
    4d70:	f002 f86e 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d74:	4811      	ldr	r0, [pc, #68]	; (4dbc <z_abort_timeout+0x80>)
    4d76:	f7fe fa77 	bl	3268 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    4d7a:	6823      	ldr	r3, [r4, #0]
    4d7c:	b1db      	cbz	r3, 4db6 <z_abort_timeout+0x7a>
			remove_timeout(to);
    4d7e:	4620      	mov	r0, r4
    4d80:	f7ff fefa 	bl	4b78 <remove_timeout>
			ret = 0;
    4d84:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d86:	480d      	ldr	r0, [pc, #52]	; (4dbc <z_abort_timeout+0x80>)
    4d88:	f7fe fa60 	bl	324c <z_spin_unlock_valid>
    4d8c:	b968      	cbnz	r0, 4daa <z_abort_timeout+0x6e>
    4d8e:	23ac      	movs	r3, #172	; 0xac
    4d90:	4a0b      	ldr	r2, [pc, #44]	; (4dc0 <z_abort_timeout+0x84>)
    4d92:	490f      	ldr	r1, [pc, #60]	; (4dd0 <z_abort_timeout+0x94>)
    4d94:	480c      	ldr	r0, [pc, #48]	; (4dc8 <z_abort_timeout+0x8c>)
    4d96:	f001 ff91 	bl	6cbc <printk>
    4d9a:	4908      	ldr	r1, [pc, #32]	; (4dbc <z_abort_timeout+0x80>)
    4d9c:	480d      	ldr	r0, [pc, #52]	; (4dd4 <z_abort_timeout+0x98>)
    4d9e:	f001 ff8d 	bl	6cbc <printk>
    4da2:	21ac      	movs	r1, #172	; 0xac
    4da4:	4806      	ldr	r0, [pc, #24]	; (4dc0 <z_abort_timeout+0x84>)
    4da6:	f002 f853 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4daa:	f385 8811 	msr	BASEPRI, r5
    4dae:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4db2:	4620      	mov	r0, r4
    4db4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    4db6:	f06f 0415 	mvn.w	r4, #21
    4dba:	e7e4      	b.n	4d86 <z_abort_timeout+0x4a>
    4dbc:	00009d8c 	.word	0x00009d8c
    4dc0:	000082f4 	.word	0x000082f4
    4dc4:	0000831a 	.word	0x0000831a
    4dc8:	00008182 	.word	0x00008182
    4dcc:	0000832f 	.word	0x0000832f
    4dd0:	00008347 	.word	0x00008347
    4dd4:	0000835e 	.word	0x0000835e

00004dd8 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    4dd8:	b570      	push	{r4, r5, r6, lr}
    4dda:	4604      	mov	r4, r0
    4ddc:	460d      	mov	r5, r1
	__asm__ volatile(
    4dde:	f04f 0320 	mov.w	r3, #32
    4de2:	f3ef 8611 	mrs	r6, BASEPRI
    4de6:	f383 8811 	msr	BASEPRI, r3
    4dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4dee:	481c      	ldr	r0, [pc, #112]	; (4e60 <z_set_timeout_expiry+0x88>)
    4df0:	f7fe fa1e 	bl	3230 <z_spin_lock_valid>
    4df4:	b968      	cbnz	r0, 4e12 <z_set_timeout_expiry+0x3a>
    4df6:	2381      	movs	r3, #129	; 0x81
    4df8:	4a1a      	ldr	r2, [pc, #104]	; (4e64 <z_set_timeout_expiry+0x8c>)
    4dfa:	491b      	ldr	r1, [pc, #108]	; (4e68 <z_set_timeout_expiry+0x90>)
    4dfc:	481b      	ldr	r0, [pc, #108]	; (4e6c <z_set_timeout_expiry+0x94>)
    4dfe:	f001 ff5d 	bl	6cbc <printk>
    4e02:	4917      	ldr	r1, [pc, #92]	; (4e60 <z_set_timeout_expiry+0x88>)
    4e04:	481a      	ldr	r0, [pc, #104]	; (4e70 <z_set_timeout_expiry+0x98>)
    4e06:	f001 ff59 	bl	6cbc <printk>
    4e0a:	2181      	movs	r1, #129	; 0x81
    4e0c:	4815      	ldr	r0, [pc, #84]	; (4e64 <z_set_timeout_expiry+0x8c>)
    4e0e:	f002 f81f 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e12:	4813      	ldr	r0, [pc, #76]	; (4e60 <z_set_timeout_expiry+0x88>)
    4e14:	f7fe fa28 	bl	3268 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    4e18:	f7ff fe84 	bl	4b24 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    4e1c:	2801      	cmp	r0, #1
    4e1e:	dd07      	ble.n	4e30 <z_set_timeout_expiry+0x58>
    4e20:	42a0      	cmp	r0, r4
    4e22:	db05      	blt.n	4e30 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4e24:	42a0      	cmp	r0, r4
    4e26:	4629      	mov	r1, r5
    4e28:	bfa8      	it	ge
    4e2a:	4620      	movge	r0, r4
    4e2c:	f7fc fb1e 	bl	146c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e30:	480b      	ldr	r0, [pc, #44]	; (4e60 <z_set_timeout_expiry+0x88>)
    4e32:	f7fe fa0b 	bl	324c <z_spin_unlock_valid>
    4e36:	b968      	cbnz	r0, 4e54 <z_set_timeout_expiry+0x7c>
    4e38:	23ac      	movs	r3, #172	; 0xac
    4e3a:	4a0a      	ldr	r2, [pc, #40]	; (4e64 <z_set_timeout_expiry+0x8c>)
    4e3c:	490d      	ldr	r1, [pc, #52]	; (4e74 <z_set_timeout_expiry+0x9c>)
    4e3e:	480b      	ldr	r0, [pc, #44]	; (4e6c <z_set_timeout_expiry+0x94>)
    4e40:	f001 ff3c 	bl	6cbc <printk>
    4e44:	4906      	ldr	r1, [pc, #24]	; (4e60 <z_set_timeout_expiry+0x88>)
    4e46:	480c      	ldr	r0, [pc, #48]	; (4e78 <z_set_timeout_expiry+0xa0>)
    4e48:	f001 ff38 	bl	6cbc <printk>
    4e4c:	21ac      	movs	r1, #172	; 0xac
    4e4e:	4805      	ldr	r0, [pc, #20]	; (4e64 <z_set_timeout_expiry+0x8c>)
    4e50:	f001 fffe 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4e54:	f386 8811 	msr	BASEPRI, r6
    4e58:	f3bf 8f6f 	isb	sy
		}
	}
}
    4e5c:	bd70      	pop	{r4, r5, r6, pc}
    4e5e:	bf00      	nop
    4e60:	00009d8c 	.word	0x00009d8c
    4e64:	000082f4 	.word	0x000082f4
    4e68:	0000831a 	.word	0x0000831a
    4e6c:	00008182 	.word	0x00008182
    4e70:	0000832f 	.word	0x0000832f
    4e74:	00008347 	.word	0x00008347
    4e78:	0000835e 	.word	0x0000835e

00004e7c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    4e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e80:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4e82:	f7ff fa31 	bl	42e8 <z_time_slice>
	__asm__ volatile(
    4e86:	f04f 0320 	mov.w	r3, #32
    4e8a:	f3ef 8511 	mrs	r5, BASEPRI
    4e8e:	f383 8811 	msr	BASEPRI, r3
    4e92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e96:	484c      	ldr	r0, [pc, #304]	; (4fc8 <sys_clock_announce+0x14c>)
    4e98:	f7fe f9ca 	bl	3230 <z_spin_lock_valid>
    4e9c:	b968      	cbnz	r0, 4eba <sys_clock_announce+0x3e>
    4e9e:	2381      	movs	r3, #129	; 0x81
    4ea0:	4a4a      	ldr	r2, [pc, #296]	; (4fcc <sys_clock_announce+0x150>)
    4ea2:	494b      	ldr	r1, [pc, #300]	; (4fd0 <sys_clock_announce+0x154>)
    4ea4:	484b      	ldr	r0, [pc, #300]	; (4fd4 <sys_clock_announce+0x158>)
    4ea6:	f001 ff09 	bl	6cbc <printk>
    4eaa:	4947      	ldr	r1, [pc, #284]	; (4fc8 <sys_clock_announce+0x14c>)
    4eac:	484a      	ldr	r0, [pc, #296]	; (4fd8 <sys_clock_announce+0x15c>)
    4eae:	f001 ff05 	bl	6cbc <printk>
    4eb2:	2181      	movs	r1, #129	; 0x81
    4eb4:	4845      	ldr	r0, [pc, #276]	; (4fcc <sys_clock_announce+0x150>)
    4eb6:	f001 ffcb 	bl	6e50 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4eba:	4f48      	ldr	r7, [pc, #288]	; (4fdc <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    4ebc:	4842      	ldr	r0, [pc, #264]	; (4fc8 <sys_clock_announce+0x14c>)
	return list->head == list;
    4ebe:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4fe0 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4ec2:	4e48      	ldr	r6, [pc, #288]	; (4fe4 <sys_clock_announce+0x168>)
    4ec4:	f7fe f9d0 	bl	3268 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    4ec8:	603c      	str	r4, [r7, #0]
    4eca:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4ece:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ed0:	4544      	cmp	r4, r8
    4ed2:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
    4ed6:	e9d6 1e00 	ldrd	r1, lr, [r6]
    4eda:	d00b      	beq.n	4ef4 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4edc:	b154      	cbz	r4, 4ef4 <sys_clock_announce+0x78>
    4ede:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    4ee2:	429a      	cmp	r2, r3
    4ee4:	eb70 090c 	sbcs.w	r9, r0, ip
    4ee8:	da28      	bge.n	4f3c <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4eea:	1a9b      	subs	r3, r3, r2
    4eec:	eb6c 0c00 	sbc.w	ip, ip, r0
    4ef0:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4ef4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4ef6:	1851      	adds	r1, r2, r1
    4ef8:	eb4e 0000 	adc.w	r0, lr, r0
    4efc:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    4f00:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4f02:	f7ff fe0f 	bl	4b24 <next_timeout>
    4f06:	4621      	mov	r1, r4
    4f08:	f7fc fab0 	bl	146c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f0c:	482e      	ldr	r0, [pc, #184]	; (4fc8 <sys_clock_announce+0x14c>)
    4f0e:	f7fe f99d 	bl	324c <z_spin_unlock_valid>
    4f12:	b968      	cbnz	r0, 4f30 <sys_clock_announce+0xb4>
    4f14:	23ac      	movs	r3, #172	; 0xac
    4f16:	4a2d      	ldr	r2, [pc, #180]	; (4fcc <sys_clock_announce+0x150>)
    4f18:	4933      	ldr	r1, [pc, #204]	; (4fe8 <sys_clock_announce+0x16c>)
    4f1a:	482e      	ldr	r0, [pc, #184]	; (4fd4 <sys_clock_announce+0x158>)
    4f1c:	f001 fece 	bl	6cbc <printk>
    4f20:	4929      	ldr	r1, [pc, #164]	; (4fc8 <sys_clock_announce+0x14c>)
    4f22:	4832      	ldr	r0, [pc, #200]	; (4fec <sys_clock_announce+0x170>)
    4f24:	f001 feca 	bl	6cbc <printk>
    4f28:	21ac      	movs	r1, #172	; 0xac
    4f2a:	4828      	ldr	r0, [pc, #160]	; (4fcc <sys_clock_announce+0x150>)
    4f2c:	f001 ff90 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    4f30:	f385 8811 	msr	BASEPRI, r5
    4f34:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4f3c:	1859      	adds	r1, r3, r1
    4f3e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    4f42:	1ad3      	subs	r3, r2, r3
    4f44:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    4f46:	2200      	movs	r2, #0
    4f48:	2300      	movs	r3, #0
		curr_tick += dt;
    4f4a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    4f4e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4f52:	4620      	mov	r0, r4
    4f54:	f7ff fe10 	bl	4b78 <remove_timeout>
    4f58:	481b      	ldr	r0, [pc, #108]	; (4fc8 <sys_clock_announce+0x14c>)
    4f5a:	f7fe f977 	bl	324c <z_spin_unlock_valid>
    4f5e:	b968      	cbnz	r0, 4f7c <sys_clock_announce+0x100>
    4f60:	23ac      	movs	r3, #172	; 0xac
    4f62:	4a1a      	ldr	r2, [pc, #104]	; (4fcc <sys_clock_announce+0x150>)
    4f64:	4920      	ldr	r1, [pc, #128]	; (4fe8 <sys_clock_announce+0x16c>)
    4f66:	481b      	ldr	r0, [pc, #108]	; (4fd4 <sys_clock_announce+0x158>)
    4f68:	f001 fea8 	bl	6cbc <printk>
    4f6c:	4916      	ldr	r1, [pc, #88]	; (4fc8 <sys_clock_announce+0x14c>)
    4f6e:	481f      	ldr	r0, [pc, #124]	; (4fec <sys_clock_announce+0x170>)
    4f70:	f001 fea4 	bl	6cbc <printk>
    4f74:	21ac      	movs	r1, #172	; 0xac
    4f76:	4815      	ldr	r0, [pc, #84]	; (4fcc <sys_clock_announce+0x150>)
    4f78:	f001 ff6a 	bl	6e50 <assert_post_action>
    4f7c:	f385 8811 	msr	BASEPRI, r5
    4f80:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4f84:	4620      	mov	r0, r4
    4f86:	68a3      	ldr	r3, [r4, #8]
    4f88:	4798      	blx	r3
	__asm__ volatile(
    4f8a:	f04f 0320 	mov.w	r3, #32
    4f8e:	f3ef 8511 	mrs	r5, BASEPRI
    4f92:	f383 8811 	msr	BASEPRI, r3
    4f96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f9a:	480b      	ldr	r0, [pc, #44]	; (4fc8 <sys_clock_announce+0x14c>)
    4f9c:	f7fe f948 	bl	3230 <z_spin_lock_valid>
    4fa0:	b968      	cbnz	r0, 4fbe <sys_clock_announce+0x142>
    4fa2:	2381      	movs	r3, #129	; 0x81
    4fa4:	4a09      	ldr	r2, [pc, #36]	; (4fcc <sys_clock_announce+0x150>)
    4fa6:	490a      	ldr	r1, [pc, #40]	; (4fd0 <sys_clock_announce+0x154>)
    4fa8:	480a      	ldr	r0, [pc, #40]	; (4fd4 <sys_clock_announce+0x158>)
    4faa:	f001 fe87 	bl	6cbc <printk>
    4fae:	4906      	ldr	r1, [pc, #24]	; (4fc8 <sys_clock_announce+0x14c>)
    4fb0:	4809      	ldr	r0, [pc, #36]	; (4fd8 <sys_clock_announce+0x15c>)
    4fb2:	f001 fe83 	bl	6cbc <printk>
    4fb6:	2181      	movs	r1, #129	; 0x81
    4fb8:	4804      	ldr	r0, [pc, #16]	; (4fcc <sys_clock_announce+0x150>)
    4fba:	f001 ff49 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    4fbe:	4802      	ldr	r0, [pc, #8]	; (4fc8 <sys_clock_announce+0x14c>)
    4fc0:	f7fe f952 	bl	3268 <z_spin_lock_set_owner>
	return k;
    4fc4:	e781      	b.n	4eca <sys_clock_announce+0x4e>
    4fc6:	bf00      	nop
    4fc8:	00009d8c 	.word	0x00009d8c
    4fcc:	000082f4 	.word	0x000082f4
    4fd0:	0000831a 	.word	0x0000831a
    4fd4:	00008182 	.word	0x00008182
    4fd8:	0000832f 	.word	0x0000832f
    4fdc:	00009d88 	.word	0x00009d88
    4fe0:	00009970 	.word	0x00009970
    4fe4:	00009bc8 	.word	0x00009bc8
    4fe8:	00008347 	.word	0x00008347
    4fec:	0000835e 	.word	0x0000835e

00004ff0 <signal_poll_event>:
{
    4ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    4ff4:	6884      	ldr	r4, [r0, #8]
{
    4ff6:	4605      	mov	r5, r0
    4ff8:	460e      	mov	r6, r1
	if (poller != NULL) {
    4ffa:	b1d4      	cbz	r4, 5032 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    4ffc:	7863      	ldrb	r3, [r4, #1]
    4ffe:	2b01      	cmp	r3, #1
    5000:	d141      	bne.n	5086 <signal_poll_event+0x96>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    5002:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    5006:	d10e      	bne.n	5026 <signal_poll_event+0x36>
    5008:	23f5      	movs	r3, #245	; 0xf5
    500a:	4a2f      	ldr	r2, [pc, #188]	; (50c8 <signal_poll_event+0xd8>)
    500c:	492f      	ldr	r1, [pc, #188]	; (50cc <signal_poll_event+0xdc>)
    500e:	4830      	ldr	r0, [pc, #192]	; (50d0 <signal_poll_event+0xe0>)
    5010:	f001 fe54 	bl	6cbc <printk>
    5014:	482f      	ldr	r0, [pc, #188]	; (50d4 <signal_poll_event+0xe4>)
    5016:	f001 fe51 	bl	6cbc <printk>
    501a:	21f5      	movs	r1, #245	; 0xf5
    501c:	482a      	ldr	r0, [pc, #168]	; (50c8 <signal_poll_event+0xd8>)
    501e:	f001 ff17 	bl	6e50 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
    5022:	7b7b      	ldrb	r3, [r7, #13]
    5024:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
    5026:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    502a:	f013 0302 	ands.w	r3, r3, #2
    502e:	d10a      	bne.n	5046 <signal_poll_event+0x56>
		poller->is_polling = false;
    5030:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    5032:	2000      	movs	r0, #0
	event->state |= state;
    5034:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
    5036:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    5038:	f3c3 3245 	ubfx	r2, r3, #13, #6
    503c:	4316      	orrs	r6, r2
    503e:	f366 3352 	bfi	r3, r6, #13, #6
    5042:	60eb      	str	r3, [r5, #12]
	return retcode;
    5044:	e03e      	b.n	50c4 <signal_poll_event+0xd4>
	if (z_is_thread_timeout_expired(thread)) {
    5046:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    504a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    504e:	bf08      	it	eq
    5050:	f112 0f02 	cmneq.w	r2, #2
    5054:	d032      	beq.n	50bc <signal_poll_event+0xcc>
	z_unpend_thread(thread);
    5056:	4638      	mov	r0, r7
    5058:	f7ff fa78 	bl	454c <z_unpend_thread>
	arch_thread_return_value_set(thread,
    505c:	2e08      	cmp	r6, #8
    505e:	bf0c      	ite	eq
    5060:	f06f 0303 	mvneq.w	r3, #3
    5064:	2300      	movne	r3, #0
    5066:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5068:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    506c:	06db      	lsls	r3, r3, #27
    506e:	d10c      	bne.n	508a <signal_poll_event+0x9a>
    5070:	f854 8c48 	ldr.w	r8, [r4, #-72]
    5074:	f1b8 0f00 	cmp.w	r8, #0
    5078:	d107      	bne.n	508a <signal_poll_event+0x9a>
	z_ready_thread(thread);
    507a:	4638      	mov	r0, r7
    507c:	f7fe fe04 	bl	3c88 <z_ready_thread>
		poller->is_polling = false;
    5080:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    5084:	e7d5      	b.n	5032 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    5086:	2b02      	cmp	r3, #2
    5088:	d001      	beq.n	508e <signal_poll_event+0x9e>
		poller->is_polling = false;
    508a:	2300      	movs	r3, #0
    508c:	e7d0      	b.n	5030 <signal_poll_event+0x40>
	if (poller->is_polling && twork->workq != NULL) {
    508e:	7823      	ldrb	r3, [r4, #0]
    5090:	2b00      	cmp	r3, #0
    5092:	d0ce      	beq.n	5032 <signal_poll_event+0x42>
    5094:	f854 7c04 	ldr.w	r7, [r4, #-4]
    5098:	b177      	cbz	r7, 50b8 <signal_poll_event+0xc8>
		twork->poll_result = 0;
    509a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    509e:	f1a4 0914 	sub.w	r9, r4, #20
    50a2:	f104 0014 	add.w	r0, r4, #20
    50a6:	f7ff fe49 	bl	4d3c <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
    50aa:	4649      	mov	r1, r9
    50ac:	4638      	mov	r0, r7
		twork->poll_result = 0;
    50ae:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    50b2:	f000 f9df 	bl	5474 <k_work_submit_to_queue>
    50b6:	e7e3      	b.n	5080 <signal_poll_event+0x90>
		poller->is_polling = false;
    50b8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    50ba:	e7ba      	b.n	5032 <signal_poll_event+0x42>
		poller->is_polling = false;
    50bc:	2300      	movs	r3, #0
		return -EAGAIN;
    50be:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
    50c2:	7023      	strb	r3, [r4, #0]
}
    50c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50c8:	00008ad8 	.word	0x00008ad8
    50cc:	00008bf0 	.word	0x00008bf0
    50d0:	00008182 	.word	0x00008182
    50d4:	00008c06 	.word	0x00008c06

000050d8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    50d8:	4a02      	ldr	r2, [pc, #8]	; (50e4 <boot_banner+0xc>)
    50da:	4903      	ldr	r1, [pc, #12]	; (50e8 <boot_banner+0x10>)
    50dc:	4803      	ldr	r0, [pc, #12]	; (50ec <boot_banner+0x14>)
    50de:	f001 bded 	b.w	6cbc <printk>
    50e2:	bf00      	nop
    50e4:	0000898e 	.word	0x0000898e
    50e8:	00008c25 	.word	0x00008c25
    50ec:	00008c32 	.word	0x00008c32

000050f0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    50f0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    50f2:	4c0e      	ldr	r4, [pc, #56]	; (512c <statics_init+0x3c>)
    50f4:	4d0e      	ldr	r5, [pc, #56]	; (5130 <statics_init+0x40>)
    50f6:	4e0f      	ldr	r6, [pc, #60]	; (5134 <statics_init+0x44>)
    50f8:	42ac      	cmp	r4, r5
    50fa:	d90c      	bls.n	5116 <statics_init+0x26>
    50fc:	490e      	ldr	r1, [pc, #56]	; (5138 <statics_init+0x48>)
    50fe:	2317      	movs	r3, #23
    5100:	4632      	mov	r2, r6
    5102:	480e      	ldr	r0, [pc, #56]	; (513c <statics_init+0x4c>)
    5104:	f001 fdda 	bl	6cbc <printk>
    5108:	480d      	ldr	r0, [pc, #52]	; (5140 <statics_init+0x50>)
    510a:	f001 fdd7 	bl	6cbc <printk>
    510e:	2117      	movs	r1, #23
    5110:	4630      	mov	r0, r6
    5112:	f001 fe9d 	bl	6e50 <assert_post_action>
    5116:	42ac      	cmp	r4, r5
    5118:	d301      	bcc.n	511e <statics_init+0x2e>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    511a:	2000      	movs	r0, #0
    511c:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    511e:	4620      	mov	r0, r4
    5120:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    5124:	f001 ff7e 	bl	7024 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5128:	3418      	adds	r4, #24
    512a:	e7e5      	b.n	50f8 <statics_init+0x8>
    512c:	00009a54 	.word	0x00009a54
    5130:	00009a54 	.word	0x00009a54
    5134:	00008c59 	.word	0x00008c59
    5138:	00008c7b 	.word	0x00008c7b
    513c:	00008182 	.word	0x00008182
    5140:	00008732 	.word	0x00008732

00005144 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    5144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    5146:	2400      	movs	r4, #0
    5148:	4b08      	ldr	r3, [pc, #32]	; (516c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    514a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    514e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    5150:	ab02      	add	r3, sp, #8
    5152:	9300      	str	r3, [sp, #0]
    5154:	4906      	ldr	r1, [pc, #24]	; (5170 <k_sys_work_q_init+0x2c>)
    5156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    515a:	4806      	ldr	r0, [pc, #24]	; (5174 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    515c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    5160:	f000 f9ec 	bl	553c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    5164:	4620      	mov	r0, r4
    5166:	b004      	add	sp, #16
    5168:	bd10      	pop	{r4, pc}
    516a:	bf00      	nop
    516c:	00008c91 	.word	0x00008c91
    5170:	0000b6b0 	.word	0x0000b6b0
    5174:	00009bd0 	.word	0x00009bd0

00005178 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    5178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    517c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    517e:	4d7d      	ldr	r5, [pc, #500]	; (5374 <work_queue_main+0x1fc>)
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    5180:	4f7d      	ldr	r7, [pc, #500]	; (5378 <work_queue_main+0x200>)
    5182:	b085      	sub	sp, #20
    5184:	f04f 0320 	mov.w	r3, #32
    5188:	f3ef 8811 	mrs	r8, BASEPRI
    518c:	f383 8811 	msr	BASEPRI, r3
    5190:	f3bf 8f6f 	isb	sy
    5194:	4628      	mov	r0, r5
    5196:	f7fe f84b 	bl	3230 <z_spin_lock_valid>
    519a:	b968      	cbnz	r0, 51b8 <work_queue_main+0x40>
    519c:	2381      	movs	r3, #129	; 0x81
    519e:	4a77      	ldr	r2, [pc, #476]	; (537c <work_queue_main+0x204>)
    51a0:	4977      	ldr	r1, [pc, #476]	; (5380 <work_queue_main+0x208>)
    51a2:	4878      	ldr	r0, [pc, #480]	; (5384 <work_queue_main+0x20c>)
    51a4:	f001 fd8a 	bl	6cbc <printk>
    51a8:	4629      	mov	r1, r5
    51aa:	4877      	ldr	r0, [pc, #476]	; (5388 <work_queue_main+0x210>)
    51ac:	f001 fd86 	bl	6cbc <printk>
    51b0:	2181      	movs	r1, #129	; 0x81
    51b2:	4872      	ldr	r0, [pc, #456]	; (537c <work_queue_main+0x204>)
    51b4:	f001 fe4c 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    51b8:	4628      	mov	r0, r5
    51ba:	f7fe f855 	bl	3268 <z_spin_lock_set_owner>
    51be:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    51c2:	b9b6      	cbnz	r6, 51f2 <work_queue_main+0x7a>
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    51c4:	2102      	movs	r1, #2
    51c6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    51ca:	f001 ff33 	bl	7034 <flag_test_and_clear>
    51ce:	2800      	cmp	r0, #0
    51d0:	f040 8094 	bne.w	52fc <work_queue_main+0x184>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    51d4:	2300      	movs	r3, #0
    51d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    51da:	9302      	str	r3, [sp, #8]
    51dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    51e0:	4641      	mov	r1, r8
    51e2:	e9cd 2300 	strd	r2, r3, [sp]
    51e6:	4628      	mov	r0, r5
    51e8:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    51ec:	f7ff fc7e 	bl	4aec <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    51f0:	e7c8      	b.n	5184 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    51f2:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    51f6:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    51f8:	4296      	cmp	r6, r2
	list->tail = node;
    51fa:	bf08      	it	eq
    51fc:	f8c4 30bc 	streq.w	r3, [r4, #188]	; 0xbc
	list->head = node;
    5200:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	*flagp |= BIT(bit);
    5204:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5208:	4628      	mov	r0, r5
    520a:	f043 0302 	orr.w	r3, r3, #2
    520e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    5212:	68f3      	ldr	r3, [r6, #12]
			handler = work->handler;
    5214:	f8d6 9004 	ldr.w	r9, [r6, #4]
	*flagp &= ~BIT(bit);
    5218:	f023 0304 	bic.w	r3, r3, #4
    521c:	f043 0301 	orr.w	r3, r3, #1
    5220:	60f3      	str	r3, [r6, #12]
    5222:	f7fe f813 	bl	324c <z_spin_unlock_valid>
    5226:	b968      	cbnz	r0, 5244 <work_queue_main+0xcc>
    5228:	23ac      	movs	r3, #172	; 0xac
    522a:	4a54      	ldr	r2, [pc, #336]	; (537c <work_queue_main+0x204>)
    522c:	4957      	ldr	r1, [pc, #348]	; (538c <work_queue_main+0x214>)
    522e:	4855      	ldr	r0, [pc, #340]	; (5384 <work_queue_main+0x20c>)
    5230:	f001 fd44 	bl	6cbc <printk>
    5234:	4629      	mov	r1, r5
    5236:	4856      	ldr	r0, [pc, #344]	; (5390 <work_queue_main+0x218>)
    5238:	f001 fd40 	bl	6cbc <printk>
    523c:	21ac      	movs	r1, #172	; 0xac
    523e:	484f      	ldr	r0, [pc, #316]	; (537c <work_queue_main+0x204>)
    5240:	f001 fe06 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    5244:	f388 8811 	msr	BASEPRI, r8
    5248:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
    524c:	f1b9 0f00 	cmp.w	r9, #0
    5250:	d10b      	bne.n	526a <work_queue_main+0xf2>
    5252:	4950      	ldr	r1, [pc, #320]	; (5394 <work_queue_main+0x21c>)
    5254:	484b      	ldr	r0, [pc, #300]	; (5384 <work_queue_main+0x20c>)
    5256:	f240 237d 	movw	r3, #637	; 0x27d
    525a:	4a4f      	ldr	r2, [pc, #316]	; (5398 <work_queue_main+0x220>)
    525c:	f001 fd2e 	bl	6cbc <printk>
    5260:	f240 217d 	movw	r1, #637	; 0x27d
    5264:	484c      	ldr	r0, [pc, #304]	; (5398 <work_queue_main+0x220>)
    5266:	f001 fdf3 	bl	6e50 <assert_post_action>
			handler(work);
    526a:	4630      	mov	r0, r6
    526c:	47c8      	blx	r9
	__asm__ volatile(
    526e:	f04f 0320 	mov.w	r3, #32
    5272:	f3ef 8811 	mrs	r8, BASEPRI
    5276:	f383 8811 	msr	BASEPRI, r3
    527a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    527e:	4628      	mov	r0, r5
    5280:	f7fd ffd6 	bl	3230 <z_spin_lock_valid>
    5284:	b968      	cbnz	r0, 52a2 <work_queue_main+0x12a>
    5286:	2381      	movs	r3, #129	; 0x81
    5288:	4a3c      	ldr	r2, [pc, #240]	; (537c <work_queue_main+0x204>)
    528a:	493d      	ldr	r1, [pc, #244]	; (5380 <work_queue_main+0x208>)
    528c:	483d      	ldr	r0, [pc, #244]	; (5384 <work_queue_main+0x20c>)
    528e:	f001 fd15 	bl	6cbc <printk>
    5292:	4629      	mov	r1, r5
    5294:	483c      	ldr	r0, [pc, #240]	; (5388 <work_queue_main+0x210>)
    5296:	f001 fd11 	bl	6cbc <printk>
    529a:	2181      	movs	r1, #129	; 0x81
    529c:	4837      	ldr	r0, [pc, #220]	; (537c <work_queue_main+0x204>)
    529e:	f001 fdd7 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    52a2:	4628      	mov	r0, r5
    52a4:	f7fd ffe0 	bl	3268 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    52a8:	68f3      	ldr	r3, [r6, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    52aa:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    52ac:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    52b0:	d42e      	bmi.n	5310 <work_queue_main+0x198>
	*flagp &= ~BIT(bit);
    52b2:	60f2      	str	r2, [r6, #12]
    52b4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52b8:	4628      	mov	r0, r5
    52ba:	f023 0302 	bic.w	r3, r3, #2
    52be:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
    52c2:	f3c3 2600 	ubfx	r6, r3, #8, #1
    52c6:	f7fd ffc1 	bl	324c <z_spin_unlock_valid>
    52ca:	b968      	cbnz	r0, 52e8 <work_queue_main+0x170>
    52cc:	23ac      	movs	r3, #172	; 0xac
    52ce:	4a2b      	ldr	r2, [pc, #172]	; (537c <work_queue_main+0x204>)
    52d0:	492e      	ldr	r1, [pc, #184]	; (538c <work_queue_main+0x214>)
    52d2:	482c      	ldr	r0, [pc, #176]	; (5384 <work_queue_main+0x20c>)
    52d4:	f001 fcf2 	bl	6cbc <printk>
    52d8:	4629      	mov	r1, r5
    52da:	482d      	ldr	r0, [pc, #180]	; (5390 <work_queue_main+0x218>)
    52dc:	f001 fcee 	bl	6cbc <printk>
    52e0:	21ac      	movs	r1, #172	; 0xac
    52e2:	4826      	ldr	r0, [pc, #152]	; (537c <work_queue_main+0x204>)
    52e4:	f001 fdb4 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    52e8:	f388 8811 	msr	BASEPRI, r8
    52ec:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    52f0:	2e00      	cmp	r6, #0
    52f2:	f47f af47 	bne.w	5184 <work_queue_main+0xc>
	z_impl_k_yield();
    52f6:	f7ff fa2d 	bl	4754 <z_impl_k_yield>
}
    52fa:	e743      	b.n	5184 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    52fc:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    5300:	2200      	movs	r2, #0
    5302:	2101      	movs	r1, #1
    5304:	4630      	mov	r0, r6
    5306:	f7ff fb93 	bl	4a30 <z_sched_wake>
    530a:	2800      	cmp	r0, #0
    530c:	d1f8      	bne.n	5300 <work_queue_main+0x188>
    530e:	e761      	b.n	51d4 <work_queue_main+0x5c>
	return list->head;
    5310:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    5312:	f023 0303 	bic.w	r3, r3, #3
    5316:	60f3      	str	r3, [r6, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5318:	2800      	cmp	r0, #0
    531a:	d0cb      	beq.n	52b4 <work_queue_main+0x13c>
	return node->next;
    531c:	f04f 0900 	mov.w	r9, #0
	parent->next = child;
    5320:	46cb      	mov	fp, r9
	return node->next;
    5322:	f8d0 a000 	ldr.w	sl, [r0]
    5326:	2800      	cmp	r0, #0
    5328:	d0c4      	beq.n	52b4 <work_queue_main+0x13c>
		if (wc->work == work) {
    532a:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    532c:	4602      	mov	r2, r0
		if (wc->work == work) {
    532e:	429e      	cmp	r6, r3
    5330:	d10d      	bne.n	534e <work_queue_main+0x1d6>
    5332:	6803      	ldr	r3, [r0, #0]
	return list->tail;
    5334:	687a      	ldr	r2, [r7, #4]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5336:	f1b9 0f00 	cmp.w	r9, #0
    533a:	d111      	bne.n	5360 <work_queue_main+0x1e8>
    533c:	4290      	cmp	r0, r2
	list->head = node;
    533e:	603b      	str	r3, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    5340:	d100      	bne.n	5344 <work_queue_main+0x1cc>
	list->tail = node;
    5342:	607b      	str	r3, [r7, #4]
	parent->next = child;
    5344:	f840 bb08 	str.w	fp, [r0], #8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5348:	f7fe fb60 	bl	3a0c <z_impl_k_sem_give>
}
    534c:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    534e:	f1ba 0f00 	cmp.w	sl, #0
    5352:	d00c      	beq.n	536e <work_queue_main+0x1f6>
	return node->next;
    5354:	f8da 3000 	ldr.w	r3, [sl]
    5358:	4650      	mov	r0, sl
    535a:	4691      	mov	r9, r2
    535c:	469a      	mov	sl, r3
    535e:	e7e2      	b.n	5326 <work_queue_main+0x1ae>
Z_GENLIST_REMOVE(slist, snode)
    5360:	4290      	cmp	r0, r2
	parent->next = child;
    5362:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
    5366:	bf08      	it	eq
    5368:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    536c:	e7ea      	b.n	5344 <work_queue_main+0x1cc>
    536e:	4653      	mov	r3, sl
    5370:	e7f2      	b.n	5358 <work_queue_main+0x1e0>
    5372:	bf00      	nop
    5374:	00009d98 	.word	0x00009d98
    5378:	00009d90 	.word	0x00009d90
    537c:	000082f4 	.word	0x000082f4
    5380:	0000831a 	.word	0x0000831a
    5384:	00008182 	.word	0x00008182
    5388:	0000832f 	.word	0x0000832f
    538c:	00008347 	.word	0x00008347
    5390:	0000835e 	.word	0x0000835e
    5394:	00008cbb 	.word	0x00008cbb
    5398:	00008c9a 	.word	0x00008c9a

0000539c <submit_to_queue_locked>:
{
    539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    539e:	68c3      	ldr	r3, [r0, #12]
{
    53a0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    53a2:	0799      	lsls	r1, r3, #30
{
    53a4:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    53a6:	f3c3 0640 	ubfx	r6, r3, #1, #1
    53aa:	d439      	bmi.n	5420 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    53ac:	075a      	lsls	r2, r3, #29
    53ae:	d425      	bmi.n	53fc <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
    53b0:	683a      	ldr	r2, [r7, #0]
    53b2:	b90a      	cbnz	r2, 53b8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    53b4:	6882      	ldr	r2, [r0, #8]
    53b6:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    53b8:	07dd      	lsls	r5, r3, #31
    53ba:	d522      	bpl.n	5402 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
    53bc:	68a3      	ldr	r3, [r4, #8]
    53be:	b95b      	cbnz	r3, 53d8 <submit_to_queue_locked+0x3c>
    53c0:	4928      	ldr	r1, [pc, #160]	; (5464 <submit_to_queue_locked+0xc8>)
    53c2:	4829      	ldr	r0, [pc, #164]	; (5468 <submit_to_queue_locked+0xcc>)
    53c4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    53c8:	4a28      	ldr	r2, [pc, #160]	; (546c <submit_to_queue_locked+0xd0>)
    53ca:	f001 fc77 	bl	6cbc <printk>
    53ce:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    53d2:	4826      	ldr	r0, [pc, #152]	; (546c <submit_to_queue_locked+0xd0>)
    53d4:	f001 fd3c 	bl	6e50 <assert_post_action>
			ret = 2;
    53d8:	2602      	movs	r6, #2
			*queuep = work->queue;
    53da:	68a3      	ldr	r3, [r4, #8]
    53dc:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    53de:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
    53e0:	2d00      	cmp	r5, #0
    53e2:	d03c      	beq.n	545e <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    53e4:	4b22      	ldr	r3, [pc, #136]	; (5470 <submit_to_queue_locked+0xd4>)
    53e6:	689b      	ldr	r3, [r3, #8]
    53e8:	42ab      	cmp	r3, r5
    53ea:	d00c      	beq.n	5406 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    53ec:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    53f0:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    53f2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    53f6:	d416      	bmi.n	5426 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
    53f8:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    53fc:	2300      	movs	r3, #0
    53fe:	603b      	str	r3, [r7, #0]
	return ret;
    5400:	e027      	b.n	5452 <submit_to_queue_locked+0xb6>
		ret = 1;
    5402:	2601      	movs	r6, #1
    5404:	e7eb      	b.n	53de <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5406:	f001 fdd0 	bl	6faa <k_is_in_isr>
    540a:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    540e:	2800      	cmp	r0, #0
    5410:	d1ee      	bne.n	53f0 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5412:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    5414:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5418:	d5ee      	bpl.n	53f8 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
    541a:	b152      	cbz	r2, 5432 <submit_to_queue_locked+0x96>
    541c:	075b      	lsls	r3, r3, #29
    541e:	d408      	bmi.n	5432 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
    5420:	f06f 060f 	mvn.w	r6, #15
    5424:	e7ea      	b.n	53fc <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
    5426:	2a00      	cmp	r2, #0
    5428:	d1fa      	bne.n	5420 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
    542a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    542e:	2b00      	cmp	r3, #0
    5430:	d1f6      	bne.n	5420 <submit_to_queue_locked+0x84>
	parent->next = child;
    5432:	2300      	movs	r3, #0
    5434:	6023      	str	r3, [r4, #0]
	return list->tail;
    5436:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    543a:	b963      	cbnz	r3, 5456 <submit_to_queue_locked+0xba>
	list->head = node;
    543c:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    5440:	4628      	mov	r0, r5
    5442:	f001 fe02 	bl	704a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    5446:	68e3      	ldr	r3, [r4, #12]
    5448:	f043 0304 	orr.w	r3, r3, #4
    544c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    544e:	683b      	ldr	r3, [r7, #0]
    5450:	60a3      	str	r3, [r4, #8]
}
    5452:	4630      	mov	r0, r6
    5454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    5456:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5458:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    545c:	e7f0      	b.n	5440 <submit_to_queue_locked+0xa4>
		return -EINVAL;
    545e:	f06f 0615 	mvn.w	r6, #21
    5462:	e7cb      	b.n	53fc <submit_to_queue_locked+0x60>
    5464:	00008cd2 	.word	0x00008cd2
    5468:	00008182 	.word	0x00008182
    546c:	00008c9a 	.word	0x00008c9a
    5470:	00009d3c 	.word	0x00009d3c

00005474 <k_work_submit_to_queue>:
{
    5474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    5476:	460c      	mov	r4, r1
{
    5478:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    547a:	b959      	cbnz	r1, 5494 <k_work_submit_to_queue+0x20>
    547c:	4926      	ldr	r1, [pc, #152]	; (5518 <k_work_submit_to_queue+0xa4>)
    547e:	4827      	ldr	r0, [pc, #156]	; (551c <k_work_submit_to_queue+0xa8>)
    5480:	f240 1369 	movw	r3, #361	; 0x169
    5484:	4a26      	ldr	r2, [pc, #152]	; (5520 <k_work_submit_to_queue+0xac>)
    5486:	f001 fc19 	bl	6cbc <printk>
    548a:	f240 1169 	movw	r1, #361	; 0x169
    548e:	4824      	ldr	r0, [pc, #144]	; (5520 <k_work_submit_to_queue+0xac>)
    5490:	f001 fcde 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    5494:	f04f 0320 	mov.w	r3, #32
    5498:	f3ef 8511 	mrs	r5, BASEPRI
    549c:	f383 8811 	msr	BASEPRI, r3
    54a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54a4:	481f      	ldr	r0, [pc, #124]	; (5524 <k_work_submit_to_queue+0xb0>)
    54a6:	f7fd fec3 	bl	3230 <z_spin_lock_valid>
    54aa:	b968      	cbnz	r0, 54c8 <k_work_submit_to_queue+0x54>
    54ac:	2381      	movs	r3, #129	; 0x81
    54ae:	4a1e      	ldr	r2, [pc, #120]	; (5528 <k_work_submit_to_queue+0xb4>)
    54b0:	491e      	ldr	r1, [pc, #120]	; (552c <k_work_submit_to_queue+0xb8>)
    54b2:	481a      	ldr	r0, [pc, #104]	; (551c <k_work_submit_to_queue+0xa8>)
    54b4:	f001 fc02 	bl	6cbc <printk>
    54b8:	491a      	ldr	r1, [pc, #104]	; (5524 <k_work_submit_to_queue+0xb0>)
    54ba:	481d      	ldr	r0, [pc, #116]	; (5530 <k_work_submit_to_queue+0xbc>)
    54bc:	f001 fbfe 	bl	6cbc <printk>
    54c0:	2181      	movs	r1, #129	; 0x81
    54c2:	4819      	ldr	r0, [pc, #100]	; (5528 <k_work_submit_to_queue+0xb4>)
    54c4:	f001 fcc4 	bl	6e50 <assert_post_action>
	z_spin_lock_set_owner(l);
    54c8:	4816      	ldr	r0, [pc, #88]	; (5524 <k_work_submit_to_queue+0xb0>)
    54ca:	f7fd fecd 	bl	3268 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    54ce:	4620      	mov	r0, r4
    54d0:	a901      	add	r1, sp, #4
    54d2:	f7ff ff63 	bl	539c <submit_to_queue_locked>
    54d6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54d8:	4812      	ldr	r0, [pc, #72]	; (5524 <k_work_submit_to_queue+0xb0>)
    54da:	f7fd feb7 	bl	324c <z_spin_unlock_valid>
    54de:	b968      	cbnz	r0, 54fc <k_work_submit_to_queue+0x88>
    54e0:	23ac      	movs	r3, #172	; 0xac
    54e2:	4a11      	ldr	r2, [pc, #68]	; (5528 <k_work_submit_to_queue+0xb4>)
    54e4:	4913      	ldr	r1, [pc, #76]	; (5534 <k_work_submit_to_queue+0xc0>)
    54e6:	480d      	ldr	r0, [pc, #52]	; (551c <k_work_submit_to_queue+0xa8>)
    54e8:	f001 fbe8 	bl	6cbc <printk>
    54ec:	490d      	ldr	r1, [pc, #52]	; (5524 <k_work_submit_to_queue+0xb0>)
    54ee:	4812      	ldr	r0, [pc, #72]	; (5538 <k_work_submit_to_queue+0xc4>)
    54f0:	f001 fbe4 	bl	6cbc <printk>
    54f4:	21ac      	movs	r1, #172	; 0xac
    54f6:	480c      	ldr	r0, [pc, #48]	; (5528 <k_work_submit_to_queue+0xb4>)
    54f8:	f001 fcaa 	bl	6e50 <assert_post_action>
	__asm__ volatile(
    54fc:	f385 8811 	msr	BASEPRI, r5
    5500:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    5504:	2c00      	cmp	r4, #0
    5506:	dd04      	ble.n	5512 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    5508:	f7ff f9cc 	bl	48a4 <z_impl_k_is_preempt_thread>
    550c:	b108      	cbz	r0, 5512 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    550e:	f7ff f921 	bl	4754 <z_impl_k_yield>
}
    5512:	4620      	mov	r0, r4
    5514:	b003      	add	sp, #12
    5516:	bd30      	pop	{r4, r5, pc}
    5518:	00008ced 	.word	0x00008ced
    551c:	00008182 	.word	0x00008182
    5520:	00008c9a 	.word	0x00008c9a
    5524:	00009d98 	.word	0x00009d98
    5528:	000082f4 	.word	0x000082f4
    552c:	0000831a 	.word	0x0000831a
    5530:	0000832f 	.word	0x0000832f
    5534:	00008347 	.word	0x00008347
    5538:	0000835e 	.word	0x0000835e

0000553c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5540:	b088      	sub	sp, #32
    5542:	460e      	mov	r6, r1
    5544:	4617      	mov	r7, r2
    5546:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    5548:	4604      	mov	r4, r0
{
    554a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
    554c:	b958      	cbnz	r0, 5566 <k_work_queue_start+0x2a>
    554e:	492e      	ldr	r1, [pc, #184]	; (5608 <k_work_queue_start+0xcc>)
    5550:	482e      	ldr	r0, [pc, #184]	; (560c <k_work_queue_start+0xd0>)
    5552:	f44f 7328 	mov.w	r3, #672	; 0x2a0
    5556:	4a2e      	ldr	r2, [pc, #184]	; (5610 <k_work_queue_start+0xd4>)
    5558:	f001 fbb0 	bl	6cbc <printk>
    555c:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    5560:	482b      	ldr	r0, [pc, #172]	; (5610 <k_work_queue_start+0xd4>)
    5562:	f001 fc75 	bl	6e50 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    5566:	b95e      	cbnz	r6, 5580 <k_work_queue_start+0x44>
    5568:	492a      	ldr	r1, [pc, #168]	; (5614 <k_work_queue_start+0xd8>)
    556a:	4828      	ldr	r0, [pc, #160]	; (560c <k_work_queue_start+0xd0>)
    556c:	f240 23a1 	movw	r3, #673	; 0x2a1
    5570:	4a27      	ldr	r2, [pc, #156]	; (5610 <k_work_queue_start+0xd4>)
    5572:	f001 fba3 	bl	6cbc <printk>
    5576:	f240 21a1 	movw	r1, #673	; 0x2a1
    557a:	4825      	ldr	r0, [pc, #148]	; (5610 <k_work_queue_start+0xd4>)
    557c:	f001 fc68 	bl	6e50 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    5580:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    5584:	07db      	lsls	r3, r3, #31
    5586:	d50b      	bpl.n	55a0 <k_work_queue_start+0x64>
    5588:	4923      	ldr	r1, [pc, #140]	; (5618 <k_work_queue_start+0xdc>)
    558a:	4820      	ldr	r0, [pc, #128]	; (560c <k_work_queue_start+0xd0>)
    558c:	f240 23a2 	movw	r3, #674	; 0x2a2
    5590:	4a1f      	ldr	r2, [pc, #124]	; (5610 <k_work_queue_start+0xd4>)
    5592:	f001 fb93 	bl	6cbc <printk>
    5596:	f240 21a2 	movw	r1, #674	; 0x2a2
    559a:	481d      	ldr	r0, [pc, #116]	; (5610 <k_work_queue_start+0xd4>)
    559c:	f001 fc58 	bl	6e50 <assert_post_action>
	list->head = NULL;
    55a0:	2300      	movs	r3, #0
	list->tail = NULL;
    55a2:	e9c4 332e 	strd	r3, r3, [r4, #184]	; 0xb8
	sys_dlist_init(&w->waitq);
    55a6:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    55aa:	e9c4 3330 	strd	r3, r3, [r4, #192]	; 0xc0
    55ae:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    55b2:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    55b6:	b32d      	cbz	r5, 5604 <k_work_queue_start+0xc8>
    55b8:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    55ba:	f240 1101 	movw	r1, #257	; 0x101
    55be:	2b00      	cmp	r3, #0
    55c0:	bf08      	it	eq
    55c2:	2101      	moveq	r1, #1
	*flagp = flags;
    55c4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    55c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    55cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    55d4:	2200      	movs	r2, #0
    55d6:	4631      	mov	r1, r6
    55d8:	e9cd 8203 	strd	r8, r2, [sp, #12]
    55dc:	e9cd 2201 	strd	r2, r2, [sp, #4]
    55e0:	4620      	mov	r0, r4
    55e2:	463a      	mov	r2, r7
    55e4:	4b0d      	ldr	r3, [pc, #52]	; (561c <k_work_queue_start+0xe0>)
    55e6:	9400      	str	r4, [sp, #0]
    55e8:	f7fd ff64 	bl	34b4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    55ec:	b125      	cbz	r5, 55f8 <k_work_queue_start+0xbc>
    55ee:	6829      	ldr	r1, [r5, #0]
    55f0:	b111      	cbz	r1, 55f8 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    55f2:	4620      	mov	r0, r4
    55f4:	f7fd fdf4 	bl	31e0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    55f8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    55fa:	b008      	add	sp, #32
    55fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5600:	f001 bcd9 	b.w	6fb6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5604:	2101      	movs	r1, #1
    5606:	e7dd      	b.n	55c4 <k_work_queue_start+0x88>
    5608:	00008d01 	.word	0x00008d01
    560c:	00008182 	.word	0x00008182
    5610:	00008c9a 	.word	0x00008c9a
    5614:	00008d07 	.word	0x00008d07
    5618:	00008d0d 	.word	0x00008d0d
    561c:	00005179 	.word	0x00005179

00005620 <_fclose_r>:
    5620:	b570      	push	{r4, r5, r6, lr}
    5622:	4605      	mov	r5, r0
    5624:	460c      	mov	r4, r1
    5626:	b1d1      	cbz	r1, 565e <_fclose_r+0x3e>
    5628:	b118      	cbz	r0, 5632 <_fclose_r+0x12>
    562a:	6983      	ldr	r3, [r0, #24]
    562c:	b90b      	cbnz	r3, 5632 <_fclose_r+0x12>
    562e:	f000 f8e7 	bl	5800 <__sinit>
    5632:	4b2d      	ldr	r3, [pc, #180]	; (56e8 <_fclose_r+0xc8>)
    5634:	429c      	cmp	r4, r3
    5636:	d115      	bne.n	5664 <_fclose_r+0x44>
    5638:	686c      	ldr	r4, [r5, #4]
    563a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    563c:	07de      	lsls	r6, r3, #31
    563e:	d405      	bmi.n	564c <_fclose_r+0x2c>
    5640:	89a3      	ldrh	r3, [r4, #12]
    5642:	0598      	lsls	r0, r3, #22
    5644:	d402      	bmi.n	564c <_fclose_r+0x2c>
    5646:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5648:	f001 fe58 	bl	72fc <__retarget_lock_acquire_recursive>
    564c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5650:	b993      	cbnz	r3, 5678 <_fclose_r+0x58>
    5652:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5654:	07d9      	lsls	r1, r3, #31
    5656:	d402      	bmi.n	565e <_fclose_r+0x3e>
    5658:	6da0      	ldr	r0, [r4, #88]	; 0x58
    565a:	f001 fe50 	bl	72fe <__retarget_lock_release_recursive>
    565e:	2600      	movs	r6, #0
    5660:	4630      	mov	r0, r6
    5662:	bd70      	pop	{r4, r5, r6, pc}
    5664:	4b21      	ldr	r3, [pc, #132]	; (56ec <_fclose_r+0xcc>)
    5666:	429c      	cmp	r4, r3
    5668:	d101      	bne.n	566e <_fclose_r+0x4e>
    566a:	68ac      	ldr	r4, [r5, #8]
    566c:	e7e5      	b.n	563a <_fclose_r+0x1a>
    566e:	4b20      	ldr	r3, [pc, #128]	; (56f0 <_fclose_r+0xd0>)
    5670:	429c      	cmp	r4, r3
    5672:	bf08      	it	eq
    5674:	68ec      	ldreq	r4, [r5, #12]
    5676:	e7e0      	b.n	563a <_fclose_r+0x1a>
    5678:	4621      	mov	r1, r4
    567a:	4628      	mov	r0, r5
    567c:	f001 fcf3 	bl	7066 <__sflush_r>
    5680:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5682:	4606      	mov	r6, r0
    5684:	b133      	cbz	r3, 5694 <_fclose_r+0x74>
    5686:	4628      	mov	r0, r5
    5688:	6a21      	ldr	r1, [r4, #32]
    568a:	4798      	blx	r3
    568c:	2800      	cmp	r0, #0
    568e:	bfb8      	it	lt
    5690:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    5694:	89a3      	ldrh	r3, [r4, #12]
    5696:	061a      	lsls	r2, r3, #24
    5698:	d503      	bpl.n	56a2 <_fclose_r+0x82>
    569a:	4628      	mov	r0, r5
    569c:	6921      	ldr	r1, [r4, #16]
    569e:	f000 fa39 	bl	5b14 <_free_r>
    56a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    56a4:	b141      	cbz	r1, 56b8 <_fclose_r+0x98>
    56a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
    56aa:	4299      	cmp	r1, r3
    56ac:	d002      	beq.n	56b4 <_fclose_r+0x94>
    56ae:	4628      	mov	r0, r5
    56b0:	f000 fa30 	bl	5b14 <_free_r>
    56b4:	2300      	movs	r3, #0
    56b6:	6363      	str	r3, [r4, #52]	; 0x34
    56b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    56ba:	b121      	cbz	r1, 56c6 <_fclose_r+0xa6>
    56bc:	4628      	mov	r0, r5
    56be:	f000 fa29 	bl	5b14 <_free_r>
    56c2:	2300      	movs	r3, #0
    56c4:	64a3      	str	r3, [r4, #72]	; 0x48
    56c6:	f000 f883 	bl	57d0 <__sfp_lock_acquire>
    56ca:	2300      	movs	r3, #0
    56cc:	81a3      	strh	r3, [r4, #12]
    56ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
    56d0:	07db      	lsls	r3, r3, #31
    56d2:	d402      	bmi.n	56da <_fclose_r+0xba>
    56d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    56d6:	f001 fe12 	bl	72fe <__retarget_lock_release_recursive>
    56da:	6da0      	ldr	r0, [r4, #88]	; 0x58
    56dc:	f001 fe0d 	bl	72fa <__retarget_lock_close_recursive>
    56e0:	f000 f87c 	bl	57dc <__sfp_lock_release>
    56e4:	e7bc      	b.n	5660 <_fclose_r+0x40>
    56e6:	bf00      	nop
    56e8:	0000802c 	.word	0x0000802c
    56ec:	0000800c 	.word	0x0000800c
    56f0:	00007fec 	.word	0x00007fec

000056f4 <fclose>:
    56f4:	4b02      	ldr	r3, [pc, #8]	; (5700 <fclose+0xc>)
    56f6:	4601      	mov	r1, r0
    56f8:	6818      	ldr	r0, [r3, #0]
    56fa:	f7ff bf91 	b.w	5620 <_fclose_r>
    56fe:	bf00      	nop
    5700:	00009978 	.word	0x00009978

00005704 <_fflush_r>:
    5704:	b538      	push	{r3, r4, r5, lr}
    5706:	690b      	ldr	r3, [r1, #16]
    5708:	4605      	mov	r5, r0
    570a:	460c      	mov	r4, r1
    570c:	b913      	cbnz	r3, 5714 <_fflush_r+0x10>
    570e:	2500      	movs	r5, #0
    5710:	4628      	mov	r0, r5
    5712:	bd38      	pop	{r3, r4, r5, pc}
    5714:	b118      	cbz	r0, 571e <_fflush_r+0x1a>
    5716:	6983      	ldr	r3, [r0, #24]
    5718:	b90b      	cbnz	r3, 571e <_fflush_r+0x1a>
    571a:	f000 f871 	bl	5800 <__sinit>
    571e:	4b14      	ldr	r3, [pc, #80]	; (5770 <_fflush_r+0x6c>)
    5720:	429c      	cmp	r4, r3
    5722:	d11b      	bne.n	575c <_fflush_r+0x58>
    5724:	686c      	ldr	r4, [r5, #4]
    5726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    572a:	2b00      	cmp	r3, #0
    572c:	d0ef      	beq.n	570e <_fflush_r+0xa>
    572e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    5730:	07d0      	lsls	r0, r2, #31
    5732:	d404      	bmi.n	573e <_fflush_r+0x3a>
    5734:	0599      	lsls	r1, r3, #22
    5736:	d402      	bmi.n	573e <_fflush_r+0x3a>
    5738:	6da0      	ldr	r0, [r4, #88]	; 0x58
    573a:	f001 fddf 	bl	72fc <__retarget_lock_acquire_recursive>
    573e:	4628      	mov	r0, r5
    5740:	4621      	mov	r1, r4
    5742:	f001 fc90 	bl	7066 <__sflush_r>
    5746:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5748:	4605      	mov	r5, r0
    574a:	07da      	lsls	r2, r3, #31
    574c:	d4e0      	bmi.n	5710 <_fflush_r+0xc>
    574e:	89a3      	ldrh	r3, [r4, #12]
    5750:	059b      	lsls	r3, r3, #22
    5752:	d4dd      	bmi.n	5710 <_fflush_r+0xc>
    5754:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5756:	f001 fdd2 	bl	72fe <__retarget_lock_release_recursive>
    575a:	e7d9      	b.n	5710 <_fflush_r+0xc>
    575c:	4b05      	ldr	r3, [pc, #20]	; (5774 <_fflush_r+0x70>)
    575e:	429c      	cmp	r4, r3
    5760:	d101      	bne.n	5766 <_fflush_r+0x62>
    5762:	68ac      	ldr	r4, [r5, #8]
    5764:	e7df      	b.n	5726 <_fflush_r+0x22>
    5766:	4b04      	ldr	r3, [pc, #16]	; (5778 <_fflush_r+0x74>)
    5768:	429c      	cmp	r4, r3
    576a:	bf08      	it	eq
    576c:	68ec      	ldreq	r4, [r5, #12]
    576e:	e7da      	b.n	5726 <_fflush_r+0x22>
    5770:	0000802c 	.word	0x0000802c
    5774:	0000800c 	.word	0x0000800c
    5778:	00007fec 	.word	0x00007fec

0000577c <std>:
    577c:	2300      	movs	r3, #0
    577e:	b510      	push	{r4, lr}
    5780:	4604      	mov	r4, r0
    5782:	e9c0 3300 	strd	r3, r3, [r0]
    5786:	e9c0 3304 	strd	r3, r3, [r0, #16]
    578a:	6083      	str	r3, [r0, #8]
    578c:	8181      	strh	r1, [r0, #12]
    578e:	6643      	str	r3, [r0, #100]	; 0x64
    5790:	81c2      	strh	r2, [r0, #14]
    5792:	6183      	str	r3, [r0, #24]
    5794:	4619      	mov	r1, r3
    5796:	2208      	movs	r2, #8
    5798:	305c      	adds	r0, #92	; 0x5c
    579a:	f001 fde7 	bl	736c <memset>
    579e:	4b05      	ldr	r3, [pc, #20]	; (57b4 <std+0x38>)
    57a0:	6224      	str	r4, [r4, #32]
    57a2:	6263      	str	r3, [r4, #36]	; 0x24
    57a4:	4b04      	ldr	r3, [pc, #16]	; (57b8 <std+0x3c>)
    57a6:	62a3      	str	r3, [r4, #40]	; 0x28
    57a8:	4b04      	ldr	r3, [pc, #16]	; (57bc <std+0x40>)
    57aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    57ac:	4b04      	ldr	r3, [pc, #16]	; (57c0 <std+0x44>)
    57ae:	6323      	str	r3, [r4, #48]	; 0x30
    57b0:	bd10      	pop	{r4, pc}
    57b2:	bf00      	nop
    57b4:	00007503 	.word	0x00007503
    57b8:	00007525 	.word	0x00007525
    57bc:	0000755d 	.word	0x0000755d
    57c0:	00007581 	.word	0x00007581

000057c4 <_cleanup_r>:
    57c4:	4901      	ldr	r1, [pc, #4]	; (57cc <_cleanup_r+0x8>)
    57c6:	f001 bd78 	b.w	72ba <_fwalk_reent>
    57ca:	bf00      	nop
    57cc:	00005705 	.word	0x00005705

000057d0 <__sfp_lock_acquire>:
    57d0:	4801      	ldr	r0, [pc, #4]	; (57d8 <__sfp_lock_acquire+0x8>)
    57d2:	f001 bd93 	b.w	72fc <__retarget_lock_acquire_recursive>
    57d6:	bf00      	nop
    57d8:	00009daa 	.word	0x00009daa

000057dc <__sfp_lock_release>:
    57dc:	4801      	ldr	r0, [pc, #4]	; (57e4 <__sfp_lock_release+0x8>)
    57de:	f001 bd8e 	b.w	72fe <__retarget_lock_release_recursive>
    57e2:	bf00      	nop
    57e4:	00009daa 	.word	0x00009daa

000057e8 <__sinit_lock_acquire>:
    57e8:	4801      	ldr	r0, [pc, #4]	; (57f0 <__sinit_lock_acquire+0x8>)
    57ea:	f001 bd87 	b.w	72fc <__retarget_lock_acquire_recursive>
    57ee:	bf00      	nop
    57f0:	00009dab 	.word	0x00009dab

000057f4 <__sinit_lock_release>:
    57f4:	4801      	ldr	r0, [pc, #4]	; (57fc <__sinit_lock_release+0x8>)
    57f6:	f001 bd82 	b.w	72fe <__retarget_lock_release_recursive>
    57fa:	bf00      	nop
    57fc:	00009dab 	.word	0x00009dab

00005800 <__sinit>:
    5800:	b510      	push	{r4, lr}
    5802:	4604      	mov	r4, r0
    5804:	f7ff fff0 	bl	57e8 <__sinit_lock_acquire>
    5808:	69a3      	ldr	r3, [r4, #24]
    580a:	b11b      	cbz	r3, 5814 <__sinit+0x14>
    580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5810:	f7ff bff0 	b.w	57f4 <__sinit_lock_release>
    5814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    5818:	6523      	str	r3, [r4, #80]	; 0x50
    581a:	4b13      	ldr	r3, [pc, #76]	; (5868 <__sinit+0x68>)
    581c:	4a13      	ldr	r2, [pc, #76]	; (586c <__sinit+0x6c>)
    581e:	681b      	ldr	r3, [r3, #0]
    5820:	62a2      	str	r2, [r4, #40]	; 0x28
    5822:	42a3      	cmp	r3, r4
    5824:	bf08      	it	eq
    5826:	2301      	moveq	r3, #1
    5828:	4620      	mov	r0, r4
    582a:	bf08      	it	eq
    582c:	61a3      	streq	r3, [r4, #24]
    582e:	f000 f81f 	bl	5870 <__sfp>
    5832:	6060      	str	r0, [r4, #4]
    5834:	4620      	mov	r0, r4
    5836:	f000 f81b 	bl	5870 <__sfp>
    583a:	60a0      	str	r0, [r4, #8]
    583c:	4620      	mov	r0, r4
    583e:	f000 f817 	bl	5870 <__sfp>
    5842:	2200      	movs	r2, #0
    5844:	2104      	movs	r1, #4
    5846:	60e0      	str	r0, [r4, #12]
    5848:	6860      	ldr	r0, [r4, #4]
    584a:	f7ff ff97 	bl	577c <std>
    584e:	2201      	movs	r2, #1
    5850:	2109      	movs	r1, #9
    5852:	68a0      	ldr	r0, [r4, #8]
    5854:	f7ff ff92 	bl	577c <std>
    5858:	2202      	movs	r2, #2
    585a:	2112      	movs	r1, #18
    585c:	68e0      	ldr	r0, [r4, #12]
    585e:	f7ff ff8d 	bl	577c <std>
    5862:	2301      	movs	r3, #1
    5864:	61a3      	str	r3, [r4, #24]
    5866:	e7d1      	b.n	580c <__sinit+0xc>
    5868:	0000804c 	.word	0x0000804c
    586c:	000057c5 	.word	0x000057c5

00005870 <__sfp>:
    5870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5872:	4607      	mov	r7, r0
    5874:	f7ff ffac 	bl	57d0 <__sfp_lock_acquire>
    5878:	4b1e      	ldr	r3, [pc, #120]	; (58f4 <__sfp+0x84>)
    587a:	681e      	ldr	r6, [r3, #0]
    587c:	69b3      	ldr	r3, [r6, #24]
    587e:	b913      	cbnz	r3, 5886 <__sfp+0x16>
    5880:	4630      	mov	r0, r6
    5882:	f7ff ffbd 	bl	5800 <__sinit>
    5886:	3648      	adds	r6, #72	; 0x48
    5888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    588c:	3b01      	subs	r3, #1
    588e:	d503      	bpl.n	5898 <__sfp+0x28>
    5890:	6833      	ldr	r3, [r6, #0]
    5892:	b30b      	cbz	r3, 58d8 <__sfp+0x68>
    5894:	6836      	ldr	r6, [r6, #0]
    5896:	e7f7      	b.n	5888 <__sfp+0x18>
    5898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    589c:	b9d5      	cbnz	r5, 58d4 <__sfp+0x64>
    589e:	4b16      	ldr	r3, [pc, #88]	; (58f8 <__sfp+0x88>)
    58a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    58a4:	60e3      	str	r3, [r4, #12]
    58a6:	6665      	str	r5, [r4, #100]	; 0x64
    58a8:	f001 fd26 	bl	72f8 <__retarget_lock_init_recursive>
    58ac:	f7ff ff96 	bl	57dc <__sfp_lock_release>
    58b0:	2208      	movs	r2, #8
    58b2:	4629      	mov	r1, r5
    58b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
    58b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
    58bc:	6025      	str	r5, [r4, #0]
    58be:	61a5      	str	r5, [r4, #24]
    58c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    58c4:	f001 fd52 	bl	736c <memset>
    58c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    58cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    58d0:	4620      	mov	r0, r4
    58d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58d4:	3468      	adds	r4, #104	; 0x68
    58d6:	e7d9      	b.n	588c <__sfp+0x1c>
    58d8:	2104      	movs	r1, #4
    58da:	4638      	mov	r0, r7
    58dc:	f001 fc43 	bl	7166 <__sfmoreglue>
    58e0:	4604      	mov	r4, r0
    58e2:	6030      	str	r0, [r6, #0]
    58e4:	2800      	cmp	r0, #0
    58e6:	d1d5      	bne.n	5894 <__sfp+0x24>
    58e8:	f7ff ff78 	bl	57dc <__sfp_lock_release>
    58ec:	230c      	movs	r3, #12
    58ee:	603b      	str	r3, [r7, #0]
    58f0:	e7ee      	b.n	58d0 <__sfp+0x60>
    58f2:	bf00      	nop
    58f4:	0000804c 	.word	0x0000804c
    58f8:	ffff0001 	.word	0xffff0001

000058fc <_fmemopen_r>:
    58fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5900:	460e      	mov	r6, r1
    5902:	4617      	mov	r7, r2
    5904:	4619      	mov	r1, r3
    5906:	aa01      	add	r2, sp, #4
    5908:	4604      	mov	r4, r0
    590a:	4699      	mov	r9, r3
    590c:	f001 fe5d 	bl	75ca <__sflags>
    5910:	4680      	mov	r8, r0
    5912:	b130      	cbz	r0, 5922 <_fmemopen_r+0x26>
    5914:	b11f      	cbz	r7, 591e <_fmemopen_r+0x22>
    5916:	b94e      	cbnz	r6, 592c <_fmemopen_r+0x30>
    5918:	f010 0f10 	tst.w	r0, #16
    591c:	d11b      	bne.n	5956 <_fmemopen_r+0x5a>
    591e:	2316      	movs	r3, #22
    5920:	6023      	str	r3, [r4, #0]
    5922:	2500      	movs	r5, #0
    5924:	4628      	mov	r0, r5
    5926:	b003      	add	sp, #12
    5928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    592c:	4620      	mov	r0, r4
    592e:	f7ff ff9f 	bl	5870 <__sfp>
    5932:	4605      	mov	r5, r0
    5934:	2800      	cmp	r0, #0
    5936:	d0f4      	beq.n	5922 <_fmemopen_r+0x26>
    5938:	2118      	movs	r1, #24
    593a:	4620      	mov	r0, r4
    593c:	f000 f932 	bl	5ba4 <_malloc_r>
    5940:	4604      	mov	r4, r0
    5942:	b988      	cbnz	r0, 5968 <_fmemopen_r+0x6c>
    5944:	f7ff ff44 	bl	57d0 <__sfp_lock_acquire>
    5948:	6da8      	ldr	r0, [r5, #88]	; 0x58
    594a:	81ac      	strh	r4, [r5, #12]
    594c:	f001 fcd5 	bl	72fa <__retarget_lock_close_recursive>
    5950:	f7ff ff44 	bl	57dc <__sfp_lock_release>
    5954:	e7e5      	b.n	5922 <_fmemopen_r+0x26>
    5956:	4620      	mov	r0, r4
    5958:	f7ff ff8a 	bl	5870 <__sfp>
    595c:	4605      	mov	r5, r0
    595e:	2800      	cmp	r0, #0
    5960:	d0df      	beq.n	5922 <_fmemopen_r+0x26>
    5962:	f107 0118 	add.w	r1, r7, #24
    5966:	e7e8      	b.n	593a <_fmemopen_r+0x3e>
    5968:	2100      	movs	r1, #0
    596a:	f3c8 03c0 	ubfx	r3, r8, #3, #1
    596e:	6000      	str	r0, [r0, #0]
    5970:	6107      	str	r7, [r0, #16]
    5972:	7543      	strb	r3, [r0, #21]
    5974:	7581      	strb	r1, [r0, #22]
    5976:	2e00      	cmp	r6, #0
    5978:	d131      	bne.n	59de <_fmemopen_r+0xe2>
    597a:	e9c0 6602 	strd	r6, r6, [r0, #8]
    597e:	f100 0318 	add.w	r3, r0, #24
    5982:	6043      	str	r3, [r0, #4]
    5984:	7606      	strb	r6, [r0, #24]
    5986:	f3c8 2300 	ubfx	r3, r8, #8, #1
    598a:	7523      	strb	r3, [r4, #20]
    598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    598e:	07de      	lsls	r6, r3, #31
    5990:	d405      	bmi.n	599e <_fmemopen_r+0xa2>
    5992:	89ab      	ldrh	r3, [r5, #12]
    5994:	0598      	lsls	r0, r3, #22
    5996:	d402      	bmi.n	599e <_fmemopen_r+0xa2>
    5998:	6da8      	ldr	r0, [r5, #88]	; 0x58
    599a:	f001 fcaf 	bl	72fc <__retarget_lock_acquire_recursive>
    599e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    59a2:	f018 0f14 	tst.w	r8, #20
    59a6:	81eb      	strh	r3, [r5, #14]
    59a8:	4b21      	ldr	r3, [pc, #132]	; (5a30 <_fmemopen_r+0x134>)
    59aa:	bf08      	it	eq
    59ac:	2300      	moveq	r3, #0
    59ae:	f018 0f18 	tst.w	r8, #24
    59b2:	626b      	str	r3, [r5, #36]	; 0x24
    59b4:	4b1f      	ldr	r3, [pc, #124]	; (5a34 <_fmemopen_r+0x138>)
    59b6:	bf08      	it	eq
    59b8:	2300      	moveq	r3, #0
    59ba:	62ab      	str	r3, [r5, #40]	; 0x28
    59bc:	4b1e      	ldr	r3, [pc, #120]	; (5a38 <_fmemopen_r+0x13c>)
    59be:	fa0f f288 	sxth.w	r2, r8
    59c2:	62eb      	str	r3, [r5, #44]	; 0x2c
    59c4:	4b1d      	ldr	r3, [pc, #116]	; (5a3c <_fmemopen_r+0x140>)
    59c6:	81aa      	strh	r2, [r5, #12]
    59c8:	632b      	str	r3, [r5, #48]	; 0x30
    59ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    59cc:	622c      	str	r4, [r5, #32]
    59ce:	07d9      	lsls	r1, r3, #31
    59d0:	d4a8      	bmi.n	5924 <_fmemopen_r+0x28>
    59d2:	0593      	lsls	r3, r2, #22
    59d4:	d4a6      	bmi.n	5924 <_fmemopen_r+0x28>
    59d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    59d8:	f001 fc91 	bl	72fe <__retarget_lock_release_recursive>
    59dc:	e7a2      	b.n	5924 <_fmemopen_r+0x28>
    59de:	6046      	str	r6, [r0, #4]
    59e0:	f899 3000 	ldrb.w	r3, [r9]
    59e4:	2b72      	cmp	r3, #114	; 0x72
    59e6:	d018      	beq.n	5a1a <_fmemopen_r+0x11e>
    59e8:	2b77      	cmp	r3, #119	; 0x77
    59ea:	d01a      	beq.n	5a22 <_fmemopen_r+0x126>
    59ec:	2b61      	cmp	r3, #97	; 0x61
    59ee:	d11d      	bne.n	5a2c <_fmemopen_r+0x130>
    59f0:	463a      	mov	r2, r7
    59f2:	4630      	mov	r0, r6
    59f4:	f001 fc84 	bl	7300 <memchr>
    59f8:	b928      	cbnz	r0, 5a06 <_fmemopen_r+0x10a>
    59fa:	7d63      	ldrb	r3, [r4, #21]
    59fc:	e9c4 7702 	strd	r7, r7, [r4, #8]
    5a00:	b933      	cbnz	r3, 5a10 <_fmemopen_r+0x114>
    5a02:	2301      	movs	r3, #1
    5a04:	e7c1      	b.n	598a <_fmemopen_r+0x8e>
    5a06:	6863      	ldr	r3, [r4, #4]
    5a08:	1ac0      	subs	r0, r0, r3
    5a0a:	e9c4 0002 	strd	r0, r0, [r4, #8]
    5a0e:	e7f8      	b.n	5a02 <_fmemopen_r+0x106>
    5a10:	6863      	ldr	r3, [r4, #4]
    5a12:	443b      	add	r3, r7
    5a14:	f803 0c01 	strb.w	r0, [r3, #-1]
    5a18:	e7f3      	b.n	5a02 <_fmemopen_r+0x106>
    5a1a:	e9c0 1702 	strd	r1, r7, [r0, #8]
    5a1e:	7501      	strb	r1, [r0, #20]
    5a20:	e7b4      	b.n	598c <_fmemopen_r+0x90>
    5a22:	60c1      	str	r1, [r0, #12]
    5a24:	7501      	strb	r1, [r0, #20]
    5a26:	6081      	str	r1, [r0, #8]
    5a28:	7031      	strb	r1, [r6, #0]
    5a2a:	e7af      	b.n	598c <_fmemopen_r+0x90>
    5a2c:	f001 fb14 	bl	7058 <abort>
    5a30:	0000728b 	.word	0x0000728b
    5a34:	000071fb 	.word	0x000071fb
    5a38:	00007193 	.word	0x00007193
    5a3c:	000071ef 	.word	0x000071ef

00005a40 <fmemopen>:
    5a40:	4613      	mov	r3, r2
    5a42:	460a      	mov	r2, r1
    5a44:	4601      	mov	r1, r0
    5a46:	4802      	ldr	r0, [pc, #8]	; (5a50 <fmemopen+0x10>)
    5a48:	6800      	ldr	r0, [r0, #0]
    5a4a:	f7ff bf57 	b.w	58fc <_fmemopen_r>
    5a4e:	bf00      	nop
    5a50:	00009978 	.word	0x00009978

00005a54 <_fwrite_r>:
    5a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a58:	b086      	sub	sp, #24
    5a5a:	fb02 f703 	mul.w	r7, r2, r3
    5a5e:	461e      	mov	r6, r3
    5a60:	ab01      	add	r3, sp, #4
    5a62:	9303      	str	r3, [sp, #12]
    5a64:	2301      	movs	r3, #1
    5a66:	4690      	mov	r8, r2
    5a68:	4605      	mov	r5, r0
    5a6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    5a6c:	9101      	str	r1, [sp, #4]
    5a6e:	9702      	str	r7, [sp, #8]
    5a70:	9705      	str	r7, [sp, #20]
    5a72:	9304      	str	r3, [sp, #16]
    5a74:	b118      	cbz	r0, 5a7e <_fwrite_r+0x2a>
    5a76:	6983      	ldr	r3, [r0, #24]
    5a78:	b90b      	cbnz	r3, 5a7e <_fwrite_r+0x2a>
    5a7a:	f7ff fec1 	bl	5800 <__sinit>
    5a7e:	4b1b      	ldr	r3, [pc, #108]	; (5aec <_fwrite_r+0x98>)
    5a80:	429c      	cmp	r4, r3
    5a82:	d11c      	bne.n	5abe <_fwrite_r+0x6a>
    5a84:	686c      	ldr	r4, [r5, #4]
    5a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5a88:	07da      	lsls	r2, r3, #31
    5a8a:	d405      	bmi.n	5a98 <_fwrite_r+0x44>
    5a8c:	89a3      	ldrh	r3, [r4, #12]
    5a8e:	059b      	lsls	r3, r3, #22
    5a90:	d402      	bmi.n	5a98 <_fwrite_r+0x44>
    5a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5a94:	f001 fc32 	bl	72fc <__retarget_lock_acquire_recursive>
    5a98:	4621      	mov	r1, r4
    5a9a:	4628      	mov	r0, r5
    5a9c:	aa03      	add	r2, sp, #12
    5a9e:	f000 ff21 	bl	68e4 <__sfvwrite_r>
    5aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5aa4:	b9a8      	cbnz	r0, 5ad2 <_fwrite_r+0x7e>
    5aa6:	07d8      	lsls	r0, r3, #31
    5aa8:	d405      	bmi.n	5ab6 <_fwrite_r+0x62>
    5aaa:	89a3      	ldrh	r3, [r4, #12]
    5aac:	0599      	lsls	r1, r3, #22
    5aae:	d402      	bmi.n	5ab6 <_fwrite_r+0x62>
    5ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ab2:	f001 fc24 	bl	72fe <__retarget_lock_release_recursive>
    5ab6:	4630      	mov	r0, r6
    5ab8:	b006      	add	sp, #24
    5aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5abe:	4b0c      	ldr	r3, [pc, #48]	; (5af0 <_fwrite_r+0x9c>)
    5ac0:	429c      	cmp	r4, r3
    5ac2:	d101      	bne.n	5ac8 <_fwrite_r+0x74>
    5ac4:	68ac      	ldr	r4, [r5, #8]
    5ac6:	e7de      	b.n	5a86 <_fwrite_r+0x32>
    5ac8:	4b0a      	ldr	r3, [pc, #40]	; (5af4 <_fwrite_r+0xa0>)
    5aca:	429c      	cmp	r4, r3
    5acc:	bf08      	it	eq
    5ace:	68ec      	ldreq	r4, [r5, #12]
    5ad0:	e7d9      	b.n	5a86 <_fwrite_r+0x32>
    5ad2:	07da      	lsls	r2, r3, #31
    5ad4:	d405      	bmi.n	5ae2 <_fwrite_r+0x8e>
    5ad6:	89a3      	ldrh	r3, [r4, #12]
    5ad8:	059b      	lsls	r3, r3, #22
    5ada:	d402      	bmi.n	5ae2 <_fwrite_r+0x8e>
    5adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ade:	f001 fc0e 	bl	72fe <__retarget_lock_release_recursive>
    5ae2:	9b05      	ldr	r3, [sp, #20]
    5ae4:	1aff      	subs	r7, r7, r3
    5ae6:	fbb7 f6f8 	udiv	r6, r7, r8
    5aea:	e7e4      	b.n	5ab6 <_fwrite_r+0x62>
    5aec:	0000802c 	.word	0x0000802c
    5af0:	0000800c 	.word	0x0000800c
    5af4:	00007fec 	.word	0x00007fec

00005af8 <fwrite>:
    5af8:	b507      	push	{r0, r1, r2, lr}
    5afa:	9300      	str	r3, [sp, #0]
    5afc:	4613      	mov	r3, r2
    5afe:	460a      	mov	r2, r1
    5b00:	4601      	mov	r1, r0
    5b02:	4803      	ldr	r0, [pc, #12]	; (5b10 <fwrite+0x18>)
    5b04:	6800      	ldr	r0, [r0, #0]
    5b06:	f7ff ffa5 	bl	5a54 <_fwrite_r>
    5b0a:	b003      	add	sp, #12
    5b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    5b10:	00009978 	.word	0x00009978

00005b14 <_free_r>:
    5b14:	b538      	push	{r3, r4, r5, lr}
    5b16:	4605      	mov	r5, r0
    5b18:	2900      	cmp	r1, #0
    5b1a:	d040      	beq.n	5b9e <_free_r+0x8a>
    5b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5b20:	1f0c      	subs	r4, r1, #4
    5b22:	2b00      	cmp	r3, #0
    5b24:	bfb8      	it	lt
    5b26:	18e4      	addlt	r4, r4, r3
    5b28:	f7fc f862 	bl	1bf0 <__malloc_lock>
    5b2c:	4a1c      	ldr	r2, [pc, #112]	; (5ba0 <_free_r+0x8c>)
    5b2e:	6813      	ldr	r3, [r2, #0]
    5b30:	b933      	cbnz	r3, 5b40 <_free_r+0x2c>
    5b32:	6063      	str	r3, [r4, #4]
    5b34:	6014      	str	r4, [r2, #0]
    5b36:	4628      	mov	r0, r5
    5b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b3c:	f7fc b862 	b.w	1c04 <__malloc_unlock>
    5b40:	42a3      	cmp	r3, r4
    5b42:	d908      	bls.n	5b56 <_free_r+0x42>
    5b44:	6820      	ldr	r0, [r4, #0]
    5b46:	1821      	adds	r1, r4, r0
    5b48:	428b      	cmp	r3, r1
    5b4a:	bf01      	itttt	eq
    5b4c:	6819      	ldreq	r1, [r3, #0]
    5b4e:	685b      	ldreq	r3, [r3, #4]
    5b50:	1809      	addeq	r1, r1, r0
    5b52:	6021      	streq	r1, [r4, #0]
    5b54:	e7ed      	b.n	5b32 <_free_r+0x1e>
    5b56:	461a      	mov	r2, r3
    5b58:	685b      	ldr	r3, [r3, #4]
    5b5a:	b10b      	cbz	r3, 5b60 <_free_r+0x4c>
    5b5c:	42a3      	cmp	r3, r4
    5b5e:	d9fa      	bls.n	5b56 <_free_r+0x42>
    5b60:	6811      	ldr	r1, [r2, #0]
    5b62:	1850      	adds	r0, r2, r1
    5b64:	42a0      	cmp	r0, r4
    5b66:	d10b      	bne.n	5b80 <_free_r+0x6c>
    5b68:	6820      	ldr	r0, [r4, #0]
    5b6a:	4401      	add	r1, r0
    5b6c:	1850      	adds	r0, r2, r1
    5b6e:	4283      	cmp	r3, r0
    5b70:	6011      	str	r1, [r2, #0]
    5b72:	d1e0      	bne.n	5b36 <_free_r+0x22>
    5b74:	6818      	ldr	r0, [r3, #0]
    5b76:	685b      	ldr	r3, [r3, #4]
    5b78:	4408      	add	r0, r1
    5b7a:	6010      	str	r0, [r2, #0]
    5b7c:	6053      	str	r3, [r2, #4]
    5b7e:	e7da      	b.n	5b36 <_free_r+0x22>
    5b80:	d902      	bls.n	5b88 <_free_r+0x74>
    5b82:	230c      	movs	r3, #12
    5b84:	602b      	str	r3, [r5, #0]
    5b86:	e7d6      	b.n	5b36 <_free_r+0x22>
    5b88:	6820      	ldr	r0, [r4, #0]
    5b8a:	1821      	adds	r1, r4, r0
    5b8c:	428b      	cmp	r3, r1
    5b8e:	bf01      	itttt	eq
    5b90:	6819      	ldreq	r1, [r3, #0]
    5b92:	685b      	ldreq	r3, [r3, #4]
    5b94:	1809      	addeq	r1, r1, r0
    5b96:	6021      	streq	r1, [r4, #0]
    5b98:	6063      	str	r3, [r4, #4]
    5b9a:	6054      	str	r4, [r2, #4]
    5b9c:	e7cb      	b.n	5b36 <_free_r+0x22>
    5b9e:	bd38      	pop	{r3, r4, r5, pc}
    5ba0:	00009da0 	.word	0x00009da0

00005ba4 <_malloc_r>:
    5ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ba6:	1ccd      	adds	r5, r1, #3
    5ba8:	f025 0503 	bic.w	r5, r5, #3
    5bac:	3508      	adds	r5, #8
    5bae:	2d0c      	cmp	r5, #12
    5bb0:	bf38      	it	cc
    5bb2:	250c      	movcc	r5, #12
    5bb4:	2d00      	cmp	r5, #0
    5bb6:	4606      	mov	r6, r0
    5bb8:	db01      	blt.n	5bbe <_malloc_r+0x1a>
    5bba:	42a9      	cmp	r1, r5
    5bbc:	d903      	bls.n	5bc6 <_malloc_r+0x22>
    5bbe:	230c      	movs	r3, #12
    5bc0:	6033      	str	r3, [r6, #0]
    5bc2:	2000      	movs	r0, #0
    5bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bc6:	f7fc f813 	bl	1bf0 <__malloc_lock>
    5bca:	4921      	ldr	r1, [pc, #132]	; (5c50 <_malloc_r+0xac>)
    5bcc:	680a      	ldr	r2, [r1, #0]
    5bce:	4614      	mov	r4, r2
    5bd0:	b99c      	cbnz	r4, 5bfa <_malloc_r+0x56>
    5bd2:	4f20      	ldr	r7, [pc, #128]	; (5c54 <_malloc_r+0xb0>)
    5bd4:	683b      	ldr	r3, [r7, #0]
    5bd6:	b923      	cbnz	r3, 5be2 <_malloc_r+0x3e>
    5bd8:	4621      	mov	r1, r4
    5bda:	4630      	mov	r0, r6
    5bdc:	f000 fb50 	bl	6280 <_sbrk_r>
    5be0:	6038      	str	r0, [r7, #0]
    5be2:	4629      	mov	r1, r5
    5be4:	4630      	mov	r0, r6
    5be6:	f000 fb4b 	bl	6280 <_sbrk_r>
    5bea:	1c43      	adds	r3, r0, #1
    5bec:	d123      	bne.n	5c36 <_malloc_r+0x92>
    5bee:	230c      	movs	r3, #12
    5bf0:	4630      	mov	r0, r6
    5bf2:	6033      	str	r3, [r6, #0]
    5bf4:	f7fc f806 	bl	1c04 <__malloc_unlock>
    5bf8:	e7e3      	b.n	5bc2 <_malloc_r+0x1e>
    5bfa:	6823      	ldr	r3, [r4, #0]
    5bfc:	1b5b      	subs	r3, r3, r5
    5bfe:	d417      	bmi.n	5c30 <_malloc_r+0x8c>
    5c00:	2b0b      	cmp	r3, #11
    5c02:	d903      	bls.n	5c0c <_malloc_r+0x68>
    5c04:	6023      	str	r3, [r4, #0]
    5c06:	441c      	add	r4, r3
    5c08:	6025      	str	r5, [r4, #0]
    5c0a:	e004      	b.n	5c16 <_malloc_r+0x72>
    5c0c:	6863      	ldr	r3, [r4, #4]
    5c0e:	42a2      	cmp	r2, r4
    5c10:	bf0c      	ite	eq
    5c12:	600b      	streq	r3, [r1, #0]
    5c14:	6053      	strne	r3, [r2, #4]
    5c16:	4630      	mov	r0, r6
    5c18:	f7fb fff4 	bl	1c04 <__malloc_unlock>
    5c1c:	f104 000b 	add.w	r0, r4, #11
    5c20:	1d23      	adds	r3, r4, #4
    5c22:	f020 0007 	bic.w	r0, r0, #7
    5c26:	1ac2      	subs	r2, r0, r3
    5c28:	bf1c      	itt	ne
    5c2a:	1a1b      	subne	r3, r3, r0
    5c2c:	50a3      	strne	r3, [r4, r2]
    5c2e:	e7c9      	b.n	5bc4 <_malloc_r+0x20>
    5c30:	4622      	mov	r2, r4
    5c32:	6864      	ldr	r4, [r4, #4]
    5c34:	e7cc      	b.n	5bd0 <_malloc_r+0x2c>
    5c36:	1cc4      	adds	r4, r0, #3
    5c38:	f024 0403 	bic.w	r4, r4, #3
    5c3c:	42a0      	cmp	r0, r4
    5c3e:	d0e3      	beq.n	5c08 <_malloc_r+0x64>
    5c40:	1a21      	subs	r1, r4, r0
    5c42:	4630      	mov	r0, r6
    5c44:	f000 fb1c 	bl	6280 <_sbrk_r>
    5c48:	3001      	adds	r0, #1
    5c4a:	d1dd      	bne.n	5c08 <_malloc_r+0x64>
    5c4c:	e7cf      	b.n	5bee <_malloc_r+0x4a>
    5c4e:	bf00      	nop
    5c50:	00009da0 	.word	0x00009da0
    5c54:	00009d9c 	.word	0x00009d9c

00005c58 <_vfiprintf_r>:
    5c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c5c:	460d      	mov	r5, r1
    5c5e:	4614      	mov	r4, r2
    5c60:	4698      	mov	r8, r3
    5c62:	4606      	mov	r6, r0
    5c64:	b09d      	sub	sp, #116	; 0x74
    5c66:	b118      	cbz	r0, 5c70 <_vfiprintf_r+0x18>
    5c68:	6983      	ldr	r3, [r0, #24]
    5c6a:	b90b      	cbnz	r3, 5c70 <_vfiprintf_r+0x18>
    5c6c:	f7ff fdc8 	bl	5800 <__sinit>
    5c70:	4b87      	ldr	r3, [pc, #540]	; (5e90 <_vfiprintf_r+0x238>)
    5c72:	429d      	cmp	r5, r3
    5c74:	d11b      	bne.n	5cae <_vfiprintf_r+0x56>
    5c76:	6875      	ldr	r5, [r6, #4]
    5c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    5c7a:	07d9      	lsls	r1, r3, #31
    5c7c:	d405      	bmi.n	5c8a <_vfiprintf_r+0x32>
    5c7e:	89ab      	ldrh	r3, [r5, #12]
    5c80:	059a      	lsls	r2, r3, #22
    5c82:	d402      	bmi.n	5c8a <_vfiprintf_r+0x32>
    5c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5c86:	f001 fb39 	bl	72fc <__retarget_lock_acquire_recursive>
    5c8a:	89ab      	ldrh	r3, [r5, #12]
    5c8c:	071b      	lsls	r3, r3, #28
    5c8e:	d501      	bpl.n	5c94 <_vfiprintf_r+0x3c>
    5c90:	692b      	ldr	r3, [r5, #16]
    5c92:	b9eb      	cbnz	r3, 5cd0 <_vfiprintf_r+0x78>
    5c94:	4629      	mov	r1, r5
    5c96:	4630      	mov	r0, r6
    5c98:	f000 fd66 	bl	6768 <__swsetup_r>
    5c9c:	b1c0      	cbz	r0, 5cd0 <_vfiprintf_r+0x78>
    5c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    5ca0:	07dc      	lsls	r4, r3, #31
    5ca2:	d50e      	bpl.n	5cc2 <_vfiprintf_r+0x6a>
    5ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5ca8:	b01d      	add	sp, #116	; 0x74
    5caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cae:	4b79      	ldr	r3, [pc, #484]	; (5e94 <_vfiprintf_r+0x23c>)
    5cb0:	429d      	cmp	r5, r3
    5cb2:	d101      	bne.n	5cb8 <_vfiprintf_r+0x60>
    5cb4:	68b5      	ldr	r5, [r6, #8]
    5cb6:	e7df      	b.n	5c78 <_vfiprintf_r+0x20>
    5cb8:	4b77      	ldr	r3, [pc, #476]	; (5e98 <_vfiprintf_r+0x240>)
    5cba:	429d      	cmp	r5, r3
    5cbc:	bf08      	it	eq
    5cbe:	68f5      	ldreq	r5, [r6, #12]
    5cc0:	e7da      	b.n	5c78 <_vfiprintf_r+0x20>
    5cc2:	89ab      	ldrh	r3, [r5, #12]
    5cc4:	0598      	lsls	r0, r3, #22
    5cc6:	d4ed      	bmi.n	5ca4 <_vfiprintf_r+0x4c>
    5cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5cca:	f001 fb18 	bl	72fe <__retarget_lock_release_recursive>
    5cce:	e7e9      	b.n	5ca4 <_vfiprintf_r+0x4c>
    5cd0:	2300      	movs	r3, #0
    5cd2:	9309      	str	r3, [sp, #36]	; 0x24
    5cd4:	2320      	movs	r3, #32
    5cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5cda:	2330      	movs	r3, #48	; 0x30
    5cdc:	f04f 0901 	mov.w	r9, #1
    5ce0:	f8cd 800c 	str.w	r8, [sp, #12]
    5ce4:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5e9c <_vfiprintf_r+0x244>
    5ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    5cec:	4623      	mov	r3, r4
    5cee:	469a      	mov	sl, r3
    5cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
    5cf4:	b10a      	cbz	r2, 5cfa <_vfiprintf_r+0xa2>
    5cf6:	2a25      	cmp	r2, #37	; 0x25
    5cf8:	d1f9      	bne.n	5cee <_vfiprintf_r+0x96>
    5cfa:	ebba 0b04 	subs.w	fp, sl, r4
    5cfe:	d00b      	beq.n	5d18 <_vfiprintf_r+0xc0>
    5d00:	465b      	mov	r3, fp
    5d02:	4622      	mov	r2, r4
    5d04:	4629      	mov	r1, r5
    5d06:	4630      	mov	r0, r6
    5d08:	f001 fb4d 	bl	73a6 <__sfputs_r>
    5d0c:	3001      	adds	r0, #1
    5d0e:	f000 80a6 	beq.w	5e5e <_vfiprintf_r+0x206>
    5d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5d14:	445a      	add	r2, fp
    5d16:	9209      	str	r2, [sp, #36]	; 0x24
    5d18:	f89a 3000 	ldrb.w	r3, [sl]
    5d1c:	2b00      	cmp	r3, #0
    5d1e:	f000 809e 	beq.w	5e5e <_vfiprintf_r+0x206>
    5d22:	2300      	movs	r3, #0
    5d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
    5d2c:	f10a 0a01 	add.w	sl, sl, #1
    5d30:	9304      	str	r3, [sp, #16]
    5d32:	9307      	str	r3, [sp, #28]
    5d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    5d38:	931a      	str	r3, [sp, #104]	; 0x68
    5d3a:	4654      	mov	r4, sl
    5d3c:	2205      	movs	r2, #5
    5d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
    5d42:	4856      	ldr	r0, [pc, #344]	; (5e9c <_vfiprintf_r+0x244>)
    5d44:	f001 fadc 	bl	7300 <memchr>
    5d48:	9b04      	ldr	r3, [sp, #16]
    5d4a:	b9d0      	cbnz	r0, 5d82 <_vfiprintf_r+0x12a>
    5d4c:	06d9      	lsls	r1, r3, #27
    5d4e:	bf44      	itt	mi
    5d50:	2220      	movmi	r2, #32
    5d52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5d56:	071a      	lsls	r2, r3, #28
    5d58:	bf44      	itt	mi
    5d5a:	222b      	movmi	r2, #43	; 0x2b
    5d5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5d60:	f89a 2000 	ldrb.w	r2, [sl]
    5d64:	2a2a      	cmp	r2, #42	; 0x2a
    5d66:	d014      	beq.n	5d92 <_vfiprintf_r+0x13a>
    5d68:	4654      	mov	r4, sl
    5d6a:	2000      	movs	r0, #0
    5d6c:	f04f 0c0a 	mov.w	ip, #10
    5d70:	9a07      	ldr	r2, [sp, #28]
    5d72:	4621      	mov	r1, r4
    5d74:	f811 3b01 	ldrb.w	r3, [r1], #1
    5d78:	3b30      	subs	r3, #48	; 0x30
    5d7a:	2b09      	cmp	r3, #9
    5d7c:	d94a      	bls.n	5e14 <_vfiprintf_r+0x1bc>
    5d7e:	b970      	cbnz	r0, 5d9e <_vfiprintf_r+0x146>
    5d80:	e014      	b.n	5dac <_vfiprintf_r+0x154>
    5d82:	eba0 0008 	sub.w	r0, r0, r8
    5d86:	fa09 f000 	lsl.w	r0, r9, r0
    5d8a:	4318      	orrs	r0, r3
    5d8c:	46a2      	mov	sl, r4
    5d8e:	9004      	str	r0, [sp, #16]
    5d90:	e7d3      	b.n	5d3a <_vfiprintf_r+0xe2>
    5d92:	9a03      	ldr	r2, [sp, #12]
    5d94:	1d11      	adds	r1, r2, #4
    5d96:	6812      	ldr	r2, [r2, #0]
    5d98:	9103      	str	r1, [sp, #12]
    5d9a:	2a00      	cmp	r2, #0
    5d9c:	db01      	blt.n	5da2 <_vfiprintf_r+0x14a>
    5d9e:	9207      	str	r2, [sp, #28]
    5da0:	e004      	b.n	5dac <_vfiprintf_r+0x154>
    5da2:	4252      	negs	r2, r2
    5da4:	f043 0302 	orr.w	r3, r3, #2
    5da8:	9207      	str	r2, [sp, #28]
    5daa:	9304      	str	r3, [sp, #16]
    5dac:	7823      	ldrb	r3, [r4, #0]
    5dae:	2b2e      	cmp	r3, #46	; 0x2e
    5db0:	d10a      	bne.n	5dc8 <_vfiprintf_r+0x170>
    5db2:	7863      	ldrb	r3, [r4, #1]
    5db4:	2b2a      	cmp	r3, #42	; 0x2a
    5db6:	d132      	bne.n	5e1e <_vfiprintf_r+0x1c6>
    5db8:	9b03      	ldr	r3, [sp, #12]
    5dba:	3402      	adds	r4, #2
    5dbc:	1d1a      	adds	r2, r3, #4
    5dbe:	681b      	ldr	r3, [r3, #0]
    5dc0:	9203      	str	r2, [sp, #12]
    5dc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    5dc6:	9305      	str	r3, [sp, #20]
    5dc8:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 5ea0 <_vfiprintf_r+0x248>
    5dcc:	2203      	movs	r2, #3
    5dce:	4650      	mov	r0, sl
    5dd0:	7821      	ldrb	r1, [r4, #0]
    5dd2:	f001 fa95 	bl	7300 <memchr>
    5dd6:	b138      	cbz	r0, 5de8 <_vfiprintf_r+0x190>
    5dd8:	2240      	movs	r2, #64	; 0x40
    5dda:	9b04      	ldr	r3, [sp, #16]
    5ddc:	eba0 000a 	sub.w	r0, r0, sl
    5de0:	4082      	lsls	r2, r0
    5de2:	4313      	orrs	r3, r2
    5de4:	3401      	adds	r4, #1
    5de6:	9304      	str	r3, [sp, #16]
    5de8:	f814 1b01 	ldrb.w	r1, [r4], #1
    5dec:	2206      	movs	r2, #6
    5dee:	482d      	ldr	r0, [pc, #180]	; (5ea4 <_vfiprintf_r+0x24c>)
    5df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5df4:	f001 fa84 	bl	7300 <memchr>
    5df8:	2800      	cmp	r0, #0
    5dfa:	d03f      	beq.n	5e7c <_vfiprintf_r+0x224>
    5dfc:	4b2a      	ldr	r3, [pc, #168]	; (5ea8 <_vfiprintf_r+0x250>)
    5dfe:	bb1b      	cbnz	r3, 5e48 <_vfiprintf_r+0x1f0>
    5e00:	9b03      	ldr	r3, [sp, #12]
    5e02:	3307      	adds	r3, #7
    5e04:	f023 0307 	bic.w	r3, r3, #7
    5e08:	3308      	adds	r3, #8
    5e0a:	9303      	str	r3, [sp, #12]
    5e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e0e:	443b      	add	r3, r7
    5e10:	9309      	str	r3, [sp, #36]	; 0x24
    5e12:	e76b      	b.n	5cec <_vfiprintf_r+0x94>
    5e14:	460c      	mov	r4, r1
    5e16:	2001      	movs	r0, #1
    5e18:	fb0c 3202 	mla	r2, ip, r2, r3
    5e1c:	e7a9      	b.n	5d72 <_vfiprintf_r+0x11a>
    5e1e:	2300      	movs	r3, #0
    5e20:	f04f 0c0a 	mov.w	ip, #10
    5e24:	4619      	mov	r1, r3
    5e26:	3401      	adds	r4, #1
    5e28:	9305      	str	r3, [sp, #20]
    5e2a:	4620      	mov	r0, r4
    5e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
    5e30:	3a30      	subs	r2, #48	; 0x30
    5e32:	2a09      	cmp	r2, #9
    5e34:	d903      	bls.n	5e3e <_vfiprintf_r+0x1e6>
    5e36:	2b00      	cmp	r3, #0
    5e38:	d0c6      	beq.n	5dc8 <_vfiprintf_r+0x170>
    5e3a:	9105      	str	r1, [sp, #20]
    5e3c:	e7c4      	b.n	5dc8 <_vfiprintf_r+0x170>
    5e3e:	4604      	mov	r4, r0
    5e40:	2301      	movs	r3, #1
    5e42:	fb0c 2101 	mla	r1, ip, r1, r2
    5e46:	e7f0      	b.n	5e2a <_vfiprintf_r+0x1d2>
    5e48:	ab03      	add	r3, sp, #12
    5e4a:	9300      	str	r3, [sp, #0]
    5e4c:	462a      	mov	r2, r5
    5e4e:	4630      	mov	r0, r6
    5e50:	4b16      	ldr	r3, [pc, #88]	; (5eac <_vfiprintf_r+0x254>)
    5e52:	a904      	add	r1, sp, #16
    5e54:	f3af 8000 	nop.w
    5e58:	4607      	mov	r7, r0
    5e5a:	1c78      	adds	r0, r7, #1
    5e5c:	d1d6      	bne.n	5e0c <_vfiprintf_r+0x1b4>
    5e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    5e60:	07d9      	lsls	r1, r3, #31
    5e62:	d405      	bmi.n	5e70 <_vfiprintf_r+0x218>
    5e64:	89ab      	ldrh	r3, [r5, #12]
    5e66:	059a      	lsls	r2, r3, #22
    5e68:	d402      	bmi.n	5e70 <_vfiprintf_r+0x218>
    5e6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5e6c:	f001 fa47 	bl	72fe <__retarget_lock_release_recursive>
    5e70:	89ab      	ldrh	r3, [r5, #12]
    5e72:	065b      	lsls	r3, r3, #25
    5e74:	f53f af16 	bmi.w	5ca4 <_vfiprintf_r+0x4c>
    5e78:	9809      	ldr	r0, [sp, #36]	; 0x24
    5e7a:	e715      	b.n	5ca8 <_vfiprintf_r+0x50>
    5e7c:	ab03      	add	r3, sp, #12
    5e7e:	9300      	str	r3, [sp, #0]
    5e80:	462a      	mov	r2, r5
    5e82:	4630      	mov	r0, r6
    5e84:	4b09      	ldr	r3, [pc, #36]	; (5eac <_vfiprintf_r+0x254>)
    5e86:	a904      	add	r1, sp, #16
    5e88:	f000 f812 	bl	5eb0 <_printf_i>
    5e8c:	e7e4      	b.n	5e58 <_vfiprintf_r+0x200>
    5e8e:	bf00      	nop
    5e90:	0000802c 	.word	0x0000802c
    5e94:	0000800c 	.word	0x0000800c
    5e98:	00007fec 	.word	0x00007fec
    5e9c:	00008e42 	.word	0x00008e42
    5ea0:	00008e48 	.word	0x00008e48
    5ea4:	00008e4c 	.word	0x00008e4c
    5ea8:	00000000 	.word	0x00000000
    5eac:	000073a7 	.word	0x000073a7

00005eb0 <_printf_i>:
    5eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5eb4:	7e0f      	ldrb	r7, [r1, #24]
    5eb6:	4691      	mov	r9, r2
    5eb8:	2f78      	cmp	r7, #120	; 0x78
    5eba:	4680      	mov	r8, r0
    5ebc:	460c      	mov	r4, r1
    5ebe:	469a      	mov	sl, r3
    5ec0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
    5ec6:	d807      	bhi.n	5ed8 <_printf_i+0x28>
    5ec8:	2f62      	cmp	r7, #98	; 0x62
    5eca:	d80a      	bhi.n	5ee2 <_printf_i+0x32>
    5ecc:	2f00      	cmp	r7, #0
    5ece:	f000 80e0 	beq.w	6092 <_printf_i+0x1e2>
    5ed2:	2f58      	cmp	r7, #88	; 0x58
    5ed4:	f000 80bb 	beq.w	604e <_printf_i+0x19e>
    5ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
    5edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    5ee0:	e03a      	b.n	5f58 <_printf_i+0xa8>
    5ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    5ee6:	2b15      	cmp	r3, #21
    5ee8:	d8f6      	bhi.n	5ed8 <_printf_i+0x28>
    5eea:	a101      	add	r1, pc, #4	; (adr r1, 5ef0 <_printf_i+0x40>)
    5eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    5ef0:	00005f49 	.word	0x00005f49
    5ef4:	00005f5d 	.word	0x00005f5d
    5ef8:	00005ed9 	.word	0x00005ed9
    5efc:	00005ed9 	.word	0x00005ed9
    5f00:	00005ed9 	.word	0x00005ed9
    5f04:	00005ed9 	.word	0x00005ed9
    5f08:	00005f5d 	.word	0x00005f5d
    5f0c:	00005ed9 	.word	0x00005ed9
    5f10:	00005ed9 	.word	0x00005ed9
    5f14:	00005ed9 	.word	0x00005ed9
    5f18:	00005ed9 	.word	0x00005ed9
    5f1c:	00006079 	.word	0x00006079
    5f20:	00005fed 	.word	0x00005fed
    5f24:	0000602f 	.word	0x0000602f
    5f28:	00005ed9 	.word	0x00005ed9
    5f2c:	00005ed9 	.word	0x00005ed9
    5f30:	0000609b 	.word	0x0000609b
    5f34:	00005ed9 	.word	0x00005ed9
    5f38:	00005fed 	.word	0x00005fed
    5f3c:	00005ed9 	.word	0x00005ed9
    5f40:	00005ed9 	.word	0x00005ed9
    5f44:	00006037 	.word	0x00006037
    5f48:	682b      	ldr	r3, [r5, #0]
    5f4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
    5f4e:	1d1a      	adds	r2, r3, #4
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	602a      	str	r2, [r5, #0]
    5f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5f58:	2301      	movs	r3, #1
    5f5a:	e0ab      	b.n	60b4 <_printf_i+0x204>
    5f5c:	6823      	ldr	r3, [r4, #0]
    5f5e:	6829      	ldr	r1, [r5, #0]
    5f60:	061f      	lsls	r7, r3, #24
    5f62:	f101 0004 	add.w	r0, r1, #4
    5f66:	6028      	str	r0, [r5, #0]
    5f68:	d501      	bpl.n	5f6e <_printf_i+0xbe>
    5f6a:	680d      	ldr	r5, [r1, #0]
    5f6c:	e003      	b.n	5f76 <_printf_i+0xc6>
    5f6e:	065e      	lsls	r6, r3, #25
    5f70:	d5fb      	bpl.n	5f6a <_printf_i+0xba>
    5f72:	f9b1 5000 	ldrsh.w	r5, [r1]
    5f76:	2d00      	cmp	r5, #0
    5f78:	6861      	ldr	r1, [r4, #4]
    5f7a:	da7a      	bge.n	6072 <_printf_i+0x1c2>
    5f7c:	202d      	movs	r0, #45	; 0x2d
    5f7e:	2900      	cmp	r1, #0
    5f80:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5f84:	60a1      	str	r1, [r4, #8]
    5f86:	da2d      	bge.n	5fe4 <_printf_i+0x134>
    5f88:	230a      	movs	r3, #10
    5f8a:	485e      	ldr	r0, [pc, #376]	; (6104 <_printf_i+0x254>)
    5f8c:	426d      	negs	r5, r5
    5f8e:	4616      	mov	r6, r2
    5f90:	fbb5 f1f3 	udiv	r1, r5, r3
    5f94:	fb03 5711 	mls	r7, r3, r1, r5
    5f98:	5dc7      	ldrb	r7, [r0, r7]
    5f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
    5f9e:	462f      	mov	r7, r5
    5fa0:	42bb      	cmp	r3, r7
    5fa2:	460d      	mov	r5, r1
    5fa4:	d9f4      	bls.n	5f90 <_printf_i+0xe0>
    5fa6:	2b08      	cmp	r3, #8
    5fa8:	d10b      	bne.n	5fc2 <_printf_i+0x112>
    5faa:	6823      	ldr	r3, [r4, #0]
    5fac:	07df      	lsls	r7, r3, #31
    5fae:	d508      	bpl.n	5fc2 <_printf_i+0x112>
    5fb0:	6923      	ldr	r3, [r4, #16]
    5fb2:	6861      	ldr	r1, [r4, #4]
    5fb4:	4299      	cmp	r1, r3
    5fb6:	bfde      	ittt	le
    5fb8:	2330      	movle	r3, #48	; 0x30
    5fba:	f806 3c01 	strble.w	r3, [r6, #-1]
    5fbe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
    5fc2:	1b92      	subs	r2, r2, r6
    5fc4:	6122      	str	r2, [r4, #16]
    5fc6:	464b      	mov	r3, r9
    5fc8:	4621      	mov	r1, r4
    5fca:	4640      	mov	r0, r8
    5fcc:	f8cd a000 	str.w	sl, [sp]
    5fd0:	aa03      	add	r2, sp, #12
    5fd2:	f001 f9fa 	bl	73ca <_printf_common>
    5fd6:	3001      	adds	r0, #1
    5fd8:	d171      	bne.n	60be <_printf_i+0x20e>
    5fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5fde:	b004      	add	sp, #16
    5fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fe4:	f023 0304 	bic.w	r3, r3, #4
    5fe8:	6023      	str	r3, [r4, #0]
    5fea:	e7cd      	b.n	5f88 <_printf_i+0xd8>
    5fec:	682b      	ldr	r3, [r5, #0]
    5fee:	6820      	ldr	r0, [r4, #0]
    5ff0:	1d19      	adds	r1, r3, #4
    5ff2:	6029      	str	r1, [r5, #0]
    5ff4:	0605      	lsls	r5, r0, #24
    5ff6:	d501      	bpl.n	5ffc <_printf_i+0x14c>
    5ff8:	681d      	ldr	r5, [r3, #0]
    5ffa:	e002      	b.n	6002 <_printf_i+0x152>
    5ffc:	0641      	lsls	r1, r0, #25
    5ffe:	d5fb      	bpl.n	5ff8 <_printf_i+0x148>
    6000:	881d      	ldrh	r5, [r3, #0]
    6002:	2f6f      	cmp	r7, #111	; 0x6f
    6004:	bf14      	ite	ne
    6006:	230a      	movne	r3, #10
    6008:	2308      	moveq	r3, #8
    600a:	483e      	ldr	r0, [pc, #248]	; (6104 <_printf_i+0x254>)
    600c:	2100      	movs	r1, #0
    600e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6012:	6866      	ldr	r6, [r4, #4]
    6014:	2e00      	cmp	r6, #0
    6016:	60a6      	str	r6, [r4, #8]
    6018:	dbb9      	blt.n	5f8e <_printf_i+0xde>
    601a:	6821      	ldr	r1, [r4, #0]
    601c:	f021 0104 	bic.w	r1, r1, #4
    6020:	6021      	str	r1, [r4, #0]
    6022:	2d00      	cmp	r5, #0
    6024:	d1b3      	bne.n	5f8e <_printf_i+0xde>
    6026:	2e00      	cmp	r6, #0
    6028:	d1b1      	bne.n	5f8e <_printf_i+0xde>
    602a:	4616      	mov	r6, r2
    602c:	e7bb      	b.n	5fa6 <_printf_i+0xf6>
    602e:	6823      	ldr	r3, [r4, #0]
    6030:	f043 0320 	orr.w	r3, r3, #32
    6034:	6023      	str	r3, [r4, #0]
    6036:	2778      	movs	r7, #120	; 0x78
    6038:	4833      	ldr	r0, [pc, #204]	; (6108 <_printf_i+0x258>)
    603a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    603e:	6829      	ldr	r1, [r5, #0]
    6040:	6823      	ldr	r3, [r4, #0]
    6042:	1d0e      	adds	r6, r1, #4
    6044:	602e      	str	r6, [r5, #0]
    6046:	061e      	lsls	r6, r3, #24
    6048:	d503      	bpl.n	6052 <_printf_i+0x1a2>
    604a:	680d      	ldr	r5, [r1, #0]
    604c:	e004      	b.n	6058 <_printf_i+0x1a8>
    604e:	482d      	ldr	r0, [pc, #180]	; (6104 <_printf_i+0x254>)
    6050:	e7f3      	b.n	603a <_printf_i+0x18a>
    6052:	065d      	lsls	r5, r3, #25
    6054:	d5f9      	bpl.n	604a <_printf_i+0x19a>
    6056:	880d      	ldrh	r5, [r1, #0]
    6058:	07d9      	lsls	r1, r3, #31
    605a:	bf44      	itt	mi
    605c:	f043 0320 	orrmi.w	r3, r3, #32
    6060:	6023      	strmi	r3, [r4, #0]
    6062:	b10d      	cbz	r5, 6068 <_printf_i+0x1b8>
    6064:	2310      	movs	r3, #16
    6066:	e7d1      	b.n	600c <_printf_i+0x15c>
    6068:	6823      	ldr	r3, [r4, #0]
    606a:	f023 0320 	bic.w	r3, r3, #32
    606e:	6023      	str	r3, [r4, #0]
    6070:	e7f8      	b.n	6064 <_printf_i+0x1b4>
    6072:	230a      	movs	r3, #10
    6074:	4823      	ldr	r0, [pc, #140]	; (6104 <_printf_i+0x254>)
    6076:	e7cc      	b.n	6012 <_printf_i+0x162>
    6078:	682b      	ldr	r3, [r5, #0]
    607a:	6826      	ldr	r6, [r4, #0]
    607c:	1d18      	adds	r0, r3, #4
    607e:	6961      	ldr	r1, [r4, #20]
    6080:	6028      	str	r0, [r5, #0]
    6082:	0635      	lsls	r5, r6, #24
    6084:	681b      	ldr	r3, [r3, #0]
    6086:	d501      	bpl.n	608c <_printf_i+0x1dc>
    6088:	6019      	str	r1, [r3, #0]
    608a:	e002      	b.n	6092 <_printf_i+0x1e2>
    608c:	0670      	lsls	r0, r6, #25
    608e:	d5fb      	bpl.n	6088 <_printf_i+0x1d8>
    6090:	8019      	strh	r1, [r3, #0]
    6092:	2300      	movs	r3, #0
    6094:	4616      	mov	r6, r2
    6096:	6123      	str	r3, [r4, #16]
    6098:	e795      	b.n	5fc6 <_printf_i+0x116>
    609a:	682b      	ldr	r3, [r5, #0]
    609c:	2100      	movs	r1, #0
    609e:	1d1a      	adds	r2, r3, #4
    60a0:	602a      	str	r2, [r5, #0]
    60a2:	681e      	ldr	r6, [r3, #0]
    60a4:	6862      	ldr	r2, [r4, #4]
    60a6:	4630      	mov	r0, r6
    60a8:	f001 f92a 	bl	7300 <memchr>
    60ac:	b108      	cbz	r0, 60b2 <_printf_i+0x202>
    60ae:	1b80      	subs	r0, r0, r6
    60b0:	6060      	str	r0, [r4, #4]
    60b2:	6863      	ldr	r3, [r4, #4]
    60b4:	6123      	str	r3, [r4, #16]
    60b6:	2300      	movs	r3, #0
    60b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    60bc:	e783      	b.n	5fc6 <_printf_i+0x116>
    60be:	4632      	mov	r2, r6
    60c0:	4649      	mov	r1, r9
    60c2:	4640      	mov	r0, r8
    60c4:	6923      	ldr	r3, [r4, #16]
    60c6:	47d0      	blx	sl
    60c8:	3001      	adds	r0, #1
    60ca:	d086      	beq.n	5fda <_printf_i+0x12a>
    60cc:	6823      	ldr	r3, [r4, #0]
    60ce:	079b      	lsls	r3, r3, #30
    60d0:	d414      	bmi.n	60fc <_printf_i+0x24c>
    60d2:	68e0      	ldr	r0, [r4, #12]
    60d4:	9b03      	ldr	r3, [sp, #12]
    60d6:	4298      	cmp	r0, r3
    60d8:	bfb8      	it	lt
    60da:	4618      	movlt	r0, r3
    60dc:	e77f      	b.n	5fde <_printf_i+0x12e>
    60de:	2301      	movs	r3, #1
    60e0:	4632      	mov	r2, r6
    60e2:	4649      	mov	r1, r9
    60e4:	4640      	mov	r0, r8
    60e6:	47d0      	blx	sl
    60e8:	3001      	adds	r0, #1
    60ea:	f43f af76 	beq.w	5fda <_printf_i+0x12a>
    60ee:	3501      	adds	r5, #1
    60f0:	68e3      	ldr	r3, [r4, #12]
    60f2:	9903      	ldr	r1, [sp, #12]
    60f4:	1a5b      	subs	r3, r3, r1
    60f6:	42ab      	cmp	r3, r5
    60f8:	dcf1      	bgt.n	60de <_printf_i+0x22e>
    60fa:	e7ea      	b.n	60d2 <_printf_i+0x222>
    60fc:	2500      	movs	r5, #0
    60fe:	f104 0619 	add.w	r6, r4, #25
    6102:	e7f5      	b.n	60f0 <_printf_i+0x240>
    6104:	00008e53 	.word	0x00008e53
    6108:	00008e64 	.word	0x00008e64

0000610c <_perror_r>:
    610c:	6983      	ldr	r3, [r0, #24]
    610e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6110:	4605      	mov	r5, r0
    6112:	460e      	mov	r6, r1
    6114:	68c4      	ldr	r4, [r0, #12]
    6116:	b90b      	cbnz	r3, 611c <_perror_r+0x10>
    6118:	f7ff fb72 	bl	5800 <__sinit>
    611c:	4b43      	ldr	r3, [pc, #268]	; (622c <_perror_r+0x120>)
    611e:	429c      	cmp	r4, r3
    6120:	d132      	bne.n	6188 <_perror_r+0x7c>
    6122:	686c      	ldr	r4, [r5, #4]
    6124:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6126:	07d8      	lsls	r0, r3, #31
    6128:	d405      	bmi.n	6136 <_perror_r+0x2a>
    612a:	89a3      	ldrh	r3, [r4, #12]
    612c:	0599      	lsls	r1, r3, #22
    612e:	d402      	bmi.n	6136 <_perror_r+0x2a>
    6130:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6132:	f001 f8e3 	bl	72fc <__retarget_lock_acquire_recursive>
    6136:	4621      	mov	r1, r4
    6138:	4628      	mov	r0, r5
    613a:	f7ff fae3 	bl	5704 <_fflush_r>
    613e:	bb6e      	cbnz	r6, 619c <_perror_r+0x90>
    6140:	2201      	movs	r2, #1
    6142:	4628      	mov	r0, r5
    6144:	6829      	ldr	r1, [r5, #0]
    6146:	ab01      	add	r3, sp, #4
    6148:	f000 f8c4 	bl	62d4 <_strerror_r>
    614c:	4607      	mov	r7, r0
    614e:	2800      	cmp	r0, #0
    6150:	d14f      	bne.n	61f2 <_perror_r+0xe6>
    6152:	4837      	ldr	r0, [pc, #220]	; (6230 <_perror_r+0x124>)
    6154:	f7fa fad8 	bl	708 <strlen>
    6158:	4606      	mov	r6, r0
    615a:	4f35      	ldr	r7, [pc, #212]	; (6230 <_perror_r+0x124>)
    615c:	b156      	cbz	r6, 6174 <_perror_r+0x68>
    615e:	4620      	mov	r0, r4
    6160:	f000 fb7e 	bl	6860 <fileno>
    6164:	4633      	mov	r3, r6
    6166:	4601      	mov	r1, r0
    6168:	463a      	mov	r2, r7
    616a:	4628      	mov	r0, r5
    616c:	f000 faea 	bl	6744 <_write_r>
    6170:	2800      	cmp	r0, #0
    6172:	da51      	bge.n	6218 <_perror_r+0x10c>
    6174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6178:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    617c:	81a2      	strh	r2, [r4, #12]
    617e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6180:	07d2      	lsls	r2, r2, #31
    6182:	d54c      	bpl.n	621e <_perror_r+0x112>
    6184:	b003      	add	sp, #12
    6186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6188:	4b2a      	ldr	r3, [pc, #168]	; (6234 <_perror_r+0x128>)
    618a:	429c      	cmp	r4, r3
    618c:	d101      	bne.n	6192 <_perror_r+0x86>
    618e:	68ac      	ldr	r4, [r5, #8]
    6190:	e7c8      	b.n	6124 <_perror_r+0x18>
    6192:	4b29      	ldr	r3, [pc, #164]	; (6238 <_perror_r+0x12c>)
    6194:	429c      	cmp	r4, r3
    6196:	bf08      	it	eq
    6198:	68ec      	ldreq	r4, [r5, #12]
    619a:	e7c3      	b.n	6124 <_perror_r+0x18>
    619c:	7833      	ldrb	r3, [r6, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d0ce      	beq.n	6140 <_perror_r+0x34>
    61a2:	4630      	mov	r0, r6
    61a4:	f7fa fab0 	bl	708 <strlen>
    61a8:	4607      	mov	r7, r0
    61aa:	b157      	cbz	r7, 61c2 <_perror_r+0xb6>
    61ac:	4620      	mov	r0, r4
    61ae:	f000 fb57 	bl	6860 <fileno>
    61b2:	463b      	mov	r3, r7
    61b4:	4601      	mov	r1, r0
    61b6:	4632      	mov	r2, r6
    61b8:	4628      	mov	r0, r5
    61ba:	f000 fac3 	bl	6744 <_write_r>
    61be:	2800      	cmp	r0, #0
    61c0:	da14      	bge.n	61ec <_perror_r+0xe0>
    61c2:	481e      	ldr	r0, [pc, #120]	; (623c <_perror_r+0x130>)
    61c4:	f7fa faa0 	bl	708 <strlen>
    61c8:	4606      	mov	r6, r0
    61ca:	4f1c      	ldr	r7, [pc, #112]	; (623c <_perror_r+0x130>)
    61cc:	2e00      	cmp	r6, #0
    61ce:	d0b7      	beq.n	6140 <_perror_r+0x34>
    61d0:	4620      	mov	r0, r4
    61d2:	f000 fb45 	bl	6860 <fileno>
    61d6:	4633      	mov	r3, r6
    61d8:	4601      	mov	r1, r0
    61da:	463a      	mov	r2, r7
    61dc:	4628      	mov	r0, r5
    61de:	f000 fab1 	bl	6744 <_write_r>
    61e2:	2800      	cmp	r0, #0
    61e4:	dbac      	blt.n	6140 <_perror_r+0x34>
    61e6:	1a36      	subs	r6, r6, r0
    61e8:	4407      	add	r7, r0
    61ea:	e7ef      	b.n	61cc <_perror_r+0xc0>
    61ec:	1a3f      	subs	r7, r7, r0
    61ee:	4406      	add	r6, r0
    61f0:	e7db      	b.n	61aa <_perror_r+0x9e>
    61f2:	f7fa fa89 	bl	708 <strlen>
    61f6:	4606      	mov	r6, r0
    61f8:	2e00      	cmp	r6, #0
    61fa:	d0aa      	beq.n	6152 <_perror_r+0x46>
    61fc:	4620      	mov	r0, r4
    61fe:	f000 fb2f 	bl	6860 <fileno>
    6202:	4633      	mov	r3, r6
    6204:	4601      	mov	r1, r0
    6206:	463a      	mov	r2, r7
    6208:	4628      	mov	r0, r5
    620a:	f000 fa9b 	bl	6744 <_write_r>
    620e:	2800      	cmp	r0, #0
    6210:	db9f      	blt.n	6152 <_perror_r+0x46>
    6212:	1a36      	subs	r6, r6, r0
    6214:	4407      	add	r7, r0
    6216:	e7ef      	b.n	61f8 <_perror_r+0xec>
    6218:	1a36      	subs	r6, r6, r0
    621a:	4407      	add	r7, r0
    621c:	e79e      	b.n	615c <_perror_r+0x50>
    621e:	059b      	lsls	r3, r3, #22
    6220:	d4b0      	bmi.n	6184 <_perror_r+0x78>
    6222:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6224:	f001 f86b 	bl	72fe <__retarget_lock_release_recursive>
    6228:	e7ac      	b.n	6184 <_perror_r+0x78>
    622a:	bf00      	nop
    622c:	0000802c 	.word	0x0000802c
    6230:	0000898d 	.word	0x0000898d
    6234:	0000800c 	.word	0x0000800c
    6238:	00007fec 	.word	0x00007fec
    623c:	00008e75 	.word	0x00008e75

00006240 <perror>:
    6240:	4b02      	ldr	r3, [pc, #8]	; (624c <perror+0xc>)
    6242:	4601      	mov	r1, r0
    6244:	6818      	ldr	r0, [r3, #0]
    6246:	f7ff bf61 	b.w	610c <_perror_r>
    624a:	bf00      	nop
    624c:	00009978 	.word	0x00009978

00006250 <iprintf>:
    6250:	b40f      	push	{r0, r1, r2, r3}
    6252:	4b0a      	ldr	r3, [pc, #40]	; (627c <iprintf+0x2c>)
    6254:	b513      	push	{r0, r1, r4, lr}
    6256:	681c      	ldr	r4, [r3, #0]
    6258:	b124      	cbz	r4, 6264 <iprintf+0x14>
    625a:	69a3      	ldr	r3, [r4, #24]
    625c:	b913      	cbnz	r3, 6264 <iprintf+0x14>
    625e:	4620      	mov	r0, r4
    6260:	f7ff face 	bl	5800 <__sinit>
    6264:	ab05      	add	r3, sp, #20
    6266:	4620      	mov	r0, r4
    6268:	9a04      	ldr	r2, [sp, #16]
    626a:	68a1      	ldr	r1, [r4, #8]
    626c:	9301      	str	r3, [sp, #4]
    626e:	f7ff fcf3 	bl	5c58 <_vfiprintf_r>
    6272:	b002      	add	sp, #8
    6274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6278:	b004      	add	sp, #16
    627a:	4770      	bx	lr
    627c:	00009978 	.word	0x00009978

00006280 <_sbrk_r>:
    6280:	b538      	push	{r3, r4, r5, lr}
    6282:	2300      	movs	r3, #0
    6284:	4d05      	ldr	r5, [pc, #20]	; (629c <_sbrk_r+0x1c>)
    6286:	4604      	mov	r4, r0
    6288:	4608      	mov	r0, r1
    628a:	602b      	str	r3, [r5, #0]
    628c:	f7fb fc9e 	bl	1bcc <_sbrk>
    6290:	1c43      	adds	r3, r0, #1
    6292:	d102      	bne.n	629a <_sbrk_r+0x1a>
    6294:	682b      	ldr	r3, [r5, #0]
    6296:	b103      	cbz	r3, 629a <_sbrk_r+0x1a>
    6298:	6023      	str	r3, [r4, #0]
    629a:	bd38      	pop	{r3, r4, r5, pc}
    629c:	00009da4 	.word	0x00009da4

000062a0 <raise>:
    62a0:	4b02      	ldr	r3, [pc, #8]	; (62ac <raise+0xc>)
    62a2:	4601      	mov	r1, r0
    62a4:	6818      	ldr	r0, [r3, #0]
    62a6:	f001 b902 	b.w	74ae <_raise_r>
    62aa:	bf00      	nop
    62ac:	00009978 	.word	0x00009978

000062b0 <_kill_r>:
    62b0:	b538      	push	{r3, r4, r5, lr}
    62b2:	2300      	movs	r3, #0
    62b4:	4d06      	ldr	r5, [pc, #24]	; (62d0 <_kill_r+0x20>)
    62b6:	4604      	mov	r4, r0
    62b8:	4608      	mov	r0, r1
    62ba:	4611      	mov	r1, r2
    62bc:	602b      	str	r3, [r5, #0]
    62be:	f000 fe32 	bl	6f26 <_kill>
    62c2:	1c43      	adds	r3, r0, #1
    62c4:	d102      	bne.n	62cc <_kill_r+0x1c>
    62c6:	682b      	ldr	r3, [r5, #0]
    62c8:	b103      	cbz	r3, 62cc <_kill_r+0x1c>
    62ca:	6023      	str	r3, [r4, #0]
    62cc:	bd38      	pop	{r3, r4, r5, pc}
    62ce:	bf00      	nop
    62d0:	00009da4 	.word	0x00009da4

000062d4 <_strerror_r>:
    62d4:	b510      	push	{r4, lr}
    62d6:	4604      	mov	r4, r0
    62d8:	4608      	mov	r0, r1
    62da:	4611      	mov	r1, r2
    62dc:	461a      	mov	r2, r3
    62de:	288e      	cmp	r0, #142	; 0x8e
    62e0:	f200 8130 	bhi.w	6544 <_strerror_r+0x270>
    62e4:	e8df f010 	tbh	[pc, r0, lsl #1]
    62e8:	0138008f 	.word	0x0138008f
    62ec:	00940092 	.word	0x00940092
    62f0:	00980096 	.word	0x00980096
    62f4:	009c009a 	.word	0x009c009a
    62f8:	00a2009e 	.word	0x00a2009e
    62fc:	00a800a4 	.word	0x00a800a4
    6300:	00ac00aa 	.word	0x00ac00aa
    6304:	012e00ae 	.word	0x012e00ae
    6308:	00b200b0 	.word	0x00b200b0
    630c:	00b600b4 	.word	0x00b600b4
    6310:	00be00b8 	.word	0x00be00b8
    6314:	00c600c0 	.word	0x00c600c0
    6318:	00ca00c8 	.word	0x00ca00c8
    631c:	00ce00cc 	.word	0x00ce00cc
    6320:	00d600d2 	.word	0x00d600d2
    6324:	00da00d8 	.word	0x00da00d8
    6328:	00de00dc 	.word	0x00de00dc
    632c:	00e200e0 	.word	0x00e200e0
    6330:	012e00e4 	.word	0x012e00e4
    6334:	012e012e 	.word	0x012e012e
    6338:	012e012e 	.word	0x012e012e
    633c:	012e012e 	.word	0x012e012e
    6340:	00e8012e 	.word	0x00e8012e
    6344:	012e00ec 	.word	0x012e00ec
    6348:	012e012e 	.word	0x012e012e
    634c:	012e012e 	.word	0x012e012e
    6350:	012e012e 	.word	0x012e012e
    6354:	012e012e 	.word	0x012e012e
    6358:	012e012e 	.word	0x012e012e
    635c:	012e012e 	.word	0x012e012e
    6360:	010800ee 	.word	0x010800ee
    6364:	00f200f0 	.word	0x00f200f0
    6368:	012e012e 	.word	0x012e012e
    636c:	00f4012e 	.word	0x00f4012e
    6370:	012e012e 	.word	0x012e012e
    6374:	00f6012e 	.word	0x00f6012e
    6378:	012e012e 	.word	0x012e012e
    637c:	012e00fa 	.word	0x012e00fa
    6380:	00fc012e 	.word	0x00fc012e
    6384:	012e012e 	.word	0x012e012e
    6388:	012e012e 	.word	0x012e012e
    638c:	012e012e 	.word	0x012e012e
    6390:	012e012e 	.word	0x012e012e
    6394:	012e012e 	.word	0x012e012e
    6398:	012e00fe 	.word	0x012e00fe
    639c:	01020100 	.word	0x01020100
    63a0:	012e0104 	.word	0x012e0104
    63a4:	0126012e 	.word	0x0126012e
    63a8:	012e012e 	.word	0x012e012e
    63ac:	012e012e 	.word	0x012e012e
    63b0:	012e012e 	.word	0x012e012e
    63b4:	012e012e 	.word	0x012e012e
    63b8:	01060114 	.word	0x01060114
    63bc:	010c010a 	.word	0x010c010a
    63c0:	0110010e 	.word	0x0110010e
    63c4:	0112012e 	.word	0x0112012e
    63c8:	011a0116 	.word	0x011a0116
    63cc:	00c200ea 	.word	0x00c200ea
    63d0:	00ba012c 	.word	0x00ba012c
    63d4:	00bc00d0 	.word	0x00bc00d0
    63d8:	00a600a0 	.word	0x00a600a0
    63dc:	00f8012a 	.word	0x00f8012a
    63e0:	0118012e 	.word	0x0118012e
    63e4:	011e00c4 	.word	0x011e00c4
    63e8:	012e011c 	.word	0x012e011c
    63ec:	012e012e 	.word	0x012e012e
    63f0:	012e012e 	.word	0x012e012e
    63f4:	012e00d4 	.word	0x012e00d4
    63f8:	012e012e 	.word	0x012e012e
    63fc:	012800e6 	.word	0x012800e6
    6400:	01220120 	.word	0x01220120
    6404:	0124      	.short	0x0124
    6406:	4b55      	ldr	r3, [pc, #340]	; (655c <_strerror_r+0x288>)
    6408:	4618      	mov	r0, r3
    640a:	bd10      	pop	{r4, pc}
    640c:	4b54      	ldr	r3, [pc, #336]	; (6560 <_strerror_r+0x28c>)
    640e:	e7fb      	b.n	6408 <_strerror_r+0x134>
    6410:	4b54      	ldr	r3, [pc, #336]	; (6564 <_strerror_r+0x290>)
    6412:	e7f9      	b.n	6408 <_strerror_r+0x134>
    6414:	4b54      	ldr	r3, [pc, #336]	; (6568 <_strerror_r+0x294>)
    6416:	e7f7      	b.n	6408 <_strerror_r+0x134>
    6418:	4b54      	ldr	r3, [pc, #336]	; (656c <_strerror_r+0x298>)
    641a:	e7f5      	b.n	6408 <_strerror_r+0x134>
    641c:	4b54      	ldr	r3, [pc, #336]	; (6570 <_strerror_r+0x29c>)
    641e:	e7f3      	b.n	6408 <_strerror_r+0x134>
    6420:	4b54      	ldr	r3, [pc, #336]	; (6574 <_strerror_r+0x2a0>)
    6422:	e7f1      	b.n	6408 <_strerror_r+0x134>
    6424:	4b54      	ldr	r3, [pc, #336]	; (6578 <_strerror_r+0x2a4>)
    6426:	e7ef      	b.n	6408 <_strerror_r+0x134>
    6428:	4b54      	ldr	r3, [pc, #336]	; (657c <_strerror_r+0x2a8>)
    642a:	e7ed      	b.n	6408 <_strerror_r+0x134>
    642c:	4b54      	ldr	r3, [pc, #336]	; (6580 <_strerror_r+0x2ac>)
    642e:	e7eb      	b.n	6408 <_strerror_r+0x134>
    6430:	4b54      	ldr	r3, [pc, #336]	; (6584 <_strerror_r+0x2b0>)
    6432:	e7e9      	b.n	6408 <_strerror_r+0x134>
    6434:	4b54      	ldr	r3, [pc, #336]	; (6588 <_strerror_r+0x2b4>)
    6436:	e7e7      	b.n	6408 <_strerror_r+0x134>
    6438:	4b54      	ldr	r3, [pc, #336]	; (658c <_strerror_r+0x2b8>)
    643a:	e7e5      	b.n	6408 <_strerror_r+0x134>
    643c:	4b54      	ldr	r3, [pc, #336]	; (6590 <_strerror_r+0x2bc>)
    643e:	e7e3      	b.n	6408 <_strerror_r+0x134>
    6440:	4b54      	ldr	r3, [pc, #336]	; (6594 <_strerror_r+0x2c0>)
    6442:	e7e1      	b.n	6408 <_strerror_r+0x134>
    6444:	4b54      	ldr	r3, [pc, #336]	; (6598 <_strerror_r+0x2c4>)
    6446:	e7df      	b.n	6408 <_strerror_r+0x134>
    6448:	4b54      	ldr	r3, [pc, #336]	; (659c <_strerror_r+0x2c8>)
    644a:	e7dd      	b.n	6408 <_strerror_r+0x134>
    644c:	4b54      	ldr	r3, [pc, #336]	; (65a0 <_strerror_r+0x2cc>)
    644e:	e7db      	b.n	6408 <_strerror_r+0x134>
    6450:	4b54      	ldr	r3, [pc, #336]	; (65a4 <_strerror_r+0x2d0>)
    6452:	e7d9      	b.n	6408 <_strerror_r+0x134>
    6454:	4b54      	ldr	r3, [pc, #336]	; (65a8 <_strerror_r+0x2d4>)
    6456:	e7d7      	b.n	6408 <_strerror_r+0x134>
    6458:	4b54      	ldr	r3, [pc, #336]	; (65ac <_strerror_r+0x2d8>)
    645a:	e7d5      	b.n	6408 <_strerror_r+0x134>
    645c:	4b54      	ldr	r3, [pc, #336]	; (65b0 <_strerror_r+0x2dc>)
    645e:	e7d3      	b.n	6408 <_strerror_r+0x134>
    6460:	4b54      	ldr	r3, [pc, #336]	; (65b4 <_strerror_r+0x2e0>)
    6462:	e7d1      	b.n	6408 <_strerror_r+0x134>
    6464:	4b54      	ldr	r3, [pc, #336]	; (65b8 <_strerror_r+0x2e4>)
    6466:	e7cf      	b.n	6408 <_strerror_r+0x134>
    6468:	4b54      	ldr	r3, [pc, #336]	; (65bc <_strerror_r+0x2e8>)
    646a:	e7cd      	b.n	6408 <_strerror_r+0x134>
    646c:	4b54      	ldr	r3, [pc, #336]	; (65c0 <_strerror_r+0x2ec>)
    646e:	e7cb      	b.n	6408 <_strerror_r+0x134>
    6470:	4b54      	ldr	r3, [pc, #336]	; (65c4 <_strerror_r+0x2f0>)
    6472:	e7c9      	b.n	6408 <_strerror_r+0x134>
    6474:	4b54      	ldr	r3, [pc, #336]	; (65c8 <_strerror_r+0x2f4>)
    6476:	e7c7      	b.n	6408 <_strerror_r+0x134>
    6478:	4b54      	ldr	r3, [pc, #336]	; (65cc <_strerror_r+0x2f8>)
    647a:	e7c5      	b.n	6408 <_strerror_r+0x134>
    647c:	4b54      	ldr	r3, [pc, #336]	; (65d0 <_strerror_r+0x2fc>)
    647e:	e7c3      	b.n	6408 <_strerror_r+0x134>
    6480:	4b54      	ldr	r3, [pc, #336]	; (65d4 <_strerror_r+0x300>)
    6482:	e7c1      	b.n	6408 <_strerror_r+0x134>
    6484:	4b54      	ldr	r3, [pc, #336]	; (65d8 <_strerror_r+0x304>)
    6486:	e7bf      	b.n	6408 <_strerror_r+0x134>
    6488:	4b54      	ldr	r3, [pc, #336]	; (65dc <_strerror_r+0x308>)
    648a:	e7bd      	b.n	6408 <_strerror_r+0x134>
    648c:	4b54      	ldr	r3, [pc, #336]	; (65e0 <_strerror_r+0x30c>)
    648e:	e7bb      	b.n	6408 <_strerror_r+0x134>
    6490:	4b54      	ldr	r3, [pc, #336]	; (65e4 <_strerror_r+0x310>)
    6492:	e7b9      	b.n	6408 <_strerror_r+0x134>
    6494:	4b54      	ldr	r3, [pc, #336]	; (65e8 <_strerror_r+0x314>)
    6496:	e7b7      	b.n	6408 <_strerror_r+0x134>
    6498:	4b54      	ldr	r3, [pc, #336]	; (65ec <_strerror_r+0x318>)
    649a:	e7b5      	b.n	6408 <_strerror_r+0x134>
    649c:	4b54      	ldr	r3, [pc, #336]	; (65f0 <_strerror_r+0x31c>)
    649e:	e7b3      	b.n	6408 <_strerror_r+0x134>
    64a0:	4b54      	ldr	r3, [pc, #336]	; (65f4 <_strerror_r+0x320>)
    64a2:	e7b1      	b.n	6408 <_strerror_r+0x134>
    64a4:	4b54      	ldr	r3, [pc, #336]	; (65f8 <_strerror_r+0x324>)
    64a6:	e7af      	b.n	6408 <_strerror_r+0x134>
    64a8:	4b54      	ldr	r3, [pc, #336]	; (65fc <_strerror_r+0x328>)
    64aa:	e7ad      	b.n	6408 <_strerror_r+0x134>
    64ac:	4b54      	ldr	r3, [pc, #336]	; (6600 <_strerror_r+0x32c>)
    64ae:	e7ab      	b.n	6408 <_strerror_r+0x134>
    64b0:	4b54      	ldr	r3, [pc, #336]	; (6604 <_strerror_r+0x330>)
    64b2:	e7a9      	b.n	6408 <_strerror_r+0x134>
    64b4:	4b54      	ldr	r3, [pc, #336]	; (6608 <_strerror_r+0x334>)
    64b6:	e7a7      	b.n	6408 <_strerror_r+0x134>
    64b8:	4b54      	ldr	r3, [pc, #336]	; (660c <_strerror_r+0x338>)
    64ba:	e7a5      	b.n	6408 <_strerror_r+0x134>
    64bc:	4b54      	ldr	r3, [pc, #336]	; (6610 <_strerror_r+0x33c>)
    64be:	e7a3      	b.n	6408 <_strerror_r+0x134>
    64c0:	4b54      	ldr	r3, [pc, #336]	; (6614 <_strerror_r+0x340>)
    64c2:	e7a1      	b.n	6408 <_strerror_r+0x134>
    64c4:	4b54      	ldr	r3, [pc, #336]	; (6618 <_strerror_r+0x344>)
    64c6:	e79f      	b.n	6408 <_strerror_r+0x134>
    64c8:	4b54      	ldr	r3, [pc, #336]	; (661c <_strerror_r+0x348>)
    64ca:	e79d      	b.n	6408 <_strerror_r+0x134>
    64cc:	4b54      	ldr	r3, [pc, #336]	; (6620 <_strerror_r+0x34c>)
    64ce:	e79b      	b.n	6408 <_strerror_r+0x134>
    64d0:	4b54      	ldr	r3, [pc, #336]	; (6624 <_strerror_r+0x350>)
    64d2:	e799      	b.n	6408 <_strerror_r+0x134>
    64d4:	4b54      	ldr	r3, [pc, #336]	; (6628 <_strerror_r+0x354>)
    64d6:	e797      	b.n	6408 <_strerror_r+0x134>
    64d8:	4b54      	ldr	r3, [pc, #336]	; (662c <_strerror_r+0x358>)
    64da:	e795      	b.n	6408 <_strerror_r+0x134>
    64dc:	4b54      	ldr	r3, [pc, #336]	; (6630 <_strerror_r+0x35c>)
    64de:	e793      	b.n	6408 <_strerror_r+0x134>
    64e0:	4b54      	ldr	r3, [pc, #336]	; (6634 <_strerror_r+0x360>)
    64e2:	e791      	b.n	6408 <_strerror_r+0x134>
    64e4:	4b54      	ldr	r3, [pc, #336]	; (6638 <_strerror_r+0x364>)
    64e6:	e78f      	b.n	6408 <_strerror_r+0x134>
    64e8:	4b54      	ldr	r3, [pc, #336]	; (663c <_strerror_r+0x368>)
    64ea:	e78d      	b.n	6408 <_strerror_r+0x134>
    64ec:	4b54      	ldr	r3, [pc, #336]	; (6640 <_strerror_r+0x36c>)
    64ee:	e78b      	b.n	6408 <_strerror_r+0x134>
    64f0:	4b54      	ldr	r3, [pc, #336]	; (6644 <_strerror_r+0x370>)
    64f2:	e789      	b.n	6408 <_strerror_r+0x134>
    64f4:	4b54      	ldr	r3, [pc, #336]	; (6648 <_strerror_r+0x374>)
    64f6:	e787      	b.n	6408 <_strerror_r+0x134>
    64f8:	4b54      	ldr	r3, [pc, #336]	; (664c <_strerror_r+0x378>)
    64fa:	e785      	b.n	6408 <_strerror_r+0x134>
    64fc:	4b54      	ldr	r3, [pc, #336]	; (6650 <_strerror_r+0x37c>)
    64fe:	e783      	b.n	6408 <_strerror_r+0x134>
    6500:	4b54      	ldr	r3, [pc, #336]	; (6654 <_strerror_r+0x380>)
    6502:	e781      	b.n	6408 <_strerror_r+0x134>
    6504:	4b54      	ldr	r3, [pc, #336]	; (6658 <_strerror_r+0x384>)
    6506:	e77f      	b.n	6408 <_strerror_r+0x134>
    6508:	4b54      	ldr	r3, [pc, #336]	; (665c <_strerror_r+0x388>)
    650a:	e77d      	b.n	6408 <_strerror_r+0x134>
    650c:	4b54      	ldr	r3, [pc, #336]	; (6660 <_strerror_r+0x38c>)
    650e:	e77b      	b.n	6408 <_strerror_r+0x134>
    6510:	4b54      	ldr	r3, [pc, #336]	; (6664 <_strerror_r+0x390>)
    6512:	e779      	b.n	6408 <_strerror_r+0x134>
    6514:	4b54      	ldr	r3, [pc, #336]	; (6668 <_strerror_r+0x394>)
    6516:	e777      	b.n	6408 <_strerror_r+0x134>
    6518:	4b54      	ldr	r3, [pc, #336]	; (666c <_strerror_r+0x398>)
    651a:	e775      	b.n	6408 <_strerror_r+0x134>
    651c:	4b54      	ldr	r3, [pc, #336]	; (6670 <_strerror_r+0x39c>)
    651e:	e773      	b.n	6408 <_strerror_r+0x134>
    6520:	4b54      	ldr	r3, [pc, #336]	; (6674 <_strerror_r+0x3a0>)
    6522:	e771      	b.n	6408 <_strerror_r+0x134>
    6524:	4b54      	ldr	r3, [pc, #336]	; (6678 <_strerror_r+0x3a4>)
    6526:	e76f      	b.n	6408 <_strerror_r+0x134>
    6528:	4b54      	ldr	r3, [pc, #336]	; (667c <_strerror_r+0x3a8>)
    652a:	e76d      	b.n	6408 <_strerror_r+0x134>
    652c:	4b54      	ldr	r3, [pc, #336]	; (6680 <_strerror_r+0x3ac>)
    652e:	e76b      	b.n	6408 <_strerror_r+0x134>
    6530:	4b54      	ldr	r3, [pc, #336]	; (6684 <_strerror_r+0x3b0>)
    6532:	e769      	b.n	6408 <_strerror_r+0x134>
    6534:	4b54      	ldr	r3, [pc, #336]	; (6688 <_strerror_r+0x3b4>)
    6536:	e767      	b.n	6408 <_strerror_r+0x134>
    6538:	4b54      	ldr	r3, [pc, #336]	; (668c <_strerror_r+0x3b8>)
    653a:	e765      	b.n	6408 <_strerror_r+0x134>
    653c:	4b54      	ldr	r3, [pc, #336]	; (6690 <_strerror_r+0x3bc>)
    653e:	e763      	b.n	6408 <_strerror_r+0x134>
    6540:	4b54      	ldr	r3, [pc, #336]	; (6694 <_strerror_r+0x3c0>)
    6542:	e761      	b.n	6408 <_strerror_r+0x134>
    6544:	2a00      	cmp	r2, #0
    6546:	bf08      	it	eq
    6548:	4622      	moveq	r2, r4
    654a:	f001 f83c 	bl	75c6 <_user_strerror>
    654e:	4b52      	ldr	r3, [pc, #328]	; (6698 <_strerror_r+0x3c4>)
    6550:	2800      	cmp	r0, #0
    6552:	bf18      	it	ne
    6554:	4603      	movne	r3, r0
    6556:	e757      	b.n	6408 <_strerror_r+0x134>
    6558:	4b50      	ldr	r3, [pc, #320]	; (669c <_strerror_r+0x3c8>)
    655a:	e755      	b.n	6408 <_strerror_r+0x134>
    655c:	00008e78 	.word	0x00008e78
    6560:	00008e8a 	.word	0x00008e8a
    6564:	00008ea4 	.word	0x00008ea4
    6568:	00008eb4 	.word	0x00008eb4
    656c:	00008ecc 	.word	0x00008ecc
    6570:	00008ed6 	.word	0x00008ed6
    6574:	00008ef0 	.word	0x00008ef0
    6578:	00008f02 	.word	0x00008f02
    657c:	00008f14 	.word	0x00008f14
    6580:	00008f2d 	.word	0x00008f2d
    6584:	00008f3d 	.word	0x00008f3d
    6588:	00008f49 	.word	0x00008f49
    658c:	00008f66 	.word	0x00008f66
    6590:	00008f78 	.word	0x00008f78
    6594:	00008f89 	.word	0x00008f89
    6598:	00008f9b 	.word	0x00008f9b
    659c:	00008fa7 	.word	0x00008fa7
    65a0:	00008fbf 	.word	0x00008fbf
    65a4:	00008fcb 	.word	0x00008fcb
    65a8:	00008fdd 	.word	0x00008fdd
    65ac:	00008fec 	.word	0x00008fec
    65b0:	00008ffc 	.word	0x00008ffc
    65b4:	00009009 	.word	0x00009009
    65b8:	00009028 	.word	0x00009028
    65bc:	00009037 	.word	0x00009037
    65c0:	00009048 	.word	0x00009048
    65c4:	0000906c 	.word	0x0000906c
    65c8:	0000908a 	.word	0x0000908a
    65cc:	000090a8 	.word	0x000090a8
    65d0:	000090c8 	.word	0x000090c8
    65d4:	000090df 	.word	0x000090df
    65d8:	000090ee 	.word	0x000090ee
    65dc:	000090fd 	.word	0x000090fd
    65e0:	00009111 	.word	0x00009111
    65e4:	00009129 	.word	0x00009129
    65e8:	00009137 	.word	0x00009137
    65ec:	00009144 	.word	0x00009144
    65f0:	0000915a 	.word	0x0000915a
    65f4:	00009169 	.word	0x00009169
    65f8:	00009175 	.word	0x00009175
    65fc:	000091a4 	.word	0x000091a4
    6600:	000091b5 	.word	0x000091b5
    6604:	000091d0 	.word	0x000091d0
    6608:	000091e3 	.word	0x000091e3
    660c:	000091f9 	.word	0x000091f9
    6610:	00009202 	.word	0x00009202
    6614:	00009219 	.word	0x00009219
    6618:	00009221 	.word	0x00009221
    661c:	0000922e 	.word	0x0000922e
    6620:	00009243 	.word	0x00009243
    6624:	00009257 	.word	0x00009257
    6628:	0000926f 	.word	0x0000926f
    662c:	0000927e 	.word	0x0000927e
    6630:	0000928f 	.word	0x0000928f
    6634:	000092a2 	.word	0x000092a2
    6638:	000092ae 	.word	0x000092ae
    663c:	000092c7 	.word	0x000092c7
    6640:	000092db 	.word	0x000092db
    6644:	000092f6 	.word	0x000092f6
    6648:	0000930e 	.word	0x0000930e
    664c:	00009328 	.word	0x00009328
    6650:	00009330 	.word	0x00009330
    6654:	00009360 	.word	0x00009360
    6658:	0000937f 	.word	0x0000937f
    665c:	0000939e 	.word	0x0000939e
    6660:	000093b5 	.word	0x000093b5
    6664:	000093c8 	.word	0x000093c8
    6668:	000093e1 	.word	0x000093e1
    666c:	000093f8 	.word	0x000093f8
    6670:	0000940e 	.word	0x0000940e
    6674:	0000942f 	.word	0x0000942f
    6678:	00009447 	.word	0x00009447
    667c:	00009463 	.word	0x00009463
    6680:	00009476 	.word	0x00009476
    6684:	0000948c 	.word	0x0000948c
    6688:	000094a0 	.word	0x000094a0
    668c:	000094c2 	.word	0x000094c2
    6690:	000094e8 	.word	0x000094e8
    6694:	000094f9 	.word	0x000094f9
    6698:	0000898e 	.word	0x0000898e
    669c:	00008e80 	.word	0x00008e80

000066a0 <__swbuf_r>:
    66a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66a2:	460e      	mov	r6, r1
    66a4:	4614      	mov	r4, r2
    66a6:	4605      	mov	r5, r0
    66a8:	b118      	cbz	r0, 66b2 <__swbuf_r+0x12>
    66aa:	6983      	ldr	r3, [r0, #24]
    66ac:	b90b      	cbnz	r3, 66b2 <__swbuf_r+0x12>
    66ae:	f7ff f8a7 	bl	5800 <__sinit>
    66b2:	4b21      	ldr	r3, [pc, #132]	; (6738 <__swbuf_r+0x98>)
    66b4:	429c      	cmp	r4, r3
    66b6:	d110      	bne.n	66da <__swbuf_r+0x3a>
    66b8:	686c      	ldr	r4, [r5, #4]
    66ba:	69a3      	ldr	r3, [r4, #24]
    66bc:	60a3      	str	r3, [r4, #8]
    66be:	89a3      	ldrh	r3, [r4, #12]
    66c0:	071a      	lsls	r2, r3, #28
    66c2:	d501      	bpl.n	66c8 <__swbuf_r+0x28>
    66c4:	6923      	ldr	r3, [r4, #16]
    66c6:	b993      	cbnz	r3, 66ee <__swbuf_r+0x4e>
    66c8:	4621      	mov	r1, r4
    66ca:	4628      	mov	r0, r5
    66cc:	f000 f84c 	bl	6768 <__swsetup_r>
    66d0:	b168      	cbz	r0, 66ee <__swbuf_r+0x4e>
    66d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    66d6:	4638      	mov	r0, r7
    66d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66da:	4b18      	ldr	r3, [pc, #96]	; (673c <__swbuf_r+0x9c>)
    66dc:	429c      	cmp	r4, r3
    66de:	d101      	bne.n	66e4 <__swbuf_r+0x44>
    66e0:	68ac      	ldr	r4, [r5, #8]
    66e2:	e7ea      	b.n	66ba <__swbuf_r+0x1a>
    66e4:	4b16      	ldr	r3, [pc, #88]	; (6740 <__swbuf_r+0xa0>)
    66e6:	429c      	cmp	r4, r3
    66e8:	bf08      	it	eq
    66ea:	68ec      	ldreq	r4, [r5, #12]
    66ec:	e7e5      	b.n	66ba <__swbuf_r+0x1a>
    66ee:	6923      	ldr	r3, [r4, #16]
    66f0:	6820      	ldr	r0, [r4, #0]
    66f2:	b2f6      	uxtb	r6, r6
    66f4:	1ac0      	subs	r0, r0, r3
    66f6:	6963      	ldr	r3, [r4, #20]
    66f8:	4637      	mov	r7, r6
    66fa:	4283      	cmp	r3, r0
    66fc:	dc05      	bgt.n	670a <__swbuf_r+0x6a>
    66fe:	4621      	mov	r1, r4
    6700:	4628      	mov	r0, r5
    6702:	f7fe ffff 	bl	5704 <_fflush_r>
    6706:	2800      	cmp	r0, #0
    6708:	d1e3      	bne.n	66d2 <__swbuf_r+0x32>
    670a:	68a3      	ldr	r3, [r4, #8]
    670c:	3001      	adds	r0, #1
    670e:	3b01      	subs	r3, #1
    6710:	60a3      	str	r3, [r4, #8]
    6712:	6823      	ldr	r3, [r4, #0]
    6714:	1c5a      	adds	r2, r3, #1
    6716:	6022      	str	r2, [r4, #0]
    6718:	701e      	strb	r6, [r3, #0]
    671a:	6963      	ldr	r3, [r4, #20]
    671c:	4283      	cmp	r3, r0
    671e:	d004      	beq.n	672a <__swbuf_r+0x8a>
    6720:	89a3      	ldrh	r3, [r4, #12]
    6722:	07db      	lsls	r3, r3, #31
    6724:	d5d7      	bpl.n	66d6 <__swbuf_r+0x36>
    6726:	2e0a      	cmp	r6, #10
    6728:	d1d5      	bne.n	66d6 <__swbuf_r+0x36>
    672a:	4621      	mov	r1, r4
    672c:	4628      	mov	r0, r5
    672e:	f7fe ffe9 	bl	5704 <_fflush_r>
    6732:	2800      	cmp	r0, #0
    6734:	d0cf      	beq.n	66d6 <__swbuf_r+0x36>
    6736:	e7cc      	b.n	66d2 <__swbuf_r+0x32>
    6738:	0000802c 	.word	0x0000802c
    673c:	0000800c 	.word	0x0000800c
    6740:	00007fec 	.word	0x00007fec

00006744 <_write_r>:
    6744:	b538      	push	{r3, r4, r5, lr}
    6746:	4604      	mov	r4, r0
    6748:	4608      	mov	r0, r1
    674a:	4611      	mov	r1, r2
    674c:	2200      	movs	r2, #0
    674e:	4d05      	ldr	r5, [pc, #20]	; (6764 <_write_r+0x20>)
    6750:	602a      	str	r2, [r5, #0]
    6752:	461a      	mov	r2, r3
    6754:	f000 fbd9 	bl	6f0a <_write>
    6758:	1c43      	adds	r3, r0, #1
    675a:	d102      	bne.n	6762 <_write_r+0x1e>
    675c:	682b      	ldr	r3, [r5, #0]
    675e:	b103      	cbz	r3, 6762 <_write_r+0x1e>
    6760:	6023      	str	r3, [r4, #0]
    6762:	bd38      	pop	{r3, r4, r5, pc}
    6764:	00009da4 	.word	0x00009da4

00006768 <__swsetup_r>:
    6768:	4b31      	ldr	r3, [pc, #196]	; (6830 <__swsetup_r+0xc8>)
    676a:	b570      	push	{r4, r5, r6, lr}
    676c:	681d      	ldr	r5, [r3, #0]
    676e:	4606      	mov	r6, r0
    6770:	460c      	mov	r4, r1
    6772:	b125      	cbz	r5, 677e <__swsetup_r+0x16>
    6774:	69ab      	ldr	r3, [r5, #24]
    6776:	b913      	cbnz	r3, 677e <__swsetup_r+0x16>
    6778:	4628      	mov	r0, r5
    677a:	f7ff f841 	bl	5800 <__sinit>
    677e:	4b2d      	ldr	r3, [pc, #180]	; (6834 <__swsetup_r+0xcc>)
    6780:	429c      	cmp	r4, r3
    6782:	d10e      	bne.n	67a2 <__swsetup_r+0x3a>
    6784:	686c      	ldr	r4, [r5, #4]
    6786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    678a:	071a      	lsls	r2, r3, #28
    678c:	d42c      	bmi.n	67e8 <__swsetup_r+0x80>
    678e:	06dd      	lsls	r5, r3, #27
    6790:	d411      	bmi.n	67b6 <__swsetup_r+0x4e>
    6792:	2209      	movs	r2, #9
    6794:	6032      	str	r2, [r6, #0]
    6796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    679a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    679e:	81a3      	strh	r3, [r4, #12]
    67a0:	e03d      	b.n	681e <__swsetup_r+0xb6>
    67a2:	4b25      	ldr	r3, [pc, #148]	; (6838 <__swsetup_r+0xd0>)
    67a4:	429c      	cmp	r4, r3
    67a6:	d101      	bne.n	67ac <__swsetup_r+0x44>
    67a8:	68ac      	ldr	r4, [r5, #8]
    67aa:	e7ec      	b.n	6786 <__swsetup_r+0x1e>
    67ac:	4b23      	ldr	r3, [pc, #140]	; (683c <__swsetup_r+0xd4>)
    67ae:	429c      	cmp	r4, r3
    67b0:	bf08      	it	eq
    67b2:	68ec      	ldreq	r4, [r5, #12]
    67b4:	e7e7      	b.n	6786 <__swsetup_r+0x1e>
    67b6:	0758      	lsls	r0, r3, #29
    67b8:	d512      	bpl.n	67e0 <__swsetup_r+0x78>
    67ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    67bc:	b141      	cbz	r1, 67d0 <__swsetup_r+0x68>
    67be:	f104 0344 	add.w	r3, r4, #68	; 0x44
    67c2:	4299      	cmp	r1, r3
    67c4:	d002      	beq.n	67cc <__swsetup_r+0x64>
    67c6:	4630      	mov	r0, r6
    67c8:	f7ff f9a4 	bl	5b14 <_free_r>
    67cc:	2300      	movs	r3, #0
    67ce:	6363      	str	r3, [r4, #52]	; 0x34
    67d0:	89a3      	ldrh	r3, [r4, #12]
    67d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    67d6:	81a3      	strh	r3, [r4, #12]
    67d8:	2300      	movs	r3, #0
    67da:	6063      	str	r3, [r4, #4]
    67dc:	6923      	ldr	r3, [r4, #16]
    67de:	6023      	str	r3, [r4, #0]
    67e0:	89a3      	ldrh	r3, [r4, #12]
    67e2:	f043 0308 	orr.w	r3, r3, #8
    67e6:	81a3      	strh	r3, [r4, #12]
    67e8:	6923      	ldr	r3, [r4, #16]
    67ea:	b94b      	cbnz	r3, 6800 <__swsetup_r+0x98>
    67ec:	89a3      	ldrh	r3, [r4, #12]
    67ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
    67f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    67f6:	d003      	beq.n	6800 <__swsetup_r+0x98>
    67f8:	4621      	mov	r1, r4
    67fa:	4630      	mov	r0, r6
    67fc:	f000 f9d4 	bl	6ba8 <__smakebuf_r>
    6800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6804:	f013 0201 	ands.w	r2, r3, #1
    6808:	d00a      	beq.n	6820 <__swsetup_r+0xb8>
    680a:	2200      	movs	r2, #0
    680c:	60a2      	str	r2, [r4, #8]
    680e:	6962      	ldr	r2, [r4, #20]
    6810:	4252      	negs	r2, r2
    6812:	61a2      	str	r2, [r4, #24]
    6814:	6922      	ldr	r2, [r4, #16]
    6816:	b942      	cbnz	r2, 682a <__swsetup_r+0xc2>
    6818:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    681c:	d1bb      	bne.n	6796 <__swsetup_r+0x2e>
    681e:	bd70      	pop	{r4, r5, r6, pc}
    6820:	0799      	lsls	r1, r3, #30
    6822:	bf58      	it	pl
    6824:	6962      	ldrpl	r2, [r4, #20]
    6826:	60a2      	str	r2, [r4, #8]
    6828:	e7f4      	b.n	6814 <__swsetup_r+0xac>
    682a:	2000      	movs	r0, #0
    682c:	e7f7      	b.n	681e <__swsetup_r+0xb6>
    682e:	bf00      	nop
    6830:	00009978 	.word	0x00009978
    6834:	0000802c 	.word	0x0000802c
    6838:	0000800c 	.word	0x0000800c
    683c:	00007fec 	.word	0x00007fec

00006840 <_close_r>:
    6840:	b538      	push	{r3, r4, r5, lr}
    6842:	2300      	movs	r3, #0
    6844:	4d05      	ldr	r5, [pc, #20]	; (685c <_close_r+0x1c>)
    6846:	4604      	mov	r4, r0
    6848:	4608      	mov	r0, r1
    684a:	602b      	str	r3, [r5, #0]
    684c:	f000 fb61 	bl	6f12 <_close>
    6850:	1c43      	adds	r3, r0, #1
    6852:	d102      	bne.n	685a <_close_r+0x1a>
    6854:	682b      	ldr	r3, [r5, #0]
    6856:	b103      	cbz	r3, 685a <_close_r+0x1a>
    6858:	6023      	str	r3, [r4, #0]
    685a:	bd38      	pop	{r3, r4, r5, pc}
    685c:	00009da4 	.word	0x00009da4

00006860 <fileno>:
    6860:	b570      	push	{r4, r5, r6, lr}
    6862:	4e1c      	ldr	r6, [pc, #112]	; (68d4 <fileno+0x74>)
    6864:	4604      	mov	r4, r0
    6866:	6835      	ldr	r5, [r6, #0]
    6868:	b125      	cbz	r5, 6874 <fileno+0x14>
    686a:	69ab      	ldr	r3, [r5, #24]
    686c:	b913      	cbnz	r3, 6874 <fileno+0x14>
    686e:	4628      	mov	r0, r5
    6870:	f7fe ffc6 	bl	5800 <__sinit>
    6874:	4b18      	ldr	r3, [pc, #96]	; (68d8 <fileno+0x78>)
    6876:	429c      	cmp	r4, r3
    6878:	d114      	bne.n	68a4 <fileno+0x44>
    687a:	686c      	ldr	r4, [r5, #4]
    687c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    687e:	07d9      	lsls	r1, r3, #31
    6880:	d405      	bmi.n	688e <fileno+0x2e>
    6882:	89a3      	ldrh	r3, [r4, #12]
    6884:	059a      	lsls	r2, r3, #22
    6886:	d402      	bmi.n	688e <fileno+0x2e>
    6888:	6da0      	ldr	r0, [r4, #88]	; 0x58
    688a:	f000 fd37 	bl	72fc <__retarget_lock_acquire_recursive>
    688e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    6894:	f003 0301 	and.w	r3, r3, #1
    6898:	b172      	cbz	r2, 68b8 <fileno+0x58>
    689a:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
    689e:	b1b3      	cbz	r3, 68ce <fileno+0x6e>
    68a0:	4628      	mov	r0, r5
    68a2:	bd70      	pop	{r4, r5, r6, pc}
    68a4:	4b0d      	ldr	r3, [pc, #52]	; (68dc <fileno+0x7c>)
    68a6:	429c      	cmp	r4, r3
    68a8:	d101      	bne.n	68ae <fileno+0x4e>
    68aa:	68ac      	ldr	r4, [r5, #8]
    68ac:	e7e6      	b.n	687c <fileno+0x1c>
    68ae:	4b0c      	ldr	r3, [pc, #48]	; (68e0 <fileno+0x80>)
    68b0:	429c      	cmp	r4, r3
    68b2:	bf08      	it	eq
    68b4:	68ec      	ldreq	r4, [r5, #12]
    68b6:	e7e1      	b.n	687c <fileno+0x1c>
    68b8:	2109      	movs	r1, #9
    68ba:	6832      	ldr	r2, [r6, #0]
    68bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    68c0:	6011      	str	r1, [r2, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d1ec      	bne.n	68a0 <fileno+0x40>
    68c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68c8:	f000 fd19 	bl	72fe <__retarget_lock_release_recursive>
    68cc:	e7e8      	b.n	68a0 <fileno+0x40>
    68ce:	0593      	lsls	r3, r2, #22
    68d0:	d4e6      	bmi.n	68a0 <fileno+0x40>
    68d2:	e7f8      	b.n	68c6 <fileno+0x66>
    68d4:	00009978 	.word	0x00009978
    68d8:	0000802c 	.word	0x0000802c
    68dc:	0000800c 	.word	0x0000800c
    68e0:	00007fec 	.word	0x00007fec

000068e4 <__sfvwrite_r>:
    68e4:	6893      	ldr	r3, [r2, #8]
    68e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68ea:	4606      	mov	r6, r0
    68ec:	460c      	mov	r4, r1
    68ee:	4691      	mov	r9, r2
    68f0:	b91b      	cbnz	r3, 68fa <__sfvwrite_r+0x16>
    68f2:	2000      	movs	r0, #0
    68f4:	b003      	add	sp, #12
    68f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68fa:	898b      	ldrh	r3, [r1, #12]
    68fc:	0718      	lsls	r0, r3, #28
    68fe:	d547      	bpl.n	6990 <__sfvwrite_r+0xac>
    6900:	690b      	ldr	r3, [r1, #16]
    6902:	2b00      	cmp	r3, #0
    6904:	d044      	beq.n	6990 <__sfvwrite_r+0xac>
    6906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    690a:	f8d9 8000 	ldr.w	r8, [r9]
    690e:	f013 0702 	ands.w	r7, r3, #2
    6912:	d162      	bne.n	69da <__sfvwrite_r+0xf6>
    6914:	f013 0301 	ands.w	r3, r3, #1
    6918:	f000 8093 	beq.w	6a42 <__sfvwrite_r+0x15e>
    691c:	4638      	mov	r0, r7
    691e:	46bb      	mov	fp, r7
    6920:	46ba      	mov	sl, r7
    6922:	f1ba 0f00 	cmp.w	sl, #0
    6926:	f000 80fa 	beq.w	6b1e <__sfvwrite_r+0x23a>
    692a:	2800      	cmp	r0, #0
    692c:	f000 8101 	beq.w	6b32 <__sfvwrite_r+0x24e>
    6930:	6820      	ldr	r0, [r4, #0]
    6932:	6921      	ldr	r1, [r4, #16]
    6934:	4557      	cmp	r7, sl
    6936:	463a      	mov	r2, r7
    6938:	bf28      	it	cs
    693a:	4652      	movcs	r2, sl
    693c:	4288      	cmp	r0, r1
    693e:	68a5      	ldr	r5, [r4, #8]
    6940:	6963      	ldr	r3, [r4, #20]
    6942:	f240 8103 	bls.w	6b4c <__sfvwrite_r+0x268>
    6946:	441d      	add	r5, r3
    6948:	42aa      	cmp	r2, r5
    694a:	f340 80ff 	ble.w	6b4c <__sfvwrite_r+0x268>
    694e:	4659      	mov	r1, fp
    6950:	462a      	mov	r2, r5
    6952:	f000 fcf1 	bl	7338 <memmove>
    6956:	6823      	ldr	r3, [r4, #0]
    6958:	4621      	mov	r1, r4
    695a:	442b      	add	r3, r5
    695c:	4630      	mov	r0, r6
    695e:	6023      	str	r3, [r4, #0]
    6960:	f7fe fed0 	bl	5704 <_fflush_r>
    6964:	2800      	cmp	r0, #0
    6966:	d167      	bne.n	6a38 <__sfvwrite_r+0x154>
    6968:	1b7f      	subs	r7, r7, r5
    696a:	f040 8107 	bne.w	6b7c <__sfvwrite_r+0x298>
    696e:	4621      	mov	r1, r4
    6970:	4630      	mov	r0, r6
    6972:	f7fe fec7 	bl	5704 <_fflush_r>
    6976:	2800      	cmp	r0, #0
    6978:	d15e      	bne.n	6a38 <__sfvwrite_r+0x154>
    697a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    697e:	44ab      	add	fp, r5
    6980:	1b5b      	subs	r3, r3, r5
    6982:	ebaa 0a05 	sub.w	sl, sl, r5
    6986:	f8c9 3008 	str.w	r3, [r9, #8]
    698a:	2b00      	cmp	r3, #0
    698c:	d1c9      	bne.n	6922 <__sfvwrite_r+0x3e>
    698e:	e7b0      	b.n	68f2 <__sfvwrite_r+0xe>
    6990:	4621      	mov	r1, r4
    6992:	4630      	mov	r0, r6
    6994:	f7ff fee8 	bl	6768 <__swsetup_r>
    6998:	2800      	cmp	r0, #0
    699a:	d0b4      	beq.n	6906 <__sfvwrite_r+0x22>
    699c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    69a0:	e7a8      	b.n	68f4 <__sfvwrite_r+0x10>
    69a2:	e9d8 a500 	ldrd	sl, r5, [r8]
    69a6:	f108 0808 	add.w	r8, r8, #8
    69aa:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
    69ae:	6a21      	ldr	r1, [r4, #32]
    69b0:	2d00      	cmp	r5, #0
    69b2:	d0f6      	beq.n	69a2 <__sfvwrite_r+0xbe>
    69b4:	42bd      	cmp	r5, r7
    69b6:	462b      	mov	r3, r5
    69b8:	4652      	mov	r2, sl
    69ba:	bf28      	it	cs
    69bc:	463b      	movcs	r3, r7
    69be:	4630      	mov	r0, r6
    69c0:	47d8      	blx	fp
    69c2:	2800      	cmp	r0, #0
    69c4:	dd38      	ble.n	6a38 <__sfvwrite_r+0x154>
    69c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    69ca:	4482      	add	sl, r0
    69cc:	1a1b      	subs	r3, r3, r0
    69ce:	1a2d      	subs	r5, r5, r0
    69d0:	f8c9 3008 	str.w	r3, [r9, #8]
    69d4:	2b00      	cmp	r3, #0
    69d6:	d1e8      	bne.n	69aa <__sfvwrite_r+0xc6>
    69d8:	e78b      	b.n	68f2 <__sfvwrite_r+0xe>
    69da:	f04f 0a00 	mov.w	sl, #0
    69de:	4f68      	ldr	r7, [pc, #416]	; (6b80 <__sfvwrite_r+0x29c>)
    69e0:	4655      	mov	r5, sl
    69e2:	e7e2      	b.n	69aa <__sfvwrite_r+0xc6>
    69e4:	e9d8 7a00 	ldrd	r7, sl, [r8]
    69e8:	f108 0808 	add.w	r8, r8, #8
    69ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    69f0:	6820      	ldr	r0, [r4, #0]
    69f2:	68a2      	ldr	r2, [r4, #8]
    69f4:	f1ba 0f00 	cmp.w	sl, #0
    69f8:	d0f4      	beq.n	69e4 <__sfvwrite_r+0x100>
    69fa:	0599      	lsls	r1, r3, #22
    69fc:	d563      	bpl.n	6ac6 <__sfvwrite_r+0x1e2>
    69fe:	4552      	cmp	r2, sl
    6a00:	d836      	bhi.n	6a70 <__sfvwrite_r+0x18c>
    6a02:	f413 6f90 	tst.w	r3, #1152	; 0x480
    6a06:	d033      	beq.n	6a70 <__sfvwrite_r+0x18c>
    6a08:	6921      	ldr	r1, [r4, #16]
    6a0a:	6965      	ldr	r5, [r4, #20]
    6a0c:	eba0 0b01 	sub.w	fp, r0, r1
    6a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    6a18:	f10b 0201 	add.w	r2, fp, #1
    6a1c:	106d      	asrs	r5, r5, #1
    6a1e:	4452      	add	r2, sl
    6a20:	4295      	cmp	r5, r2
    6a22:	bf38      	it	cc
    6a24:	4615      	movcc	r5, r2
    6a26:	055b      	lsls	r3, r3, #21
    6a28:	d53d      	bpl.n	6aa6 <__sfvwrite_r+0x1c2>
    6a2a:	4629      	mov	r1, r5
    6a2c:	4630      	mov	r0, r6
    6a2e:	f7ff f8b9 	bl	5ba4 <_malloc_r>
    6a32:	b948      	cbnz	r0, 6a48 <__sfvwrite_r+0x164>
    6a34:	230c      	movs	r3, #12
    6a36:	6033      	str	r3, [r6, #0]
    6a38:	89a3      	ldrh	r3, [r4, #12]
    6a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a3e:	81a3      	strh	r3, [r4, #12]
    6a40:	e7ac      	b.n	699c <__sfvwrite_r+0xb8>
    6a42:	461f      	mov	r7, r3
    6a44:	469a      	mov	sl, r3
    6a46:	e7d1      	b.n	69ec <__sfvwrite_r+0x108>
    6a48:	465a      	mov	r2, fp
    6a4a:	6921      	ldr	r1, [r4, #16]
    6a4c:	9001      	str	r0, [sp, #4]
    6a4e:	f000 fc65 	bl	731c <memcpy>
    6a52:	89a2      	ldrh	r2, [r4, #12]
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    6a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6a5e:	81a2      	strh	r2, [r4, #12]
    6a60:	4652      	mov	r2, sl
    6a62:	6123      	str	r3, [r4, #16]
    6a64:	6165      	str	r5, [r4, #20]
    6a66:	445b      	add	r3, fp
    6a68:	eba5 050b 	sub.w	r5, r5, fp
    6a6c:	6023      	str	r3, [r4, #0]
    6a6e:	60a5      	str	r5, [r4, #8]
    6a70:	4552      	cmp	r2, sl
    6a72:	bf28      	it	cs
    6a74:	4652      	movcs	r2, sl
    6a76:	4655      	mov	r5, sl
    6a78:	4639      	mov	r1, r7
    6a7a:	6820      	ldr	r0, [r4, #0]
    6a7c:	9201      	str	r2, [sp, #4]
    6a7e:	f000 fc5b 	bl	7338 <memmove>
    6a82:	68a3      	ldr	r3, [r4, #8]
    6a84:	9a01      	ldr	r2, [sp, #4]
    6a86:	1a9b      	subs	r3, r3, r2
    6a88:	60a3      	str	r3, [r4, #8]
    6a8a:	6823      	ldr	r3, [r4, #0]
    6a8c:	4413      	add	r3, r2
    6a8e:	6023      	str	r3, [r4, #0]
    6a90:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6a94:	442f      	add	r7, r5
    6a96:	1b5b      	subs	r3, r3, r5
    6a98:	ebaa 0a05 	sub.w	sl, sl, r5
    6a9c:	f8c9 3008 	str.w	r3, [r9, #8]
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d1a3      	bne.n	69ec <__sfvwrite_r+0x108>
    6aa4:	e725      	b.n	68f2 <__sfvwrite_r+0xe>
    6aa6:	462a      	mov	r2, r5
    6aa8:	4630      	mov	r0, r6
    6aaa:	f000 fde9 	bl	7680 <_realloc_r>
    6aae:	4603      	mov	r3, r0
    6ab0:	2800      	cmp	r0, #0
    6ab2:	d1d5      	bne.n	6a60 <__sfvwrite_r+0x17c>
    6ab4:	4630      	mov	r0, r6
    6ab6:	6921      	ldr	r1, [r4, #16]
    6ab8:	f7ff f82c 	bl	5b14 <_free_r>
    6abc:	89a3      	ldrh	r3, [r4, #12]
    6abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6ac2:	81a3      	strh	r3, [r4, #12]
    6ac4:	e7b6      	b.n	6a34 <__sfvwrite_r+0x150>
    6ac6:	6923      	ldr	r3, [r4, #16]
    6ac8:	4283      	cmp	r3, r0
    6aca:	d302      	bcc.n	6ad2 <__sfvwrite_r+0x1ee>
    6acc:	6961      	ldr	r1, [r4, #20]
    6ace:	4551      	cmp	r1, sl
    6ad0:	d915      	bls.n	6afe <__sfvwrite_r+0x21a>
    6ad2:	4552      	cmp	r2, sl
    6ad4:	bf28      	it	cs
    6ad6:	4652      	movcs	r2, sl
    6ad8:	4615      	mov	r5, r2
    6ada:	4639      	mov	r1, r7
    6adc:	f000 fc2c 	bl	7338 <memmove>
    6ae0:	68a3      	ldr	r3, [r4, #8]
    6ae2:	6822      	ldr	r2, [r4, #0]
    6ae4:	1b5b      	subs	r3, r3, r5
    6ae6:	442a      	add	r2, r5
    6ae8:	60a3      	str	r3, [r4, #8]
    6aea:	6022      	str	r2, [r4, #0]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d1cf      	bne.n	6a90 <__sfvwrite_r+0x1ac>
    6af0:	4621      	mov	r1, r4
    6af2:	4630      	mov	r0, r6
    6af4:	f7fe fe06 	bl	5704 <_fflush_r>
    6af8:	2800      	cmp	r0, #0
    6afa:	d0c9      	beq.n	6a90 <__sfvwrite_r+0x1ac>
    6afc:	e79c      	b.n	6a38 <__sfvwrite_r+0x154>
    6afe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    6b02:	4553      	cmp	r3, sl
    6b04:	bf28      	it	cs
    6b06:	4653      	movcs	r3, sl
    6b08:	fb93 f3f1 	sdiv	r3, r3, r1
    6b0c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    6b0e:	434b      	muls	r3, r1
    6b10:	463a      	mov	r2, r7
    6b12:	4630      	mov	r0, r6
    6b14:	6a21      	ldr	r1, [r4, #32]
    6b16:	47a8      	blx	r5
    6b18:	1e05      	subs	r5, r0, #0
    6b1a:	dcb9      	bgt.n	6a90 <__sfvwrite_r+0x1ac>
    6b1c:	e78c      	b.n	6a38 <__sfvwrite_r+0x154>
    6b1e:	f8d8 a004 	ldr.w	sl, [r8, #4]
    6b22:	4643      	mov	r3, r8
    6b24:	f108 0808 	add.w	r8, r8, #8
    6b28:	f1ba 0f00 	cmp.w	sl, #0
    6b2c:	d0f7      	beq.n	6b1e <__sfvwrite_r+0x23a>
    6b2e:	f8d3 b000 	ldr.w	fp, [r3]
    6b32:	4652      	mov	r2, sl
    6b34:	210a      	movs	r1, #10
    6b36:	4658      	mov	r0, fp
    6b38:	f000 fbe2 	bl	7300 <memchr>
    6b3c:	b118      	cbz	r0, 6b46 <__sfvwrite_r+0x262>
    6b3e:	3001      	adds	r0, #1
    6b40:	eba0 070b 	sub.w	r7, r0, fp
    6b44:	e6f4      	b.n	6930 <__sfvwrite_r+0x4c>
    6b46:	f10a 0701 	add.w	r7, sl, #1
    6b4a:	e6f1      	b.n	6930 <__sfvwrite_r+0x4c>
    6b4c:	4293      	cmp	r3, r2
    6b4e:	dc08      	bgt.n	6b62 <__sfvwrite_r+0x27e>
    6b50:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    6b52:	465a      	mov	r2, fp
    6b54:	4630      	mov	r0, r6
    6b56:	6a21      	ldr	r1, [r4, #32]
    6b58:	47a8      	blx	r5
    6b5a:	1e05      	subs	r5, r0, #0
    6b5c:	f73f af04 	bgt.w	6968 <__sfvwrite_r+0x84>
    6b60:	e76a      	b.n	6a38 <__sfvwrite_r+0x154>
    6b62:	4659      	mov	r1, fp
    6b64:	9201      	str	r2, [sp, #4]
    6b66:	f000 fbe7 	bl	7338 <memmove>
    6b6a:	9a01      	ldr	r2, [sp, #4]
    6b6c:	68a3      	ldr	r3, [r4, #8]
    6b6e:	4615      	mov	r5, r2
    6b70:	1a9b      	subs	r3, r3, r2
    6b72:	60a3      	str	r3, [r4, #8]
    6b74:	6823      	ldr	r3, [r4, #0]
    6b76:	4413      	add	r3, r2
    6b78:	6023      	str	r3, [r4, #0]
    6b7a:	e6f5      	b.n	6968 <__sfvwrite_r+0x84>
    6b7c:	2001      	movs	r0, #1
    6b7e:	e6fc      	b.n	697a <__sfvwrite_r+0x96>
    6b80:	7ffffc00 	.word	0x7ffffc00

00006b84 <_lseek_r>:
    6b84:	b538      	push	{r3, r4, r5, lr}
    6b86:	4604      	mov	r4, r0
    6b88:	4608      	mov	r0, r1
    6b8a:	4611      	mov	r1, r2
    6b8c:	2200      	movs	r2, #0
    6b8e:	4d05      	ldr	r5, [pc, #20]	; (6ba4 <_lseek_r+0x20>)
    6b90:	602a      	str	r2, [r5, #0]
    6b92:	461a      	mov	r2, r3
    6b94:	f000 f9c0 	bl	6f18 <_lseek>
    6b98:	1c43      	adds	r3, r0, #1
    6b9a:	d102      	bne.n	6ba2 <_lseek_r+0x1e>
    6b9c:	682b      	ldr	r3, [r5, #0]
    6b9e:	b103      	cbz	r3, 6ba2 <_lseek_r+0x1e>
    6ba0:	6023      	str	r3, [r4, #0]
    6ba2:	bd38      	pop	{r3, r4, r5, pc}
    6ba4:	00009da4 	.word	0x00009da4

00006ba8 <__smakebuf_r>:
    6ba8:	898b      	ldrh	r3, [r1, #12]
    6baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6bac:	079d      	lsls	r5, r3, #30
    6bae:	4606      	mov	r6, r0
    6bb0:	460c      	mov	r4, r1
    6bb2:	d507      	bpl.n	6bc4 <__smakebuf_r+0x1c>
    6bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    6bb8:	6023      	str	r3, [r4, #0]
    6bba:	6123      	str	r3, [r4, #16]
    6bbc:	2301      	movs	r3, #1
    6bbe:	6163      	str	r3, [r4, #20]
    6bc0:	b003      	add	sp, #12
    6bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bc4:	466a      	mov	r2, sp
    6bc6:	ab01      	add	r3, sp, #4
    6bc8:	f000 fd35 	bl	7636 <__swhatbuf_r>
    6bcc:	9f00      	ldr	r7, [sp, #0]
    6bce:	4605      	mov	r5, r0
    6bd0:	4639      	mov	r1, r7
    6bd2:	4630      	mov	r0, r6
    6bd4:	f7fe ffe6 	bl	5ba4 <_malloc_r>
    6bd8:	b948      	cbnz	r0, 6bee <__smakebuf_r+0x46>
    6bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6bde:	059a      	lsls	r2, r3, #22
    6be0:	d4ee      	bmi.n	6bc0 <__smakebuf_r+0x18>
    6be2:	f023 0303 	bic.w	r3, r3, #3
    6be6:	f043 0302 	orr.w	r3, r3, #2
    6bea:	81a3      	strh	r3, [r4, #12]
    6bec:	e7e2      	b.n	6bb4 <__smakebuf_r+0xc>
    6bee:	4b0d      	ldr	r3, [pc, #52]	; (6c24 <__smakebuf_r+0x7c>)
    6bf0:	62b3      	str	r3, [r6, #40]	; 0x28
    6bf2:	89a3      	ldrh	r3, [r4, #12]
    6bf4:	e9c4 0704 	strd	r0, r7, [r4, #16]
    6bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6bfc:	81a3      	strh	r3, [r4, #12]
    6bfe:	9b01      	ldr	r3, [sp, #4]
    6c00:	6020      	str	r0, [r4, #0]
    6c02:	b15b      	cbz	r3, 6c1c <__smakebuf_r+0x74>
    6c04:	4630      	mov	r0, r6
    6c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6c0a:	f000 f831 	bl	6c70 <_isatty_r>
    6c0e:	b128      	cbz	r0, 6c1c <__smakebuf_r+0x74>
    6c10:	89a3      	ldrh	r3, [r4, #12]
    6c12:	f023 0303 	bic.w	r3, r3, #3
    6c16:	f043 0301 	orr.w	r3, r3, #1
    6c1a:	81a3      	strh	r3, [r4, #12]
    6c1c:	89a3      	ldrh	r3, [r4, #12]
    6c1e:	431d      	orrs	r5, r3
    6c20:	81a5      	strh	r5, [r4, #12]
    6c22:	e7cd      	b.n	6bc0 <__smakebuf_r+0x18>
    6c24:	000057c5 	.word	0x000057c5

00006c28 <_read_r>:
    6c28:	b538      	push	{r3, r4, r5, lr}
    6c2a:	4604      	mov	r4, r0
    6c2c:	4608      	mov	r0, r1
    6c2e:	4611      	mov	r1, r2
    6c30:	2200      	movs	r2, #0
    6c32:	4d05      	ldr	r5, [pc, #20]	; (6c48 <_read_r+0x20>)
    6c34:	602a      	str	r2, [r5, #0]
    6c36:	461a      	mov	r2, r3
    6c38:	f000 f963 	bl	6f02 <_read>
    6c3c:	1c43      	adds	r3, r0, #1
    6c3e:	d102      	bne.n	6c46 <_read_r+0x1e>
    6c40:	682b      	ldr	r3, [r5, #0]
    6c42:	b103      	cbz	r3, 6c46 <_read_r+0x1e>
    6c44:	6023      	str	r3, [r4, #0]
    6c46:	bd38      	pop	{r3, r4, r5, pc}
    6c48:	00009da4 	.word	0x00009da4

00006c4c <_fstat_r>:
    6c4c:	b538      	push	{r3, r4, r5, lr}
    6c4e:	2300      	movs	r3, #0
    6c50:	4d06      	ldr	r5, [pc, #24]	; (6c6c <_fstat_r+0x20>)
    6c52:	4604      	mov	r4, r0
    6c54:	4608      	mov	r0, r1
    6c56:	4611      	mov	r1, r2
    6c58:	602b      	str	r3, [r5, #0]
    6c5a:	f000 f968 	bl	6f2e <_fstat>
    6c5e:	1c43      	adds	r3, r0, #1
    6c60:	d102      	bne.n	6c68 <_fstat_r+0x1c>
    6c62:	682b      	ldr	r3, [r5, #0]
    6c64:	b103      	cbz	r3, 6c68 <_fstat_r+0x1c>
    6c66:	6023      	str	r3, [r4, #0]
    6c68:	bd38      	pop	{r3, r4, r5, pc}
    6c6a:	bf00      	nop
    6c6c:	00009da4 	.word	0x00009da4

00006c70 <_isatty_r>:
    6c70:	b538      	push	{r3, r4, r5, lr}
    6c72:	2300      	movs	r3, #0
    6c74:	4d05      	ldr	r5, [pc, #20]	; (6c8c <_isatty_r+0x1c>)
    6c76:	4604      	mov	r4, r0
    6c78:	4608      	mov	r0, r1
    6c7a:	602b      	str	r3, [r5, #0]
    6c7c:	f000 f94e 	bl	6f1c <_isatty>
    6c80:	1c43      	adds	r3, r0, #1
    6c82:	d102      	bne.n	6c8a <_isatty_r+0x1a>
    6c84:	682b      	ldr	r3, [r5, #0]
    6c86:	b103      	cbz	r3, 6c8a <_isatty_r+0x1a>
    6c88:	6023      	str	r3, [r4, #0]
    6c8a:	bd38      	pop	{r3, r4, r5, pc}
    6c8c:	00009da4 	.word	0x00009da4

00006c90 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6c90:	4770      	bx	lr

00006c92 <arch_printk_char_out>:
}
    6c92:	2000      	movs	r0, #0
    6c94:	4770      	bx	lr

00006c96 <str_out>:
{
    6c96:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6c98:	688a      	ldr	r2, [r1, #8]
    6c9a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    6c9c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6c9e:	b114      	cbz	r4, 6ca6 <str_out+0x10>
    6ca0:	684b      	ldr	r3, [r1, #4]
    6ca2:	4293      	cmp	r3, r2
    6ca4:	dc01      	bgt.n	6caa <str_out+0x14>
		ctx->count++;
    6ca6:	608d      	str	r5, [r1, #8]
}
    6ca8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    6caa:	3b01      	subs	r3, #1
    6cac:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    6cae:	bf08      	it	eq
    6cb0:	2200      	moveq	r2, #0
    6cb2:	608d      	str	r5, [r1, #8]
    6cb4:	bf0c      	ite	eq
    6cb6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    6cb8:	54a0      	strbne	r0, [r4, r2]
    6cba:	e7f5      	b.n	6ca8 <str_out+0x12>

00006cbc <printk>:
{
    6cbc:	b40f      	push	{r0, r1, r2, r3}
    6cbe:	b507      	push	{r0, r1, r2, lr}
    6cc0:	a904      	add	r1, sp, #16
    6cc2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    6cc6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    6cc8:	f7f9 fd88 	bl	7dc <vprintk>
}
    6ccc:	b003      	add	sp, #12
    6cce:	f85d eb04 	ldr.w	lr, [sp], #4
    6cd2:	b004      	add	sp, #16
    6cd4:	4770      	bx	lr

00006cd6 <snprintk>:
{
    6cd6:	b40c      	push	{r2, r3}
    6cd8:	b507      	push	{r0, r1, r2, lr}
    6cda:	ab04      	add	r3, sp, #16
    6cdc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6ce0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    6ce2:	f7f9 fd89 	bl	7f8 <vsnprintk>
}
    6ce6:	b003      	add	sp, #12
    6ce8:	f85d eb04 	ldr.w	lr, [sp], #4
    6cec:	b002      	add	sp, #8
    6cee:	4770      	bx	lr

00006cf0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6cf0:	4604      	mov	r4, r0
    6cf2:	b508      	push	{r3, lr}
    6cf4:	4608      	mov	r0, r1
    6cf6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    6cf8:	461a      	mov	r2, r3
    6cfa:	47a0      	blx	r4
	return z_impl_k_current_get();
    6cfc:	f7fd fdcc 	bl	4898 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    6d00:	f7fa fef8 	bl	1af4 <z_impl_k_thread_abort>

00006d04 <chunk_field>:
	if (big_heap(h)) {
    6d04:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    6d06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    6d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    6d0e:	bf2c      	ite	cs
    6d10:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
    6d14:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
    6d18:	4770      	bx	lr

00006d1a <chunk_set>:
	void *cmem = &buf[c];
    6d1a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    6d1e:	6880      	ldr	r0, [r0, #8]
    6d20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
    6d24:	bf2c      	ite	cs
    6d26:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
    6d2a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
    6d2e:	4770      	bx	lr

00006d30 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    6d30:	2201      	movs	r2, #1
{
    6d32:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    6d34:	f7ff ffe6 	bl	6d04 <chunk_field>
}
    6d38:	40d0      	lsrs	r0, r2
    6d3a:	bd08      	pop	{r3, pc}

00006d3c <set_chunk_used>:
	if (big_heap(h)) {
    6d3c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    6d3e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    6d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6d46:	d308      	bcc.n	6d5a <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    6d48:	684b      	ldr	r3, [r1, #4]
		if (used) {
    6d4a:	b11a      	cbz	r2, 6d54 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    6d4c:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    6d50:	604b      	str	r3, [r1, #4]
    6d52:	4770      	bx	lr
    6d54:	f023 0301 	bic.w	r3, r3, #1
    6d58:	e7fa      	b.n	6d50 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6d5a:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    6d5c:	b11a      	cbz	r2, 6d66 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6d5e:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    6d62:	804b      	strh	r3, [r1, #2]
}
    6d64:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    6d66:	f023 0301 	bic.w	r3, r3, #1
    6d6a:	e7fa      	b.n	6d62 <set_chunk_used+0x26>

00006d6c <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6d6c:	0053      	lsls	r3, r2, #1
    6d6e:	2201      	movs	r2, #1
    6d70:	f7ff bfd3 	b.w	6d1a <chunk_set>

00006d74 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
    6d74:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    6d78:	bf34      	ite	cc
    6d7a:	2304      	movcc	r3, #4
    6d7c:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    6d7e:	3107      	adds	r1, #7
    6d80:	18c8      	adds	r0, r1, r3
}
    6d82:	08c0      	lsrs	r0, r0, #3
    6d84:	4770      	bx	lr

00006d86 <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
    6d86:	460a      	mov	r2, r1
    6d88:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
    6d8a:	2101      	movs	r1, #1
    6d8c:	f7ff fff2 	bl	6d74 <bytes_to_chunksz.isra.0>
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    6d90:	3201      	adds	r2, #1
    6d92:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
    6d94:	fab2 f082 	clz	r0, r2
}
    6d98:	f1c0 001f 	rsb	r0, r0, #31
    6d9c:	bd08      	pop	{r3, pc}

00006d9e <free_list_add>:
{
    6d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6da2:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    6da4:	6886      	ldr	r6, [r0, #8]
    6da6:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    6da8:	f7ff ffc2 	bl	6d30 <chunk_size>
    6dac:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    6db0:	4601      	mov	r1, r0
    6db2:	d301      	bcc.n	6db8 <free_list_add+0x1a>
    6db4:	2801      	cmp	r0, #1
    6db6:	d032      	beq.n	6e1e <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
    6db8:	4630      	mov	r0, r6
    6dba:	f7ff ffe4 	bl	6d86 <bucket_idx.isra.0>
	if (b->next == 0U) {
    6dbe:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    6dc2:	690e      	ldr	r6, [r1, #16]
    6dc4:	b996      	cbnz	r6, 6dec <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
    6dc6:	2201      	movs	r2, #1
    6dc8:	68e3      	ldr	r3, [r4, #12]
    6dca:	4082      	lsls	r2, r0
    6dcc:	4313      	orrs	r3, r2
    6dce:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    6dd0:	2202      	movs	r2, #2
		b->next = c;
    6dd2:	610d      	str	r5, [r1, #16]
    6dd4:	462b      	mov	r3, r5
    6dd6:	4629      	mov	r1, r5
    6dd8:	4620      	mov	r0, r4
    6dda:	f7ff ff9e 	bl	6d1a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    6dde:	2203      	movs	r2, #3
    6de0:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    6de2:	4620      	mov	r0, r4
}
    6de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6de8:	f7ff bf97 	b.w	6d1a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    6dec:	2202      	movs	r2, #2
    6dee:	4631      	mov	r1, r6
    6df0:	4620      	mov	r0, r4
    6df2:	f7ff ff87 	bl	6d04 <chunk_field>
    6df6:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    6df8:	4603      	mov	r3, r0
    6dfa:	4629      	mov	r1, r5
    6dfc:	4620      	mov	r0, r4
    6dfe:	f7ff ff8c 	bl	6d1a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    6e02:	2203      	movs	r2, #3
    6e04:	4633      	mov	r3, r6
    6e06:	4629      	mov	r1, r5
    6e08:	4620      	mov	r0, r4
    6e0a:	f7ff ff86 	bl	6d1a <chunk_set>
    6e0e:	4639      	mov	r1, r7
    6e10:	462b      	mov	r3, r5
    6e12:	4620      	mov	r0, r4
    6e14:	f7ff ff81 	bl	6d1a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    6e18:	2202      	movs	r2, #2
    6e1a:	4631      	mov	r1, r6
    6e1c:	e7e1      	b.n	6de2 <free_list_add+0x44>
    6e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e22 <outs>:
{
    6e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e26:	4607      	mov	r7, r0
    6e28:	4688      	mov	r8, r1
    6e2a:	4615      	mov	r5, r2
    6e2c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6e2e:	4614      	mov	r4, r2
    6e30:	42b4      	cmp	r4, r6
    6e32:	d305      	bcc.n	6e40 <outs+0x1e>
    6e34:	b10e      	cbz	r6, 6e3a <outs+0x18>
	return (int)count;
    6e36:	1b60      	subs	r0, r4, r5
    6e38:	e008      	b.n	6e4c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6e3a:	7823      	ldrb	r3, [r4, #0]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d0fa      	beq.n	6e36 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6e40:	4641      	mov	r1, r8
    6e42:	f814 0b01 	ldrb.w	r0, [r4], #1
    6e46:	47b8      	blx	r7
		if (rc < 0) {
    6e48:	2800      	cmp	r0, #0
    6e4a:	daf1      	bge.n	6e30 <outs+0xe>
}
    6e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e50 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6e50:	4040      	eors	r0, r0
    6e52:	f380 8811 	msr	BASEPRI, r0
    6e56:	f04f 0004 	mov.w	r0, #4
    6e5a:	df02      	svc	2
}
    6e5c:	4770      	bx	lr

00006e5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6e5e:	4770      	bx	lr

00006e60 <aspeed_clock_control_on>:
	if (clk_gate >= ASPEED_CLK_GRP_2_OFFSET) {
    6e60:	293f      	cmp	r1, #63	; 0x3f
    6e62:	d809      	bhi.n	6e78 <aspeed_clock_control_on+0x18>
	sys_write32(BIT(clk_gate), addr);
    6e64:	2201      	movs	r2, #1
	uint32_t addr = DEV_CFG(dev)->base + 0x84;
    6e66:	6843      	ldr	r3, [r0, #4]
	if (clk_gate >= ASPEED_CLK_GRP_1_OFFSET) {
    6e68:	291f      	cmp	r1, #31
	uint32_t addr = DEV_CFG(dev)->base + 0x84;
    6e6a:	681b      	ldr	r3, [r3, #0]
		clk_gate -= ASPEED_CLK_GRP_1_OFFSET;
    6e6c:	bf8a      	itet	hi
    6e6e:	3920      	subhi	r1, #32
	uint32_t addr = DEV_CFG(dev)->base + 0x84;
    6e70:	3384      	addls	r3, #132	; 0x84
		addr += 0x10;
    6e72:	3394      	addhi	r3, #148	; 0x94
	sys_write32(BIT(clk_gate), addr);
    6e74:	408a      	lsls	r2, r1
    6e76:	601a      	str	r2, [r3, #0]
}
    6e78:	2000      	movs	r0, #0
    6e7a:	4770      	bx	lr

00006e7c <aspeed_clock_control_off>:
	if (clk_gate >= ASPEED_CLK_GRP_2_OFFSET) {
    6e7c:	293f      	cmp	r1, #63	; 0x3f
    6e7e:	d809      	bhi.n	6e94 <aspeed_clock_control_off+0x18>
	sys_write32(BIT(clk_gate), addr);
    6e80:	2201      	movs	r2, #1
	uint32_t addr = DEV_CFG(dev)->base + 0x80;
    6e82:	6843      	ldr	r3, [r0, #4]
	if (clk_gate >= ASPEED_CLK_GRP_1_OFFSET) {
    6e84:	291f      	cmp	r1, #31
	uint32_t addr = DEV_CFG(dev)->base + 0x80;
    6e86:	681b      	ldr	r3, [r3, #0]
		clk_gate -= ASPEED_CLK_GRP_1_OFFSET;
    6e88:	bf8a      	itet	hi
    6e8a:	3920      	subhi	r1, #32
	uint32_t addr = DEV_CFG(dev)->base + 0x80;
    6e8c:	3380      	addls	r3, #128	; 0x80
		addr += 0x10;
    6e8e:	3390      	addhi	r3, #144	; 0x90
	sys_write32(BIT(clk_gate), addr);
    6e90:	408a      	lsls	r2, r1
    6e92:	601a      	str	r2, [r3, #0]
}
    6e94:	2000      	movs	r0, #0
    6e96:	4770      	bx	lr

00006e98 <aspeed_clock_control_init>:

static int aspeed_clock_control_init(const struct device *dev)
{
	return 0;
}
    6e98:	2000      	movs	r0, #0
    6e9a:	4770      	bx	lr

00006e9c <aspeed_reset_control_deassert>:
					 reset_control_subsys_t sub_system)
{
	uint32_t rst_id = (uint32_t) sub_system;
	uint32_t scu_base = DEV_CFG(dev)->base;

	sys_write32(BIT(GET_RST_BIT(rst_id)),
    6e9c:	2301      	movs	r3, #1
    6e9e:	b2ca      	uxtb	r2, r1
    6ea0:	4093      	lsls	r3, r2
	uint32_t scu_base = DEV_CFG(dev)->base;
    6ea2:	6842      	ldr	r2, [r0, #4]
		    scu_base + GET_DEASSERT_OFFSET(rst_id));
    6ea4:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6ea8:	6812      	ldr	r2, [r2, #0]
	/* Add dummy read to ensure reset clear is finished */
	sys_read32(scu_base + GET_DEASSERT_OFFSET(rst_id));
	LOG_DBG("Deassert offset:0x%08x bit:%d", GET_DEASSERT_OFFSET(rst_id),
		GET_RST_BIT(rst_id));
	return 0;
}
    6eaa:	2000      	movs	r0, #0
    6eac:	508b      	str	r3, [r1, r2]
	return *(volatile uint32_t *)addr;
    6eae:	588b      	ldr	r3, [r1, r2]
    6eb0:	4770      	bx	lr

00006eb2 <aspeed_reset_control_assert>:
				       reset_control_subsys_t sub_system)
{
	uint32_t rst_id = (uint32_t) sub_system;
	uint32_t scu_base = DEV_CFG(dev)->base;

	sys_write32(BIT(GET_RST_BIT(rst_id)),
    6eb2:	2301      	movs	r3, #1
    6eb4:	b2ca      	uxtb	r2, r1
    6eb6:	4093      	lsls	r3, r2
	uint32_t scu_base = DEV_CFG(dev)->base;
    6eb8:	6842      	ldr	r2, [r0, #4]
		    scu_base + GET_ASSERT_OFFSET(rst_id));
    6eba:	f3c1 4107 	ubfx	r1, r1, #16, #8
    6ebe:	6812      	ldr	r2, [r2, #0]
	LOG_DBG("Assert offset:0x%08x bit:%d", GET_ASSERT_OFFSET(rst_id),
		GET_RST_BIT(rst_id));
	return 0;
}
    6ec0:	2000      	movs	r0, #0
	*(volatile uint32_t *)addr = data;
    6ec2:	508b      	str	r3, [r1, r2]
    6ec4:	4770      	bx	lr

00006ec6 <aspeed_reset_control_init>:


static int aspeed_reset_control_init(const struct device *dev)
{
	return 0;
}
    6ec6:	2000      	movs	r0, #0
    6ec8:	4770      	bx	lr

00006eca <pinmux_aspeed_pullup>:
}
    6eca:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6ece:	4770      	bx	lr

00006ed0 <pinmux_aspeed_input>:
static int pinmux_aspeed_input(const struct device *dev,
    6ed0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6ed4:	4770      	bx	lr

00006ed6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6ed6:	2100      	movs	r1, #0
    6ed8:	2001      	movs	r0, #1
    6eda:	f000 b800 	b.w	6ede <z_arm_fatal_error>

00006ede <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6ede:	f7fc b83d 	b.w	2f5c <z_fatal_error>

00006ee2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6ee2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6ee4:	6800      	ldr	r0, [r0, #0]
    6ee6:	f7fc b839 	b.w	2f5c <z_fatal_error>

00006eea <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6eea:	b508      	push	{r3, lr}
	handler();
    6eec:	f7fa fc98 	bl	1820 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6ef4:	f7fa bdde 	b.w	1ab4 <z_arm_exc_exit>

00006ef8 <_stdout_hook_default>:
}
    6ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6efc:	4770      	bx	lr

00006efe <_stdin_hook_default>:
}
    6efe:	2000      	movs	r0, #0
    6f00:	4770      	bx	lr

00006f02 <_read>:
{
    6f02:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
    6f04:	4611      	mov	r1, r2
    6f06:	f7fa be2d 	b.w	1b64 <z_impl_zephyr_read_stdin>

00006f0a <_write>:
{
    6f0a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
    6f0c:	4611      	mov	r1, r2
    6f0e:	f7fa be3d 	b.w	1b8c <z_impl_zephyr_write_stdout>

00006f12 <_close>:
int _close(int file)
    6f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f16:	4770      	bx	lr

00006f18 <_lseek>:
}
    6f18:	2000      	movs	r0, #0
    6f1a:	4770      	bx	lr

00006f1c <_isatty>:
}
    6f1c:	2802      	cmp	r0, #2
    6f1e:	bfcc      	ite	gt
    6f20:	2000      	movgt	r0, #0
    6f22:	2001      	movle	r0, #1
    6f24:	4770      	bx	lr

00006f26 <_kill>:
}
    6f26:	2000      	movs	r0, #0
    6f28:	4770      	bx	lr

00006f2a <_getpid>:
}
    6f2a:	2000      	movs	r0, #0
    6f2c:	4770      	bx	lr

00006f2e <_fstat>:
	st->st_mode = S_IFCHR;
    6f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
    6f32:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    6f34:	604b      	str	r3, [r1, #4]
}
    6f36:	4770      	bx	lr

00006f38 <uart_aspeed_config_get>:
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    6f38:	6903      	ldr	r3, [r0, #16]
}
    6f3a:	2000      	movs	r0, #0
	uart_cfg->baudrate = data->uart_cfg.baudrate;
    6f3c:	685a      	ldr	r2, [r3, #4]
    6f3e:	600a      	str	r2, [r1, #0]
	uart_cfg->parity = data->uart_cfg.parity;
    6f40:	7a1a      	ldrb	r2, [r3, #8]
    6f42:	710a      	strb	r2, [r1, #4]
	uart_cfg->stop_bits = data->uart_cfg.stop_bits;
    6f44:	7a5a      	ldrb	r2, [r3, #9]
    6f46:	714a      	strb	r2, [r1, #5]
	uart_cfg->data_bits = data->uart_cfg.data_bits;
    6f48:	7a9a      	ldrb	r2, [r3, #10]
    6f4a:	718a      	strb	r2, [r1, #6]
	uart_cfg->flow_ctrl = data->uart_cfg.flow_ctrl;
    6f4c:	7adb      	ldrb	r3, [r3, #11]
    6f4e:	71cb      	strb	r3, [r1, #7]
}
    6f50:	4770      	bx	lr

00006f52 <uart_aspeed_isr>:
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    6f52:	6902      	ldr	r2, [r0, #16]
	if (data->cb)
    6f54:	69d3      	ldr	r3, [r2, #28]
    6f56:	b10b      	cbz	r3, 6f5c <uart_aspeed_isr+0xa>
		data->cb(dev, data->cb_data);
    6f58:	6a11      	ldr	r1, [r2, #32]
    6f5a:	4718      	bx	r3
}
    6f5c:	4770      	bx	lr

00006f5e <uart_aspeed_irq_config_func_0>:
			      &uart_aspeed_data_##n, &uart_aspeed_config_##n,			\
			      PRE_KERNEL_1,							\
			      CONFIG_KERNEL_INIT_PRIORITY_DEVICE,				\
			      &uart_aspeed_driver_api);

DT_INST_FOREACH_STATUS_OKAY(UART_ASPEED_INIT)
    6f5e:	b508      	push	{r3, lr}
    6f60:	6843      	ldr	r3, [r0, #4]
    6f62:	f893 2020 	ldrb.w	r2, [r3, #32]
    6f66:	b942      	cbnz	r2, 6f7a <uart_aspeed_irq_config_func_0+0x1c>
    6f68:	203e      	movs	r0, #62	; 0x3e
    6f6a:	2101      	movs	r1, #1
    6f6c:	f7fa fbe4 	bl	1738 <z_arm_irq_priority_set>
    6f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6f74:	203e      	movs	r0, #62	; 0x3e
    6f76:	f7fa bbd1 	b.w	171c <arch_irq_enable>
    6f7a:	bd08      	pop	{r3, pc}

00006f7c <z_device_state_init>:
}
    6f7c:	4770      	bx	lr

00006f7e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6f7e:	b138      	cbz	r0, 6f90 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6f80:	68c3      	ldr	r3, [r0, #12]
    6f82:	8818      	ldrh	r0, [r3, #0]
    6f84:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6f88:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6f8c:	4258      	negs	r0, r3
    6f8e:	4158      	adcs	r0, r3
}
    6f90:	4770      	bx	lr

00006f92 <arch_system_halt>:
	__asm__ volatile(
    6f92:	f04f 0220 	mov.w	r2, #32
    6f96:	f3ef 8311 	mrs	r3, BASEPRI
    6f9a:	f382 8811 	msr	BASEPRI, r2
    6f9e:	f3bf 8f6f 	isb	sy
	for (;;) {
    6fa2:	e7fe      	b.n	6fa2 <arch_system_halt+0x10>

00006fa4 <k_sys_fatal_error_handler>:
{
    6fa4:	b508      	push	{r3, lr}
	arch_system_halt(reason);
    6fa6:	f7ff fff4 	bl	6f92 <arch_system_halt>

00006faa <k_is_in_isr>:
    6faa:	f3ef 8005 	mrs	r0, IPSR
}
    6fae:	3800      	subs	r0, #0
    6fb0:	bf18      	it	ne
    6fb2:	2001      	movne	r0, #1
    6fb4:	4770      	bx	lr

00006fb6 <z_impl_k_thread_start>:
	z_sched_start(thread);
    6fb6:	f7fc bef3 	b.w	3da0 <z_sched_start>

00006fba <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6fba:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6fbe:	428b      	cmp	r3, r1
    6fc0:	d001      	beq.n	6fc6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6fc2:	f7fd ba07 	b.w	43d4 <z_set_prio>
}
    6fc6:	2000      	movs	r0, #0
    6fc8:	4770      	bx	lr

00006fca <z_swap_irqlock>:
{
    6fca:	b510      	push	{r4, lr}
    6fcc:	4604      	mov	r4, r0
	z_check_stack_sentinel();
    6fce:	f7fc f917 	bl	3200 <z_check_stack_sentinel>
	ret = arch_swap(key);
    6fd2:	4620      	mov	r0, r4
}
    6fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    6fd8:	f7fa bb4e 	b.w	1678 <arch_swap>

00006fdc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6fdc:	4603      	mov	r3, r0
    6fde:	b920      	cbnz	r0, 6fea <z_reschedule_irqlock+0xe>
    6fe0:	f3ef 8205 	mrs	r2, IPSR
    6fe4:	b90a      	cbnz	r2, 6fea <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
    6fe6:	f7ff bff0 	b.w	6fca <z_swap_irqlock>
	__asm__ volatile(
    6fea:	f383 8811 	msr	BASEPRI, r3
    6fee:	f3bf 8f6f 	isb	sy
}
    6ff2:	4770      	bx	lr

00006ff4 <z_reschedule_unlocked>:
	__asm__ volatile(
    6ff4:	f04f 0320 	mov.w	r3, #32
    6ff8:	f3ef 8011 	mrs	r0, BASEPRI
    6ffc:	f383 8811 	msr	BASEPRI, r3
    7000:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7004:	f7ff bfea 	b.w	6fdc <z_reschedule_irqlock>

00007008 <z_handle_obj_poll_events>:
{
    7008:	4603      	mov	r3, r0
	return list->head == list;
    700a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    700c:	4283      	cmp	r3, r0
    700e:	d008      	beq.n	7022 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    7010:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7014:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7016:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7018:	2300      	movs	r3, #0
	node->prev = NULL;
    701a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    701e:	f7fd bfe7 	b.w	4ff0 <signal_poll_event>
}
    7022:	4770      	bx	lr

00007024 <k_heap_init>:
{
    7024:	b410      	push	{r4}
    7026:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    702a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    702e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    7030:	f7f9 bbf6 	b.w	820 <sys_heap_init>

00007034 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    7034:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    7036:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    7038:	408b      	lsls	r3, r1
    703a:	ea22 0303 	bic.w	r3, r2, r3
    703e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    7040:	fa22 f001 	lsr.w	r0, r2, r1
}
    7044:	f000 0001 	and.w	r0, r0, #1
    7048:	4770      	bx	lr

0000704a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    704a:	b120      	cbz	r0, 7056 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    704c:	2200      	movs	r2, #0
    704e:	30c0      	adds	r0, #192	; 0xc0
    7050:	4611      	mov	r1, r2
    7052:	f7fd bced 	b.w	4a30 <z_sched_wake>
}
    7056:	4770      	bx	lr

00007058 <abort>:
    7058:	2006      	movs	r0, #6
    705a:	b508      	push	{r3, lr}
    705c:	f7ff f920 	bl	62a0 <raise>
    7060:	2001      	movs	r0, #1
    7062:	f7fa fdab 	bl	1bbc <_exit>

00007066 <__sflush_r>:
    7066:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    706c:	0717      	lsls	r7, r2, #28
    706e:	4605      	mov	r5, r0
    7070:	460c      	mov	r4, r1
    7072:	d456      	bmi.n	7122 <__sflush_r+0xbc>
    7074:	684b      	ldr	r3, [r1, #4]
    7076:	2b00      	cmp	r3, #0
    7078:	dc02      	bgt.n	7080 <__sflush_r+0x1a>
    707a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    707c:	2b00      	cmp	r3, #0
    707e:	dd3d      	ble.n	70fc <__sflush_r+0x96>
    7080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    7082:	2e00      	cmp	r6, #0
    7084:	d03a      	beq.n	70fc <__sflush_r+0x96>
    7086:	2300      	movs	r3, #0
    7088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    708c:	682f      	ldr	r7, [r5, #0]
    708e:	6a21      	ldr	r1, [r4, #32]
    7090:	602b      	str	r3, [r5, #0]
    7092:	d025      	beq.n	70e0 <__sflush_r+0x7a>
    7094:	6d62      	ldr	r2, [r4, #84]	; 0x54
    7096:	89a3      	ldrh	r3, [r4, #12]
    7098:	0758      	lsls	r0, r3, #29
    709a:	d505      	bpl.n	70a8 <__sflush_r+0x42>
    709c:	6863      	ldr	r3, [r4, #4]
    709e:	1ad2      	subs	r2, r2, r3
    70a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    70a2:	b10b      	cbz	r3, 70a8 <__sflush_r+0x42>
    70a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    70a6:	1ad2      	subs	r2, r2, r3
    70a8:	6a21      	ldr	r1, [r4, #32]
    70aa:	2300      	movs	r3, #0
    70ac:	4628      	mov	r0, r5
    70ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    70b0:	47b0      	blx	r6
    70b2:	1c41      	adds	r1, r0, #1
    70b4:	d024      	beq.n	7100 <__sflush_r+0x9a>
    70b6:	2300      	movs	r3, #0
    70b8:	6063      	str	r3, [r4, #4]
    70ba:	6923      	ldr	r3, [r4, #16]
    70bc:	6023      	str	r3, [r4, #0]
    70be:	89a3      	ldrh	r3, [r4, #12]
    70c0:	04da      	lsls	r2, r3, #19
    70c2:	d500      	bpl.n	70c6 <__sflush_r+0x60>
    70c4:	6560      	str	r0, [r4, #84]	; 0x54
    70c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    70c8:	602f      	str	r7, [r5, #0]
    70ca:	b1b9      	cbz	r1, 70fc <__sflush_r+0x96>
    70cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    70d0:	4299      	cmp	r1, r3
    70d2:	d002      	beq.n	70da <__sflush_r+0x74>
    70d4:	4628      	mov	r0, r5
    70d6:	f7fe fd1d 	bl	5b14 <_free_r>
    70da:	2300      	movs	r3, #0
    70dc:	6363      	str	r3, [r4, #52]	; 0x34
    70de:	e00d      	b.n	70fc <__sflush_r+0x96>
    70e0:	2301      	movs	r3, #1
    70e2:	4628      	mov	r0, r5
    70e4:	47b0      	blx	r6
    70e6:	1c46      	adds	r6, r0, #1
    70e8:	4602      	mov	r2, r0
    70ea:	d1d4      	bne.n	7096 <__sflush_r+0x30>
    70ec:	682b      	ldr	r3, [r5, #0]
    70ee:	2b00      	cmp	r3, #0
    70f0:	d0d1      	beq.n	7096 <__sflush_r+0x30>
    70f2:	2b1d      	cmp	r3, #29
    70f4:	d001      	beq.n	70fa <__sflush_r+0x94>
    70f6:	2b16      	cmp	r3, #22
    70f8:	d12a      	bne.n	7150 <__sflush_r+0xea>
    70fa:	602f      	str	r7, [r5, #0]
    70fc:	2000      	movs	r0, #0
    70fe:	e02e      	b.n	715e <__sflush_r+0xf8>
    7100:	682a      	ldr	r2, [r5, #0]
    7102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7106:	b142      	cbz	r2, 711a <__sflush_r+0xb4>
    7108:	2a1d      	cmp	r2, #29
    710a:	d001      	beq.n	7110 <__sflush_r+0xaa>
    710c:	2a16      	cmp	r2, #22
    710e:	d121      	bne.n	7154 <__sflush_r+0xee>
    7110:	2300      	movs	r3, #0
    7112:	6063      	str	r3, [r4, #4]
    7114:	6923      	ldr	r3, [r4, #16]
    7116:	6023      	str	r3, [r4, #0]
    7118:	e7d5      	b.n	70c6 <__sflush_r+0x60>
    711a:	6062      	str	r2, [r4, #4]
    711c:	6922      	ldr	r2, [r4, #16]
    711e:	6022      	str	r2, [r4, #0]
    7120:	e7ce      	b.n	70c0 <__sflush_r+0x5a>
    7122:	690f      	ldr	r7, [r1, #16]
    7124:	2f00      	cmp	r7, #0
    7126:	d0e9      	beq.n	70fc <__sflush_r+0x96>
    7128:	0793      	lsls	r3, r2, #30
    712a:	bf18      	it	ne
    712c:	2300      	movne	r3, #0
    712e:	680e      	ldr	r6, [r1, #0]
    7130:	bf08      	it	eq
    7132:	694b      	ldreq	r3, [r1, #20]
    7134:	1bf6      	subs	r6, r6, r7
    7136:	600f      	str	r7, [r1, #0]
    7138:	608b      	str	r3, [r1, #8]
    713a:	2e00      	cmp	r6, #0
    713c:	ddde      	ble.n	70fc <__sflush_r+0x96>
    713e:	4633      	mov	r3, r6
    7140:	463a      	mov	r2, r7
    7142:	4628      	mov	r0, r5
    7144:	6a21      	ldr	r1, [r4, #32]
    7146:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    714a:	47e0      	blx	ip
    714c:	2800      	cmp	r0, #0
    714e:	dc07      	bgt.n	7160 <__sflush_r+0xfa>
    7150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    715c:	81a3      	strh	r3, [r4, #12]
    715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7160:	4407      	add	r7, r0
    7162:	1a36      	subs	r6, r6, r0
    7164:	e7e9      	b.n	713a <__sflush_r+0xd4>

00007166 <__sfmoreglue>:
    7166:	2368      	movs	r3, #104	; 0x68
    7168:	b570      	push	{r4, r5, r6, lr}
    716a:	1e4d      	subs	r5, r1, #1
    716c:	435d      	muls	r5, r3
    716e:	460e      	mov	r6, r1
    7170:	f105 0174 	add.w	r1, r5, #116	; 0x74
    7174:	f7fe fd16 	bl	5ba4 <_malloc_r>
    7178:	4604      	mov	r4, r0
    717a:	b140      	cbz	r0, 718e <__sfmoreglue+0x28>
    717c:	2100      	movs	r1, #0
    717e:	e9c0 1600 	strd	r1, r6, [r0]
    7182:	300c      	adds	r0, #12
    7184:	60a0      	str	r0, [r4, #8]
    7186:	f105 0268 	add.w	r2, r5, #104	; 0x68
    718a:	f000 f8ef 	bl	736c <memset>
    718e:	4620      	mov	r0, r4
    7190:	bd70      	pop	{r4, r5, r6, pc}

00007192 <fmemseeker>:
    7192:	2b01      	cmp	r3, #1
    7194:	b510      	push	{r4, lr}
    7196:	4604      	mov	r4, r0
    7198:	4610      	mov	r0, r2
    719a:	d11d      	bne.n	71d8 <fmemseeker+0x46>
    719c:	688b      	ldr	r3, [r1, #8]
    719e:	4418      	add	r0, r3
    71a0:	2800      	cmp	r0, #0
    71a2:	db1d      	blt.n	71e0 <fmemseeker+0x4e>
    71a4:	690b      	ldr	r3, [r1, #16]
    71a6:	4283      	cmp	r3, r0
    71a8:	d31f      	bcc.n	71ea <fmemseeker+0x58>
    71aa:	7d4b      	ldrb	r3, [r1, #21]
    71ac:	b143      	cbz	r3, 71c0 <fmemseeker+0x2e>
    71ae:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
    71b2:	4293      	cmp	r3, r2
    71b4:	d204      	bcs.n	71c0 <fmemseeker+0x2e>
    71b6:	7d8c      	ldrb	r4, [r1, #22]
    71b8:	684a      	ldr	r2, [r1, #4]
    71ba:	54d4      	strb	r4, [r2, r3]
    71bc:	2300      	movs	r3, #0
    71be:	758b      	strb	r3, [r1, #22]
    71c0:	7d4b      	ldrb	r3, [r1, #21]
    71c2:	6088      	str	r0, [r1, #8]
    71c4:	b13b      	cbz	r3, 71d6 <fmemseeker+0x44>
    71c6:	68cb      	ldr	r3, [r1, #12]
    71c8:	4298      	cmp	r0, r3
    71ca:	d204      	bcs.n	71d6 <fmemseeker+0x44>
    71cc:	684b      	ldr	r3, [r1, #4]
    71ce:	5c1a      	ldrb	r2, [r3, r0]
    71d0:	758a      	strb	r2, [r1, #22]
    71d2:	2200      	movs	r2, #0
    71d4:	541a      	strb	r2, [r3, r0]
    71d6:	bd10      	pop	{r4, pc}
    71d8:	2b02      	cmp	r3, #2
    71da:	d1e1      	bne.n	71a0 <fmemseeker+0xe>
    71dc:	68cb      	ldr	r3, [r1, #12]
    71de:	e7de      	b.n	719e <fmemseeker+0xc>
    71e0:	2316      	movs	r3, #22
    71e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    71e6:	6023      	str	r3, [r4, #0]
    71e8:	e7f5      	b.n	71d6 <fmemseeker+0x44>
    71ea:	231c      	movs	r3, #28
    71ec:	e7f9      	b.n	71e2 <fmemseeker+0x50>

000071ee <fmemcloser>:
    71ee:	b508      	push	{r3, lr}
    71f0:	6809      	ldr	r1, [r1, #0]
    71f2:	f7fe fc8f 	bl	5b14 <_free_r>
    71f6:	2000      	movs	r0, #0
    71f8:	bd08      	pop	{r3, pc}

000071fa <fmemwriter>:
    71fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71fe:	460c      	mov	r4, r1
    7200:	461e      	mov	r6, r3
    7202:	68cb      	ldr	r3, [r1, #12]
    7204:	7d09      	ldrb	r1, [r1, #20]
    7206:	4607      	mov	r7, r0
    7208:	4690      	mov	r8, r2
    720a:	b331      	cbz	r1, 725a <fmemwriter+0x60>
    720c:	60a3      	str	r3, [r4, #8]
    720e:	68a5      	ldr	r5, [r4, #8]
    7210:	6920      	ldr	r0, [r4, #16]
    7212:	7d63      	ldrb	r3, [r4, #21]
    7214:	1971      	adds	r1, r6, r5
    7216:	1ac2      	subs	r2, r0, r3
    7218:	4291      	cmp	r1, r2
    721a:	bf88      	it	hi
    721c:	1b46      	subhi	r6, r0, r5
    721e:	68e1      	ldr	r1, [r4, #12]
    7220:	4435      	add	r5, r6
    7222:	bf8c      	ite	hi
    7224:	461a      	movhi	r2, r3
    7226:	2200      	movls	r2, #0
    7228:	428d      	cmp	r5, r1
    722a:	d91f      	bls.n	726c <fmemwriter+0x72>
    722c:	60e5      	str	r5, [r4, #12]
    722e:	1aad      	subs	r5, r5, r2
    7230:	42a8      	cmp	r0, r5
    7232:	d903      	bls.n	723c <fmemwriter+0x42>
    7234:	2300      	movs	r3, #0
    7236:	6861      	ldr	r1, [r4, #4]
    7238:	554b      	strb	r3, [r1, r5]
    723a:	75a3      	strb	r3, [r4, #22]
    723c:	68a3      	ldr	r3, [r4, #8]
    723e:	4296      	cmp	r6, r2
    7240:	eb06 0103 	add.w	r1, r6, r3
    7244:	60a1      	str	r1, [r4, #8]
    7246:	d01b      	beq.n	7280 <fmemwriter+0x86>
    7248:	6860      	ldr	r0, [r4, #4]
    724a:	4641      	mov	r1, r8
    724c:	1ab2      	subs	r2, r6, r2
    724e:	4418      	add	r0, r3
    7250:	f000 f864 	bl	731c <memcpy>
    7254:	4630      	mov	r0, r6
    7256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    725a:	68a2      	ldr	r2, [r4, #8]
    725c:	429a      	cmp	r2, r3
    725e:	d9d6      	bls.n	720e <fmemwriter+0x14>
    7260:	6860      	ldr	r0, [r4, #4]
    7262:	1ad2      	subs	r2, r2, r3
    7264:	4418      	add	r0, r3
    7266:	f000 f881 	bl	736c <memset>
    726a:	e7d0      	b.n	720e <fmemwriter+0x14>
    726c:	2b00      	cmp	r3, #0
    726e:	d0e5      	beq.n	723c <fmemwriter+0x42>
    7270:	b136      	cbz	r6, 7280 <fmemwriter+0x86>
    7272:	6863      	ldr	r3, [r4, #4]
    7274:	1aad      	subs	r5, r5, r2
    7276:	5d59      	ldrb	r1, [r3, r5]
    7278:	75a1      	strb	r1, [r4, #22]
    727a:	2100      	movs	r1, #0
    727c:	5559      	strb	r1, [r3, r5]
    727e:	e7dd      	b.n	723c <fmemwriter+0x42>
    7280:	231c      	movs	r3, #28
    7282:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    7286:	603b      	str	r3, [r7, #0]
    7288:	e7e4      	b.n	7254 <fmemwriter+0x5a>

0000728a <fmemreader>:
    728a:	b538      	push	{r3, r4, r5, lr}
    728c:	460d      	mov	r5, r1
    728e:	461c      	mov	r4, r3
    7290:	e9d1 1302 	ldrd	r1, r3, [r1, #8]
    7294:	4299      	cmp	r1, r3
    7296:	4610      	mov	r0, r2
    7298:	d80d      	bhi.n	72b6 <fmemreader+0x2c>
    729a:	1a5b      	subs	r3, r3, r1
    729c:	429c      	cmp	r4, r3
    729e:	bf28      	it	cs
    72a0:	461c      	movcs	r4, r3
    72a2:	686b      	ldr	r3, [r5, #4]
    72a4:	4622      	mov	r2, r4
    72a6:	4419      	add	r1, r3
    72a8:	f000 f838 	bl	731c <memcpy>
    72ac:	68ab      	ldr	r3, [r5, #8]
    72ae:	4423      	add	r3, r4
    72b0:	60ab      	str	r3, [r5, #8]
    72b2:	4620      	mov	r0, r4
    72b4:	bd38      	pop	{r3, r4, r5, pc}
    72b6:	2400      	movs	r4, #0
    72b8:	e7fb      	b.n	72b2 <fmemreader+0x28>

000072ba <_fwalk_reent>:
    72ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    72be:	4606      	mov	r6, r0
    72c0:	4688      	mov	r8, r1
    72c2:	2700      	movs	r7, #0
    72c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
    72c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    72cc:	f1b9 0901 	subs.w	r9, r9, #1
    72d0:	d505      	bpl.n	72de <_fwalk_reent+0x24>
    72d2:	6824      	ldr	r4, [r4, #0]
    72d4:	2c00      	cmp	r4, #0
    72d6:	d1f7      	bne.n	72c8 <_fwalk_reent+0xe>
    72d8:	4638      	mov	r0, r7
    72da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    72de:	89ab      	ldrh	r3, [r5, #12]
    72e0:	2b01      	cmp	r3, #1
    72e2:	d907      	bls.n	72f4 <_fwalk_reent+0x3a>
    72e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    72e8:	3301      	adds	r3, #1
    72ea:	d003      	beq.n	72f4 <_fwalk_reent+0x3a>
    72ec:	4629      	mov	r1, r5
    72ee:	4630      	mov	r0, r6
    72f0:	47c0      	blx	r8
    72f2:	4307      	orrs	r7, r0
    72f4:	3568      	adds	r5, #104	; 0x68
    72f6:	e7e9      	b.n	72cc <_fwalk_reent+0x12>

000072f8 <__retarget_lock_init_recursive>:
    72f8:	4770      	bx	lr

000072fa <__retarget_lock_close_recursive>:
    72fa:	4770      	bx	lr

000072fc <__retarget_lock_acquire_recursive>:
    72fc:	4770      	bx	lr

000072fe <__retarget_lock_release_recursive>:
    72fe:	4770      	bx	lr

00007300 <memchr>:
    7300:	4603      	mov	r3, r0
    7302:	b510      	push	{r4, lr}
    7304:	b2c9      	uxtb	r1, r1
    7306:	4402      	add	r2, r0
    7308:	4293      	cmp	r3, r2
    730a:	4618      	mov	r0, r3
    730c:	d101      	bne.n	7312 <memchr+0x12>
    730e:	2000      	movs	r0, #0
    7310:	e003      	b.n	731a <memchr+0x1a>
    7312:	7804      	ldrb	r4, [r0, #0]
    7314:	3301      	adds	r3, #1
    7316:	428c      	cmp	r4, r1
    7318:	d1f6      	bne.n	7308 <memchr+0x8>
    731a:	bd10      	pop	{r4, pc}

0000731c <memcpy>:
    731c:	440a      	add	r2, r1
    731e:	4291      	cmp	r1, r2
    7320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7324:	d100      	bne.n	7328 <memcpy+0xc>
    7326:	4770      	bx	lr
    7328:	b510      	push	{r4, lr}
    732a:	f811 4b01 	ldrb.w	r4, [r1], #1
    732e:	4291      	cmp	r1, r2
    7330:	f803 4f01 	strb.w	r4, [r3, #1]!
    7334:	d1f9      	bne.n	732a <memcpy+0xe>
    7336:	bd10      	pop	{r4, pc}

00007338 <memmove>:
    7338:	4288      	cmp	r0, r1
    733a:	b510      	push	{r4, lr}
    733c:	eb01 0402 	add.w	r4, r1, r2
    7340:	d902      	bls.n	7348 <memmove+0x10>
    7342:	4284      	cmp	r4, r0
    7344:	4623      	mov	r3, r4
    7346:	d807      	bhi.n	7358 <memmove+0x20>
    7348:	1e43      	subs	r3, r0, #1
    734a:	42a1      	cmp	r1, r4
    734c:	d008      	beq.n	7360 <memmove+0x28>
    734e:	f811 2b01 	ldrb.w	r2, [r1], #1
    7352:	f803 2f01 	strb.w	r2, [r3, #1]!
    7356:	e7f8      	b.n	734a <memmove+0x12>
    7358:	4601      	mov	r1, r0
    735a:	4402      	add	r2, r0
    735c:	428a      	cmp	r2, r1
    735e:	d100      	bne.n	7362 <memmove+0x2a>
    7360:	bd10      	pop	{r4, pc}
    7362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    7366:	f802 4d01 	strb.w	r4, [r2, #-1]!
    736a:	e7f7      	b.n	735c <memmove+0x24>

0000736c <memset>:
    736c:	4603      	mov	r3, r0
    736e:	4402      	add	r2, r0
    7370:	4293      	cmp	r3, r2
    7372:	d100      	bne.n	7376 <memset+0xa>
    7374:	4770      	bx	lr
    7376:	f803 1b01 	strb.w	r1, [r3], #1
    737a:	e7f9      	b.n	7370 <memset+0x4>

0000737c <__sfputc_r>:
    737c:	6893      	ldr	r3, [r2, #8]
    737e:	b410      	push	{r4}
    7380:	3b01      	subs	r3, #1
    7382:	2b00      	cmp	r3, #0
    7384:	6093      	str	r3, [r2, #8]
    7386:	da07      	bge.n	7398 <__sfputc_r+0x1c>
    7388:	6994      	ldr	r4, [r2, #24]
    738a:	42a3      	cmp	r3, r4
    738c:	db01      	blt.n	7392 <__sfputc_r+0x16>
    738e:	290a      	cmp	r1, #10
    7390:	d102      	bne.n	7398 <__sfputc_r+0x1c>
    7392:	bc10      	pop	{r4}
    7394:	f7ff b984 	b.w	66a0 <__swbuf_r>
    7398:	6813      	ldr	r3, [r2, #0]
    739a:	1c58      	adds	r0, r3, #1
    739c:	6010      	str	r0, [r2, #0]
    739e:	7019      	strb	r1, [r3, #0]
    73a0:	4608      	mov	r0, r1
    73a2:	bc10      	pop	{r4}
    73a4:	4770      	bx	lr

000073a6 <__sfputs_r>:
    73a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73a8:	4606      	mov	r6, r0
    73aa:	460f      	mov	r7, r1
    73ac:	4614      	mov	r4, r2
    73ae:	18d5      	adds	r5, r2, r3
    73b0:	42ac      	cmp	r4, r5
    73b2:	d101      	bne.n	73b8 <__sfputs_r+0x12>
    73b4:	2000      	movs	r0, #0
    73b6:	e007      	b.n	73c8 <__sfputs_r+0x22>
    73b8:	463a      	mov	r2, r7
    73ba:	4630      	mov	r0, r6
    73bc:	f814 1b01 	ldrb.w	r1, [r4], #1
    73c0:	f7ff ffdc 	bl	737c <__sfputc_r>
    73c4:	1c43      	adds	r3, r0, #1
    73c6:	d1f3      	bne.n	73b0 <__sfputs_r+0xa>
    73c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000073ca <_printf_common>:
    73ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73ce:	4616      	mov	r6, r2
    73d0:	4698      	mov	r8, r3
    73d2:	688a      	ldr	r2, [r1, #8]
    73d4:	690b      	ldr	r3, [r1, #16]
    73d6:	4607      	mov	r7, r0
    73d8:	4293      	cmp	r3, r2
    73da:	bfb8      	it	lt
    73dc:	4613      	movlt	r3, r2
    73de:	6033      	str	r3, [r6, #0]
    73e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    73e4:	460c      	mov	r4, r1
    73e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    73ea:	b10a      	cbz	r2, 73f0 <_printf_common+0x26>
    73ec:	3301      	adds	r3, #1
    73ee:	6033      	str	r3, [r6, #0]
    73f0:	6823      	ldr	r3, [r4, #0]
    73f2:	0699      	lsls	r1, r3, #26
    73f4:	bf42      	ittt	mi
    73f6:	6833      	ldrmi	r3, [r6, #0]
    73f8:	3302      	addmi	r3, #2
    73fa:	6033      	strmi	r3, [r6, #0]
    73fc:	6825      	ldr	r5, [r4, #0]
    73fe:	f015 0506 	ands.w	r5, r5, #6
    7402:	d106      	bne.n	7412 <_printf_common+0x48>
    7404:	f104 0a19 	add.w	sl, r4, #25
    7408:	68e3      	ldr	r3, [r4, #12]
    740a:	6832      	ldr	r2, [r6, #0]
    740c:	1a9b      	subs	r3, r3, r2
    740e:	42ab      	cmp	r3, r5
    7410:	dc2b      	bgt.n	746a <_printf_common+0xa0>
    7412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    7416:	6822      	ldr	r2, [r4, #0]
    7418:	3b00      	subs	r3, #0
    741a:	bf18      	it	ne
    741c:	2301      	movne	r3, #1
    741e:	0692      	lsls	r2, r2, #26
    7420:	d430      	bmi.n	7484 <_printf_common+0xba>
    7422:	4641      	mov	r1, r8
    7424:	4638      	mov	r0, r7
    7426:	f104 0243 	add.w	r2, r4, #67	; 0x43
    742a:	47c8      	blx	r9
    742c:	3001      	adds	r0, #1
    742e:	d023      	beq.n	7478 <_printf_common+0xae>
    7430:	6823      	ldr	r3, [r4, #0]
    7432:	6922      	ldr	r2, [r4, #16]
    7434:	f003 0306 	and.w	r3, r3, #6
    7438:	2b04      	cmp	r3, #4
    743a:	bf14      	ite	ne
    743c:	2500      	movne	r5, #0
    743e:	6833      	ldreq	r3, [r6, #0]
    7440:	f04f 0600 	mov.w	r6, #0
    7444:	bf08      	it	eq
    7446:	68e5      	ldreq	r5, [r4, #12]
    7448:	f104 041a 	add.w	r4, r4, #26
    744c:	bf08      	it	eq
    744e:	1aed      	subeq	r5, r5, r3
    7450:	f854 3c12 	ldr.w	r3, [r4, #-18]
    7454:	bf08      	it	eq
    7456:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    745a:	4293      	cmp	r3, r2
    745c:	bfc4      	itt	gt
    745e:	1a9b      	subgt	r3, r3, r2
    7460:	18ed      	addgt	r5, r5, r3
    7462:	42b5      	cmp	r5, r6
    7464:	d11a      	bne.n	749c <_printf_common+0xd2>
    7466:	2000      	movs	r0, #0
    7468:	e008      	b.n	747c <_printf_common+0xb2>
    746a:	2301      	movs	r3, #1
    746c:	4652      	mov	r2, sl
    746e:	4641      	mov	r1, r8
    7470:	4638      	mov	r0, r7
    7472:	47c8      	blx	r9
    7474:	3001      	adds	r0, #1
    7476:	d103      	bne.n	7480 <_printf_common+0xb6>
    7478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7480:	3501      	adds	r5, #1
    7482:	e7c1      	b.n	7408 <_printf_common+0x3e>
    7484:	2030      	movs	r0, #48	; 0x30
    7486:	18e1      	adds	r1, r4, r3
    7488:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    748c:	1c5a      	adds	r2, r3, #1
    748e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7492:	4422      	add	r2, r4
    7494:	3302      	adds	r3, #2
    7496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    749a:	e7c2      	b.n	7422 <_printf_common+0x58>
    749c:	2301      	movs	r3, #1
    749e:	4622      	mov	r2, r4
    74a0:	4641      	mov	r1, r8
    74a2:	4638      	mov	r0, r7
    74a4:	47c8      	blx	r9
    74a6:	3001      	adds	r0, #1
    74a8:	d0e6      	beq.n	7478 <_printf_common+0xae>
    74aa:	3601      	adds	r6, #1
    74ac:	e7d9      	b.n	7462 <_printf_common+0x98>

000074ae <_raise_r>:
    74ae:	291f      	cmp	r1, #31
    74b0:	b538      	push	{r3, r4, r5, lr}
    74b2:	4605      	mov	r5, r0
    74b4:	460c      	mov	r4, r1
    74b6:	d904      	bls.n	74c2 <_raise_r+0x14>
    74b8:	2316      	movs	r3, #22
    74ba:	6003      	str	r3, [r0, #0]
    74bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    74c0:	bd38      	pop	{r3, r4, r5, pc}
    74c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    74c4:	b112      	cbz	r2, 74cc <_raise_r+0x1e>
    74c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    74ca:	b94b      	cbnz	r3, 74e0 <_raise_r+0x32>
    74cc:	4628      	mov	r0, r5
    74ce:	f000 f816 	bl	74fe <_getpid_r>
    74d2:	4622      	mov	r2, r4
    74d4:	4601      	mov	r1, r0
    74d6:	4628      	mov	r0, r5
    74d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    74dc:	f7fe bee8 	b.w	62b0 <_kill_r>
    74e0:	2b01      	cmp	r3, #1
    74e2:	d00a      	beq.n	74fa <_raise_r+0x4c>
    74e4:	1c59      	adds	r1, r3, #1
    74e6:	d103      	bne.n	74f0 <_raise_r+0x42>
    74e8:	2316      	movs	r3, #22
    74ea:	6003      	str	r3, [r0, #0]
    74ec:	2001      	movs	r0, #1
    74ee:	e7e7      	b.n	74c0 <_raise_r+0x12>
    74f0:	2100      	movs	r1, #0
    74f2:	4620      	mov	r0, r4
    74f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    74f8:	4798      	blx	r3
    74fa:	2000      	movs	r0, #0
    74fc:	e7e0      	b.n	74c0 <_raise_r+0x12>

000074fe <_getpid_r>:
    74fe:	f7ff bd14 	b.w	6f2a <_getpid>

00007502 <__sread>:
    7502:	b510      	push	{r4, lr}
    7504:	460c      	mov	r4, r1
    7506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    750a:	f7ff fb8d 	bl	6c28 <_read_r>
    750e:	2800      	cmp	r0, #0
    7510:	bfab      	itete	ge
    7512:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    7514:	89a3      	ldrhlt	r3, [r4, #12]
    7516:	181b      	addge	r3, r3, r0
    7518:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    751c:	bfac      	ite	ge
    751e:	6563      	strge	r3, [r4, #84]	; 0x54
    7520:	81a3      	strhlt	r3, [r4, #12]
    7522:	bd10      	pop	{r4, pc}

00007524 <__swrite>:
    7524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7528:	461f      	mov	r7, r3
    752a:	898b      	ldrh	r3, [r1, #12]
    752c:	4605      	mov	r5, r0
    752e:	05db      	lsls	r3, r3, #23
    7530:	460c      	mov	r4, r1
    7532:	4616      	mov	r6, r2
    7534:	d505      	bpl.n	7542 <__swrite+0x1e>
    7536:	2302      	movs	r3, #2
    7538:	2200      	movs	r2, #0
    753a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    753e:	f7ff fb21 	bl	6b84 <_lseek_r>
    7542:	89a3      	ldrh	r3, [r4, #12]
    7544:	4632      	mov	r2, r6
    7546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    754a:	81a3      	strh	r3, [r4, #12]
    754c:	4628      	mov	r0, r5
    754e:	463b      	mov	r3, r7
    7550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7558:	f7ff b8f4 	b.w	6744 <_write_r>

0000755c <__sseek>:
    755c:	b510      	push	{r4, lr}
    755e:	460c      	mov	r4, r1
    7560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7564:	f7ff fb0e 	bl	6b84 <_lseek_r>
    7568:	1c43      	adds	r3, r0, #1
    756a:	89a3      	ldrh	r3, [r4, #12]
    756c:	bf15      	itete	ne
    756e:	6560      	strne	r0, [r4, #84]	; 0x54
    7570:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    7574:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    7578:	81a3      	strheq	r3, [r4, #12]
    757a:	bf18      	it	ne
    757c:	81a3      	strhne	r3, [r4, #12]
    757e:	bd10      	pop	{r4, pc}

00007580 <__sclose>:
    7580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7584:	f7ff b95c 	b.w	6840 <_close_r>

00007588 <strncpy>:
    7588:	4603      	mov	r3, r0
    758a:	b510      	push	{r4, lr}
    758c:	3901      	subs	r1, #1
    758e:	b132      	cbz	r2, 759e <strncpy+0x16>
    7590:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7594:	3a01      	subs	r2, #1
    7596:	f803 4b01 	strb.w	r4, [r3], #1
    759a:	2c00      	cmp	r4, #0
    759c:	d1f7      	bne.n	758e <strncpy+0x6>
    759e:	2100      	movs	r1, #0
    75a0:	441a      	add	r2, r3
    75a2:	4293      	cmp	r3, r2
    75a4:	d100      	bne.n	75a8 <strncpy+0x20>
    75a6:	bd10      	pop	{r4, pc}
    75a8:	f803 1b01 	strb.w	r1, [r3], #1
    75ac:	e7f9      	b.n	75a2 <strncpy+0x1a>

000075ae <strnlen>:
    75ae:	4602      	mov	r2, r0
    75b0:	b510      	push	{r4, lr}
    75b2:	4401      	add	r1, r0
    75b4:	428a      	cmp	r2, r1
    75b6:	4613      	mov	r3, r2
    75b8:	d003      	beq.n	75c2 <strnlen+0x14>
    75ba:	781c      	ldrb	r4, [r3, #0]
    75bc:	3201      	adds	r2, #1
    75be:	2c00      	cmp	r4, #0
    75c0:	d1f8      	bne.n	75b4 <strnlen+0x6>
    75c2:	1a18      	subs	r0, r3, r0
    75c4:	bd10      	pop	{r4, pc}

000075c6 <_user_strerror>:
    75c6:	2000      	movs	r0, #0
    75c8:	4770      	bx	lr

000075ca <__sflags>:
    75ca:	780b      	ldrb	r3, [r1, #0]
    75cc:	b530      	push	{r4, r5, lr}
    75ce:	2b72      	cmp	r3, #114	; 0x72
    75d0:	d022      	beq.n	7618 <__sflags+0x4e>
    75d2:	2b77      	cmp	r3, #119	; 0x77
    75d4:	d024      	beq.n	7620 <__sflags+0x56>
    75d6:	2b61      	cmp	r3, #97	; 0x61
    75d8:	d027      	beq.n	762a <__sflags+0x60>
    75da:	2316      	movs	r3, #22
    75dc:	6003      	str	r3, [r0, #0]
    75de:	2000      	movs	r0, #0
    75e0:	bd30      	pop	{r4, r5, pc}
    75e2:	2d62      	cmp	r5, #98	; 0x62
    75e4:	d012      	beq.n	760c <__sflags+0x42>
    75e6:	2d78      	cmp	r5, #120	; 0x78
    75e8:	d013      	beq.n	7612 <__sflags+0x48>
    75ea:	2d2b      	cmp	r5, #43	; 0x2b
    75ec:	d107      	bne.n	75fe <__sflags+0x34>
    75ee:	f020 001c 	bic.w	r0, r0, #28
    75f2:	f023 0303 	bic.w	r3, r3, #3
    75f6:	f040 0010 	orr.w	r0, r0, #16
    75fa:	f043 0302 	orr.w	r3, r3, #2
    75fe:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    7602:	2d00      	cmp	r5, #0
    7604:	d1ed      	bne.n	75e2 <__sflags+0x18>
    7606:	4323      	orrs	r3, r4
    7608:	6013      	str	r3, [r2, #0]
    760a:	e7e9      	b.n	75e0 <__sflags+0x16>
    760c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7610:	e7f5      	b.n	75fe <__sflags+0x34>
    7612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    7616:	e7f2      	b.n	75fe <__sflags+0x34>
    7618:	2400      	movs	r4, #0
    761a:	2004      	movs	r0, #4
    761c:	4623      	mov	r3, r4
    761e:	e7ee      	b.n	75fe <__sflags+0x34>
    7620:	f44f 64c0 	mov.w	r4, #1536	; 0x600
    7624:	2301      	movs	r3, #1
    7626:	2008      	movs	r0, #8
    7628:	e7e9      	b.n	75fe <__sflags+0x34>
    762a:	f44f 7402 	mov.w	r4, #520	; 0x208
    762e:	2301      	movs	r3, #1
    7630:	f44f 7084 	mov.w	r0, #264	; 0x108
    7634:	e7e3      	b.n	75fe <__sflags+0x34>

00007636 <__swhatbuf_r>:
    7636:	b570      	push	{r4, r5, r6, lr}
    7638:	460c      	mov	r4, r1
    763a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    763e:	4615      	mov	r5, r2
    7640:	2900      	cmp	r1, #0
    7642:	461e      	mov	r6, r3
    7644:	b096      	sub	sp, #88	; 0x58
    7646:	da0c      	bge.n	7662 <__swhatbuf_r+0x2c>
    7648:	89a3      	ldrh	r3, [r4, #12]
    764a:	2100      	movs	r1, #0
    764c:	f013 0f80 	tst.w	r3, #128	; 0x80
    7650:	bf14      	ite	ne
    7652:	2340      	movne	r3, #64	; 0x40
    7654:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    7658:	2000      	movs	r0, #0
    765a:	6031      	str	r1, [r6, #0]
    765c:	602b      	str	r3, [r5, #0]
    765e:	b016      	add	sp, #88	; 0x58
    7660:	bd70      	pop	{r4, r5, r6, pc}
    7662:	466a      	mov	r2, sp
    7664:	f7ff faf2 	bl	6c4c <_fstat_r>
    7668:	2800      	cmp	r0, #0
    766a:	dbed      	blt.n	7648 <__swhatbuf_r+0x12>
    766c:	9901      	ldr	r1, [sp, #4]
    766e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
    7672:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
    7676:	4259      	negs	r1, r3
    7678:	4159      	adcs	r1, r3
    767a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    767e:	e7eb      	b.n	7658 <__swhatbuf_r+0x22>

00007680 <_realloc_r>:
    7680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7682:	4607      	mov	r7, r0
    7684:	4615      	mov	r5, r2
    7686:	460c      	mov	r4, r1
    7688:	b921      	cbnz	r1, 7694 <_realloc_r+0x14>
    768a:	4611      	mov	r1, r2
    768c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7690:	f7fe ba88 	b.w	5ba4 <_malloc_r>
    7694:	b922      	cbnz	r2, 76a0 <_realloc_r+0x20>
    7696:	f7fe fa3d 	bl	5b14 <_free_r>
    769a:	2400      	movs	r4, #0
    769c:	4620      	mov	r0, r4
    769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76a0:	f000 f813 	bl	76ca <_malloc_usable_size_r>
    76a4:	42a8      	cmp	r0, r5
    76a6:	d2f9      	bcs.n	769c <_realloc_r+0x1c>
    76a8:	4629      	mov	r1, r5
    76aa:	4638      	mov	r0, r7
    76ac:	f7fe fa7a 	bl	5ba4 <_malloc_r>
    76b0:	4606      	mov	r6, r0
    76b2:	2800      	cmp	r0, #0
    76b4:	d0f1      	beq.n	769a <_realloc_r+0x1a>
    76b6:	4621      	mov	r1, r4
    76b8:	462a      	mov	r2, r5
    76ba:	f7ff fe2f 	bl	731c <memcpy>
    76be:	4621      	mov	r1, r4
    76c0:	4638      	mov	r0, r7
    76c2:	f7fe fa27 	bl	5b14 <_free_r>
    76c6:	4634      	mov	r4, r6
    76c8:	e7e8      	b.n	769c <_realloc_r+0x1c>

000076ca <_malloc_usable_size_r>:
    76ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
    76ce:	1f18      	subs	r0, r3, #4
    76d0:	2b00      	cmp	r3, #0
    76d2:	bfbc      	itt	lt
    76d4:	580b      	ldrlt	r3, [r1, r0]
    76d6:	18c0      	addlt	r0, r0, r3
    76d8:	4770      	bx	lr
