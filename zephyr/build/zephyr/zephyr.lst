
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#endif
}
#endif /* CONFIG_USERSPACE */

void z_impl_k_str_out(char *c, size_t n)
{
   0:	48 99 00 00 35 18 00 00 33 63 00 00 71 18 00 00     H...5...3c..q...
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	for (i = 0; i < n; i++) {
		_char_out(c[i]);
  10:	71 18 00 00 71 18 00 00 71 18 00 00 00 00 00 00     q...q...q.......
	...

		memcpy(ptr2, ptr, MIN(prev_size, bytes));
		sys_heap_free(heap, ptr);
	}
	return ptr2;
}
  2c:	b9 16 00 00 71 18 00 00 00 00 00 00 6d 16 00 00     ....q.......m...
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
  3c:	b1 13 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
  50:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	if (size_too_big(h, bytes)) {
  60:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
  70:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
  80:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	chunksz_t chunks_need = bytes_to_chunksz(h, bytes + align_gap);
  90:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	if (align && ((uintptr_t)ptr & (align - 1))) {
  a0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		split_chunks(h, c, c + chunks_need);
  b0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		free_chunk(h, c + chunks_need);
  c0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
  d0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		   (chunk_size(h, c) + chunk_size(h, rc) >= chunks_need)) {
  e0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		if (split_size < chunk_size(h, rc)) {
  f0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
			split_chunks(h, rc, rc + split_size);
 100:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
			free_list_add(h, rc + split_size);
 110:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		set_chunk_used(h, c, true);
 120:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	void *ptr2 = sys_heap_aligned_alloc(heap, align, bytes);
 130:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		size_t prev_size = chunksz_to_bytes(h, chunk_size(h, c)) - align_gap;
 140:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 150:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 160:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		sys_heap_free(heap, ptr);
 170:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 180:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 190:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 1a0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	/* Register events */
	events_registered = register_events(events, num_events,
					    &work->poller, false);

	key = k_spin_lock(&lock);
	if (work->poller.is_polling && !K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 1b0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
		/*
		 * Poller is still polling.
		 * No event is ready and all are watched.
		 */
		__ASSERT(num_events == events_registered,
 1c0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 1d0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
			 "Some events were not registered!\n");

		/* Setup timeout if such action is requested */
		if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1e0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
			z_add_timeout(&work->timeout,
 1f0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 200:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 210:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 220:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 230:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 240:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 250:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	/*
	 * If poller is still polling, no watched event occurred. This means
	 * we reached here due to K_NO_WAIT timeout "expiration".
	 */
	if (work->poller.is_polling) {
		work->poller.is_polling = false;
 260:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	} else {
		work->poll_result = 0;
	}

	/* Clear registrations. */
	clear_event_registrations(events, events_registered, key);
 270:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 280:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 290:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
	k_spin_unlock(&lock, key);

	/* Submit work. */
	k_work_submit_to_queue(work_q, &work->work);
 2a0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................

	SYS_PORT_TRACING_FUNC_EXIT(k_work_poll, submit_to_queue, work_q, work, timeout, 0);

	return 0;
 2b0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 2c0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 2d0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 2e0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 2f0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 300:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 310:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 320:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 330:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 340:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 350:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 360:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 370:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 380:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 390:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 3a0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 3b0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 3c0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 3d0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 3e0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................
 3f0:	0d 18 00 00 0d 18 00 00 0d 18 00 00 0d 18 00 00     ................

00000400 <sbh>:
	...
 408:	a8 7f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00000420 <__aeabi_uldivmod>:
     420:	b953      	cbnz	r3, 438 <__aeabi_uldivmod+0x18>
     422:	b94a      	cbnz	r2, 438 <__aeabi_uldivmod+0x18>
     424:	2900      	cmp	r1, #0
     426:	bf08      	it	eq
     428:	2800      	cmpeq	r0, #0
     42a:	bf1c      	itt	ne
     42c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     430:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     434:	f000 b80c 	b.w	450 <__aeabi_idiv0>
     438:	f1ad 0c08 	sub.w	ip, sp, #8
     43c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     440:	f000 f808 	bl	454 <__udivmoddi4>
     444:	f8dd e004 	ldr.w	lr, [sp, #4]
     448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     44c:	b004      	add	sp, #16
     44e:	4770      	bx	lr

00000450 <__aeabi_idiv0>:
     450:	4770      	bx	lr
     452:	bf00      	nop

00000454 <__udivmoddi4>:
     454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     458:	4686      	mov	lr, r0
     45a:	468c      	mov	ip, r1
     45c:	4608      	mov	r0, r1
     45e:	4615      	mov	r5, r2
     460:	4674      	mov	r4, lr
     462:	4619      	mov	r1, r3
     464:	9e08      	ldr	r6, [sp, #32]
     466:	2b00      	cmp	r3, #0
     468:	f040 80c2 	bne.w	5f0 <__udivmoddi4+0x19c>
     46c:	4285      	cmp	r5, r0
     46e:	fab2 f282 	clz	r2, r2
     472:	d945      	bls.n	500 <__udivmoddi4+0xac>
     474:	b14a      	cbz	r2, 48a <__udivmoddi4+0x36>
     476:	f1c2 0320 	rsb	r3, r2, #32
     47a:	fa00 fc02 	lsl.w	ip, r0, r2
     47e:	fa2e f303 	lsr.w	r3, lr, r3
     482:	4095      	lsls	r5, r2
     484:	ea43 0c0c 	orr.w	ip, r3, ip
     488:	4094      	lsls	r4, r2
     48a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     48e:	fbbc f8fe 	udiv	r8, ip, lr
     492:	b2a8      	uxth	r0, r5
     494:	fb0e cc18 	mls	ip, lr, r8, ip
     498:	fb08 f900 	mul.w	r9, r8, r0
     49c:	0c23      	lsrs	r3, r4, #16
     49e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     4a2:	4599      	cmp	r9, r3
     4a4:	d928      	bls.n	4f8 <__udivmoddi4+0xa4>
     4a6:	18eb      	adds	r3, r5, r3
     4a8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     4ac:	d204      	bcs.n	4b8 <__udivmoddi4+0x64>
     4ae:	4599      	cmp	r9, r3
     4b0:	d902      	bls.n	4b8 <__udivmoddi4+0x64>
     4b2:	f1a8 0702 	sub.w	r7, r8, #2
     4b6:	442b      	add	r3, r5
     4b8:	eba3 0309 	sub.w	r3, r3, r9
     4bc:	fbb3 fcfe 	udiv	ip, r3, lr
     4c0:	fb0e 331c 	mls	r3, lr, ip, r3
     4c4:	fb0c f000 	mul.w	r0, ip, r0
     4c8:	b2a4      	uxth	r4, r4
     4ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     4ce:	42a0      	cmp	r0, r4
     4d0:	d914      	bls.n	4fc <__udivmoddi4+0xa8>
     4d2:	192c      	adds	r4, r5, r4
     4d4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     4d8:	d204      	bcs.n	4e4 <__udivmoddi4+0x90>
     4da:	42a0      	cmp	r0, r4
     4dc:	d902      	bls.n	4e4 <__udivmoddi4+0x90>
     4de:	f1ac 0302 	sub.w	r3, ip, #2
     4e2:	442c      	add	r4, r5
     4e4:	1a24      	subs	r4, r4, r0
     4e6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     4ea:	b11e      	cbz	r6, 4f4 <__udivmoddi4+0xa0>
     4ec:	2300      	movs	r3, #0
     4ee:	40d4      	lsrs	r4, r2
     4f0:	6034      	str	r4, [r6, #0]
     4f2:	6073      	str	r3, [r6, #4]
     4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4f8:	4647      	mov	r7, r8
     4fa:	e7dd      	b.n	4b8 <__udivmoddi4+0x64>
     4fc:	4663      	mov	r3, ip
     4fe:	e7f1      	b.n	4e4 <__udivmoddi4+0x90>
     500:	bb92      	cbnz	r2, 568 <__udivmoddi4+0x114>
     502:	2101      	movs	r1, #1
     504:	1b43      	subs	r3, r0, r5
     506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     50a:	fbb3 fcfe 	udiv	ip, r3, lr
     50e:	b2af      	uxth	r7, r5
     510:	fb0e 331c 	mls	r3, lr, ip, r3
     514:	fb0c f807 	mul.w	r8, ip, r7
     518:	0c20      	lsrs	r0, r4, #16
     51a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     51e:	4598      	cmp	r8, r3
     520:	d962      	bls.n	5e8 <__udivmoddi4+0x194>
     522:	18eb      	adds	r3, r5, r3
     524:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     528:	d204      	bcs.n	534 <__udivmoddi4+0xe0>
     52a:	4598      	cmp	r8, r3
     52c:	d902      	bls.n	534 <__udivmoddi4+0xe0>
     52e:	f1ac 0002 	sub.w	r0, ip, #2
     532:	442b      	add	r3, r5
     534:	eba3 0308 	sub.w	r3, r3, r8
     538:	fbb3 fcfe 	udiv	ip, r3, lr
     53c:	fb0e 331c 	mls	r3, lr, ip, r3
     540:	fb0c f707 	mul.w	r7, ip, r7
     544:	b2a4      	uxth	r4, r4
     546:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     54a:	42a7      	cmp	r7, r4
     54c:	d94e      	bls.n	5ec <__udivmoddi4+0x198>
     54e:	192c      	adds	r4, r5, r4
     550:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     554:	d204      	bcs.n	560 <__udivmoddi4+0x10c>
     556:	42a7      	cmp	r7, r4
     558:	d902      	bls.n	560 <__udivmoddi4+0x10c>
     55a:	f1ac 0302 	sub.w	r3, ip, #2
     55e:	442c      	add	r4, r5
     560:	1be4      	subs	r4, r4, r7
     562:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     566:	e7c0      	b.n	4ea <__udivmoddi4+0x96>
     568:	f1c2 0320 	rsb	r3, r2, #32
     56c:	4095      	lsls	r5, r2
     56e:	fa20 f103 	lsr.w	r1, r0, r3
     572:	fa2e f303 	lsr.w	r3, lr, r3
     576:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     57a:	fbb1 fcfe 	udiv	ip, r1, lr
     57e:	4090      	lsls	r0, r2
     580:	4303      	orrs	r3, r0
     582:	b2af      	uxth	r7, r5
     584:	fb0e 101c 	mls	r0, lr, ip, r1
     588:	fb0c f807 	mul.w	r8, ip, r7
     58c:	0c19      	lsrs	r1, r3, #16
     58e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     592:	4588      	cmp	r8, r1
     594:	fa04 f402 	lsl.w	r4, r4, r2
     598:	d922      	bls.n	5e0 <__udivmoddi4+0x18c>
     59a:	1869      	adds	r1, r5, r1
     59c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5a0:	d204      	bcs.n	5ac <__udivmoddi4+0x158>
     5a2:	4588      	cmp	r8, r1
     5a4:	d902      	bls.n	5ac <__udivmoddi4+0x158>
     5a6:	f1ac 0002 	sub.w	r0, ip, #2
     5aa:	4429      	add	r1, r5
     5ac:	eba1 0108 	sub.w	r1, r1, r8
     5b0:	fbb1 fcfe 	udiv	ip, r1, lr
     5b4:	fb0e 111c 	mls	r1, lr, ip, r1
     5b8:	fb0c f707 	mul.w	r7, ip, r7
     5bc:	b29b      	uxth	r3, r3
     5be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     5c2:	429f      	cmp	r7, r3
     5c4:	d90e      	bls.n	5e4 <__udivmoddi4+0x190>
     5c6:	18eb      	adds	r3, r5, r3
     5c8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     5cc:	d204      	bcs.n	5d8 <__udivmoddi4+0x184>
     5ce:	429f      	cmp	r7, r3
     5d0:	d902      	bls.n	5d8 <__udivmoddi4+0x184>
     5d2:	f1ac 0102 	sub.w	r1, ip, #2
     5d6:	442b      	add	r3, r5
     5d8:	1bdb      	subs	r3, r3, r7
     5da:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     5de:	e792      	b.n	506 <__udivmoddi4+0xb2>
     5e0:	4660      	mov	r0, ip
     5e2:	e7e3      	b.n	5ac <__udivmoddi4+0x158>
     5e4:	4661      	mov	r1, ip
     5e6:	e7f7      	b.n	5d8 <__udivmoddi4+0x184>
     5e8:	4660      	mov	r0, ip
     5ea:	e7a3      	b.n	534 <__udivmoddi4+0xe0>
     5ec:	4663      	mov	r3, ip
     5ee:	e7b7      	b.n	560 <__udivmoddi4+0x10c>
     5f0:	4283      	cmp	r3, r0
     5f2:	d906      	bls.n	602 <__udivmoddi4+0x1ae>
     5f4:	b916      	cbnz	r6, 5fc <__udivmoddi4+0x1a8>
     5f6:	2100      	movs	r1, #0
     5f8:	4608      	mov	r0, r1
     5fa:	e77b      	b.n	4f4 <__udivmoddi4+0xa0>
     5fc:	e9c6 e000 	strd	lr, r0, [r6]
     600:	e7f9      	b.n	5f6 <__udivmoddi4+0x1a2>
     602:	fab3 f783 	clz	r7, r3
     606:	b98f      	cbnz	r7, 62c <__udivmoddi4+0x1d8>
     608:	4283      	cmp	r3, r0
     60a:	d301      	bcc.n	610 <__udivmoddi4+0x1bc>
     60c:	4572      	cmp	r2, lr
     60e:	d808      	bhi.n	622 <__udivmoddi4+0x1ce>
     610:	ebbe 0402 	subs.w	r4, lr, r2
     614:	eb60 0303 	sbc.w	r3, r0, r3
     618:	2001      	movs	r0, #1
     61a:	469c      	mov	ip, r3
     61c:	b91e      	cbnz	r6, 626 <__udivmoddi4+0x1d2>
     61e:	2100      	movs	r1, #0
     620:	e768      	b.n	4f4 <__udivmoddi4+0xa0>
     622:	4638      	mov	r0, r7
     624:	e7fa      	b.n	61c <__udivmoddi4+0x1c8>
     626:	e9c6 4c00 	strd	r4, ip, [r6]
     62a:	e7f8      	b.n	61e <__udivmoddi4+0x1ca>
     62c:	f1c7 0c20 	rsb	ip, r7, #32
     630:	40bb      	lsls	r3, r7
     632:	fa22 f40c 	lsr.w	r4, r2, ip
     636:	431c      	orrs	r4, r3
     638:	ea4f 4914 	mov.w	r9, r4, lsr #16
     63c:	fa20 f30c 	lsr.w	r3, r0, ip
     640:	fbb3 f8f9 	udiv	r8, r3, r9
     644:	40b8      	lsls	r0, r7
     646:	fa2e f10c 	lsr.w	r1, lr, ip
     64a:	4301      	orrs	r1, r0
     64c:	fa0e f507 	lsl.w	r5, lr, r7
     650:	fb09 3018 	mls	r0, r9, r8, r3
     654:	fa1f fe84 	uxth.w	lr, r4
     658:	fb08 fa0e 	mul.w	sl, r8, lr
     65c:	0c0b      	lsrs	r3, r1, #16
     65e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     662:	459a      	cmp	sl, r3
     664:	fa02 f207 	lsl.w	r2, r2, r7
     668:	d940      	bls.n	6ec <__udivmoddi4+0x298>
     66a:	18e3      	adds	r3, r4, r3
     66c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     670:	d204      	bcs.n	67c <__udivmoddi4+0x228>
     672:	459a      	cmp	sl, r3
     674:	d902      	bls.n	67c <__udivmoddi4+0x228>
     676:	f1a8 0002 	sub.w	r0, r8, #2
     67a:	4423      	add	r3, r4
     67c:	eba3 030a 	sub.w	r3, r3, sl
     680:	fbb3 f8f9 	udiv	r8, r3, r9
     684:	fb09 3318 	mls	r3, r9, r8, r3
     688:	fb08 fe0e 	mul.w	lr, r8, lr
     68c:	b289      	uxth	r1, r1
     68e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     692:	458e      	cmp	lr, r1
     694:	d92c      	bls.n	6f0 <__udivmoddi4+0x29c>
     696:	1861      	adds	r1, r4, r1
     698:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     69c:	d204      	bcs.n	6a8 <__udivmoddi4+0x254>
     69e:	458e      	cmp	lr, r1
     6a0:	d902      	bls.n	6a8 <__udivmoddi4+0x254>
     6a2:	f1a8 0302 	sub.w	r3, r8, #2
     6a6:	4421      	add	r1, r4
     6a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     6ac:	fba0 9802 	umull	r9, r8, r0, r2
     6b0:	eba1 010e 	sub.w	r1, r1, lr
     6b4:	4541      	cmp	r1, r8
     6b6:	46ce      	mov	lr, r9
     6b8:	4643      	mov	r3, r8
     6ba:	d302      	bcc.n	6c2 <__udivmoddi4+0x26e>
     6bc:	d106      	bne.n	6cc <__udivmoddi4+0x278>
     6be:	454d      	cmp	r5, r9
     6c0:	d204      	bcs.n	6cc <__udivmoddi4+0x278>
     6c2:	ebb9 0e02 	subs.w	lr, r9, r2
     6c6:	eb68 0304 	sbc.w	r3, r8, r4
     6ca:	3801      	subs	r0, #1
     6cc:	2e00      	cmp	r6, #0
     6ce:	d0a6      	beq.n	61e <__udivmoddi4+0x1ca>
     6d0:	ebb5 020e 	subs.w	r2, r5, lr
     6d4:	eb61 0103 	sbc.w	r1, r1, r3
     6d8:	fa01 fc0c 	lsl.w	ip, r1, ip
     6dc:	fa22 f307 	lsr.w	r3, r2, r7
     6e0:	ea4c 0303 	orr.w	r3, ip, r3
     6e4:	40f9      	lsrs	r1, r7
     6e6:	e9c6 3100 	strd	r3, r1, [r6]
     6ea:	e798      	b.n	61e <__udivmoddi4+0x1ca>
     6ec:	4640      	mov	r0, r8
     6ee:	e7c5      	b.n	67c <__udivmoddi4+0x228>
     6f0:	4643      	mov	r3, r8
     6f2:	e7d9      	b.n	6a8 <__udivmoddi4+0x254>

000006f4 <strcmp>:
     6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
     6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
     6fc:	2a01      	cmp	r2, #1
     6fe:	bf28      	it	cs
     700:	429a      	cmpcs	r2, r3
     702:	d0f7      	beq.n	6f4 <strcmp>
     704:	1ad0      	subs	r0, r2, r3
     706:	4770      	bx	lr

00000708 <strlen>:
     708:	4603      	mov	r3, r0
     70a:	f813 2b01 	ldrb.w	r2, [r3], #1
     70e:	2a00      	cmp	r2, #0
     710:	d1fb      	bne.n	70a <strlen+0x2>
     712:	1a18      	subs	r0, r3, r0
     714:	3801      	subs	r0, #1
     716:	4770      	bx	lr

00000718 <main>:
 * point. Other devices (for example FreeRTOS or ESP32) that have different
 * requirements for entry code (like an app_main function) should specialize
 * this main.cc file in a target-specific subfolder.
 */
int main(int argc, char *argv[])
{
     718:	b513      	push	{r0, r1, r4, lr}
	// for (int i = 0; i < NUM_LOOPS; i++) {
	// 	loop();
		
	// }
	
    printf("--------------------------------- \n");
     71a:	4814      	ldr	r0, [pc, #80]	; (76c <main+0x54>)
     71c:	f005 fa52 	bl	5bc4 <iprintf>
   


    volatile int* address = (int*)0x70000000;  
    volatile int* address2 = (int*)0x60000000;// Create a pointer to the memory address
     720:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
     724:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000

    // *address = 13;  // Write the value 1 to the memory address
    // *address2 = 20;

    printf("!Value at memory address 0x01000000: %x\n", &address);
     728:	4669      	mov	r1, sp
     72a:	4811      	ldr	r0, [pc, #68]	; (770 <main+0x58>)
    volatile int* address2 = (int*)0x60000000;// Create a pointer to the memory address
     72c:	e9cd 2300 	strd	r2, r3, [sp]
    printf("Value at memory address 0x01000000: %x\n", *address);
     730:	4c10      	ldr	r4, [pc, #64]	; (774 <main+0x5c>)
    printf("!Value at memory address 0x01000000: %x\n", &address);
     732:	f005 fa47 	bl	5bc4 <iprintf>
    printf("Value at memory address 0x01000000: %x\n", *address);
     736:	9b00      	ldr	r3, [sp, #0]
     738:	4620      	mov	r0, r4
     73a:	6819      	ldr	r1, [r3, #0]
     73c:	f005 fa42 	bl	5bc4 <iprintf>
    printf("Value at memory address 0x01000000: %x\n", address);
     740:	4620      	mov	r0, r4
    printf("Value at memory address2 0x01000004: %x\n", &address2);
     742:	4c0d      	ldr	r4, [pc, #52]	; (778 <main+0x60>)
    printf("Value at memory address 0x01000000: %x\n", address);
     744:	9900      	ldr	r1, [sp, #0]
     746:	f005 fa3d 	bl	5bc4 <iprintf>
    printf("Value at memory address2 0x01000004: %x\n", &address2);
     74a:	a901      	add	r1, sp, #4
     74c:	4620      	mov	r0, r4
     74e:	f005 fa39 	bl	5bc4 <iprintf>
    printf("Value at memory address2 0x01000004: %x\n", *address2);
     752:	9b01      	ldr	r3, [sp, #4]
     754:	4620      	mov	r0, r4
     756:	6819      	ldr	r1, [r3, #0]
     758:	f005 fa34 	bl	5bc4 <iprintf>
    printf("Value at memory address2 0x01000004: %x\n", address2);
     75c:	4620      	mov	r0, r4
     75e:	9901      	ldr	r1, [sp, #4]
     760:	f005 fa30 	bl	5bc4 <iprintf>

    return 0;

}
     764:	2000      	movs	r0, #0
     766:	b002      	add	sp, #8
     768:	bd10      	pop	{r4, pc}
     76a:	bf00      	nop
     76c:	00007216 	.word	0x00007216
     770:	0000723a 	.word	0x0000723a
     774:	0000723b 	.word	0x0000723b
     778:	00007263 	.word	0x00007263

0000077c <char_out>:
	ctx->count++;
     77c:	680b      	ldr	r3, [r1, #0]
     77e:	3301      	adds	r3, #1
     780:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     782:	4b01      	ldr	r3, [pc, #4]	; (788 <char_out+0xc>)
     784:	681b      	ldr	r3, [r3, #0]
     786:	4718      	bx	r3
     788:	00007fa8 	.word	0x00007fa8

0000078c <__printk_hook_install>:
	_char_out = fn;
     78c:	4b01      	ldr	r3, [pc, #4]	; (794 <__printk_hook_install+0x8>)
     78e:	6018      	str	r0, [r3, #0]
}
     790:	4770      	bx	lr
     792:	bf00      	nop
     794:	00007fa8 	.word	0x00007fa8

00000798 <vprintk>:
{
     798:	b507      	push	{r0, r1, r2, lr}
     79a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     79c:	2100      	movs	r1, #0
{
     79e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     7a0:	9101      	str	r1, [sp, #4]
	cbvprintf(char_out, &ctx, fmt, ap);
     7a2:	4803      	ldr	r0, [pc, #12]	; (7b0 <vprintk+0x18>)
     7a4:	a901      	add	r1, sp, #4
     7a6:	f000 f91b 	bl	9e0 <cbvprintf>
}
     7aa:	b003      	add	sp, #12
     7ac:	f85d fb04 	ldr.w	pc, [sp], #4
     7b0:	0000077d 	.word	0x0000077d

000007b4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     7b4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     7b6:	2500      	movs	r5, #0
{
     7b8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     7ba:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     7be:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
     7c0:	a901      	add	r1, sp, #4
     7c2:	4805      	ldr	r0, [pc, #20]	; (7d8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     7c4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     7c6:	f000 f90b 	bl	9e0 <cbvprintf>

	if (ctx.count < ctx.max) {
     7ca:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     7ce:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     7d0:	bfb8      	it	lt
     7d2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     7d4:	b005      	add	sp, #20
     7d6:	bd30      	pop	{r4, r5, pc}
     7d8:	000060df 	.word	0x000060df

000007dc <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
     7dc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
     7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7e2:	4607      	mov	r7, r0
     7e4:	460c      	mov	r4, r1
     7e6:	4616      	mov	r6, r2
     7e8:	f080 8085 	bcs.w	8f6 <CONFIG_ISR_STACK_SIZE+0xf6>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     7ec:	2a04      	cmp	r2, #4
     7ee:	d972      	bls.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     7f0:	2304      	movs	r3, #4
	bytes -= heap_footer_bytes(bytes);
     7f2:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     7f4:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     7f6:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     7f8:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     7fc:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     800:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     802:	2c17      	cmp	r4, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     804:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     808:	d80e      	bhi.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     80a:	493e      	ldr	r1, [pc, #248]	; (904 <CONFIG_ISR_STACK_SIZE+0x104>)
     80c:	f240 138b 	movw	r3, #395	; 0x18b
     810:	4a3d      	ldr	r2, [pc, #244]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     812:	483e      	ldr	r0, [pc, #248]	; (90c <CONFIG_ISR_STACK_SIZE+0x10c>)
     814:	f005 fc76 	bl	6104 <printk>
     818:	483d      	ldr	r0, [pc, #244]	; (910 <CONFIG_ISR_STACK_SIZE+0x110>)
     81a:	f005 fc73 	bl	6104 <printk>
     81e:	f240 118b 	movw	r1, #395	; 0x18b
     822:	4839      	ldr	r0, [pc, #228]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     824:	f005 fd38 	bl	6298 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
     828:	2300      	movs	r3, #0
	heap->heap = h;
     82a:	603d      	str	r5, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     82c:	4631      	mov	r1, r6
	h->avail_buckets = 0;
     82e:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     830:	4630      	mov	r0, r6
	h->end_chunk = heap_sz;
     832:	60ae      	str	r6, [r5, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     834:	f005 fccb 	bl	61ce <bucket_idx.isra.0>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
     838:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
     83a:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     83c:	1c47      	adds	r7, r0, #1
     83e:	4630      	mov	r0, r6
     840:	f005 fcbc 	bl	61bc <bytes_to_chunksz.isra.0>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     844:	341b      	adds	r4, #27
     846:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     848:	4420      	add	r0, r4
     84a:	42b0      	cmp	r0, r6
     84c:	d90e      	bls.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     84e:	4931      	ldr	r1, [pc, #196]	; (914 <CONFIG_ISR_STACK_SIZE+0x114>)
     850:	f44f 73cb 	mov.w	r3, #406	; 0x196
     854:	4a2c      	ldr	r2, [pc, #176]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     856:	482d      	ldr	r0, [pc, #180]	; (90c <CONFIG_ISR_STACK_SIZE+0x10c>)
     858:	f005 fc54 	bl	6104 <printk>
     85c:	482c      	ldr	r0, [pc, #176]	; (910 <CONFIG_ISR_STACK_SIZE+0x110>)
     85e:	f005 fc51 	bl	6104 <printk>
     862:	f44f 71cb 	mov.w	r1, #406	; 0x196
     866:	4828      	ldr	r0, [pc, #160]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     868:	f005 fd16 	bl	6298 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
     86c:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
     86e:	4619      	mov	r1, r3
     870:	f105 020c 	add.w	r2, r5, #12
	for (int i = 0; i < nb_buckets; i++) {
     874:	42bb      	cmp	r3, r7
     876:	db40      	blt.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
     878:	4622      	mov	r2, r4
     87a:	4628      	mov	r0, r5
     87c:	2100      	movs	r1, #0
     87e:	f005 fc99 	bl	61b4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
     882:	2300      	movs	r3, #0
     884:	4628      	mov	r0, r5
     886:	461a      	mov	r2, r3
     888:	4619      	mov	r1, r3
     88a:	f005 fc6a 	bl	6162 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     88e:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
     890:	4619      	mov	r1, r3
     892:	4628      	mov	r0, r5
     894:	2201      	movs	r2, #1
     896:	f005 fc75 	bl	6184 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     89a:	463a      	mov	r2, r7
     89c:	4621      	mov	r1, r4
     89e:	f005 fc89 	bl	61b4 <set_chunk_size>
     8a2:	4623      	mov	r3, r4
     8a4:	2200      	movs	r2, #0
     8a6:	4621      	mov	r1, r4
     8a8:	4628      	mov	r0, r5
     8aa:	f005 fc5a 	bl	6162 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
     8ae:	4631      	mov	r1, r6
     8b0:	4628      	mov	r0, r5
     8b2:	f005 fc7f 	bl	61b4 <set_chunk_size>
     8b6:	463b      	mov	r3, r7
     8b8:	4631      	mov	r1, r6
     8ba:	4628      	mov	r0, r5
     8bc:	2200      	movs	r2, #0
     8be:	f005 fc50 	bl	6162 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
     8c2:	4631      	mov	r1, r6
     8c4:	4628      	mov	r0, r5
     8c6:	2201      	movs	r2, #1
     8c8:	f005 fc5c 	bl	6184 <set_chunk_used>

	free_list_add(h, chunk0_size);
     8cc:	4621      	mov	r1, r4
}
     8ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
     8d2:	f005 bc88 	b.w	61e6 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     8d6:	f44f 73c1 	mov.w	r3, #386	; 0x182
     8da:	4a0b      	ldr	r2, [pc, #44]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     8dc:	490e      	ldr	r1, [pc, #56]	; (918 <CONFIG_ISR_STACK_SIZE+0x118>)
     8de:	480b      	ldr	r0, [pc, #44]	; (90c <CONFIG_ISR_STACK_SIZE+0x10c>)
     8e0:	f005 fc10 	bl	6104 <printk>
     8e4:	480a      	ldr	r0, [pc, #40]	; (910 <CONFIG_ISR_STACK_SIZE+0x110>)
     8e6:	f005 fc0d 	bl	6104 <printk>
     8ea:	f44f 71c1 	mov.w	r1, #386	; 0x182
     8ee:	4806      	ldr	r0, [pc, #24]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     8f0:	f005 fcd2 	bl	6298 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
     8f4:	e77c      	b.n	7f0 <sys_heap_init+0x14>
     8f6:	2308      	movs	r3, #8
     8f8:	e77b      	b.n	7f2 <sys_heap_init+0x16>
		h->buckets[i].next = 0;
     8fa:	f842 1f04 	str.w	r1, [r2, #4]!
	for (int i = 0; i < nb_buckets; i++) {
     8fe:	3301      	adds	r3, #1
     900:	e7b8      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     902:	bf00      	nop
     904:	000073af 	.word	0x000073af
     908:	0000728c 	.word	0x0000728c
     90c:	000072be 	.word	0x000072be
     910:	00007396 	.word	0x00007396
     914:	000073d8 	.word	0x000073d8
     918:	00007375 	.word	0x00007375

0000091c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
     91e:	4602      	mov	r2, r0
     920:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
     922:	270a      	movs	r7, #10
	size_t val = 0;
     924:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
     926:	4e07      	ldr	r6, [pc, #28]	; (944 <extract_decimal+0x28>)
     928:	460b      	mov	r3, r1
     92a:	781c      	ldrb	r4, [r3, #0]
     92c:	3101      	adds	r1, #1
     92e:	5d35      	ldrb	r5, [r6, r4]
     930:	076d      	lsls	r5, r5, #29
     932:	d401      	bmi.n	938 <extract_decimal+0x1c>
	}
	*str = sp;
     934:	6013      	str	r3, [r2, #0]
	return val;
}
     936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
     938:	fb07 4300 	mla	r3, r7, r0, r4
     93c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
     940:	e7f2      	b.n	928 <extract_decimal+0xc>
     942:	bf00      	nop
     944:	00007e75 	.word	0x00007e75

00000948 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
     948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     94c:	4615      	mov	r5, r2
     94e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
     950:	78d3      	ldrb	r3, [r2, #3]
     952:	4a22      	ldr	r2, [pc, #136]	; (9dc <encode_uint+0x94>)
	switch (specifier) {
     954:	2b6f      	cmp	r3, #111	; 0x6f
     956:	f812 b003 	ldrb.w	fp, [r2, r3]
{
     95a:	4680      	mov	r8, r0
     95c:	460f      	mov	r7, r1
     95e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
     962:	d029      	beq.n	9b8 <encode_uint+0x70>
     964:	d824      	bhi.n	9b0 <encode_uint+0x68>
		return 10;
     966:	2b58      	cmp	r3, #88	; 0x58
     968:	bf0c      	ite	eq
     96a:	2610      	moveq	r6, #16
     96c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
     96e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
     972:	4632      	mov	r2, r6
     974:	2300      	movs	r3, #0
     976:	4640      	mov	r0, r8
     978:	4639      	mov	r1, r7
     97a:	f7ff fd51 	bl	420 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
     97e:	2a09      	cmp	r2, #9
     980:	b2d4      	uxtb	r4, r2
     982:	d81e      	bhi.n	9c2 <encode_uint+0x7a>
     984:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
     986:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
     988:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
     98a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
     98e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
     992:	d301      	bcc.n	998 <encode_uint+0x50>
     994:	45d1      	cmp	r9, sl
     996:	d811      	bhi.n	9bc <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
     998:	782b      	ldrb	r3, [r5, #0]
     99a:	069b      	lsls	r3, r3, #26
     99c:	d505      	bpl.n	9aa <encode_uint+0x62>
		if (radix == 8) {
     99e:	2e08      	cmp	r6, #8
     9a0:	d115      	bne.n	9ce <encode_uint+0x86>
			conv->altform_0 = true;
     9a2:	78ab      	ldrb	r3, [r5, #2]
     9a4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
     9a8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
     9aa:	4648      	mov	r0, r9
     9ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
     9b0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
     9b4:	2b70      	cmp	r3, #112	; 0x70
     9b6:	e7d7      	b.n	968 <encode_uint+0x20>
	switch (specifier) {
     9b8:	2608      	movs	r6, #8
     9ba:	e7d8      	b.n	96e <encode_uint+0x26>
		value /= radix;
     9bc:	4680      	mov	r8, r0
     9be:	460f      	mov	r7, r1
     9c0:	e7d7      	b.n	972 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
     9c2:	f1bb 0f01 	cmp.w	fp, #1
     9c6:	bf0c      	ite	eq
     9c8:	3437      	addeq	r4, #55	; 0x37
     9ca:	3457      	addne	r4, #87	; 0x57
     9cc:	e7db      	b.n	986 <encode_uint+0x3e>
		} else if (radix == 16) {
     9ce:	2e10      	cmp	r6, #16
     9d0:	d1eb      	bne.n	9aa <encode_uint+0x62>
			conv->altform_0c = true;
     9d2:	78ab      	ldrb	r3, [r5, #2]
     9d4:	f043 0310 	orr.w	r3, r3, #16
     9d8:	e7e6      	b.n	9a8 <encode_uint+0x60>
     9da:	bf00      	nop
     9dc:	00007e75 	.word	0x00007e75

000009e0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9e4:	4682      	mov	sl, r0
     9e6:	4617      	mov	r7, r2
     9e8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     9ea:	2500      	movs	r5, #0
{
     9ec:	b097      	sub	sp, #92	; 0x5c
     9ee:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     9f0:	7838      	ldrb	r0, [r7, #0]
     9f2:	b908      	cbnz	r0, 9f8 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     9f4:	4628      	mov	r0, r5
     9f6:	e349      	b.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
			OUTC(*fp++);
     9f8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     9fa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     9fc:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
     9fe:	d006      	beq.n	a0e <cbvprintf+0x2e>
			OUTC('%');
     a00:	9903      	ldr	r1, [sp, #12]
     a02:	47d0      	blx	sl
     a04:	2800      	cmp	r0, #0
     a06:	f2c0 8341 	blt.w	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
     a0a:	3501      	adds	r5, #1
		if (bps == NULL) {
     a0c:	e1f9      	b.n	e02 <cbvprintf+0x422>
		} state = {
     a0e:	2218      	movs	r2, #24
     a10:	2100      	movs	r1, #0
     a12:	a810      	add	r0, sp, #64	; 0x40
     a14:	f005 fd40 	bl	6498 <memset>
	if (*sp == '%') {
     a18:	787b      	ldrb	r3, [r7, #1]
     a1a:	2b25      	cmp	r3, #37	; 0x25
     a1c:	f000 80a3 	beq.w	b66 <cbvprintf+0x186>
     a20:	2300      	movs	r3, #0
     a22:	4698      	mov	r8, r3
     a24:	469e      	mov	lr, r3
     a26:	469c      	mov	ip, r3
     a28:	4618      	mov	r0, r3
     a2a:	1c79      	adds	r1, r7, #1
     a2c:	460e      	mov	r6, r1
		switch (*sp) {
     a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
     a32:	2a2b      	cmp	r2, #43	; 0x2b
     a34:	f000 80c6 	beq.w	bc4 <cbvprintf+0x1e4>
     a38:	f200 80bd 	bhi.w	bb6 <cbvprintf+0x1d6>
     a3c:	2a20      	cmp	r2, #32
     a3e:	f000 80c4 	beq.w	bca <cbvprintf+0x1ea>
     a42:	2a23      	cmp	r2, #35	; 0x23
     a44:	f000 80c4 	beq.w	bd0 <cbvprintf+0x1f0>
     a48:	b12b      	cbz	r3, a56 <cbvprintf+0x76>
     a4a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     a52:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     a56:	f1b8 0f00 	cmp.w	r8, #0
     a5a:	d005      	beq.n	a68 <cbvprintf+0x88>
     a5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a60:	f043 0320 	orr.w	r3, r3, #32
     a64:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     a68:	f1be 0f00 	cmp.w	lr, #0
     a6c:	d005      	beq.n	a7a <cbvprintf+0x9a>
     a6e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a72:	f043 0310 	orr.w	r3, r3, #16
     a76:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     a7a:	f1bc 0f00 	cmp.w	ip, #0
     a7e:	d005      	beq.n	a8c <cbvprintf+0xac>
     a80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a84:	f043 0308 	orr.w	r3, r3, #8
     a88:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     a8c:	b128      	cbz	r0, a9a <cbvprintf+0xba>
     a8e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a92:	f043 0304 	orr.w	r3, r3, #4
     a96:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     a9a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     a9e:	f003 0144 	and.w	r1, r3, #68	; 0x44
     aa2:	2944      	cmp	r1, #68	; 0x44
     aa4:	d103      	bne.n	aae <cbvprintf+0xce>
		conv->flag_zero = false;
     aa6:	f36f 1386 	bfc	r3, #6, #1
     aaa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     aae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     ab2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ab8:	9609      	str	r6, [sp, #36]	; 0x24
     aba:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     abe:	f040 808c 	bne.w	bda <cbvprintf+0x1fa>
		conv->width_star = true;
     ac2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     ac6:	f043 0301 	orr.w	r3, r3, #1
     aca:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
     ace:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
     ad0:	781a      	ldrb	r2, [r3, #0]
     ad2:	2a2e      	cmp	r2, #46	; 0x2e
     ad4:	bf0c      	ite	eq
     ad6:	2101      	moveq	r1, #1
     ad8:	2100      	movne	r1, #0
     ada:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     ade:	f361 0241 	bfi	r2, r1, #1, #1
     ae2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     ae6:	d10c      	bne.n	b02 <cbvprintf+0x122>
	++sp;
     ae8:	1c5a      	adds	r2, r3, #1
     aea:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
     aec:	785a      	ldrb	r2, [r3, #1]
     aee:	2a2a      	cmp	r2, #42	; 0x2a
     af0:	f040 8083 	bne.w	bfa <cbvprintf+0x21a>
		conv->prec_star = true;
     af4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     af8:	3302      	adds	r3, #2
		conv->prec_star = true;
     afa:	f042 0204 	orr.w	r2, r2, #4
     afe:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
     b02:	781a      	ldrb	r2, [r3, #0]
     b04:	2a6c      	cmp	r2, #108	; 0x6c
     b06:	f000 80a4 	beq.w	c52 <cbvprintf+0x272>
     b0a:	f200 8086 	bhi.w	c1a <cbvprintf+0x23a>
     b0e:	2a68      	cmp	r2, #104	; 0x68
     b10:	f000 808c 	beq.w	c2c <cbvprintf+0x24c>
     b14:	2a6a      	cmp	r2, #106	; 0x6a
     b16:	f000 80a5 	beq.w	c64 <cbvprintf+0x284>
     b1a:	2a4c      	cmp	r2, #76	; 0x4c
     b1c:	f000 80aa 	beq.w	c74 <cbvprintf+0x294>
	conv->specifier = *sp++;
     b20:	461a      	mov	r2, r3
     b22:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     b26:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     b28:	9204      	str	r2, [sp, #16]
     b2a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
     b2e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
     b32:	f200 8117 	bhi.w	d64 <cbvprintf+0x384>
     b36:	2b6d      	cmp	r3, #109	; 0x6d
     b38:	f200 80a9 	bhi.w	c8e <cbvprintf+0x2ae>
     b3c:	2b69      	cmp	r3, #105	; 0x69
     b3e:	f200 8111 	bhi.w	d64 <cbvprintf+0x384>
     b42:	2b57      	cmp	r3, #87	; 0x57
     b44:	f200 80be 	bhi.w	cc4 <cbvprintf+0x2e4>
     b48:	2b41      	cmp	r3, #65	; 0x41
     b4a:	d003      	beq.n	b54 <cbvprintf+0x174>
     b4c:	3b45      	subs	r3, #69	; 0x45
     b4e:	2b02      	cmp	r3, #2
     b50:	f200 8108 	bhi.w	d64 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_FP;
     b54:	2204      	movs	r2, #4
     b56:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     b5a:	f362 0302 	bfi	r3, r2, #0, #3
     b5e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
     b62:	2301      	movs	r3, #1
			break;
     b64:	e0ca      	b.n	cfc <cbvprintf+0x31c>
		conv->specifier = *sp++;
     b66:	1cba      	adds	r2, r7, #2
     b68:	9204      	str	r2, [sp, #16]
     b6a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     b6e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     b72:	07da      	lsls	r2, r3, #31
     b74:	f140 80fd 	bpl.w	d72 <cbvprintf+0x392>
			width = va_arg(ap, int);
     b78:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     b7c:	f1b9 0f00 	cmp.w	r9, #0
     b80:	da07      	bge.n	b92 <cbvprintf+0x1b2>
				conv->flag_dash = true;
     b82:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
     b86:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     b8a:	f042 0204 	orr.w	r2, r2, #4
     b8e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
     b92:	075e      	lsls	r6, r3, #29
     b94:	f140 80f6 	bpl.w	d84 <cbvprintf+0x3a4>
			int arg = va_arg(ap, int);
     b98:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
     b9c:	f1bb 0f00 	cmp.w	fp, #0
     ba0:	f280 80f5 	bge.w	d8e <cbvprintf+0x3ae>
				conv->prec_present = false;
     ba4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     ba8:	f36f 0341 	bfc	r3, #1, #1
     bac:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     bb0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     bb4:	e0eb      	b.n	d8e <cbvprintf+0x3ae>
		switch (*sp) {
     bb6:	2a2d      	cmp	r2, #45	; 0x2d
     bb8:	d00d      	beq.n	bd6 <cbvprintf+0x1f6>
     bba:	2a30      	cmp	r2, #48	; 0x30
     bbc:	f47f af44 	bne.w	a48 <cbvprintf+0x68>
     bc0:	2301      	movs	r3, #1
	} while (loop);
     bc2:	e733      	b.n	a2c <cbvprintf+0x4c>
		switch (*sp) {
     bc4:	f04f 0c01 	mov.w	ip, #1
     bc8:	e730      	b.n	a2c <cbvprintf+0x4c>
     bca:	f04f 0e01 	mov.w	lr, #1
     bce:	e72d      	b.n	a2c <cbvprintf+0x4c>
     bd0:	f04f 0801 	mov.w	r8, #1
     bd4:	e72a      	b.n	a2c <cbvprintf+0x4c>
     bd6:	2001      	movs	r0, #1
     bd8:	e728      	b.n	a2c <cbvprintf+0x4c>
	size_t width = extract_decimal(&sp);
     bda:	a809      	add	r0, sp, #36	; 0x24
     bdc:	f7ff fe9e 	bl	91c <extract_decimal>
	if (sp != wp) {
     be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be2:	42b3      	cmp	r3, r6
     be4:	f43f af74 	beq.w	ad0 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
     be8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
     bec:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     bee:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
     bf0:	f360 0241 	bfi	r2, r0, #1, #1
     bf4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
     bf8:	e76a      	b.n	ad0 <cbvprintf+0xf0>
	size_t prec = extract_decimal(&sp);
     bfa:	a809      	add	r0, sp, #36	; 0x24
     bfc:	f7ff fe8e 	bl	91c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
     c00:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
     c04:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     c06:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c0a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
     c0e:	f362 0341 	bfi	r3, r2, #1, #1
     c12:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
     c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c18:	e773      	b.n	b02 <cbvprintf+0x122>
	switch (*sp) {
     c1a:	2a74      	cmp	r2, #116	; 0x74
     c1c:	d026      	beq.n	c6c <cbvprintf+0x28c>
     c1e:	2a7a      	cmp	r2, #122	; 0x7a
     c20:	f47f af7e 	bne.w	b20 <cbvprintf+0x140>
		conv->length_mod = LENGTH_Z;
     c24:	2106      	movs	r1, #6
     c26:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c2a:	e00c      	b.n	c46 <cbvprintf+0x266>
		if (*++sp == 'h') {
     c2c:	785a      	ldrb	r2, [r3, #1]
     c2e:	2a68      	cmp	r2, #104	; 0x68
     c30:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c34:	d106      	bne.n	c44 <cbvprintf+0x264>
			conv->length_mod = LENGTH_HH;
     c36:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     c38:	f361 02c6 	bfi	r2, r1, #3, #4
     c3c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     c40:	3302      	adds	r3, #2
     c42:	e76d      	b.n	b20 <cbvprintf+0x140>
			conv->length_mod = LENGTH_H;
     c44:	2102      	movs	r1, #2
     c46:	f361 02c6 	bfi	r2, r1, #3, #4
     c4a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     c4e:	3301      	adds	r3, #1
     c50:	e766      	b.n	b20 <cbvprintf+0x140>
		if (*++sp == 'l') {
     c52:	785a      	ldrb	r2, [r3, #1]
     c54:	2a6c      	cmp	r2, #108	; 0x6c
     c56:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c5a:	d101      	bne.n	c60 <cbvprintf+0x280>
			conv->length_mod = LENGTH_LL;
     c5c:	2104      	movs	r1, #4
     c5e:	e7eb      	b.n	c38 <cbvprintf+0x258>
			conv->length_mod = LENGTH_L;
     c60:	2103      	movs	r1, #3
     c62:	e7f0      	b.n	c46 <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
     c64:	2105      	movs	r1, #5
     c66:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c6a:	e7ec      	b.n	c46 <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
     c6c:	2107      	movs	r1, #7
     c6e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     c72:	e7e8      	b.n	c46 <cbvprintf+0x266>
		conv->unsupported = true;
     c74:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     c78:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     c7c:	f022 0202 	bic.w	r2, r2, #2
     c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     c84:	f042 0202 	orr.w	r2, r2, #2
     c88:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     c8c:	e7df      	b.n	c4e <cbvprintf+0x26e>
	switch (conv->specifier) {
     c8e:	3b6e      	subs	r3, #110	; 0x6e
     c90:	b2d9      	uxtb	r1, r3
     c92:	2301      	movs	r3, #1
     c94:	408b      	lsls	r3, r1
     c96:	f240 4182 	movw	r1, #1154	; 0x482
     c9a:	420b      	tst	r3, r1
     c9c:	d138      	bne.n	d10 <cbvprintf+0x330>
     c9e:	f013 0f24 	tst.w	r3, #36	; 0x24
     ca2:	d152      	bne.n	d4a <cbvprintf+0x36a>
     ca4:	07d8      	lsls	r0, r3, #31
     ca6:	d55d      	bpl.n	d64 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
     ca8:	2103      	movs	r1, #3
     caa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     cae:	f361 0302 	bfi	r3, r1, #0, #3
     cb2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     cb6:	f002 0378 	and.w	r3, r2, #120	; 0x78
     cba:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     cbe:	424b      	negs	r3, r1
     cc0:	414b      	adcs	r3, r1
     cc2:	e01b      	b.n	cfc <cbvprintf+0x31c>
     cc4:	2001      	movs	r0, #1
	switch (conv->specifier) {
     cc6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     cca:	b2c9      	uxtb	r1, r1
     ccc:	fa00 f101 	lsl.w	r1, r0, r1
     cd0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     cd4:	f47f af3e 	bne.w	b54 <cbvprintf+0x174>
     cd8:	f640 0601 	movw	r6, #2049	; 0x801
     cdc:	4231      	tst	r1, r6
     cde:	d11d      	bne.n	d1c <cbvprintf+0x33c>
     ce0:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     ce4:	d03e      	beq.n	d64 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
     ce6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     cea:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     cee:	f002 0278 	and.w	r2, r2, #120	; 0x78
     cf2:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     cf4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     cf8:	d034      	beq.n	d64 <cbvprintf+0x384>
	bool unsupported = false;
     cfa:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     cfc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     d00:	f3c2 0140 	ubfx	r1, r2, #1, #1
     d04:	430b      	orrs	r3, r1
     d06:	f363 0241 	bfi	r2, r3, #1, #1
     d0a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     d0e:	e72e      	b.n	b6e <cbvprintf+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
     d10:	2102      	movs	r1, #2
     d12:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     d16:	f361 0302 	bfi	r3, r1, #0, #3
     d1a:	e7e8      	b.n	cee <cbvprintf+0x30e>
     d1c:	2002      	movs	r0, #2
     d1e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     d22:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     d26:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     d2a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     d2c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     d30:	bf02      	ittt	eq
     d32:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     d36:	f041 0101 	orreq.w	r1, r1, #1
     d3a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     d3e:	2b63      	cmp	r3, #99	; 0x63
     d40:	d1db      	bne.n	cfa <cbvprintf+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     d42:	1e13      	subs	r3, r2, #0
     d44:	bf18      	it	ne
     d46:	2301      	movne	r3, #1
     d48:	e7d8      	b.n	cfc <cbvprintf+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
     d4a:	2103      	movs	r1, #3
     d4c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     d50:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     d54:	f361 0302 	bfi	r3, r1, #0, #3
     d58:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     d5c:	bf14      	ite	ne
     d5e:	2301      	movne	r3, #1
     d60:	2300      	moveq	r3, #0
     d62:	e7cb      	b.n	cfc <cbvprintf+0x31c>
		conv->invalid = true;
     d64:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     d68:	f043 0301 	orr.w	r3, r3, #1
     d6c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     d70:	e7c3      	b.n	cfa <cbvprintf+0x31a>
		} else if (conv->width_present) {
     d72:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     d76:	2a00      	cmp	r2, #0
		int width = -1;
     d78:	bfac      	ite	ge
     d7a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
     d7e:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
     d82:	e706      	b.n	b92 <cbvprintf+0x1b2>
		} else if (conv->prec_present) {
     d84:	0798      	lsls	r0, r3, #30
     d86:	f57f af13 	bpl.w	bb0 <cbvprintf+0x1d0>
			precision = conv->prec_value;
     d8a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
     d8e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     d90:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
     d94:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
     d98:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
     d9c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     da0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     da2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     da6:	d133      	bne.n	e10 <cbvprintf+0x430>
			switch (length_mod) {
     da8:	1ecb      	subs	r3, r1, #3
     daa:	2b04      	cmp	r3, #4
     dac:	d804      	bhi.n	db8 <cbvprintf+0x3d8>
     dae:	e8df f003 	tbb	[pc, r3]
     db2:	4610      	.short	0x4610
     db4:	1046      	.short	0x1046
     db6:	10          	.byte	0x10
     db7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     db8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     dba:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     dbc:	ea4f 72e3 	mov.w	r2, r3, asr #31
     dc0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     dc4:	d10b      	bne.n	dde <cbvprintf+0x3fe>
				value->sint = (char)value->sint;
     dc6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     dca:	9310      	str	r3, [sp, #64]	; 0x40
     dcc:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
     dce:	9311      	str	r3, [sp, #68]	; 0x44
     dd0:	e007      	b.n	de2 <cbvprintf+0x402>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     dd2:	f854 3b04 	ldr.w	r3, [r4], #4
     dd6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     dd8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
     ddc:	e002      	b.n	de4 <cbvprintf+0x404>
			} else if (length_mod == LENGTH_H) {
     dde:	2902      	cmp	r1, #2
     de0:	d011      	beq.n	e06 <cbvprintf+0x426>
				value->sint = va_arg(ap, int);
     de2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     de4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     de8:	f013 0603 	ands.w	r6, r3, #3
     dec:	d047      	beq.n	e7e <cbvprintf+0x49e>
			OUTS(sp, fp);
     dee:	463a      	mov	r2, r7
     df0:	4650      	mov	r0, sl
     df2:	9b04      	ldr	r3, [sp, #16]
     df4:	9903      	ldr	r1, [sp, #12]
     df6:	f005 fa38 	bl	626a <outs>
     dfa:	2800      	cmp	r0, #0
     dfc:	f2c0 8146 	blt.w	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
     e00:	4405      	add	r5, r0
			continue;
     e02:	9f04      	ldr	r7, [sp, #16]
     e04:	e5f4      	b.n	9f0 <cbvprintf+0x10>
				value->sint = (short)value->sint;
     e06:	b21a      	sxth	r2, r3
     e08:	9210      	str	r2, [sp, #64]	; 0x40
     e0a:	f343 33c0 	sbfx	r3, r3, #15, #1
     e0e:	e7de      	b.n	dce <cbvprintf+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
     e10:	2b02      	cmp	r3, #2
     e12:	d124      	bne.n	e5e <cbvprintf+0x47e>
			switch (length_mod) {
     e14:	1ecb      	subs	r3, r1, #3
     e16:	2b04      	cmp	r3, #4
     e18:	d804      	bhi.n	e24 <cbvprintf+0x444>
     e1a:	e8df f003 	tbb	[pc, r3]
     e1e:	1018      	.short	0x1018
     e20:	1810      	.short	0x1810
     e22:	18          	.byte	0x18
     e23:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     e24:	2901      	cmp	r1, #1
     e26:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     e2a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     e2e:	d014      	beq.n	e5a <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
     e30:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     e32:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     e36:	d1d5      	bne.n	de4 <cbvprintf+0x404>
				value->uint = (unsigned short)value->uint;
     e38:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     e3a:	9310      	str	r3, [sp, #64]	; 0x40
     e3c:	e7d2      	b.n	de4 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap,
     e3e:	3407      	adds	r4, #7
     e40:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     e44:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     e48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     e4c:	e7ca      	b.n	de4 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap, size_t);
     e4e:	f854 3b04 	ldr.w	r3, [r4], #4
     e52:	9310      	str	r3, [sp, #64]	; 0x40
     e54:	2300      	movs	r3, #0
     e56:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     e58:	e7c4      	b.n	de4 <cbvprintf+0x404>
				value->uint = (unsigned char)value->uint;
     e5a:	b2db      	uxtb	r3, r3
     e5c:	e7bc      	b.n	dd8 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
     e5e:	2b04      	cmp	r3, #4
     e60:	d108      	bne.n	e74 <cbvprintf+0x494>
					(sint_value_type)va_arg(ap, long long);
     e62:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     e64:	f024 0407 	bic.w	r4, r4, #7
     e68:	e9d4 2300 	ldrd	r2, r3, [r4]
     e6c:	3408      	adds	r4, #8
     e6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     e72:	e7b7      	b.n	de4 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_PTR) {
     e74:	2b03      	cmp	r3, #3
     e76:	d1b5      	bne.n	de4 <cbvprintf+0x404>
			value->ptr = va_arg(ap, void *);
     e78:	f854 3b04 	ldr.w	r3, [r4], #4
     e7c:	e7dd      	b.n	e3a <cbvprintf+0x45a>
		switch (conv->specifier) {
     e7e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
     e82:	2878      	cmp	r0, #120	; 0x78
     e84:	d8bd      	bhi.n	e02 <cbvprintf+0x422>
     e86:	2862      	cmp	r0, #98	; 0x62
     e88:	d81c      	bhi.n	ec4 <cbvprintf+0x4e4>
     e8a:	2825      	cmp	r0, #37	; 0x25
     e8c:	f43f adb8 	beq.w	a00 <cbvprintf+0x20>
     e90:	2858      	cmp	r0, #88	; 0x58
     e92:	d1b6      	bne.n	e02 <cbvprintf+0x422>
			bps = encode_uint(value->uint, conv, buf, bpe);
     e94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
     e98:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     e9c:	9300      	str	r3, [sp, #0]
     e9e:	aa12      	add	r2, sp, #72	; 0x48
     ea0:	ab0a      	add	r3, sp, #40	; 0x28
     ea2:	f7ff fd51 	bl	948 <encode_uint>
			if (precision >= 0) {
     ea6:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     eaa:	4607      	mov	r7, r0
			if (precision >= 0) {
     eac:	f280 8097 	bge.w	fde <cbvprintf+0x5fe>
		if (bps == NULL) {
     eb0:	2f00      	cmp	r7, #0
     eb2:	d0a6      	beq.n	e02 <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
     eb4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
     eb8:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
     ebc:	2e00      	cmp	r6, #0
     ebe:	d04e      	beq.n	f5e <cbvprintf+0x57e>
			nj_len += 1U;
     ec0:	3001      	adds	r0, #1
     ec2:	e04c      	b.n	f5e <cbvprintf+0x57e>
		switch (conv->specifier) {
     ec4:	3863      	subs	r0, #99	; 0x63
     ec6:	2815      	cmp	r0, #21
     ec8:	d89b      	bhi.n	e02 <cbvprintf+0x422>
     eca:	a201      	add	r2, pc, #4	; (adr r2, ed0 <cbvprintf+0x4f0>)
     ecc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     ed0:	00000f4f 	.word	0x00000f4f
     ed4:	00000fb5 	.word	0x00000fb5
     ed8:	00000e03 	.word	0x00000e03
     edc:	00000e03 	.word	0x00000e03
     ee0:	00000e03 	.word	0x00000e03
     ee4:	00000e03 	.word	0x00000e03
     ee8:	00000fb5 	.word	0x00000fb5
     eec:	00000e03 	.word	0x00000e03
     ef0:	00000e03 	.word	0x00000e03
     ef4:	00000e03 	.word	0x00000e03
     ef8:	00000e03 	.word	0x00000e03
     efc:	0000103d 	.word	0x0000103d
     f00:	00000fd9 	.word	0x00000fd9
     f04:	00000fff 	.word	0x00000fff
     f08:	00000e03 	.word	0x00000e03
     f0c:	00000e03 	.word	0x00000e03
     f10:	00000f29 	.word	0x00000f29
     f14:	00000e03 	.word	0x00000e03
     f18:	00000fd9 	.word	0x00000fd9
     f1c:	00000e03 	.word	0x00000e03
     f20:	00000e03 	.word	0x00000e03
     f24:	00000fd9 	.word	0x00000fd9
			if (precision >= 0) {
     f28:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
     f2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
     f2e:	db0a      	blt.n	f46 <cbvprintf+0x566>
				len = strnlen(bps, precision);
     f30:	4659      	mov	r1, fp
     f32:	4638      	mov	r0, r7
     f34:	f005 fb64 	bl	6600 <strnlen>
			bpe = bps + len;
     f38:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
     f3c:	2f00      	cmp	r7, #0
     f3e:	f43f af60 	beq.w	e02 <cbvprintf+0x422>
		char sign = 0;
     f42:	2600      	movs	r6, #0
     f44:	e00b      	b.n	f5e <cbvprintf+0x57e>
				len = strlen(bps);
     f46:	4638      	mov	r0, r7
     f48:	f7ff fbde 	bl	708 <strlen>
     f4c:	e7f4      	b.n	f38 <cbvprintf+0x558>
		char sign = 0;
     f4e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     f50:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
     f54:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f58:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
     f5c:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
     f5e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     f62:	f013 0210 	ands.w	r2, r3, #16
     f66:	9205      	str	r2, [sp, #20]
     f68:	f000 8083 	beq.w	1072 <CONFIG_MAIN_STACK_SIZE+0x72>
			nj_len += 2U;
     f6c:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     f6e:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     f70:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
     f74:	bf48      	it	mi
     f76:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
     f78:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
     f7a:	bf48      	it	mi
     f7c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     f7e:	f1b9 0f00 	cmp.w	r9, #0
     f82:	f340 8090 	ble.w	10a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
			if (!conv->flag_dash) {
     f86:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
     f8a:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
     f8e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     f92:	0750      	lsls	r0, r2, #29
     f94:	9306      	str	r3, [sp, #24]
     f96:	f100 8086 	bmi.w	10a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
				if (conv->flag_zero) {
     f9a:	0651      	lsls	r1, r2, #25
     f9c:	d579      	bpl.n	1092 <CONFIG_MAIN_STACK_SIZE+0x92>
					if (sign != 0) {
     f9e:	b13e      	cbz	r6, fb0 <cbvprintf+0x5d0>
						OUTC(sign);
     fa0:	4630      	mov	r0, r6
     fa2:	9903      	ldr	r1, [sp, #12]
     fa4:	47d0      	blx	sl
     fa6:	2800      	cmp	r0, #0
     fa8:	db70      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
     faa:	9b06      	ldr	r3, [sp, #24]
     fac:	3501      	adds	r5, #1
     fae:	461e      	mov	r6, r3
					pad = '0';
     fb0:	2230      	movs	r2, #48	; 0x30
     fb2:	e06f      	b.n	1094 <CONFIG_MAIN_STACK_SIZE+0x94>
			if (conv->flag_plus) {
     fb4:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     fb6:	bf5a      	itte	pl
     fb8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     fbc:	015e      	lslpl	r6, r3, #5
				sign = '+';
     fbe:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
     fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
     fc4:	2b00      	cmp	r3, #0
     fc6:	f6bf af65 	bge.w	e94 <cbvprintf+0x4b4>
				value->uint = (uint_value_type)-sint;
     fca:	4252      	negs	r2, r2
     fcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     fd0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     fd2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     fd6:	e75d      	b.n	e94 <cbvprintf+0x4b4>
		switch (conv->specifier) {
     fd8:	2600      	movs	r6, #0
     fda:	e75b      	b.n	e94 <cbvprintf+0x4b4>
		char sign = 0;
     fdc:	2600      	movs	r6, #0
				conv->flag_zero = false;
     fde:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
     fe2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     fe6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     fe8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     fec:	459b      	cmp	fp, r3
				conv->flag_zero = false;
     fee:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
     ff2:	f67f af5d 	bls.w	eb0 <cbvprintf+0x4d0>
					conv->pad0_value = precision - (int)len;
     ff6:	ebab 0303 	sub.w	r3, fp, r3
     ffa:	9313      	str	r3, [sp, #76]	; 0x4c
     ffc:	e758      	b.n	eb0 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
     ffe:	9810      	ldr	r0, [sp, #64]	; 0x40
    1000:	b380      	cbz	r0, 1064 <CONFIG_MAIN_STACK_SIZE+0x64>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1002:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    1006:	ab0a      	add	r3, sp, #40	; 0x28
    1008:	2100      	movs	r1, #0
    100a:	f8cd 8000 	str.w	r8, [sp]
    100e:	aa12      	add	r2, sp, #72	; 0x48
    1010:	f7ff fc9a 	bl	948 <encode_uint>
				conv->altform_0c = true;
    1014:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    1018:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    101c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1020:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1024:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1028:	4607      	mov	r7, r0
				conv->altform_0c = true;
    102a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    102e:	dad5      	bge.n	fdc <cbvprintf+0x5fc>
		if (bps == NULL) {
    1030:	2800      	cmp	r0, #0
    1032:	f43f aee6 	beq.w	e02 <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    1036:	eba8 0000 	sub.w	r0, r8, r0
    103a:	e782      	b.n	f42 <cbvprintf+0x562>
				store_count(conv, value->ptr, count);
    103c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    103e:	2907      	cmp	r1, #7
    1040:	f63f aedf 	bhi.w	e02 <cbvprintf+0x422>
    1044:	e8df f001 	tbb	[pc, r1]
    1048:	0c06040c 	.word	0x0c06040c
    104c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1050:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1052:	e6d6      	b.n	e02 <cbvprintf+0x422>
		*(short *)dp = (short)count;
    1054:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1056:	e6d4      	b.n	e02 <cbvprintf+0x422>
		*(intmax_t *)dp = (intmax_t)count;
    1058:	17ea      	asrs	r2, r5, #31
    105a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    105e:	e6d0      	b.n	e02 <cbvprintf+0x422>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1060:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1062:	e6ce      	b.n	e02 <cbvprintf+0x422>
			bpe = bps + 5;
    1064:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1124 <CONFIG_MAIN_STACK_SIZE+0x124>
		char sign = 0;
    1068:	4606      	mov	r6, r0
    106a:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    106e:	2005      	movs	r0, #5
    1070:	e775      	b.n	f5e <cbvprintf+0x57e>
		} else if (conv->altform_0) {
    1072:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1074:	bf48      	it	mi
    1076:	3001      	addmi	r0, #1
    1078:	e779      	b.n	f6e <cbvprintf+0x58e>
					OUTC(pad);
    107a:	4610      	mov	r0, r2
    107c:	9307      	str	r3, [sp, #28]
    107e:	9206      	str	r2, [sp, #24]
    1080:	9903      	ldr	r1, [sp, #12]
    1082:	47d0      	blx	sl
    1084:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1088:	2800      	cmp	r0, #0
    108a:	da04      	bge.n	1096 <CONFIG_MAIN_STACK_SIZE+0x96>
#undef OUTS
#undef OUTC
}
    108c:	b017      	add	sp, #92	; 0x5c
    108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1092:	2220      	movs	r2, #32
					pad = '0';
    1094:	464b      	mov	r3, r9
				while (width-- > 0) {
    1096:	4619      	mov	r1, r3
    1098:	2900      	cmp	r1, #0
    109a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    109e:	dcec      	bgt.n	107a <CONFIG_MAIN_STACK_SIZE+0x7a>
    10a0:	444d      	add	r5, r9
    10a2:	4699      	mov	r9, r3
    10a4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    10a6:	b12e      	cbz	r6, 10b4 <CONFIG_MAIN_STACK_SIZE+0xb4>
			OUTC(sign);
    10a8:	4630      	mov	r0, r6
    10aa:	9903      	ldr	r1, [sp, #12]
    10ac:	47d0      	blx	sl
    10ae:	2800      	cmp	r0, #0
    10b0:	dbec      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
    10b2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    10b4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    10b8:	06da      	lsls	r2, r3, #27
    10ba:	d401      	bmi.n	10c0 <CONFIG_MAIN_STACK_SIZE+0xc0>
    10bc:	071b      	lsls	r3, r3, #28
    10be:	d505      	bpl.n	10cc <CONFIG_MAIN_STACK_SIZE+0xcc>
				OUTC('0');
    10c0:	2030      	movs	r0, #48	; 0x30
    10c2:	9903      	ldr	r1, [sp, #12]
    10c4:	47d0      	blx	sl
    10c6:	2800      	cmp	r0, #0
    10c8:	dbe0      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
    10ca:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    10cc:	9b05      	ldr	r3, [sp, #20]
    10ce:	b133      	cbz	r3, 10de <CONFIG_MAIN_STACK_SIZE+0xde>
				OUTC(conv->specifier);
    10d0:	9903      	ldr	r1, [sp, #12]
    10d2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    10d6:	47d0      	blx	sl
    10d8:	2800      	cmp	r0, #0
    10da:	dbd7      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
    10dc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    10de:	44ab      	add	fp, r5
    10e0:	e005      	b.n	10ee <CONFIG_MAIN_STACK_SIZE+0xee>
				OUTC('0');
    10e2:	2030      	movs	r0, #48	; 0x30
    10e4:	9903      	ldr	r1, [sp, #12]
    10e6:	47d0      	blx	sl
    10e8:	2800      	cmp	r0, #0
    10ea:	dbcf      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
    10ec:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    10ee:	ebab 0305 	sub.w	r3, fp, r5
    10f2:	2b00      	cmp	r3, #0
    10f4:	dcf5      	bgt.n	10e2 <CONFIG_MAIN_STACK_SIZE+0xe2>
			OUTS(bps, bpe);
    10f6:	4643      	mov	r3, r8
    10f8:	463a      	mov	r2, r7
    10fa:	4650      	mov	r0, sl
    10fc:	9903      	ldr	r1, [sp, #12]
    10fe:	f005 f8b4 	bl	626a <outs>
    1102:	2800      	cmp	r0, #0
    1104:	dbc2      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
    1106:	4405      	add	r5, r0
		while (width > 0) {
    1108:	44a9      	add	r9, r5
    110a:	eba9 0305 	sub.w	r3, r9, r5
    110e:	2b00      	cmp	r3, #0
    1110:	f77f ae77 	ble.w	e02 <cbvprintf+0x422>
			OUTC(' ');
    1114:	2020      	movs	r0, #32
    1116:	9903      	ldr	r1, [sp, #12]
    1118:	47d0      	blx	sl
    111a:	2800      	cmp	r0, #0
    111c:	dbb6      	blt.n	108c <CONFIG_MAIN_STACK_SIZE+0x8c>
    111e:	3501      	adds	r5, #1
			--width;
    1120:	e7f3      	b.n	110a <CONFIG_MAIN_STACK_SIZE+0x10a>
    1122:	bf00      	nop
    1124:	00007408 	.word	0x00007408

00001128 <z_platform_init>:
struct sb_header sbh __attribute((used, section(".sboot"))) = {
	.img_size = (uint32_t)&_image_rom_end,
};

void z_platform_init(void)
{
    1128:	b508      	push	{r3, lr}
	cache_instr_enable();
    112a:	f000 fa77 	bl	161c <cache_instr_enable>

	if (CONFIG_SRAM_NC_SIZE > 0) {
		(void)memset(__bss_nc_start__, 0, __bss_nc_end__ - __bss_nc_start__);
	}
}
    112e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void)memset(__bss_nc_start__, 0, __bss_nc_end__ - __bss_nc_start__);
    1132:	4803      	ldr	r0, [pc, #12]	; (1140 <z_platform_init+0x18>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    1134:	4a03      	ldr	r2, [pc, #12]	; (1144 <z_platform_init+0x1c>)
    1136:	2100      	movs	r1, #0
    1138:	1a12      	subs	r2, r2, r0
    113a:	f005 b9ad 	b.w	6498 <memset>
    113e:	bf00      	nop
    1140:	01000000 	.word	0x01000000
    1144:	01007000 	.word	0x01007000

00001148 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    1148:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    114a:	4c04      	ldr	r4, [pc, #16]	; (115c <__do_init_array_aux+0x14>)
		func < __init_array_end;
    114c:	4d04      	ldr	r5, [pc, #16]	; (1160 <__do_init_array_aux+0x18>)
    114e:	42ac      	cmp	r4, r5
    1150:	d300      	bcc.n	1154 <__do_init_array_aux+0xc>
		func++) {
		(*func)();
	}
}
    1152:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    1154:	f854 3b04 	ldr.w	r3, [r4], #4
    1158:	4798      	blx	r3
		func++) {
    115a:	e7f8      	b.n	114e <__do_init_array_aux+0x6>
    115c:	00007054 	.word	0x00007054
    1160:	00007054 	.word	0x00007054

00001164 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    1164:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    1166:	4c05      	ldr	r4, [pc, #20]	; (117c <__do_global_ctors_aux+0x18>)
    1168:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    116a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    116e:	b905      	cbnz	r5, 1172 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    1170:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    1172:	f854 3904 	ldr.w	r3, [r4], #-4
    1176:	3d01      	subs	r5, #1
    1178:	4798      	blx	r3
    117a:	e7f8      	b.n	116e <__do_global_ctors_aux+0xa>
    117c:	0000704c 	.word	0x0000704c

00001180 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1180:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1182:	4807      	ldr	r0, [pc, #28]	; (11a0 <uart_console_init+0x20>)
    1184:	f001 fe96 	bl	2eb4 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1188:	4c06      	ldr	r4, [pc, #24]	; (11a4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    118a:	4b07      	ldr	r3, [pc, #28]	; (11a8 <uart_console_init+0x28>)
    118c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    118e:	4620      	mov	r0, r4
    1190:	f000 fcc0 	bl	1b14 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1194:	4620      	mov	r0, r4
    1196:	f7ff faf9 	bl	78c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    119a:	2000      	movs	r0, #0
    119c:	bd10      	pop	{r4, pc}
    119e:	bf00      	nop
    11a0:	00007409 	.word	0x00007409
    11a4:	000011ad 	.word	0x000011ad
    11a8:	00008740 	.word	0x00008740

000011ac <console_out>:
	if ('\n' == c) {
    11ac:	280a      	cmp	r0, #10
{
    11ae:	b538      	push	{r3, r4, r5, lr}
    11b0:	4604      	mov	r4, r0
    11b2:	4d07      	ldr	r5, [pc, #28]	; (11d0 <console_out+0x24>)
	if ('\n' == c) {
    11b4:	d104      	bne.n	11c0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    11b6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    11b8:	6883      	ldr	r3, [r0, #8]
    11ba:	210d      	movs	r1, #13
    11bc:	685b      	ldr	r3, [r3, #4]
    11be:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    11c0:	6828      	ldr	r0, [r5, #0]
    11c2:	6883      	ldr	r3, [r0, #8]
    11c4:	b2e1      	uxtb	r1, r4
    11c6:	685b      	ldr	r3, [r3, #4]
    11c8:	4798      	blx	r3
}
    11ca:	4620      	mov	r0, r4
    11cc:	bd38      	pop	{r3, r4, r5, pc}
    11ce:	bf00      	nop
    11d0:	00008740 	.word	0x00008740

000011d4 <aspeed_clock_control_get_rate>:

static int aspeed_clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sub_system, uint32_t *rate)
{
	uint32_t clk_id = (uint32_t)sub_system;
	uint32_t base = DEV_CFG(dev)->base;
    11d4:	6843      	ldr	r3, [r0, #4]
	uint32_t reg, src, clk_div;

	switch (clk_id) {
    11d6:	3928      	subs	r1, #40	; 0x28
{
    11d8:	b510      	push	{r4, lr}
	uint32_t base = DEV_CFG(dev)->base;
    11da:	6818      	ldr	r0, [r3, #0]
	switch (clk_id) {
    11dc:	291b      	cmp	r1, #27
    11de:	d836      	bhi.n	124e <aspeed_clock_control_get_rate+0x7a>
    11e0:	e8df f001 	tbb	[pc, r1]
    11e4:	0e0e0e0e 	.word	0x0e0e0e0e
    11e8:	35350e0e 	.word	0x35350e0e
    11ec:	4b4b4b4b 	.word	0x4b4b4b4b
    11f0:	4b4b3535 	.word	0x4b4b3535
    11f4:	4b4b4b4b 	.word	0x4b4b4b4b
    11f8:	35354b4b 	.word	0x35354b4b
    11fc:	4b433937 	.word	0x4b433937
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1200:	f8d0 1314 	ldr.w	r1, [r0, #788]	; 0x314
	case ASPEED_CLK_GATE_I3C2CLK:
	case ASPEED_CLK_GATE_I3C3CLK:
	case ASPEED_CLK_GATE_I3C4CLK:
	case ASPEED_CLK_GATE_I3C5CLK:
		reg = sys_read32(base + CLK_SELECTION_REG5);
		if (FIELD_GET(I3C_CLK_SRC_SEL, reg) == I3C_CLK_SRC_APLL_DIV) {
    1204:	0fcb      	lsrs	r3, r1, #31
    1206:	d024      	beq.n	1252 <aspeed_clock_control_get_rate+0x7e>
    1208:	f8d0 0210 	ldr.w	r0, [r0, #528]	; 0x210
			src = aspeed_clock_control_get_pll_freq(sys_read32(base + APLL_PARAM_REG));
			clk_div = I3C_CLK_APLL_DIV_REG_TO_NUM(FIELD_GET(I3C_CLK_APLL_DIV_SEL, reg));
    120c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
	if (reg_value & PLL_PARAM_BYPASS_MODE) {
    1210:	01c4      	lsls	r4, r0, #7
		uint32_t m = FIELD_GET(PLL_PARAM_M, reg_value);
    1212:	bf5f      	itttt	pl
    1214:	f3c0 030c 	ubfxpl	r3, r0, #0, #13
		uint32_t n = FIELD_GET(PLL_PARAM_N, reg_value);
    1218:	f3c0 3445 	ubfxpl	r4, r0, #13, #6
		mult = (m + 1) / (n + 1);
    121c:	3301      	addpl	r3, #1
    121e:	3401      	addpl	r4, #1
    1220:	bf54      	ite	pl
    1222:	fbb3 f3f4 	udivpl	r3, r3, r4
		mult = div = 1;
    1226:	4618      	movmi	r0, r3
	return (CLKIN_FREQ * mult / div);
    1228:	4c15      	ldr	r4, [pc, #84]	; (1280 <aspeed_clock_control_get_rate+0xac>)
		uint32_t p = FIELD_GET(PLL_PARAM_P, reg_value);
    122a:	bf58      	it	pl
    122c:	f3c0 40c3 	ubfxpl	r0, r0, #19, #4
	return (CLKIN_FREQ * mult / div);
    1230:	fb04 f303 	mul.w	r3, r4, r3
		div = p + 1;
    1234:	bf58      	it	pl
    1236:	3001      	addpl	r0, #1
			clk_div = I3C_CLK_APLL_DIV_REG_TO_NUM(FIELD_GET(I3C_CLK_APLL_DIV_SEL, reg));
    1238:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	return (CLKIN_FREQ * mult / div);
    123c:	fbb3 f3f0 	udiv	r3, r3, r0
			clk_div = I3C_CLK_APLL_DIV_REG_TO_NUM(FIELD_GET(I3C_CLK_APLL_DIV_SEL, reg));
    1240:	bf32      	itee	cc
    1242:	2102      	movcc	r1, #2
    1244:	0f09      	lsrcs	r1, r1, #28
    1246:	3101      	addcs	r1, #1
			*rate = src / clk_div;
    1248:	fbb3 f3f1 	udiv	r3, r3, r1
	case ASPEED_CLK_GATE_UART9CLK:
	case ASPEED_CLK_GATE_UART10CLK:
	case ASPEED_CLK_GATE_UART11CLK:
	case ASPEED_CLK_GATE_UART12CLK:
	case ASPEED_CLK_GATE_UART13CLK:
		*rate = 24000000 / 13;
    124c:	6013      	str	r3, [r2, #0]
		LOG_ERR("Missing feature define for %d!", clk_id);
		break;
	}

	return 0;
}
    124e:	2000      	movs	r0, #0
    1250:	bd10      	pop	{r4, pc}
		*rate = HCLK_FREQ;
    1252:	4b0c      	ldr	r3, [pc, #48]	; (1284 <aspeed_clock_control_get_rate+0xb0>)
    1254:	e7fa      	b.n	124c <aspeed_clock_control_get_rate+0x78>
    1256:	f8d0 3300 	ldr.w	r3, [r0, #768]	; 0x300
		*rate = src / clk_div;
    125a:	490b      	ldr	r1, [pc, #44]	; (1288 <aspeed_clock_control_get_rate+0xb4>)
		clk_div = APB1_DIV_REG_TO_NUM(FIELD_GET(APB1_DIV_SEL, reg));
    125c:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    1260:	3301      	adds	r3, #1
    1262:	009b      	lsls	r3, r3, #2
		*rate = src / clk_div;
    1264:	fbb1 f3f3 	udiv	r3, r1, r3
    1268:	e7f0      	b.n	124c <aspeed_clock_control_get_rate+0x78>
    126a:	f8d0 3310 	ldr.w	r3, [r0, #784]	; 0x310
    126e:	4905      	ldr	r1, [pc, #20]	; (1284 <aspeed_clock_control_get_rate+0xb0>)
		clk_div = APB2_DIV_REG_TO_NUM(FIELD_GET(APB2_DIV_SEL, reg));
    1270:	f3c3 2342 	ubfx	r3, r3, #9, #3
    1274:	3301      	adds	r3, #1
    1276:	005b      	lsls	r3, r3, #1
    1278:	e7f4      	b.n	1264 <aspeed_clock_control_get_rate+0x90>
		*rate = 24000000 / 13;
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <aspeed_clock_control_get_rate+0xb8>)
    127c:	e7e6      	b.n	124c <aspeed_clock_control_get_rate+0x78>
    127e:	bf00      	nop
    1280:	017d7840 	.word	0x017d7840
    1284:	0bebc200 	.word	0x0bebc200
    1288:	47868c00 	.word	0x47868c00
    128c:	001c2b89 	.word	0x001c2b89

00001290 <pinmux_aspeed_get>:
 */
static int pinmux_aspeed_get(const struct device *dev, uint32_t pin,
			     uint32_t *func)
{
	ARG_UNUSED(dev);
	if (pin >= MAX_PIN_ID) {
    1290:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
		return -EINVAL;
	}
	*func = aspeed_pin_desc_table[pin];
    1294:	bf9d      	ittte	ls
    1296:	4b04      	ldrls	r3, [pc, #16]	; (12a8 <pinmux_aspeed_get+0x18>)
	return 0;
    1298:	2000      	movls	r0, #0
	*func = aspeed_pin_desc_table[pin];
    129a:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
		return -EINVAL;
    129e:	f06f 0015 	mvnhi.w	r0, #21
	*func = aspeed_pin_desc_table[pin];
    12a2:	bf98      	it	ls
    12a4:	6013      	strls	r3, [r2, #0]
}
    12a6:	4770      	bx	lr
    12a8:	00007fd0 	.word	0x00007fd0

000012ac <pinmux_aspeed_set>:
 * @retval -EINVAL  Invalid pin.
 */
static int pinmux_aspeed_set(const struct device *dev, uint32_t pin,
			     uint32_t func)
{
	uint32_t scu_base = DEV_CFG(dev)->base;
    12ac:	6843      	ldr	r3, [r0, #4]
{
    12ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t scu_base = DEV_CFG(dev)->base;
    12b0:	681e      	ldr	r6, [r3, #0]
	const struct aspeed_sig_desc *sig_desc;
	const struct aspeed_sig_en *sig_en;
	struct aspeed_sig_desc dummy = {
    12b2:	2300      	movs	r3, #0
{
    12b4:	b085      	sub	sp, #20
				sizeof(aspeed_gpio_sig_desc_table[0]);
	uint32_t index;
	int sig_en_number;
	int sig_en_idx;

	if (func >= MAX_SIG_ID) {
    12b6:	2a07      	cmp	r2, #7
{
    12b8:	4614      	mov	r4, r2
	struct aspeed_sig_desc dummy = {
    12ba:	f88d 3008 	strb.w	r3, [sp, #8]
    12be:	f8ad 100a 	strh.w	r1, [sp, #10]
    12c2:	9303      	str	r3, [sp, #12]
	if (func >= MAX_SIG_ID) {
    12c4:	d814      	bhi.n	12f0 <pinmux_aspeed_set+0x44>
		return -EINVAL;
	}
	if (func == SIG_GPIO) {
    12c6:	d10c      	bne.n	12e2 <pinmux_aspeed_set+0x36>
			if (pin == aspeed_gpio_sig_desc_table[index]->pin) {
				sig_desc = aspeed_gpio_sig_desc_table[index];
				break;
			}
		}
		func = (pin << 16) | func;
    12c8:	040c      	lsls	r4, r1, #16
    12ca:	f044 0407 	orr.w	r4, r4, #7
    12ce:	ad02      	add	r5, sp, #8

		if (pin != sig_desc->pin) {
			return -EINVAL;
		}
	}
	pinmux_aspeed_get(dev, pin, &ret_sig_id);
    12d0:	aa01      	add	r2, sp, #4
    12d2:	f7ff ffdd 	bl	1290 <pinmux_aspeed_get>
	if (ret_sig_id == func) {
    12d6:	9b01      	ldr	r3, [sp, #4]
    12d8:	42a3      	cmp	r3, r4
    12da:	d10c      	bne.n	12f6 <pinmux_aspeed_set+0x4a>
		return 0;
    12dc:	2000      	movs	r0, #0
				ret_sig_id);
		}
#endif
		return -EBUSY;
	}
}
    12de:	b005      	add	sp, #20
    12e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sig_desc = aspeed_sig_desc_table[func];
    12e2:	4b15      	ldr	r3, [pc, #84]	; (1338 <pinmux_aspeed_set+0x8c>)
    12e4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
		if (sig_desc == NULL) {
    12e8:	b115      	cbz	r5, 12f0 <pinmux_aspeed_set+0x44>
		if (pin != sig_desc->pin) {
    12ea:	886b      	ldrh	r3, [r5, #2]
    12ec:	428b      	cmp	r3, r1
    12ee:	d0ef      	beq.n	12d0 <pinmux_aspeed_set+0x24>
		return -EINVAL;
    12f0:	f06f 0015 	mvn.w	r0, #21
    12f4:	e7f3      	b.n	12de <pinmux_aspeed_set+0x32>
	} else if (ret_sig_id == 0xffffffff) {
    12f6:	3301      	adds	r3, #1
    12f8:	d11a      	bne.n	1330 <pinmux_aspeed_set+0x84>
		aspeed_pin_desc_table[pin] = func;
    12fa:	4b10      	ldr	r3, [pc, #64]	; (133c <pinmux_aspeed_set+0x90>)
					 ~BIT(sig_en->bits)),
    12fc:	2701      	movs	r7, #1
		aspeed_pin_desc_table[pin] = func;
    12fe:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
		for (sig_en_idx = 0; sig_en_idx < sig_en_number; sig_en_idx++) {
    1302:	2300      	movs	r3, #0
		sig_en_number = sig_desc->nsig_en;
    1304:	782c      	ldrb	r4, [r5, #0]
		for (sig_en_idx = 0; sig_en_idx < sig_en_number; sig_en_idx++) {
    1306:	429c      	cmp	r4, r3
    1308:	dde8      	ble.n	12dc <pinmux_aspeed_set+0x30>
			sig_en = &sig_desc->sig_en[sig_en_idx];
    130a:	686a      	ldr	r2, [r5, #4]
    130c:	eb02 0083 	add.w	r0, r2, r3, lsl #2
					 ~BIT(sig_en->bits)),
    1310:	7881      	ldrb	r1, [r0, #2]
			if (sig_en->op) {
    1312:	78c0      	ldrb	r0, [r0, #3]
					(sys_read32(scu_base + sig_en->offset) &
    1314:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
					 ~BIT(sig_en->bits)),
    1318:	fa07 f101 	lsl.w	r1, r7, r1
			if (sig_en->op) {
    131c:	b128      	cbz	r0, 132a <pinmux_aspeed_set+0x7e>
    131e:	5990      	ldr	r0, [r2, r6]
					(sys_read32(scu_base + sig_en->offset) &
    1320:	ea20 0101 	bic.w	r1, r0, r1
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1324:	5191      	str	r1, [r2, r6]
		for (sig_en_idx = 0; sig_en_idx < sig_en_number; sig_en_idx++) {
    1326:	3301      	adds	r3, #1
    1328:	e7ed      	b.n	1306 <pinmux_aspeed_set+0x5a>
	return *(volatile uint32_t *)addr;
    132a:	5990      	ldr	r0, [r2, r6]
					(sys_read32(scu_base + sig_en->offset) |
    132c:	4301      	orrs	r1, r0
    132e:	e7f9      	b.n	1324 <pinmux_aspeed_set+0x78>
		return -EBUSY;
    1330:	f06f 000f 	mvn.w	r0, #15
    1334:	e7d3      	b.n	12de <pinmux_aspeed_set+0x32>
    1336:	bf00      	nop
    1338:	00007fb4 	.word	0x00007fb4
    133c:	00007fd0 	.word	0x00007fd0

00001340 <pinmux_aspeed_init>:
	}
	return ret;
}

static int pinmux_aspeed_init(const struct device *dev)
{
    1340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fun_desc = aspeed_fun_desc_table[fun_id];
    1342:	4b0a      	ldr	r3, [pc, #40]	; (136c <pinmux_aspeed_init+0x2c>)
{
    1344:	4606      	mov	r6, r0
	fun_desc = aspeed_fun_desc_table[fun_id];
    1346:	685c      	ldr	r4, [r3, #4]
	if (fun_desc == NULL) {
    1348:	b12c      	cbz	r4, 1356 <pinmux_aspeed_init+0x16>
	for (sig_idx = 0; sig_idx < sig_number; sig_idx++) {
    134a:	7825      	ldrb	r5, [r4, #0]
		sig_desc = aspeed_sig_desc_table[sig_id];
    134c:	4f08      	ldr	r7, [pc, #32]	; (1370 <pinmux_aspeed_init+0x30>)
    134e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	for (sig_idx = 0; sig_idx < sig_number; sig_idx++) {
    1352:	42ac      	cmp	r4, r5
    1354:	d101      	bne.n	135a <pinmux_aspeed_init+0x1a>
		if (aspeed_fun_en_table[fun_id]) {
			aspeed_pinctrl_fn_group_request(dev, fun_id);
		}
	}
	return 0;
}
    1356:	2000      	movs	r0, #0
    1358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sig_id = fun_desc->sig_id_list[sig_idx];
    135a:	f834 2f02 	ldrh.w	r2, [r4, #2]!
		ret |= pinmux_aspeed_set(dev, sig_desc->pin, sig_id);
    135e:	4630      	mov	r0, r6
    1360:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    1364:	8859      	ldrh	r1, [r3, #2]
    1366:	f7ff ffa1 	bl	12ac <pinmux_aspeed_set>
	for (sig_idx = 0; sig_idx < sig_number; sig_idx++) {
    136a:	e7f2      	b.n	1352 <pinmux_aspeed_init+0x12>
    136c:	00007fac 	.word	0x00007fac
    1370:	00007fb4 	.word	0x00007fb4

00001374 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    1374:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1378:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    137a:	6919      	ldr	r1, [r3, #16]
{
    137c:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    137e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    1382:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    1384:	4908      	ldr	r1, [pc, #32]	; (13a8 <elapsed+0x34>)
    1386:	4b09      	ldr	r3, [pc, #36]	; (13ac <elapsed+0x38>)
    1388:	d101      	bne.n	138e <elapsed+0x1a>
	    || (val1 < val2)) {
    138a:	4282      	cmp	r2, r0
    138c:	d206      	bcs.n	139c <elapsed+0x28>
		overflow_cyc += last_load;
    138e:	681a      	ldr	r2, [r3, #0]
    1390:	680c      	ldr	r4, [r1, #0]
    1392:	4422      	add	r2, r4
    1394:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    1396:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    139a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	680a      	ldr	r2, [r1, #0]
    13a0:	4413      	add	r3, r2
}
    13a2:	1a18      	subs	r0, r3, r0
    13a4:	bd10      	pop	{r4, pc}
    13a6:	bf00      	nop
    13a8:	00008760 	.word	0x00008760
    13ac:	00008754 	.word	0x00008754

000013b0 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
    13b0:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
    13b2:	f7ff ffdf 	bl	1374 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
    13b6:	4b0c      	ldr	r3, [pc, #48]	; (13e8 <sys_clock_isr+0x38>)
    13b8:	4a0c      	ldr	r2, [pc, #48]	; (13ec <sys_clock_isr+0x3c>)
    13ba:	6818      	ldr	r0, [r3, #0]
    13bc:	6811      	ldr	r1, [r2, #0]
    13be:	4408      	add	r0, r1
    13c0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
    13c2:	2200      	movs	r2, #0
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    13c4:	f644 6120 	movw	r1, #20000	; 0x4e20
	overflow_cyc = 0;
    13c8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    13ca:	4a09      	ldr	r2, [pc, #36]	; (13f0 <sys_clock_isr+0x40>)
    13cc:	6813      	ldr	r3, [r2, #0]
    13ce:	1ac0      	subs	r0, r0, r3
    13d0:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
    13d4:	fb01 3300 	mla	r3, r1, r0, r3
    13d8:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    13da:	f003 fd25 	bl	4e28 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
    13de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    13e2:	f000 bb45 	b.w	1a70 <z_arm_exc_exit>
    13e6:	bf00      	nop
    13e8:	00008754 	.word	0x00008754
    13ec:	0000875c 	.word	0x0000875c
    13f0:	00008758 	.word	0x00008758

000013f4 <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13f4:	2220      	movs	r2, #32
    13f6:	4b09      	ldr	r3, [pc, #36]	; (141c <sys_clock_driver_init+0x28>)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
    13f8:	2000      	movs	r0, #0
    13fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
    13fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
    1402:	4b07      	ldr	r3, [pc, #28]	; (1420 <sys_clock_driver_init+0x2c>)
    1404:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    1406:	4b07      	ldr	r3, [pc, #28]	; (1424 <sys_clock_driver_init+0x30>)
    1408:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    140a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    140e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    1410:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    1412:	691a      	ldr	r2, [r3, #16]
    1414:	f042 0207 	orr.w	r2, r2, #7
    1418:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    141a:	4770      	bx	lr
    141c:	e000ed00 	.word	0xe000ed00
    1420:	00008760 	.word	0x00008760
    1424:	00008754 	.word	0x00008754

00001428 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    1428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    142a:	4604      	mov	r4, r0
    142c:	4f45      	ldr	r7, [pc, #276]	; (1544 <sys_clock_set_timeout+0x11c>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    142e:	2900      	cmp	r1, #0
    1430:	d07d      	beq.n	152e <sys_clock_set_timeout+0x106>
    1432:	1c43      	adds	r3, r0, #1
    1434:	d109      	bne.n	144a <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    1436:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    143a:	6913      	ldr	r3, [r2, #16]
    143c:	f023 0301 	bic.w	r3, r3, #1
    1440:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    1442:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    1446:	603b      	str	r3, [r7, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
    1448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
    144a:	683d      	ldr	r5, [r7, #0]
	__asm__ volatile(
    144c:	f04f 0320 	mov.w	r3, #32
    1450:	f3ef 8611 	mrs	r6, BASEPRI
    1454:	f383 8811 	msr	BASEPRI, r3
    1458:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    145c:	483a      	ldr	r0, [pc, #232]	; (1548 <sys_clock_set_timeout+0x120>)
    145e:	f001 febd 	bl	31dc <z_spin_lock_valid>
    1462:	b968      	cbnz	r0, 1480 <sys_clock_set_timeout+0x58>
    1464:	2381      	movs	r3, #129	; 0x81
    1466:	4a39      	ldr	r2, [pc, #228]	; (154c <sys_clock_set_timeout+0x124>)
    1468:	4939      	ldr	r1, [pc, #228]	; (1550 <sys_clock_set_timeout+0x128>)
    146a:	483a      	ldr	r0, [pc, #232]	; (1554 <sys_clock_set_timeout+0x12c>)
    146c:	f004 fe4a 	bl	6104 <printk>
    1470:	4935      	ldr	r1, [pc, #212]	; (1548 <sys_clock_set_timeout+0x120>)
    1472:	4839      	ldr	r0, [pc, #228]	; (1558 <sys_clock_set_timeout+0x130>)
    1474:	f004 fe46 	bl	6104 <printk>
    1478:	2181      	movs	r1, #129	; 0x81
    147a:	4834      	ldr	r0, [pc, #208]	; (154c <sys_clock_set_timeout+0x124>)
    147c:	f004 ff0c 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    1480:	4831      	ldr	r0, [pc, #196]	; (1548 <sys_clock_set_timeout+0x120>)
    1482:	f001 fec7 	bl	3214 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    1486:	f7ff ff75 	bl	1374 <elapsed>
	val1 = SysTick->VAL;
    148a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
    148e:	2200      	movs	r2, #0
	cycle_count += pending;
    1490:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 155c <sys_clock_set_timeout+0x134>
	val1 = SysTick->VAL;
    1494:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
    1496:	f8dc 3000 	ldr.w	r3, [ip]
    149a:	4418      	add	r0, r3
	overflow_cyc = 0U;
    149c:	4b30      	ldr	r3, [pc, #192]	; (1560 <sys_clock_set_timeout+0x138>)
    149e:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    14a0:	4b30      	ldr	r3, [pc, #192]	; (1564 <sys_clock_set_timeout+0x13c>)
    14a2:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
    14a4:	1ac2      	subs	r2, r0, r3
    14a6:	d44a      	bmi.n	153e <sys_clock_set_timeout+0x116>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    14a8:	f240 3e45 	movw	lr, #837	; 0x345
    14ac:	3c01      	subs	r4, #1
    14ae:	4574      	cmp	r4, lr
    14b0:	bfa8      	it	ge
    14b2:	4674      	movge	r4, lr
		delay = ticks * CYC_PER_TICK;
    14b4:	f644 6e20 	movw	lr, #20000	; 0x4e20
    14b8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    14bc:	fb0e 2204 	mla	r2, lr, r4, r2
    14c0:	f502 429c 	add.w	r2, r2, #19968	; 0x4e00
    14c4:	321f      	adds	r2, #31
    14c6:	fbb2 f2fe 	udiv	r2, r2, lr
		delay -= unannounced;
    14ca:	1a1b      	subs	r3, r3, r0
    14cc:	fb0e 3302 	mla	r3, lr, r2, r3
		delay = MAX(delay, MIN_DELAY);
    14d0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    14d4:	4293      	cmp	r3, r2
    14d6:	d932      	bls.n	153e <sys_clock_set_timeout+0x116>
		if (delay > MAX_CYCLES) {
    14d8:	4a23      	ldr	r2, [pc, #140]	; (1568 <sys_clock_set_timeout+0x140>)
    14da:	4293      	cmp	r3, r2
    14dc:	bf28      	it	cs
    14de:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
    14e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
    14e4:	603b      	str	r3, [r7, #0]
	SysTick->LOAD = last_load - 1;
    14e6:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
    14e8:	6994      	ldr	r4, [r2, #24]
	SysTick->LOAD = last_load - 1;
    14ea:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    14ec:	2300      	movs	r3, #0
	if (val1 < val2) {
    14ee:	42a1      	cmp	r1, r4
    14f0:	eba1 0104 	sub.w	r1, r1, r4
		cycle_count += (val1 + (last_load_ - val2));
    14f4:	bf38      	it	cc
    14f6:	1949      	addcc	r1, r1, r5
		cycle_count += (val1 - val2);
    14f8:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
    14fa:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 - val2);
    14fc:	f8cc 0000 	str.w	r0, [ip]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1500:	4811      	ldr	r0, [pc, #68]	; (1548 <sys_clock_set_timeout+0x120>)
    1502:	f001 fe79 	bl	31f8 <z_spin_unlock_valid>
    1506:	b968      	cbnz	r0, 1524 <sys_clock_set_timeout+0xfc>
    1508:	23ac      	movs	r3, #172	; 0xac
    150a:	4a10      	ldr	r2, [pc, #64]	; (154c <sys_clock_set_timeout+0x124>)
    150c:	4917      	ldr	r1, [pc, #92]	; (156c <sys_clock_set_timeout+0x144>)
    150e:	4811      	ldr	r0, [pc, #68]	; (1554 <sys_clock_set_timeout+0x12c>)
    1510:	f004 fdf8 	bl	6104 <printk>
    1514:	490c      	ldr	r1, [pc, #48]	; (1548 <sys_clock_set_timeout+0x120>)
    1516:	4816      	ldr	r0, [pc, #88]	; (1570 <sys_clock_set_timeout+0x148>)
    1518:	f004 fdf4 	bl	6104 <printk>
    151c:	21ac      	movs	r1, #172	; 0xac
    151e:	480b      	ldr	r0, [pc, #44]	; (154c <sys_clock_set_timeout+0x124>)
    1520:	f004 feba 	bl	6298 <assert_post_action>
	__asm__ volatile(
    1524:	f386 8811 	msr	BASEPRI, r6
    1528:	f3bf 8f6f 	isb	sy
    152c:	e78c      	b.n	1448 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    152e:	f240 3345 	movw	r3, #837	; 0x345
	uint32_t last_load_ = last_load;
    1532:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1534:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1538:	bf08      	it	eq
    153a:	461c      	moveq	r4, r3
    153c:	e786      	b.n	144c <sys_clock_set_timeout+0x24>
    153e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1542:	e7cd      	b.n	14e0 <sys_clock_set_timeout+0xb8>
    1544:	00008760 	.word	0x00008760
    1548:	00008764 	.word	0x00008764
    154c:	00007430 	.word	0x00007430
    1550:	00007456 	.word	0x00007456
    1554:	000072be 	.word	0x000072be
    1558:	0000746b 	.word	0x0000746b
    155c:	0000875c 	.word	0x0000875c
    1560:	00008754 	.word	0x00008754
    1564:	00008758 	.word	0x00008758
    1568:	00ff6ea0 	.word	0x00ff6ea0
    156c:	00007483 	.word	0x00007483
    1570:	0000749a 	.word	0x0000749a

00001574 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    1574:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1576:	f04f 0320 	mov.w	r3, #32
    157a:	f3ef 8511 	mrs	r5, BASEPRI
    157e:	f383 8811 	msr	BASEPRI, r3
    1582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1586:	481c      	ldr	r0, [pc, #112]	; (15f8 <sys_clock_elapsed+0x84>)
    1588:	f001 fe28 	bl	31dc <z_spin_lock_valid>
    158c:	b968      	cbnz	r0, 15aa <sys_clock_elapsed+0x36>
    158e:	2381      	movs	r3, #129	; 0x81
    1590:	4a1a      	ldr	r2, [pc, #104]	; (15fc <sys_clock_elapsed+0x88>)
    1592:	491b      	ldr	r1, [pc, #108]	; (1600 <sys_clock_elapsed+0x8c>)
    1594:	481b      	ldr	r0, [pc, #108]	; (1604 <sys_clock_elapsed+0x90>)
    1596:	f004 fdb5 	bl	6104 <printk>
    159a:	4917      	ldr	r1, [pc, #92]	; (15f8 <sys_clock_elapsed+0x84>)
    159c:	481a      	ldr	r0, [pc, #104]	; (1608 <sys_clock_elapsed+0x94>)
    159e:	f004 fdb1 	bl	6104 <printk>
    15a2:	2181      	movs	r1, #129	; 0x81
    15a4:	4815      	ldr	r0, [pc, #84]	; (15fc <sys_clock_elapsed+0x88>)
    15a6:	f004 fe77 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    15aa:	4813      	ldr	r0, [pc, #76]	; (15f8 <sys_clock_elapsed+0x84>)
    15ac:	f001 fe32 	bl	3214 <z_spin_lock_set_owner>
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    15b0:	f7ff fee0 	bl	1374 <elapsed>
    15b4:	4b15      	ldr	r3, [pc, #84]	; (160c <sys_clock_elapsed+0x98>)
    15b6:	681c      	ldr	r4, [r3, #0]
    15b8:	4b15      	ldr	r3, [pc, #84]	; (1610 <sys_clock_elapsed+0x9c>)
    15ba:	681b      	ldr	r3, [r3, #0]
    15bc:	1ae4      	subs	r4, r4, r3
    15be:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    15c0:	480d      	ldr	r0, [pc, #52]	; (15f8 <sys_clock_elapsed+0x84>)
    15c2:	f001 fe19 	bl	31f8 <z_spin_unlock_valid>
    15c6:	b968      	cbnz	r0, 15e4 <sys_clock_elapsed+0x70>
    15c8:	23ac      	movs	r3, #172	; 0xac
    15ca:	4a0c      	ldr	r2, [pc, #48]	; (15fc <sys_clock_elapsed+0x88>)
    15cc:	4911      	ldr	r1, [pc, #68]	; (1614 <sys_clock_elapsed+0xa0>)
    15ce:	480d      	ldr	r0, [pc, #52]	; (1604 <sys_clock_elapsed+0x90>)
    15d0:	f004 fd98 	bl	6104 <printk>
    15d4:	4908      	ldr	r1, [pc, #32]	; (15f8 <sys_clock_elapsed+0x84>)
    15d6:	4810      	ldr	r0, [pc, #64]	; (1618 <sys_clock_elapsed+0xa4>)
    15d8:	f004 fd94 	bl	6104 <printk>
    15dc:	21ac      	movs	r1, #172	; 0xac
    15de:	4807      	ldr	r0, [pc, #28]	; (15fc <sys_clock_elapsed+0x88>)
    15e0:	f004 fe5a 	bl	6298 <assert_post_action>
	__asm__ volatile(
    15e4:	f385 8811 	msr	BASEPRI, r5
    15e8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
    15ec:	f644 6020 	movw	r0, #20000	; 0x4e20
    15f0:	fbb4 f0f0 	udiv	r0, r4, r0
    15f4:	bd38      	pop	{r3, r4, r5, pc}
    15f6:	bf00      	nop
    15f8:	00008764 	.word	0x00008764
    15fc:	00007430 	.word	0x00007430
    1600:	00007456 	.word	0x00007456
    1604:	000072be 	.word	0x000072be
    1608:	0000746b 	.word	0x0000746b
    160c:	0000875c 	.word	0x0000875c
    1610:	00008758 	.word	0x00008758
    1614:	00007483 	.word	0x00007483
    1618:	0000749a 	.word	0x0000749a

0000161c <cache_instr_enable>:
	uint32_t base = DT_REG_ADDR(DT_NODELABEL(syscon));

	sys_write32(0, base + CACHE_FUNC_CTRL_REG);
}

void cache_instr_enable(void)
    161c:	2200      	movs	r2, #0
    161e:	4b04      	ldr	r3, [pc, #16]	; (1630 <cache_instr_enable+0x14>)
    1620:	f8c3 2a48 	str.w	r2, [r3, #2632]	; 0xa48
    1624:	2201      	movs	r2, #1
    1626:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    162a:	f8c3 2a48 	str.w	r2, [r3, #2632]	; 0xa48
    162e:	4770      	bx	lr
    1630:	7e6e2000 	.word	0x7e6e2000

00001634 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1634:	4a0a      	ldr	r2, [pc, #40]	; (1660 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1636:	490b      	ldr	r1, [pc, #44]	; (1664 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1638:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    163a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    163c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    1640:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1644:	4908      	ldr	r1, [pc, #32]	; (1668 <arch_swap+0x34>)
    1646:	684b      	ldr	r3, [r1, #4]
    1648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    164c:	604b      	str	r3, [r1, #4]
    164e:	2300      	movs	r3, #0
    1650:	f383 8811 	msr	BASEPRI, r3
    1654:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1658:	6893      	ldr	r3, [r2, #8]
}
    165a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    165e:	4770      	bx	lr
    1660:	000087d4 	.word	0x000087d4
    1664:	00007180 	.word	0x00007180
    1668:	e000ed00 	.word	0xe000ed00

0000166c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    166c:	4910      	ldr	r1, [pc, #64]	; (16b0 <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    166e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1670:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1674:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1676:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    167a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    167e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1680:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1684:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1688:	4f0a      	ldr	r7, [pc, #40]	; (16b4 <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    168a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    168e:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1690:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1692:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1694:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    1698:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    169a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    169e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    16a2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    16a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    16aa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    16ae:	4770      	bx	lr
    ldr r1, =_kernel
    16b0:	000087d4 	.word	0x000087d4
    ldr v4, =_SCS_ICSR
    16b4:	e000ed04 	.word	0xe000ed04

000016b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    16b8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    16bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    16be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    16c2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    16c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    16c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    16cc:	2902      	cmp	r1, #2
    beq _oops
    16ce:	d0ff      	beq.n	16d0 <_oops>

000016d0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    16d0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    16d2:	f004 fe2a 	bl	632a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    16d6:	bd01      	pop	{r0, pc}

000016d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    16d8:	b200      	sxth	r0, r0
  if ((int32_t)(IRQn) >= 0)
    16da:	2800      	cmp	r0, #0
    16dc:	db07      	blt.n	16ee <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16de:	2301      	movs	r3, #1
    16e0:	0941      	lsrs	r1, r0, #5
    16e2:	4a03      	ldr	r2, [pc, #12]	; (16f0 <arch_irq_enable+0x18>)
    16e4:	f000 001f 	and.w	r0, r0, #31
    16e8:	4083      	lsls	r3, r0
    16ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    16ee:	4770      	bx	lr
    16f0:	e000e100 	.word	0xe000e100

000016f4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    16f4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    16f6:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    16f8:	2d07      	cmp	r5, #7
{
    16fa:	4604      	mov	r4, r0
    16fc:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    16fe:	d90f      	bls.n	1720 <z_arm_irq_priority_set+0x2c>
    1700:	2358      	movs	r3, #88	; 0x58
    1702:	4a10      	ldr	r2, [pc, #64]	; (1744 <z_arm_irq_priority_set+0x50>)
    1704:	4910      	ldr	r1, [pc, #64]	; (1748 <z_arm_irq_priority_set+0x54>)
    1706:	4811      	ldr	r0, [pc, #68]	; (174c <z_arm_irq_priority_set+0x58>)
    1708:	f004 fcfc 	bl	6104 <printk>
    170c:	4631      	mov	r1, r6
    170e:	4810      	ldr	r0, [pc, #64]	; (1750 <z_arm_irq_priority_set+0x5c>)
    1710:	2307      	movs	r3, #7
    1712:	4622      	mov	r2, r4
    1714:	f004 fcf6 	bl	6104 <printk>
    1718:	2158      	movs	r1, #88	; 0x58
    171a:	480a      	ldr	r0, [pc, #40]	; (1744 <z_arm_irq_priority_set+0x50>)
    171c:	f004 fdbc 	bl	6298 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1720:	b220      	sxth	r0, r4
  if ((int32_t)(IRQn) >= 0)
    1722:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1724:	bfac      	ite	ge
    1726:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    172a:	4b0a      	ldrlt	r3, [pc, #40]	; (1754 <z_arm_irq_priority_set+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    172c:	ea4f 1545 	mov.w	r5, r5, lsl #5
    1730:	b2ed      	uxtb	r5, r5
    1732:	bfab      	itete	ge
    1734:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1738:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    173c:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1740:	541d      	strblt	r5, [r3, r0]
}
    1742:	bd70      	pop	{r4, r5, r6, pc}
    1744:	000074af 	.word	0x000074af
    1748:	000074e5 	.word	0x000074e5
    174c:	000072be 	.word	0x000072be
    1750:	00007500 	.word	0x00007500
    1754:	e000ed14 	.word	0xe000ed14

00001758 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1758:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    175c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    175e:	490b      	ldr	r1, [pc, #44]	; (178c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1760:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1764:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1766:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    176a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    176e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1770:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1774:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    177c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1780:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1782:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1784:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1786:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    178a:	4770      	bx	lr
    178c:	00006139 	.word	0x00006139

00001790 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1790:	4b07      	ldr	r3, [pc, #28]	; (17b0 <arch_switch_to_main_thread+0x20>)
    1792:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1794:	4610      	mov	r0, r2
    1796:	f381 8809 	msr	PSP, r1
    179a:	2100      	movs	r1, #0
    179c:	b663      	cpsie	if
    179e:	f381 8811 	msr	BASEPRI, r1
    17a2:	f3bf 8f6f 	isb	sy
    17a6:	2200      	movs	r2, #0
    17a8:	2300      	movs	r3, #0
    17aa:	f004 fcc5 	bl	6138 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    17ae:	bf00      	nop
    17b0:	000087d4 	.word	0x000087d4

000017b4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    17b4:	4901      	ldr	r1, [pc, #4]	; (17bc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    17b6:	2210      	movs	r2, #16
	str	r2, [r1]
    17b8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    17ba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    17bc:	e000ed10 	.word	0xe000ed10

000017c0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    17c0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    17c2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    17c4:	f380 8811 	msr	BASEPRI, r0
	isb
    17c8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    17cc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    17d0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    17d2:	b662      	cpsie	i
	isb
    17d4:	f3bf 8f6f 	isb	sy

	bx	lr
    17d8:	4770      	bx	lr
    17da:	bf00      	nop

000017dc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    17dc:	bf30      	wfi
    b z_SysNmiOnReset
    17de:	f7ff bffd 	b.w	17dc <z_SysNmiOnReset>
    17e2:	bf00      	nop

000017e4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    17e4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17e6:	4b07      	ldr	r3, [pc, #28]	; (1804 <z_arm_prep_c+0x20>)
    17e8:	4a07      	ldr	r2, [pc, #28]	; (1808 <z_arm_prep_c+0x24>)
    17ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17ee:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    17f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17f4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    17f8:	f001 fbd8 	bl	2fac <z_bss_zero>
	z_data_copy();
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    17fc:	f000 f94c 	bl	1a98 <z_arm_interrupt_init>
	z_cstart();
    1800:	f001 fbfc 	bl	2ffc <z_cstart>
    1804:	00000000 	.word	0x00000000
    1808:	e000ed00 	.word	0xe000ed00

0000180c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    180c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    180e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1812:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1816:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    181a:	4904      	ldr	r1, [pc, #16]	; (182c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    181c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    181e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1820:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1822:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1826:	4902      	ldr	r1, [pc, #8]	; (1830 <_isr_wrapper+0x24>)
	bx r1
    1828:	4708      	bx	r1
    182a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    182c:	000068cc 	.word	0x000068cc
	ldr r1, =z_arm_int_exit
    1830:	00001a71 	.word	0x00001a71

00001834 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1834:	f7ff fc78 	bl	1128 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1838:	2020      	movs	r0, #32
    msr BASEPRI, r0
    183a:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    183e:	480b      	ldr	r0, [pc, #44]	; (186c <__start+0x38>)
    ldr r1, =0xaa
    1840:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1844:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    1848:	f004 fe26 	bl	6498 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    184c:	4807      	ldr	r0, [pc, #28]	; (186c <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    184e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1852:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1854:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1858:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    185c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    185e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1860:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1864:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1868:	f7ff ffbc 	bl	17e4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    186c:	00009948 	.word	0x00009948

00001870 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1870:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1874:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1878:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    187a:	4672      	mov	r2, lr
	bl z_arm_fault
    187c:	f000 f85a 	bl	1934 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1880:	bd01      	pop	{r0, pc}
    1882:	bf00      	nop

00001884 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1884:	4b0b      	ldr	r3, [pc, #44]	; (18b4 <bus_fault.constprop.0+0x30>)
    1886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    188c:	0592      	lsls	r2, r2, #22
    188e:	d508      	bpl.n	18a2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1890:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1894:	0412      	lsls	r2, r2, #16
    1896:	d504      	bpl.n	18a2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1898:	b118      	cbz	r0, 18a2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    189c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    18a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    18a2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    18a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    18a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18aa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    18ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    18b0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    18b2:	4770      	bx	lr
    18b4:	e000ed00 	.word	0xe000ed00

000018b8 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18b8:	4b19      	ldr	r3, [pc, #100]	; (1920 <mem_manage_fault.constprop.0+0x68>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    18ba:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    18be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    18c2:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18c4:	0791      	lsls	r1, r2, #30
    18c6:	d508      	bpl.n	18da <mem_manage_fault.constprop.0+0x22>
		uint32_t temp = SCB->MMFAR;
    18c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    18ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18cc:	0612      	lsls	r2, r2, #24
    18ce:	d504      	bpl.n	18da <mem_manage_fault.constprop.0+0x22>
			if (from_hard_fault != 0) {
    18d0:	b118      	cbz	r0, 18da <mem_manage_fault.constprop.0+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    18d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    18d8:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    18da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    18dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18de:	06d1      	lsls	r1, r2, #27
    18e0:	d402      	bmi.n	18e8 <mem_manage_fault.constprop.0+0x30>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    18e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    18e4:	079a      	lsls	r2, r3, #30
    18e6:	d512      	bpl.n	190e <mem_manage_fault.constprop.0+0x56>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    18e8:	4b0d      	ldr	r3, [pc, #52]	; (1920 <mem_manage_fault.constprop.0+0x68>)
    18ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18ec:	06db      	lsls	r3, r3, #27
    18ee:	d50e      	bpl.n	190e <mem_manage_fault.constprop.0+0x56>
    18f0:	490c      	ldr	r1, [pc, #48]	; (1924 <mem_manage_fault.constprop.0+0x6c>)
    18f2:	f240 134f 	movw	r3, #335	; 0x14f
    18f6:	4a0c      	ldr	r2, [pc, #48]	; (1928 <mem_manage_fault.constprop.0+0x70>)
    18f8:	480c      	ldr	r0, [pc, #48]	; (192c <mem_manage_fault.constprop.0+0x74>)
    18fa:	f004 fc03 	bl	6104 <printk>
    18fe:	480c      	ldr	r0, [pc, #48]	; (1930 <mem_manage_fault.constprop.0+0x78>)
    1900:	f004 fc00 	bl	6104 <printk>
    1904:	f240 114f 	movw	r1, #335	; 0x14f
    1908:	4807      	ldr	r0, [pc, #28]	; (1928 <mem_manage_fault.constprop.0+0x70>)
    190a:	f004 fcc5 	bl	6298 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    190e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1910:	4a03      	ldr	r2, [pc, #12]	; (1920 <mem_manage_fault.constprop.0+0x68>)
    1912:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1914:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1918:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    191a:	7020      	strb	r0, [r4, #0]
}
    191c:	bd10      	pop	{r4, pc}
    191e:	bf00      	nop
    1920:	e000ed00 	.word	0xe000ed00
    1924:	0000757a 	.word	0x0000757a
    1928:	00007540 	.word	0x00007540
    192c:	000072be 	.word	0x000072be
    1930:	000075c4 	.word	0x000075c4

00001934 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1934:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1936:	4b45      	ldr	r3, [pc, #276]	; (1a4c <z_arm_fault+0x118>)
{
    1938:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    193a:	685e      	ldr	r6, [r3, #4]
    193c:	2400      	movs	r4, #0
{
    193e:	b08b      	sub	sp, #44	; 0x2c
    1940:	f3c6 0608 	ubfx	r6, r6, #0, #9
    1944:	f384 8811 	msr	BASEPRI, r4
    1948:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    194c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1950:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1954:	d108      	bne.n	1968 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1956:	f002 030c 	and.w	r3, r2, #12
    195a:	2b08      	cmp	r3, #8
    195c:	d004      	beq.n	1968 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    195e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1960:	bf4c      	ite	mi
    1962:	460d      	movmi	r5, r1
			*nested_exc = true;
    1964:	2401      	movpl	r4, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1966:	b97d      	cbnz	r5, 1988 <z_arm_fault+0x54>
    1968:	f240 33e1 	movw	r3, #993	; 0x3e1
    196c:	4a38      	ldr	r2, [pc, #224]	; (1a50 <z_arm_fault+0x11c>)
    196e:	4939      	ldr	r1, [pc, #228]	; (1a54 <z_arm_fault+0x120>)
    1970:	4839      	ldr	r0, [pc, #228]	; (1a58 <z_arm_fault+0x124>)
    1972:	f004 fbc7 	bl	6104 <printk>
    1976:	4839      	ldr	r0, [pc, #228]	; (1a5c <z_arm_fault+0x128>)
    1978:	f004 fbc4 	bl	6104 <printk>
    197c:	f240 31e1 	movw	r1, #993	; 0x3e1
    1980:	4833      	ldr	r0, [pc, #204]	; (1a50 <z_arm_fault+0x11c>)
    1982:	f004 fc89 	bl	6298 <assert_post_action>
    1986:	2500      	movs	r5, #0
	*recoverable = false;
    1988:	2300      	movs	r3, #0
    198a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    198e:	1ef3      	subs	r3, r6, #3
    1990:	2b03      	cmp	r3, #3
    1992:	d82c      	bhi.n	19ee <z_arm_fault+0xba>
    1994:	e8df f003 	tbb	[pc, r3]
    1998:	534f4b02 	.word	0x534f4b02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    199c:	4b2b      	ldr	r3, [pc, #172]	; (1a4c <z_arm_fault+0x118>)
    199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19a0:	0791      	lsls	r1, r2, #30
    19a2:	d424      	bmi.n	19ee <z_arm_fault+0xba>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    19a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19a6:	0052      	lsls	r2, r2, #1
    19a8:	d521      	bpl.n	19ee <z_arm_fault+0xba>
		if (SCB_MMFSR != 0) {
    19aa:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    19ae:	b12a      	cbz	r2, 19bc <z_arm_fault+0x88>
			reason = mem_manage_fault(esf, 1, recoverable);
    19b0:	2001      	movs	r0, #1
    19b2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    19b6:	f7ff ff7f 	bl	18b8 <mem_manage_fault.constprop.0>
    19ba:	e007      	b.n	19cc <z_arm_fault+0x98>
		} else if (SCB_BFSR != 0) {
    19bc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    19c0:	b132      	cbz	r2, 19d0 <z_arm_fault+0x9c>
			reason = bus_fault(esf, 1, recoverable);
    19c2:	2001      	movs	r0, #1
    19c4:	f10d 0107 	add.w	r1, sp, #7
    19c8:	f7ff ff5c 	bl	1884 <bus_fault.constprop.0>
    19cc:	4603      	mov	r3, r0
    19ce:	e00f      	b.n	19f0 <z_arm_fault+0xbc>
		} else if (SCB_UFSR != 0) {
    19d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    19d2:	b292      	uxth	r2, r2
    19d4:	b15a      	cbz	r2, 19ee <z_arm_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    19d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    19d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    19da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    19dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    19de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    19e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    19e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19e4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    19e8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    19ec:	629a      	str	r2, [r3, #40]	; 0x28
	__ASSERT(esf != NULL,
    19ee:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    19f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    19f4:	b9ca      	cbnz	r2, 1a2a <z_arm_fault+0xf6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    19f6:	462a      	mov	r2, r5
    19f8:	ae02      	add	r6, sp, #8
    19fa:	f105 0720 	add.w	r7, r5, #32
    19fe:	4635      	mov	r5, r6
    1a00:	6810      	ldr	r0, [r2, #0]
    1a02:	6851      	ldr	r1, [r2, #4]
    1a04:	3208      	adds	r2, #8
    1a06:	c503      	stmia	r5!, {r0, r1}
    1a08:	42ba      	cmp	r2, r7
    1a0a:	462e      	mov	r6, r5
    1a0c:	d1f7      	bne.n	19fe <z_arm_fault+0xca>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a10:	b1bc      	cbz	r4, 1a42 <z_arm_fault+0x10e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1a12:	f3c2 0108 	ubfx	r1, r2, #0, #9
    1a16:	b921      	cbnz	r1, 1a22 <z_arm_fault+0xee>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1a18:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    1a1c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a20:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1a22:	4618      	mov	r0, r3
    1a24:	a902      	add	r1, sp, #8
    1a26:	f004 fc7e 	bl	6326 <z_arm_fatal_error>
}
    1a2a:	b00b      	add	sp, #44	; 0x2c
    1a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1a2e:	2000      	movs	r0, #0
    1a30:	f10d 0107 	add.w	r1, sp, #7
    1a34:	e7bf      	b.n	19b6 <z_arm_fault+0x82>
		reason = bus_fault(esf, 0, recoverable);
    1a36:	2000      	movs	r0, #0
    1a38:	f10d 0107 	add.w	r1, sp, #7
    1a3c:	e7c4      	b.n	19c8 <z_arm_fault+0x94>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a3e:	4b03      	ldr	r3, [pc, #12]	; (1a4c <z_arm_fault+0x118>)
    1a40:	e7c9      	b.n	19d6 <z_arm_fault+0xa2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a42:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    1a46:	f022 0201 	bic.w	r2, r2, #1
    1a4a:	e7e9      	b.n	1a20 <z_arm_fault+0xec>
    1a4c:	e000ed00 	.word	0xe000ed00
    1a50:	00007540 	.word	0x00007540
    1a54:	00007628 	.word	0x00007628
    1a58:	000072be 	.word	0x000072be
    1a5c:	0000763b 	.word	0x0000763b

00001a60 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1a60:	4a02      	ldr	r2, [pc, #8]	; (1a6c <z_arm_fault_init+0xc>)
    1a62:	6953      	ldr	r3, [r2, #20]
    1a64:	f043 0310 	orr.w	r3, r3, #16
    1a68:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1a6a:	4770      	bx	lr
    1a6c:	e000ed00 	.word	0xe000ed00

00001a70 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1a70:	4b07      	ldr	r3, [pc, #28]	; (1a90 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1a72:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1a74:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
    1a76:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1a78:	d003      	beq.n	1a82 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1a7a:	4906      	ldr	r1, [pc, #24]	; (1a94 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
    1a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1a80:	600a      	str	r2, [r1, #0]

00001a82 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
    1a82:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
    1a84:	f001 fb92 	bl	31ac <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
    1a88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1a8c:	4770      	bx	lr
    1a8e:	0000      	.short	0x0000
	ldr r3, =_kernel
    1a90:	000087d4 	.word	0x000087d4
	ldr r1, =_SCS_ICSR
    1a94:	e000ed04 	.word	0xe000ed04

00001a98 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1a98:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a9a:	2120      	movs	r1, #32
    1a9c:	4803      	ldr	r0, [pc, #12]	; (1aac <z_arm_interrupt_init+0x14>)
    1a9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1aa0:	3301      	adds	r3, #1
    1aa2:	2bf0      	cmp	r3, #240	; 0xf0
    1aa4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1aa8:	d1f9      	bne.n	1a9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1aaa:	4770      	bx	lr
    1aac:	e000e100 	.word	0xe000e100

00001ab0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1ab0:	4b06      	ldr	r3, [pc, #24]	; (1acc <z_impl_k_thread_abort+0x1c>)
    1ab2:	689b      	ldr	r3, [r3, #8]
    1ab4:	4283      	cmp	r3, r0
    1ab6:	d107      	bne.n	1ac8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ab8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1abc:	b123      	cbz	r3, 1ac8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1abe:	4a04      	ldr	r2, [pc, #16]	; (1ad0 <z_impl_k_thread_abort+0x20>)
    1ac0:	6853      	ldr	r3, [r2, #4]
    1ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1ac6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1ac8:	f002 bed2 	b.w	4870 <z_thread_abort>
    1acc:	000087d4 	.word	0x000087d4
    1ad0:	e000ed00 	.word	0xe000ed00

00001ad4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    1ad4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    1ad6:	4b0a      	ldr	r3, [pc, #40]	; (1b00 <malloc_prepare+0x2c>)
    1ad8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
    1adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    1ae0:	d20c      	bcs.n	1afc <malloc_prepare+0x28>
    1ae2:	4908      	ldr	r1, [pc, #32]	; (1b04 <malloc_prepare+0x30>)
    1ae4:	237f      	movs	r3, #127	; 0x7f
    1ae6:	4a08      	ldr	r2, [pc, #32]	; (1b08 <malloc_prepare+0x34>)
    1ae8:	4808      	ldr	r0, [pc, #32]	; (1b0c <malloc_prepare+0x38>)
    1aea:	f004 fb0b 	bl	6104 <printk>
    1aee:	4808      	ldr	r0, [pc, #32]	; (1b10 <malloc_prepare+0x3c>)
    1af0:	f004 fb08 	bl	6104 <printk>
    1af4:	217f      	movs	r1, #127	; 0x7f
    1af6:	4804      	ldr	r0, [pc, #16]	; (1b08 <malloc_prepare+0x34>)
    1af8:	f004 fbce 	bl	6298 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    1afc:	2000      	movs	r0, #0
    1afe:	bd08      	pop	{r3, pc}
    1b00:	0000a548 	.word	0x0000a548
    1b04:	000076a9 	.word	0x000076a9
    1b08:	00007679 	.word	0x00007679
    1b0c:	000072be 	.word	0x000072be
    1b10:	000076eb 	.word	0x000076eb

00001b14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b14:	4b01      	ldr	r3, [pc, #4]	; (1b1c <__stdout_hook_install+0x8>)
    1b16:	6018      	str	r0, [r3, #0]
}
    1b18:	4770      	bx	lr
    1b1a:	bf00      	nop
    1b1c:	00008404 	.word	0x00008404

00001b20 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    1b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b22:	4606      	mov	r6, r0
    1b24:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    1b26:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    1b28:	4f06      	ldr	r7, [pc, #24]	; (1b44 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    1b2a:	42ac      	cmp	r4, r5
    1b2c:	da08      	bge.n	1b40 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    1b2e:	683b      	ldr	r3, [r7, #0]
    1b30:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    1b32:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    1b34:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    1b36:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    1b3a:	d001      	beq.n	1b40 <z_impl_zephyr_read_stdin+0x20>
    1b3c:	280d      	cmp	r0, #13
    1b3e:	d1f4      	bne.n	1b2a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    1b40:	4620      	mov	r0, r4
    1b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b44:	00008400 	.word	0x00008400

00001b48 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    1b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b4a:	460d      	mov	r5, r1
    1b4c:	4f09      	ldr	r7, [pc, #36]	; (1b74 <z_impl_zephyr_write_stdout+0x2c>)
    1b4e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    1b50:	f1c0 0401 	rsb	r4, r0, #1
    1b54:	19a3      	adds	r3, r4, r6
    1b56:	429d      	cmp	r5, r3
    1b58:	dc01      	bgt.n	1b5e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    1b5a:	4628      	mov	r0, r5
    1b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    1b5e:	7873      	ldrb	r3, [r6, #1]
    1b60:	2b0a      	cmp	r3, #10
    1b62:	d102      	bne.n	1b6a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    1b64:	200d      	movs	r0, #13
    1b66:	683b      	ldr	r3, [r7, #0]
    1b68:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    1b6a:	683b      	ldr	r3, [r7, #0]
    1b6c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    1b70:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    1b72:	e7ef      	b.n	1b54 <z_impl_zephyr_write_stdout+0xc>
    1b74:	00008404 	.word	0x00008404

00001b78 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    1b78:	4906      	ldr	r1, [pc, #24]	; (1b94 <_sbrk+0x1c>)
{
    1b7a:	b510      	push	{r4, lr}
	ptr = ((char *)HEAP_BASE) + heap_sz;
    1b7c:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1b7e:	18c2      	adds	r2, r0, r3
    1b80:	4805      	ldr	r0, [pc, #20]	; (1b98 <_sbrk+0x20>)
    1b82:	f1c0 7480 	rsb	r4, r0, #16777216	; 0x1000000
    1b86:	42a2      	cmp	r2, r4
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
    1b88:	bf2e      	itee	cs
    1b8a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    1b8e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    1b90:	600a      	strcc	r2, [r1, #0]
	}

	return ret;
}
    1b92:	bd10      	pop	{r4, pc}
    1b94:	00008768 	.word	0x00008768
    1b98:	0000a548 	.word	0x0000a548

00001b9c <__malloc_lock>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ba4:	4801      	ldr	r0, [pc, #4]	; (1bac <__malloc_lock+0x10>)
    1ba6:	f001 bd49 	b.w	363c <z_impl_k_mutex_lock>
    1baa:	bf00      	nop
    1bac:	000083ec 	.word	0x000083ec

00001bb0 <__malloc_unlock>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1bb0:	4801      	ldr	r0, [pc, #4]	; (1bb8 <__malloc_unlock+0x8>)
    1bb2:	f001 be3d 	b.w	3830 <z_impl_k_mutex_unlock>
    1bb6:	bf00      	nop
    1bb8:	000083ec 	.word	0x000083ec

00001bbc <uart_aspeed_poll_in>:

	uint32_t iir_cache;
};

static int uart_aspeed_poll_in(const struct device *dev, unsigned char *c)
{
    1bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bbe:	460d      	mov	r5, r1
	int rc = -1;
	uint32_t rptr, wptr;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1bc0:	6904      	ldr	r4, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1bc2:	6846      	ldr	r6, [r0, #4]
	__asm__ volatile(
    1bc4:	f04f 0320 	mov.w	r3, #32
    1bc8:	f3ef 8711 	mrs	r7, BASEPRI
    1bcc:	f383 8811 	msr	BASEPRI, r3
    1bd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1bd4:	4620      	mov	r0, r4
    1bd6:	f001 fb01 	bl	31dc <z_spin_lock_valid>
    1bda:	b968      	cbnz	r0, 1bf8 <uart_aspeed_poll_in+0x3c>
    1bdc:	2381      	movs	r3, #129	; 0x81
    1bde:	4a23      	ldr	r2, [pc, #140]	; (1c6c <uart_aspeed_poll_in+0xb0>)
    1be0:	4923      	ldr	r1, [pc, #140]	; (1c70 <uart_aspeed_poll_in+0xb4>)
    1be2:	4824      	ldr	r0, [pc, #144]	; (1c74 <uart_aspeed_poll_in+0xb8>)
    1be4:	f004 fa8e 	bl	6104 <printk>
    1be8:	4621      	mov	r1, r4
    1bea:	4823      	ldr	r0, [pc, #140]	; (1c78 <uart_aspeed_poll_in+0xbc>)
    1bec:	f004 fa8a 	bl	6104 <printk>
    1bf0:	2181      	movs	r1, #129	; 0x81
    1bf2:	481e      	ldr	r0, [pc, #120]	; (1c6c <uart_aspeed_poll_in+0xb0>)
    1bf4:	f004 fb50 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    1bf8:	4620      	mov	r0, r4
    1bfa:	f001 fb0b 	bl	3214 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    1bfe:	f896 3020 	ldrb.w	r3, [r6, #32]
    1c02:	b34b      	cbz	r3, 1c58 <uart_aspeed_poll_in+0x9c>
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c04:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1c06:	491d      	ldr	r1, [pc, #116]	; (1c7c <uart_aspeed_poll_in+0xc0>)
		wptr = sys_read32(udma_base + UDMA_CHX_RX_WR_PTR(dev_cfg->dma_ch));
    1c08:	481d      	ldr	r0, [pc, #116]	; (1c80 <uart_aspeed_poll_in+0xc4>)
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c0a:	0152      	lsls	r2, r2, #5
    1c0c:	5853      	ldr	r3, [r2, r1]
    1c0e:	5812      	ldr	r2, [r2, r0]

		if (rptr != wptr) {
    1c10:	429a      	cmp	r2, r3
    1c12:	d028      	beq.n	1c66 <uart_aspeed_poll_in+0xaa>
			*c = data->rx_rb[rptr];
    1c14:	6962      	ldr	r2, [r4, #20]
    1c16:	5cd2      	ldrb	r2, [r2, r3]
			rc = 0;
			sys_write32((rptr + 1) % UDMA_RX_RBSZ, udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c18:	3301      	adds	r3, #1
			*c = data->rx_rb[rptr];
    1c1a:	702a      	strb	r2, [r5, #0]
			sys_write32((rptr + 1) % UDMA_RX_RBSZ, udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1c1c:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1c22:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1c24:	5053      	str	r3, [r2, r1]
			rc = 0;
    1c26:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1c28:	4620      	mov	r0, r4
    1c2a:	f001 fae5 	bl	31f8 <z_spin_unlock_valid>
    1c2e:	b968      	cbnz	r0, 1c4c <uart_aspeed_poll_in+0x90>
    1c30:	23ac      	movs	r3, #172	; 0xac
    1c32:	4a0e      	ldr	r2, [pc, #56]	; (1c6c <uart_aspeed_poll_in+0xb0>)
    1c34:	4913      	ldr	r1, [pc, #76]	; (1c84 <uart_aspeed_poll_in+0xc8>)
    1c36:	480f      	ldr	r0, [pc, #60]	; (1c74 <uart_aspeed_poll_in+0xb8>)
    1c38:	f004 fa64 	bl	6104 <printk>
    1c3c:	4621      	mov	r1, r4
    1c3e:	4812      	ldr	r0, [pc, #72]	; (1c88 <uart_aspeed_poll_in+0xcc>)
    1c40:	f004 fa60 	bl	6104 <printk>
    1c44:	21ac      	movs	r1, #172	; 0xac
    1c46:	4809      	ldr	r0, [pc, #36]	; (1c6c <uart_aspeed_poll_in+0xb0>)
    1c48:	f004 fb26 	bl	6298 <assert_post_action>
	__asm__ volatile(
    1c4c:	f387 8811 	msr	BASEPRI, r7
    1c50:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&data->lock, key);

	return rc;
}
    1c54:	4628      	mov	r0, r5
    1c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_DR) {
    1c58:	6873      	ldr	r3, [r6, #4]
	return *(volatile uint32_t *)addr;
    1c5a:	695a      	ldr	r2, [r3, #20]
    1c5c:	07d2      	lsls	r2, r2, #31
    1c5e:	d502      	bpl.n	1c66 <uart_aspeed_poll_in+0xaa>
    1c60:	681b      	ldr	r3, [r3, #0]
			*c = (unsigned char)sys_read32(dev_cfg->base + UART_RBR);
    1c62:	702b      	strb	r3, [r5, #0]
			rc = 0;
    1c64:	e7df      	b.n	1c26 <uart_aspeed_poll_in+0x6a>
	int rc = -1;
    1c66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1c6a:	e7dd      	b.n	1c28 <uart_aspeed_poll_in+0x6c>
    1c6c:	00007430 	.word	0x00007430
    1c70:	00007456 	.word	0x00007456
    1c74:	000072be 	.word	0x000072be
    1c78:	0000746b 	.word	0x0000746b
    1c7c:	7e79e050 	.word	0x7e79e050
    1c80:	7e79e054 	.word	0x7e79e054
    1c84:	00007483 	.word	0x00007483
    1c88:	0000749a 	.word	0x0000749a

00001c8c <uart_aspeed_poll_out>:

static void uart_aspeed_poll_out(const struct device *dev,
				 unsigned char c)
{
    1c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c8e:	460d      	mov	r5, r1
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1c90:	6904      	ldr	r4, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1c92:	6846      	ldr	r6, [r0, #4]
	__asm__ volatile(
    1c94:	f04f 0320 	mov.w	r3, #32
    1c98:	f3ef 8711 	mrs	r7, BASEPRI
    1c9c:	f383 8811 	msr	BASEPRI, r3
    1ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1ca4:	4620      	mov	r0, r4
    1ca6:	f001 fa99 	bl	31dc <z_spin_lock_valid>
    1caa:	b968      	cbnz	r0, 1cc8 <uart_aspeed_poll_out+0x3c>
    1cac:	2381      	movs	r3, #129	; 0x81
    1cae:	4a24      	ldr	r2, [pc, #144]	; (1d40 <uart_aspeed_poll_out+0xb4>)
    1cb0:	4924      	ldr	r1, [pc, #144]	; (1d44 <uart_aspeed_poll_out+0xb8>)
    1cb2:	4825      	ldr	r0, [pc, #148]	; (1d48 <uart_aspeed_poll_out+0xbc>)
    1cb4:	f004 fa26 	bl	6104 <printk>
    1cb8:	4621      	mov	r1, r4
    1cba:	4824      	ldr	r0, [pc, #144]	; (1d4c <uart_aspeed_poll_out+0xc0>)
    1cbc:	f004 fa22 	bl	6104 <printk>
    1cc0:	2181      	movs	r1, #129	; 0x81
    1cc2:	481f      	ldr	r0, [pc, #124]	; (1d40 <uart_aspeed_poll_out+0xb4>)
    1cc4:	f004 fae8 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    1cc8:	4620      	mov	r0, r4
    1cca:	f001 faa3 	bl	3214 <z_spin_lock_set_owner>
	uint32_t rptr, wptr;

	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    1cce:	f896 3020 	ldrb.w	r3, [r6, #32]
    1cd2:	b363      	cbz	r3, 1d2e <uart_aspeed_poll_out+0xa2>
		do {
			rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    1cd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1cd6:	491e      	ldr	r1, [pc, #120]	; (1d50 <uart_aspeed_poll_out+0xc4>)
			wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1cd8:	4a1e      	ldr	r2, [pc, #120]	; (1d54 <uart_aspeed_poll_out+0xc8>)
			rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    1cda:	3302      	adds	r3, #2
    1cdc:	eb01 1143 	add.w	r1, r1, r3, lsl #5
			wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1ce0:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    1ce4:	f8d1 c000 	ldr.w	ip, [r1]
    1ce8:	6810      	ldr	r0, [r2, #0]
		} while (((wptr + 1) % UDMA_TX_RBSZ) == rptr);
    1cea:	1c43      	adds	r3, r0, #1
    1cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1cf0:	4563      	cmp	r3, ip
    1cf2:	d0f7      	beq.n	1ce4 <uart_aspeed_poll_out+0x58>

		data->tx_rb[wptr] = c;
    1cf4:	68e2      	ldr	r2, [r4, #12]
		sys_write32((wptr + 1) % UDMA_TX_RBSZ, udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1cf6:	4918      	ldr	r1, [pc, #96]	; (1d58 <uart_aspeed_poll_out+0xcc>)
		data->tx_rb[wptr] = c;
    1cf8:	5415      	strb	r5, [r2, r0]
		sys_write32((wptr + 1) % UDMA_TX_RBSZ, udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1cfa:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1cfc:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1cfe:	5053      	str	r3, [r2, r1]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1d00:	4620      	mov	r0, r4
    1d02:	f001 fa79 	bl	31f8 <z_spin_unlock_valid>
    1d06:	b968      	cbnz	r0, 1d24 <uart_aspeed_poll_out+0x98>
    1d08:	23ac      	movs	r3, #172	; 0xac
    1d0a:	4a0d      	ldr	r2, [pc, #52]	; (1d40 <uart_aspeed_poll_out+0xb4>)
    1d0c:	4913      	ldr	r1, [pc, #76]	; (1d5c <uart_aspeed_poll_out+0xd0>)
    1d0e:	480e      	ldr	r0, [pc, #56]	; (1d48 <uart_aspeed_poll_out+0xbc>)
    1d10:	f004 f9f8 	bl	6104 <printk>
    1d14:	4621      	mov	r1, r4
    1d16:	4812      	ldr	r0, [pc, #72]	; (1d60 <uart_aspeed_poll_out+0xd4>)
    1d18:	f004 f9f4 	bl	6104 <printk>
    1d1c:	21ac      	movs	r1, #172	; 0xac
    1d1e:	4808      	ldr	r0, [pc, #32]	; (1d40 <uart_aspeed_poll_out+0xb4>)
    1d20:	f004 faba 	bl	6298 <assert_post_action>
	__asm__ volatile(
    1d24:	f387 8811 	msr	BASEPRI, r7
    1d28:	f3bf 8f6f 	isb	sy
			;
		sys_write32(c, dev_cfg->base + UART_THR);
	}

	k_spin_unlock(&data->lock, key);
}
    1d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while (!(sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_THRE))
    1d2e:	6873      	ldr	r3, [r6, #4]
    1d30:	f103 0114 	add.w	r1, r3, #20
	return *(volatile uint32_t *)addr;
    1d34:	680a      	ldr	r2, [r1, #0]
    1d36:	0692      	lsls	r2, r2, #26
    1d38:	d5fc      	bpl.n	1d34 <uart_aspeed_poll_out+0xa8>
	*(volatile uint32_t *)addr = data;
    1d3a:	601d      	str	r5, [r3, #0]
}
    1d3c:	e7e0      	b.n	1d00 <uart_aspeed_poll_out+0x74>
    1d3e:	bf00      	nop
    1d40:	00007430 	.word	0x00007430
    1d44:	00007456 	.word	0x00007456
    1d48:	000072be 	.word	0x000072be
    1d4c:	0000746b 	.word	0x0000746b
    1d50:	7e79e000 	.word	0x7e79e000
    1d54:	7e79e004 	.word	0x7e79e004
    1d58:	7e79e044 	.word	0x7e79e044
    1d5c:	00007483 	.word	0x00007483
    1d60:	0000749a 	.word	0x0000749a

00001d64 <uart_aspeed_err_check>:

static int uart_aspeed_err_check(const struct device *dev)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
	int check;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1d66:	6845      	ldr	r5, [r0, #4]

	k_spinlock_key_t key = k_spin_lock(&data->lock);
    1d68:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    1d6a:	f04f 0320 	mov.w	r3, #32
    1d6e:	f3ef 8611 	mrs	r6, BASEPRI
    1d72:	f383 8811 	msr	BASEPRI, r3
    1d76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1d7a:	4620      	mov	r0, r4
    1d7c:	f001 fa2e 	bl	31dc <z_spin_lock_valid>
    1d80:	b968      	cbnz	r0, 1d9e <uart_aspeed_err_check+0x3a>
    1d82:	2381      	movs	r3, #129	; 0x81
    1d84:	4a15      	ldr	r2, [pc, #84]	; (1ddc <uart_aspeed_err_check+0x78>)
    1d86:	4916      	ldr	r1, [pc, #88]	; (1de0 <uart_aspeed_err_check+0x7c>)
    1d88:	4816      	ldr	r0, [pc, #88]	; (1de4 <uart_aspeed_err_check+0x80>)
    1d8a:	f004 f9bb 	bl	6104 <printk>
    1d8e:	4621      	mov	r1, r4
    1d90:	4815      	ldr	r0, [pc, #84]	; (1de8 <uart_aspeed_err_check+0x84>)
    1d92:	f004 f9b7 	bl	6104 <printk>
    1d96:	2181      	movs	r1, #129	; 0x81
    1d98:	4810      	ldr	r0, [pc, #64]	; (1ddc <uart_aspeed_err_check+0x78>)
    1d9a:	f004 fa7d 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    1d9e:	4620      	mov	r0, r4
    1da0:	f001 fa38 	bl	3214 <z_spin_lock_set_owner>

	check = sys_read32(dev_cfg->base + UART_LSR) &
    1da4:	686b      	ldr	r3, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1da6:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    1da8:	695d      	ldr	r5, [r3, #20]
    1daa:	f001 fa25 	bl	31f8 <z_spin_unlock_valid>
    1dae:	b968      	cbnz	r0, 1dcc <uart_aspeed_err_check+0x68>
    1db0:	23ac      	movs	r3, #172	; 0xac
    1db2:	4a0a      	ldr	r2, [pc, #40]	; (1ddc <uart_aspeed_err_check+0x78>)
    1db4:	490d      	ldr	r1, [pc, #52]	; (1dec <uart_aspeed_err_check+0x88>)
    1db6:	480b      	ldr	r0, [pc, #44]	; (1de4 <uart_aspeed_err_check+0x80>)
    1db8:	f004 f9a4 	bl	6104 <printk>
    1dbc:	4621      	mov	r1, r4
    1dbe:	480c      	ldr	r0, [pc, #48]	; (1df0 <uart_aspeed_err_check+0x8c>)
    1dc0:	f004 f9a0 	bl	6104 <printk>
    1dc4:	21ac      	movs	r1, #172	; 0xac
    1dc6:	4805      	ldr	r0, [pc, #20]	; (1ddc <uart_aspeed_err_check+0x78>)
    1dc8:	f004 fa66 	bl	6298 <assert_post_action>
	__asm__ volatile(
    1dcc:	f386 8811 	msr	BASEPRI, r6
    1dd0:	f3bf 8f6f 	isb	sy
		(UART_LSR_BI | UART_LSR_FE | UART_LSR_PE | UART_LSR_OE | UART_LSR_DR);

	k_spin_unlock(&data->lock, key);

	return (check >> 1);
}
    1dd4:	f3c5 0043 	ubfx	r0, r5, #1, #4
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
    1dda:	bf00      	nop
    1ddc:	00007430 	.word	0x00007430
    1de0:	00007456 	.word	0x00007456
    1de4:	000072be 	.word	0x000072be
    1de8:	0000746b 	.word	0x0000746b
    1dec:	00007483 	.word	0x00007483
    1df0:	0000749a 	.word	0x0000749a

00001df4 <uart_aspeed_fifo_fill>:
}

static int uart_aspeed_fifo_fill(const struct device *dev,
				  const uint8_t *tx_data,
				  int size)
{
    1df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	uint32_t rptr = 0, wptr = 0;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1df8:	6847      	ldr	r7, [r0, #4]
{
    1dfa:	4688      	mov	r8, r1
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    1dfc:	f897 3020 	ldrb.w	r3, [r7, #32]
{
    1e00:	4616      	mov	r6, r2
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1e02:	6905      	ldr	r5, [r0, #16]
	if (dev_cfg->dma) {
    1e04:	2b00      	cmp	r3, #0
    1e06:	d052      	beq.n	1eae <uart_aspeed_fifo_fill+0xba>
	__asm__ volatile(
    1e08:	f04f 0320 	mov.w	r3, #32
    1e0c:	f3ef 8911 	mrs	r9, BASEPRI
    1e10:	f383 8811 	msr	BASEPRI, r3
    1e14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1e18:	4840      	ldr	r0, [pc, #256]	; (1f1c <uart_aspeed_fifo_fill+0x128>)
    1e1a:	f001 f9df 	bl	31dc <z_spin_lock_valid>
    1e1e:	b968      	cbnz	r0, 1e3c <uart_aspeed_fifo_fill+0x48>
    1e20:	2381      	movs	r3, #129	; 0x81
    1e22:	4a3f      	ldr	r2, [pc, #252]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1e24:	493f      	ldr	r1, [pc, #252]	; (1f24 <uart_aspeed_fifo_fill+0x130>)
    1e26:	4840      	ldr	r0, [pc, #256]	; (1f28 <uart_aspeed_fifo_fill+0x134>)
    1e28:	f004 f96c 	bl	6104 <printk>
    1e2c:	493b      	ldr	r1, [pc, #236]	; (1f1c <uart_aspeed_fifo_fill+0x128>)
    1e2e:	483f      	ldr	r0, [pc, #252]	; (1f2c <uart_aspeed_fifo_fill+0x138>)
    1e30:	f004 f968 	bl	6104 <printk>
    1e34:	2181      	movs	r1, #129	; 0x81
    1e36:	483a      	ldr	r0, [pc, #232]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1e38:	f004 fa2e 	bl	6298 <assert_post_action>
		key = k_spin_lock(&udma_lock);

		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));

		for (i = 0; i < size; ++i) {
    1e3c:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
    1e3e:	4837      	ldr	r0, [pc, #220]	; (1f1c <uart_aspeed_fifo_fill+0x128>)
    1e40:	f001 f9e8 	bl	3214 <z_spin_lock_set_owner>
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    1e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e46:	4a3a      	ldr	r2, [pc, #232]	; (1f30 <uart_aspeed_fifo_fill+0x13c>)
    1e48:	3302      	adds	r3, #2
    1e4a:	015b      	lsls	r3, r3, #5
    1e4c:	5899      	ldr	r1, [r3, r2]
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1e4e:	3204      	adds	r2, #4
    1e50:	589b      	ldr	r3, [r3, r2]
		for (i = 0; i < size; ++i) {
    1e52:	42b4      	cmp	r4, r6
    1e54:	da04      	bge.n	1e60 <uart_aspeed_fifo_fill+0x6c>
			if (((wptr + 1) % UDMA_TX_RBSZ) == rptr)
    1e56:	1c5a      	adds	r2, r3, #1
    1e58:	f3c2 0209 	ubfx	r2, r2, #0, #10
    1e5c:	428a      	cmp	r2, r1
    1e5e:	d119      	bne.n	1e94 <uart_aspeed_fifo_fill+0xa0>

			data->tx_rb[wptr] = tx_data[i];
			wptr = (wptr + 1) % UDMA_TX_RBSZ;
		}

		if (i)
    1e60:	bb04      	cbnz	r4, 1ea4 <uart_aspeed_fifo_fill+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1e62:	482e      	ldr	r0, [pc, #184]	; (1f1c <uart_aspeed_fifo_fill+0x128>)
    1e64:	f001 f9c8 	bl	31f8 <z_spin_unlock_valid>
    1e68:	b968      	cbnz	r0, 1e86 <uart_aspeed_fifo_fill+0x92>
    1e6a:	4932      	ldr	r1, [pc, #200]	; (1f34 <uart_aspeed_fifo_fill+0x140>)
    1e6c:	23ac      	movs	r3, #172	; 0xac
    1e6e:	4a2c      	ldr	r2, [pc, #176]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1e70:	482d      	ldr	r0, [pc, #180]	; (1f28 <uart_aspeed_fifo_fill+0x134>)
    1e72:	f004 f947 	bl	6104 <printk>
    1e76:	4929      	ldr	r1, [pc, #164]	; (1f1c <uart_aspeed_fifo_fill+0x128>)
    1e78:	482f      	ldr	r0, [pc, #188]	; (1f38 <uart_aspeed_fifo_fill+0x144>)
    1e7a:	f004 f943 	bl	6104 <printk>
    1e7e:	21ac      	movs	r1, #172	; 0xac
    1e80:	4827      	ldr	r0, [pc, #156]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1e82:	f004 fa09 	bl	6298 <assert_post_action>
	__asm__ volatile(
    1e86:	f389 8811 	msr	BASEPRI, r9
    1e8a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return i;
}
    1e8e:	4620      	mov	r0, r4
    1e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			data->tx_rb[wptr] = tx_data[i];
    1e94:	f818 c004 	ldrb.w	ip, [r8, r4]
    1e98:	68e8      	ldr	r0, [r5, #12]
		for (i = 0; i < size; ++i) {
    1e9a:	3401      	adds	r4, #1
			data->tx_rb[wptr] = tx_data[i];
    1e9c:	f800 c003 	strb.w	ip, [r0, r3]
		for (i = 0; i < size; ++i) {
    1ea0:	4613      	mov	r3, r2
    1ea2:	e7d6      	b.n	1e52 <uart_aspeed_fifo_fill+0x5e>
			sys_write32(wptr, udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    1ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ea6:	4925      	ldr	r1, [pc, #148]	; (1f3c <uart_aspeed_fifo_fill+0x148>)
    1ea8:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1eaa:	5053      	str	r3, [r2, r1]
}
    1eac:	e7d9      	b.n	1e62 <uart_aspeed_fifo_fill+0x6e>
	__asm__ volatile(
    1eae:	f04f 0320 	mov.w	r3, #32
    1eb2:	f3ef 8911 	mrs	r9, BASEPRI
    1eb6:	f383 8811 	msr	BASEPRI, r3
    1eba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1ebe:	4628      	mov	r0, r5
    1ec0:	f001 f98c 	bl	31dc <z_spin_lock_valid>
    1ec4:	b968      	cbnz	r0, 1ee2 <uart_aspeed_fifo_fill+0xee>
    1ec6:	2381      	movs	r3, #129	; 0x81
    1ec8:	4a15      	ldr	r2, [pc, #84]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1eca:	4916      	ldr	r1, [pc, #88]	; (1f24 <uart_aspeed_fifo_fill+0x130>)
    1ecc:	4816      	ldr	r0, [pc, #88]	; (1f28 <uart_aspeed_fifo_fill+0x134>)
    1ece:	f004 f919 	bl	6104 <printk>
    1ed2:	4629      	mov	r1, r5
    1ed4:	4815      	ldr	r0, [pc, #84]	; (1f2c <uart_aspeed_fifo_fill+0x138>)
    1ed6:	f004 f915 	bl	6104 <printk>
    1eda:	2181      	movs	r1, #129	; 0x81
    1edc:	4810      	ldr	r0, [pc, #64]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1ede:	f004 f9db 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    1ee2:	4628      	mov	r0, r5
    1ee4:	f001 f996 	bl	3214 <z_spin_lock_set_owner>
		for (i = 0; i < size; ++i) {
    1ee8:	2400      	movs	r4, #0
    1eea:	42b4      	cmp	r4, r6
    1eec:	da03      	bge.n	1ef6 <uart_aspeed_fifo_fill+0x102>
			if (!(sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_THRE))
    1eee:	687b      	ldr	r3, [r7, #4]
	return *(volatile uint32_t *)addr;
    1ef0:	695a      	ldr	r2, [r3, #20]
    1ef2:	0692      	lsls	r2, r2, #26
    1ef4:	d40c      	bmi.n	1f10 <uart_aspeed_fifo_fill+0x11c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ef6:	4628      	mov	r0, r5
    1ef8:	f001 f97e 	bl	31f8 <z_spin_unlock_valid>
    1efc:	2800      	cmp	r0, #0
    1efe:	d1c2      	bne.n	1e86 <uart_aspeed_fifo_fill+0x92>
    1f00:	490c      	ldr	r1, [pc, #48]	; (1f34 <uart_aspeed_fifo_fill+0x140>)
    1f02:	23ac      	movs	r3, #172	; 0xac
    1f04:	4a06      	ldr	r2, [pc, #24]	; (1f20 <uart_aspeed_fifo_fill+0x12c>)
    1f06:	4808      	ldr	r0, [pc, #32]	; (1f28 <uart_aspeed_fifo_fill+0x134>)
    1f08:	f004 f8fc 	bl	6104 <printk>
    1f0c:	4629      	mov	r1, r5
    1f0e:	e7b3      	b.n	1e78 <uart_aspeed_fifo_fill+0x84>
			sys_write32(tx_data[i], dev_cfg->base + UART_THR);
    1f10:	f818 2004 	ldrb.w	r2, [r8, r4]
		for (i = 0; i < size; ++i) {
    1f14:	3401      	adds	r4, #1
	*(volatile uint32_t *)addr = data;
    1f16:	601a      	str	r2, [r3, #0]
    1f18:	e7e7      	b.n	1eea <uart_aspeed_fifo_fill+0xf6>
    1f1a:	bf00      	nop
    1f1c:	00008798 	.word	0x00008798
    1f20:	00007430 	.word	0x00007430
    1f24:	00007456 	.word	0x00007456
    1f28:	000072be 	.word	0x000072be
    1f2c:	0000746b 	.word	0x0000746b
    1f30:	7e79e000 	.word	0x7e79e000
    1f34:	00007483 	.word	0x00007483
    1f38:	0000749a 	.word	0x0000749a
    1f3c:	7e79e044 	.word	0x7e79e044

00001f40 <uart_aspeed_fifo_read>:

static int uart_aspeed_fifo_read(const struct device *dev, uint8_t *rx_data,
				  const int size)
{
    1f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	uint32_t rptr = 0, wptr = 0;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    1f44:	6847      	ldr	r7, [r0, #4]
{
    1f46:	4688      	mov	r8, r1
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    1f48:	f897 3020 	ldrb.w	r3, [r7, #32]
{
    1f4c:	4616      	mov	r6, r2
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    1f4e:	6905      	ldr	r5, [r0, #16]
	if (dev_cfg->dma) {
    1f50:	2b00      	cmp	r3, #0
    1f52:	d04e      	beq.n	1ff2 <uart_aspeed_fifo_read+0xb2>
    1f54:	f04f 0320 	mov.w	r3, #32
    1f58:	f3ef 8911 	mrs	r9, BASEPRI
    1f5c:	f383 8811 	msr	BASEPRI, r3
    1f60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f64:	483e      	ldr	r0, [pc, #248]	; (2060 <uart_aspeed_fifo_read+0x120>)
    1f66:	f001 f939 	bl	31dc <z_spin_lock_valid>
    1f6a:	b968      	cbnz	r0, 1f88 <uart_aspeed_fifo_read+0x48>
    1f6c:	2381      	movs	r3, #129	; 0x81
    1f6e:	4a3d      	ldr	r2, [pc, #244]	; (2064 <uart_aspeed_fifo_read+0x124>)
    1f70:	493d      	ldr	r1, [pc, #244]	; (2068 <uart_aspeed_fifo_read+0x128>)
    1f72:	483e      	ldr	r0, [pc, #248]	; (206c <uart_aspeed_fifo_read+0x12c>)
    1f74:	f004 f8c6 	bl	6104 <printk>
    1f78:	4939      	ldr	r1, [pc, #228]	; (2060 <uart_aspeed_fifo_read+0x120>)
    1f7a:	483d      	ldr	r0, [pc, #244]	; (2070 <uart_aspeed_fifo_read+0x130>)
    1f7c:	f004 f8c2 	bl	6104 <printk>
    1f80:	2181      	movs	r1, #129	; 0x81
    1f82:	4838      	ldr	r0, [pc, #224]	; (2064 <uart_aspeed_fifo_read+0x124>)
    1f84:	f004 f988 	bl	6298 <assert_post_action>
		key = k_spin_lock(&udma_lock);

		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
		wptr = sys_read32(udma_base + UDMA_CHX_RX_WR_PTR(dev_cfg->dma_ch));

		for (i = 0; i < size; ++i) {
    1f88:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
    1f8a:	4835      	ldr	r0, [pc, #212]	; (2060 <uart_aspeed_fifo_read+0x120>)
    1f8c:	f001 f942 	bl	3214 <z_spin_lock_set_owner>
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f92:	4938      	ldr	r1, [pc, #224]	; (2074 <uart_aspeed_fifo_read+0x134>)
		wptr = sys_read32(udma_base + UDMA_CHX_RX_WR_PTR(dev_cfg->dma_ch));
    1f94:	4838      	ldr	r0, [pc, #224]	; (2078 <uart_aspeed_fifo_read+0x138>)
		rptr = sys_read32(udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1f96:	0152      	lsls	r2, r2, #5
	return *(volatile uint32_t *)addr;
    1f98:	5853      	ldr	r3, [r2, r1]
    1f9a:	5812      	ldr	r2, [r2, r0]
		for (i = 0; i < size; ++i) {
    1f9c:	42b4      	cmp	r4, r6
    1f9e:	da01      	bge.n	1fa4 <uart_aspeed_fifo_read+0x64>
			if (rptr == wptr)
    1fa0:	4293      	cmp	r3, r2
    1fa2:	d119      	bne.n	1fd8 <uart_aspeed_fifo_read+0x98>

			rx_data[i] = data->rx_rb[rptr];
			rptr = (rptr + 1) % UDMA_RX_RBSZ;
		}

		if (i)
    1fa4:	bb0c      	cbnz	r4, 1fea <uart_aspeed_fifo_read+0xaa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1fa6:	482e      	ldr	r0, [pc, #184]	; (2060 <uart_aspeed_fifo_read+0x120>)
    1fa8:	f001 f926 	bl	31f8 <z_spin_unlock_valid>
    1fac:	b968      	cbnz	r0, 1fca <uart_aspeed_fifo_read+0x8a>
    1fae:	4933      	ldr	r1, [pc, #204]	; (207c <uart_aspeed_fifo_read+0x13c>)
    1fb0:	23ac      	movs	r3, #172	; 0xac
    1fb2:	4a2c      	ldr	r2, [pc, #176]	; (2064 <uart_aspeed_fifo_read+0x124>)
    1fb4:	482d      	ldr	r0, [pc, #180]	; (206c <uart_aspeed_fifo_read+0x12c>)
    1fb6:	f004 f8a5 	bl	6104 <printk>
    1fba:	4929      	ldr	r1, [pc, #164]	; (2060 <uart_aspeed_fifo_read+0x120>)
    1fbc:	4830      	ldr	r0, [pc, #192]	; (2080 <uart_aspeed_fifo_read+0x140>)
    1fbe:	f004 f8a1 	bl	6104 <printk>
    1fc2:	21ac      	movs	r1, #172	; 0xac
    1fc4:	4827      	ldr	r0, [pc, #156]	; (2064 <uart_aspeed_fifo_read+0x124>)
    1fc6:	f004 f967 	bl	6298 <assert_post_action>
	__asm__ volatile(
    1fca:	f389 8811 	msr	BASEPRI, r9
    1fce:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return i;
}
    1fd2:	4620      	mov	r0, r4
    1fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			rx_data[i] = data->rx_rb[rptr];
    1fd8:	6968      	ldr	r0, [r5, #20]
    1fda:	5cc0      	ldrb	r0, [r0, r3]
			rptr = (rptr + 1) % UDMA_RX_RBSZ;
    1fdc:	3301      	adds	r3, #1
			rx_data[i] = data->rx_rb[rptr];
    1fde:	f808 0004 	strb.w	r0, [r8, r4]
			rptr = (rptr + 1) % UDMA_RX_RBSZ;
    1fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
		for (i = 0; i < size; ++i) {
    1fe6:	3401      	adds	r4, #1
    1fe8:	e7d8      	b.n	1f9c <uart_aspeed_fifo_read+0x5c>
			sys_write32(rptr, udma_base + UDMA_CHX_RX_RD_PTR(dev_cfg->dma_ch));
    1fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1fec:	0152      	lsls	r2, r2, #5
	*(volatile uint32_t *)addr = data;
    1fee:	5053      	str	r3, [r2, r1]
}
    1ff0:	e7d9      	b.n	1fa6 <uart_aspeed_fifo_read+0x66>
	__asm__ volatile(
    1ff2:	f04f 0320 	mov.w	r3, #32
    1ff6:	f3ef 8911 	mrs	r9, BASEPRI
    1ffa:	f383 8811 	msr	BASEPRI, r3
    1ffe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2002:	4628      	mov	r0, r5
    2004:	f001 f8ea 	bl	31dc <z_spin_lock_valid>
    2008:	b968      	cbnz	r0, 2026 <uart_aspeed_fifo_read+0xe6>
    200a:	2381      	movs	r3, #129	; 0x81
    200c:	4a15      	ldr	r2, [pc, #84]	; (2064 <uart_aspeed_fifo_read+0x124>)
    200e:	4916      	ldr	r1, [pc, #88]	; (2068 <uart_aspeed_fifo_read+0x128>)
    2010:	4816      	ldr	r0, [pc, #88]	; (206c <uart_aspeed_fifo_read+0x12c>)
    2012:	f004 f877 	bl	6104 <printk>
    2016:	4629      	mov	r1, r5
    2018:	4815      	ldr	r0, [pc, #84]	; (2070 <uart_aspeed_fifo_read+0x130>)
    201a:	f004 f873 	bl	6104 <printk>
    201e:	2181      	movs	r1, #129	; 0x81
    2020:	4810      	ldr	r0, [pc, #64]	; (2064 <uart_aspeed_fifo_read+0x124>)
    2022:	f004 f939 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2026:	4628      	mov	r0, r5
    2028:	f001 f8f4 	bl	3214 <z_spin_lock_set_owner>
		for (i = 0; i < size; ++i) {
    202c:	2400      	movs	r4, #0
    202e:	42b4      	cmp	r4, r6
    2030:	da03      	bge.n	203a <uart_aspeed_fifo_read+0xfa>
			if (!(sys_read32(dev_cfg->base + UART_LSR) & UART_LSR_DR))
    2032:	687b      	ldr	r3, [r7, #4]
	return *(volatile uint32_t *)addr;
    2034:	695a      	ldr	r2, [r3, #20]
    2036:	07d2      	lsls	r2, r2, #31
    2038:	d40c      	bmi.n	2054 <uart_aspeed_fifo_read+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    203a:	4628      	mov	r0, r5
    203c:	f001 f8dc 	bl	31f8 <z_spin_unlock_valid>
    2040:	2800      	cmp	r0, #0
    2042:	d1c2      	bne.n	1fca <uart_aspeed_fifo_read+0x8a>
    2044:	490d      	ldr	r1, [pc, #52]	; (207c <uart_aspeed_fifo_read+0x13c>)
    2046:	23ac      	movs	r3, #172	; 0xac
    2048:	4a06      	ldr	r2, [pc, #24]	; (2064 <uart_aspeed_fifo_read+0x124>)
    204a:	4808      	ldr	r0, [pc, #32]	; (206c <uart_aspeed_fifo_read+0x12c>)
    204c:	f004 f85a 	bl	6104 <printk>
    2050:	4629      	mov	r1, r5
    2052:	e7b3      	b.n	1fbc <uart_aspeed_fifo_read+0x7c>
    2054:	681b      	ldr	r3, [r3, #0]
			rx_data[i] = (uint8_t)sys_read32(dev_cfg->base + UART_RBR);
    2056:	f808 3004 	strb.w	r3, [r8, r4]
		for (i = 0; i < size; ++i) {
    205a:	3401      	adds	r4, #1
    205c:	e7e7      	b.n	202e <uart_aspeed_fifo_read+0xee>
    205e:	bf00      	nop
    2060:	00008798 	.word	0x00008798
    2064:	00007430 	.word	0x00007430
    2068:	00007456 	.word	0x00007456
    206c:	000072be 	.word	0x000072be
    2070:	0000746b 	.word	0x0000746b
    2074:	7e79e050 	.word	0x7e79e050
    2078:	7e79e054 	.word	0x7e79e054
    207c:	00007483 	.word	0x00007483
    2080:	0000749a 	.word	0x0000749a

00002084 <uart_aspeed_irq_tx_enable>:

static void uart_aspeed_irq_tx_enable(const struct device *dev)
{
    2084:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2086:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2088:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    208a:	f895 3020 	ldrb.w	r3, [r5, #32]
    208e:	2b00      	cmp	r3, #0
    2090:	d03a      	beq.n	2108 <uart_aspeed_irq_tx_enable+0x84>
    2092:	f04f 0320 	mov.w	r3, #32
    2096:	f3ef 8411 	mrs	r4, BASEPRI
    209a:	f383 8811 	msr	BASEPRI, r3
    209e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    20a2:	4836      	ldr	r0, [pc, #216]	; (217c <uart_aspeed_irq_tx_enable+0xf8>)
    20a4:	f001 f89a 	bl	31dc <z_spin_lock_valid>
    20a8:	b968      	cbnz	r0, 20c6 <uart_aspeed_irq_tx_enable+0x42>
    20aa:	2381      	movs	r3, #129	; 0x81
    20ac:	4a34      	ldr	r2, [pc, #208]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    20ae:	4935      	ldr	r1, [pc, #212]	; (2184 <uart_aspeed_irq_tx_enable+0x100>)
    20b0:	4835      	ldr	r0, [pc, #212]	; (2188 <uart_aspeed_irq_tx_enable+0x104>)
    20b2:	f004 f827 	bl	6104 <printk>
    20b6:	4931      	ldr	r1, [pc, #196]	; (217c <uart_aspeed_irq_tx_enable+0xf8>)
    20b8:	4834      	ldr	r0, [pc, #208]	; (218c <uart_aspeed_irq_tx_enable+0x108>)
    20ba:	f004 f823 	bl	6104 <printk>
    20be:	2181      	movs	r1, #129	; 0x81
    20c0:	482f      	ldr	r0, [pc, #188]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    20c2:	f004 f8e9 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    20c6:	482d      	ldr	r0, [pc, #180]	; (217c <uart_aspeed_irq_tx_enable+0xf8>)
    20c8:	f001 f8a4 	bl	3214 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_TX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    20cc:	2301      	movs	r3, #1
    20ce:	4a30      	ldr	r2, [pc, #192]	; (2190 <uart_aspeed_irq_tx_enable+0x10c>)
    20d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    20d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    20d4:	4083      	lsls	r3, r0
    20d6:	430b      	orrs	r3, r1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    20d8:	4828      	ldr	r0, [pc, #160]	; (217c <uart_aspeed_irq_tx_enable+0xf8>)
	*(volatile uint32_t *)addr = data;
    20da:	6313      	str	r3, [r2, #48]	; 0x30
    20dc:	f001 f88c 	bl	31f8 <z_spin_unlock_valid>
    20e0:	b968      	cbnz	r0, 20fe <uart_aspeed_irq_tx_enable+0x7a>
    20e2:	23ac      	movs	r3, #172	; 0xac
    20e4:	4a26      	ldr	r2, [pc, #152]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    20e6:	492b      	ldr	r1, [pc, #172]	; (2194 <uart_aspeed_irq_tx_enable+0x110>)
    20e8:	4827      	ldr	r0, [pc, #156]	; (2188 <uart_aspeed_irq_tx_enable+0x104>)
    20ea:	f004 f80b 	bl	6104 <printk>
    20ee:	4923      	ldr	r1, [pc, #140]	; (217c <uart_aspeed_irq_tx_enable+0xf8>)
    20f0:	4829      	ldr	r0, [pc, #164]	; (2198 <uart_aspeed_irq_tx_enable+0x114>)
    20f2:	f004 f807 	bl	6104 <printk>
    20f6:	21ac      	movs	r1, #172	; 0xac
    20f8:	4821      	ldr	r0, [pc, #132]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    20fa:	f004 f8cd 	bl	6298 <assert_post_action>
	__asm__ volatile(
    20fe:	f384 8811 	msr	BASEPRI, r4
    2102:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ETBEI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    2106:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2108:	f04f 0320 	mov.w	r3, #32
    210c:	f3ef 8611 	mrs	r6, BASEPRI
    2110:	f383 8811 	msr	BASEPRI, r3
    2114:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2118:	4620      	mov	r0, r4
    211a:	f001 f85f 	bl	31dc <z_spin_lock_valid>
    211e:	b968      	cbnz	r0, 213c <uart_aspeed_irq_tx_enable+0xb8>
    2120:	2381      	movs	r3, #129	; 0x81
    2122:	4a17      	ldr	r2, [pc, #92]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    2124:	4917      	ldr	r1, [pc, #92]	; (2184 <uart_aspeed_irq_tx_enable+0x100>)
    2126:	4818      	ldr	r0, [pc, #96]	; (2188 <uart_aspeed_irq_tx_enable+0x104>)
    2128:	f003 ffec 	bl	6104 <printk>
    212c:	4621      	mov	r1, r4
    212e:	4817      	ldr	r0, [pc, #92]	; (218c <uart_aspeed_irq_tx_enable+0x108>)
    2130:	f003 ffe8 	bl	6104 <printk>
    2134:	2181      	movs	r1, #129	; 0x81
    2136:	4812      	ldr	r0, [pc, #72]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    2138:	f004 f8ae 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    213c:	4620      	mov	r0, r4
    213e:	f001 f869 	bl	3214 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ETBEI;
    2142:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2144:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    2146:	6853      	ldr	r3, [r2, #4]
    2148:	f043 0302 	orr.w	r3, r3, #2
	*(volatile uint32_t *)addr = data;
    214c:	6053      	str	r3, [r2, #4]
    214e:	f001 f853 	bl	31f8 <z_spin_unlock_valid>
    2152:	b968      	cbnz	r0, 2170 <uart_aspeed_irq_tx_enable+0xec>
    2154:	23ac      	movs	r3, #172	; 0xac
    2156:	4a0a      	ldr	r2, [pc, #40]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    2158:	490e      	ldr	r1, [pc, #56]	; (2194 <uart_aspeed_irq_tx_enable+0x110>)
    215a:	480b      	ldr	r0, [pc, #44]	; (2188 <uart_aspeed_irq_tx_enable+0x104>)
    215c:	f003 ffd2 	bl	6104 <printk>
    2160:	4621      	mov	r1, r4
    2162:	480d      	ldr	r0, [pc, #52]	; (2198 <uart_aspeed_irq_tx_enable+0x114>)
    2164:	f003 ffce 	bl	6104 <printk>
    2168:	21ac      	movs	r1, #172	; 0xac
    216a:	4805      	ldr	r0, [pc, #20]	; (2180 <uart_aspeed_irq_tx_enable+0xfc>)
    216c:	f004 f894 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2170:	f386 8811 	msr	BASEPRI, r6
    2174:	f3bf 8f6f 	isb	sy
}
    2178:	e7c5      	b.n	2106 <uart_aspeed_irq_tx_enable+0x82>
    217a:	bf00      	nop
    217c:	00008798 	.word	0x00008798
    2180:	00007430 	.word	0x00007430
    2184:	00007456 	.word	0x00007456
    2188:	000072be 	.word	0x000072be
    218c:	0000746b 	.word	0x0000746b
    2190:	7e79e000 	.word	0x7e79e000
    2194:	00007483 	.word	0x00007483
    2198:	0000749a 	.word	0x0000749a

0000219c <uart_aspeed_irq_tx_disable>:

static void uart_aspeed_irq_tx_disable(const struct device *dev)
{
    219c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    219e:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    21a0:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    21a2:	f895 3020 	ldrb.w	r3, [r5, #32]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d03b      	beq.n	2222 <uart_aspeed_irq_tx_disable+0x86>
	__asm__ volatile(
    21aa:	f04f 0320 	mov.w	r3, #32
    21ae:	f3ef 8411 	mrs	r4, BASEPRI
    21b2:	f383 8811 	msr	BASEPRI, r3
    21b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    21ba:	4836      	ldr	r0, [pc, #216]	; (2294 <uart_aspeed_irq_tx_disable+0xf8>)
    21bc:	f001 f80e 	bl	31dc <z_spin_lock_valid>
    21c0:	b968      	cbnz	r0, 21de <uart_aspeed_irq_tx_disable+0x42>
    21c2:	2381      	movs	r3, #129	; 0x81
    21c4:	4a34      	ldr	r2, [pc, #208]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    21c6:	4935      	ldr	r1, [pc, #212]	; (229c <uart_aspeed_irq_tx_disable+0x100>)
    21c8:	4835      	ldr	r0, [pc, #212]	; (22a0 <uart_aspeed_irq_tx_disable+0x104>)
    21ca:	f003 ff9b 	bl	6104 <printk>
    21ce:	4931      	ldr	r1, [pc, #196]	; (2294 <uart_aspeed_irq_tx_disable+0xf8>)
    21d0:	4834      	ldr	r0, [pc, #208]	; (22a4 <uart_aspeed_irq_tx_disable+0x108>)
    21d2:	f003 ff97 	bl	6104 <printk>
    21d6:	2181      	movs	r1, #129	; 0x81
    21d8:	482f      	ldr	r0, [pc, #188]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    21da:	f004 f85d 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    21de:	482d      	ldr	r0, [pc, #180]	; (2294 <uart_aspeed_irq_tx_disable+0xf8>)
    21e0:	f001 f818 	bl	3214 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_TX_DMA_INT_EN) & ~(0x1 << dev_cfg->dma_ch);
    21e4:	2201      	movs	r2, #1
	return *(volatile uint32_t *)addr;
    21e6:	4930      	ldr	r1, [pc, #192]	; (22a8 <uart_aspeed_irq_tx_disable+0x10c>)
    21e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    21ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    21ec:	4082      	lsls	r2, r0
    21ee:	ea23 0302 	bic.w	r3, r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    21f2:	4828      	ldr	r0, [pc, #160]	; (2294 <uart_aspeed_irq_tx_disable+0xf8>)
	*(volatile uint32_t *)addr = data;
    21f4:	630b      	str	r3, [r1, #48]	; 0x30
    21f6:	f000 ffff 	bl	31f8 <z_spin_unlock_valid>
    21fa:	b968      	cbnz	r0, 2218 <uart_aspeed_irq_tx_disable+0x7c>
    21fc:	23ac      	movs	r3, #172	; 0xac
    21fe:	4a26      	ldr	r2, [pc, #152]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    2200:	492a      	ldr	r1, [pc, #168]	; (22ac <uart_aspeed_irq_tx_disable+0x110>)
    2202:	4827      	ldr	r0, [pc, #156]	; (22a0 <uart_aspeed_irq_tx_disable+0x104>)
    2204:	f003 ff7e 	bl	6104 <printk>
    2208:	4922      	ldr	r1, [pc, #136]	; (2294 <uart_aspeed_irq_tx_disable+0xf8>)
    220a:	4829      	ldr	r0, [pc, #164]	; (22b0 <uart_aspeed_irq_tx_disable+0x114>)
    220c:	f003 ff7a 	bl	6104 <printk>
    2210:	21ac      	movs	r1, #172	; 0xac
    2212:	4821      	ldr	r0, [pc, #132]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    2214:	f004 f840 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2218:	f384 8811 	msr	BASEPRI, r4
    221c:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ETBEI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    2220:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2222:	f04f 0320 	mov.w	r3, #32
    2226:	f3ef 8611 	mrs	r6, BASEPRI
    222a:	f383 8811 	msr	BASEPRI, r3
    222e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2232:	4620      	mov	r0, r4
    2234:	f000 ffd2 	bl	31dc <z_spin_lock_valid>
    2238:	b968      	cbnz	r0, 2256 <uart_aspeed_irq_tx_disable+0xba>
    223a:	2381      	movs	r3, #129	; 0x81
    223c:	4a16      	ldr	r2, [pc, #88]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    223e:	4917      	ldr	r1, [pc, #92]	; (229c <uart_aspeed_irq_tx_disable+0x100>)
    2240:	4817      	ldr	r0, [pc, #92]	; (22a0 <uart_aspeed_irq_tx_disable+0x104>)
    2242:	f003 ff5f 	bl	6104 <printk>
    2246:	4621      	mov	r1, r4
    2248:	4816      	ldr	r0, [pc, #88]	; (22a4 <uart_aspeed_irq_tx_disable+0x108>)
    224a:	f003 ff5b 	bl	6104 <printk>
    224e:	2181      	movs	r1, #129	; 0x81
    2250:	4811      	ldr	r0, [pc, #68]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    2252:	f004 f821 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2256:	4620      	mov	r0, r4
    2258:	f000 ffdc 	bl	3214 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ETBEI;
    225c:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    225e:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    2260:	6853      	ldr	r3, [r2, #4]
    2262:	f023 0302 	bic.w	r3, r3, #2
	*(volatile uint32_t *)addr = data;
    2266:	6053      	str	r3, [r2, #4]
    2268:	f000 ffc6 	bl	31f8 <z_spin_unlock_valid>
    226c:	b968      	cbnz	r0, 228a <uart_aspeed_irq_tx_disable+0xee>
    226e:	23ac      	movs	r3, #172	; 0xac
    2270:	4a09      	ldr	r2, [pc, #36]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    2272:	490e      	ldr	r1, [pc, #56]	; (22ac <uart_aspeed_irq_tx_disable+0x110>)
    2274:	480a      	ldr	r0, [pc, #40]	; (22a0 <uart_aspeed_irq_tx_disable+0x104>)
    2276:	f003 ff45 	bl	6104 <printk>
    227a:	4621      	mov	r1, r4
    227c:	480c      	ldr	r0, [pc, #48]	; (22b0 <uart_aspeed_irq_tx_disable+0x114>)
    227e:	f003 ff41 	bl	6104 <printk>
    2282:	21ac      	movs	r1, #172	; 0xac
    2284:	4804      	ldr	r0, [pc, #16]	; (2298 <uart_aspeed_irq_tx_disable+0xfc>)
    2286:	f004 f807 	bl	6298 <assert_post_action>
	__asm__ volatile(
    228a:	f386 8811 	msr	BASEPRI, r6
    228e:	f3bf 8f6f 	isb	sy
}
    2292:	e7c5      	b.n	2220 <uart_aspeed_irq_tx_disable+0x84>
    2294:	00008798 	.word	0x00008798
    2298:	00007430 	.word	0x00007430
    229c:	00007456 	.word	0x00007456
    22a0:	000072be 	.word	0x000072be
    22a4:	0000746b 	.word	0x0000746b
    22a8:	7e79e000 	.word	0x7e79e000
    22ac:	00007483 	.word	0x00007483
    22b0:	0000749a 	.word	0x0000749a

000022b4 <uart_aspeed_irq_tx_ready>:

static int uart_aspeed_irq_tx_ready(const struct device *dev)
{
    22b4:	b570      	push	{r4, r5, r6, lr}
	int ret;
	uint32_t iir_ai;
	uint32_t sts, rptr, wptr;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    22b6:	6844      	ldr	r4, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    22b8:	6905      	ldr	r5, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    22ba:	f894 3020 	ldrb.w	r3, [r4, #32]
    22be:	2b00      	cmp	r3, #0
    22c0:	d046      	beq.n	2350 <uart_aspeed_irq_tx_ready+0x9c>
	__asm__ volatile(
    22c2:	f04f 0320 	mov.w	r3, #32
    22c6:	f3ef 8511 	mrs	r5, BASEPRI
    22ca:	f383 8811 	msr	BASEPRI, r3
    22ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    22d2:	483c      	ldr	r0, [pc, #240]	; (23c4 <uart_aspeed_irq_tx_ready+0x110>)
    22d4:	f000 ff82 	bl	31dc <z_spin_lock_valid>
    22d8:	b968      	cbnz	r0, 22f6 <uart_aspeed_irq_tx_ready+0x42>
    22da:	2381      	movs	r3, #129	; 0x81
    22dc:	4a3a      	ldr	r2, [pc, #232]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    22de:	493b      	ldr	r1, [pc, #236]	; (23cc <uart_aspeed_irq_tx_ready+0x118>)
    22e0:	483b      	ldr	r0, [pc, #236]	; (23d0 <uart_aspeed_irq_tx_ready+0x11c>)
    22e2:	f003 ff0f 	bl	6104 <printk>
    22e6:	4937      	ldr	r1, [pc, #220]	; (23c4 <uart_aspeed_irq_tx_ready+0x110>)
    22e8:	483a      	ldr	r0, [pc, #232]	; (23d4 <uart_aspeed_irq_tx_ready+0x120>)
    22ea:	f003 ff0b 	bl	6104 <printk>
    22ee:	2181      	movs	r1, #129	; 0x81
    22f0:	4835      	ldr	r0, [pc, #212]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    22f2:	f003 ffd1 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    22f6:	4833      	ldr	r0, [pc, #204]	; (23c4 <uart_aspeed_irq_tx_ready+0x110>)
    22f8:	f000 ff8c 	bl	3214 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		sts = sys_read32(udma_base + UDMA_TX_DMA_INT_STS);
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    22fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    22fe:	4936      	ldr	r1, [pc, #216]	; (23d8 <uart_aspeed_irq_tx_ready+0x124>)
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    2300:	4836      	ldr	r0, [pc, #216]	; (23dc <uart_aspeed_irq_tx_ready+0x128>)
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    2302:	1c93      	adds	r3, r2, #2
    2304:	015b      	lsls	r3, r3, #5
    2306:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    2308:	58c9      	ldr	r1, [r1, r3]
    230a:	5818      	ldr	r0, [r3, r0]
		ret = ((sts & (0x1 << dev_cfg->dma_ch)) ? 1 : 0) | (rptr == wptr);
    230c:	2301      	movs	r3, #1
    230e:	4093      	lsls	r3, r2
    2310:	4233      	tst	r3, r6
    2312:	bf14      	ite	ne
    2314:	2401      	movne	r4, #1
    2316:	2400      	moveq	r4, #0
    2318:	4288      	cmp	r0, r1
    231a:	bf08      	it	eq
    231c:	f044 0401 	orreq.w	r4, r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2320:	4828      	ldr	r0, [pc, #160]	; (23c4 <uart_aspeed_irq_tx_ready+0x110>)
    2322:	f000 ff69 	bl	31f8 <z_spin_unlock_valid>
    2326:	b968      	cbnz	r0, 2344 <uart_aspeed_irq_tx_ready+0x90>
    2328:	23ac      	movs	r3, #172	; 0xac
    232a:	4a27      	ldr	r2, [pc, #156]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    232c:	492c      	ldr	r1, [pc, #176]	; (23e0 <uart_aspeed_irq_tx_ready+0x12c>)
    232e:	4828      	ldr	r0, [pc, #160]	; (23d0 <uart_aspeed_irq_tx_ready+0x11c>)
    2330:	f003 fee8 	bl	6104 <printk>
    2334:	4923      	ldr	r1, [pc, #140]	; (23c4 <uart_aspeed_irq_tx_ready+0x110>)
    2336:	482b      	ldr	r0, [pc, #172]	; (23e4 <uart_aspeed_irq_tx_ready+0x130>)
    2338:	f003 fee4 	bl	6104 <printk>
    233c:	21ac      	movs	r1, #172	; 0xac
    233e:	4822      	ldr	r0, [pc, #136]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    2340:	f003 ffaa 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2344:	f385 8811 	msr	BASEPRI, r5
    2348:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return ret;
}
    234c:	4620      	mov	r0, r4
    234e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2350:	f04f 0320 	mov.w	r3, #32
    2354:	f3ef 8611 	mrs	r6, BASEPRI
    2358:	f383 8811 	msr	BASEPRI, r3
    235c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2360:	4628      	mov	r0, r5
    2362:	f000 ff3b 	bl	31dc <z_spin_lock_valid>
    2366:	b968      	cbnz	r0, 2384 <uart_aspeed_irq_tx_ready+0xd0>
    2368:	2381      	movs	r3, #129	; 0x81
    236a:	4a17      	ldr	r2, [pc, #92]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    236c:	4917      	ldr	r1, [pc, #92]	; (23cc <uart_aspeed_irq_tx_ready+0x118>)
    236e:	4818      	ldr	r0, [pc, #96]	; (23d0 <uart_aspeed_irq_tx_ready+0x11c>)
    2370:	f003 fec8 	bl	6104 <printk>
    2374:	4629      	mov	r1, r5
    2376:	4817      	ldr	r0, [pc, #92]	; (23d4 <uart_aspeed_irq_tx_ready+0x120>)
    2378:	f003 fec4 	bl	6104 <printk>
    237c:	2181      	movs	r1, #129	; 0x81
    237e:	4812      	ldr	r0, [pc, #72]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    2380:	f003 ff8a 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2384:	4628      	mov	r0, r5
    2386:	f000 ff45 	bl	3214 <z_spin_lock_set_owner>
		iir_ai = (data->iir_cache & UART_IIR_AI_MASK) >> UART_IIR_AI_SHIFT;
    238a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    238c:	4628      	mov	r0, r5
    238e:	f3c4 0442 	ubfx	r4, r4, #1, #3
		ret = (iir_ai == UART_IIR_AI_THRE) ? 1 : 0;
    2392:	1e63      	subs	r3, r4, #1
    2394:	425c      	negs	r4, r3
    2396:	415c      	adcs	r4, r3
    2398:	f000 ff2e 	bl	31f8 <z_spin_unlock_valid>
    239c:	b968      	cbnz	r0, 23ba <uart_aspeed_irq_tx_ready+0x106>
    239e:	23ac      	movs	r3, #172	; 0xac
    23a0:	4a09      	ldr	r2, [pc, #36]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    23a2:	490f      	ldr	r1, [pc, #60]	; (23e0 <uart_aspeed_irq_tx_ready+0x12c>)
    23a4:	480a      	ldr	r0, [pc, #40]	; (23d0 <uart_aspeed_irq_tx_ready+0x11c>)
    23a6:	f003 fead 	bl	6104 <printk>
    23aa:	4629      	mov	r1, r5
    23ac:	480d      	ldr	r0, [pc, #52]	; (23e4 <uart_aspeed_irq_tx_ready+0x130>)
    23ae:	f003 fea9 	bl	6104 <printk>
    23b2:	21ac      	movs	r1, #172	; 0xac
    23b4:	4804      	ldr	r0, [pc, #16]	; (23c8 <uart_aspeed_irq_tx_ready+0x114>)
    23b6:	f003 ff6f 	bl	6298 <assert_post_action>
	__asm__ volatile(
    23ba:	f386 8811 	msr	BASEPRI, r6
    23be:	f3bf 8f6f 	isb	sy
	return ret;
    23c2:	e7c3      	b.n	234c <uart_aspeed_irq_tx_ready+0x98>
    23c4:	00008798 	.word	0x00008798
    23c8:	00007430 	.word	0x00007430
    23cc:	00007456 	.word	0x00007456
    23d0:	000072be 	.word	0x000072be
    23d4:	0000746b 	.word	0x0000746b
    23d8:	7e79e000 	.word	0x7e79e000
    23dc:	7e79e004 	.word	0x7e79e004
    23e0:	00007483 	.word	0x00007483
    23e4:	0000749a 	.word	0x0000749a

000023e8 <uart_aspeed_irq_tx_complete>:

static int uart_aspeed_irq_tx_complete(const struct device *dev)
{
    23e8:	b570      	push	{r4, r5, r6, lr}
	int ret;
	uint32_t lsr;
	uint32_t rptr, wptr;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    23ea:	6844      	ldr	r4, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    23ec:	6905      	ldr	r5, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    23ee:	f894 3020 	ldrb.w	r3, [r4, #32]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d03e      	beq.n	2474 <uart_aspeed_irq_tx_complete+0x8c>
	__asm__ volatile(
    23f6:	f04f 0320 	mov.w	r3, #32
    23fa:	f3ef 8511 	mrs	r5, BASEPRI
    23fe:	f383 8811 	msr	BASEPRI, r3
    2402:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2406:	4839      	ldr	r0, [pc, #228]	; (24ec <uart_aspeed_irq_tx_complete+0x104>)
    2408:	f000 fee8 	bl	31dc <z_spin_lock_valid>
    240c:	b968      	cbnz	r0, 242a <uart_aspeed_irq_tx_complete+0x42>
    240e:	2381      	movs	r3, #129	; 0x81
    2410:	4a37      	ldr	r2, [pc, #220]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    2412:	4938      	ldr	r1, [pc, #224]	; (24f4 <uart_aspeed_irq_tx_complete+0x10c>)
    2414:	4838      	ldr	r0, [pc, #224]	; (24f8 <uart_aspeed_irq_tx_complete+0x110>)
    2416:	f003 fe75 	bl	6104 <printk>
    241a:	4934      	ldr	r1, [pc, #208]	; (24ec <uart_aspeed_irq_tx_complete+0x104>)
    241c:	4837      	ldr	r0, [pc, #220]	; (24fc <uart_aspeed_irq_tx_complete+0x114>)
    241e:	f003 fe71 	bl	6104 <printk>
    2422:	2181      	movs	r1, #129	; 0x81
    2424:	4832      	ldr	r0, [pc, #200]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    2426:	f003 ff37 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    242a:	4830      	ldr	r0, [pc, #192]	; (24ec <uart_aspeed_irq_tx_complete+0x104>)
    242c:	f000 fef2 	bl	3214 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    2430:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2432:	4a33      	ldr	r2, [pc, #204]	; (2500 <uart_aspeed_irq_tx_complete+0x118>)
		wptr = sys_read32(udma_base + UDMA_CHX_TX_WR_PTR(dev_cfg->dma_ch));
    2434:	4933      	ldr	r1, [pc, #204]	; (2504 <uart_aspeed_irq_tx_complete+0x11c>)
		rptr = sys_read32(udma_base + UDMA_CHX_TX_RD_PTR(dev_cfg->dma_ch));
    2436:	3302      	adds	r3, #2
    2438:	015b      	lsls	r3, r3, #5
    243a:	589a      	ldr	r2, [r3, r2]
    243c:	585c      	ldr	r4, [r3, r1]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    243e:	482b      	ldr	r0, [pc, #172]	; (24ec <uart_aspeed_irq_tx_complete+0x104>)
		ret = (rptr == wptr) ? 1 : 0;
    2440:	1aa2      	subs	r2, r4, r2
    2442:	4254      	negs	r4, r2
    2444:	4154      	adcs	r4, r2
    2446:	f000 fed7 	bl	31f8 <z_spin_unlock_valid>
    244a:	b968      	cbnz	r0, 2468 <uart_aspeed_irq_tx_complete+0x80>
    244c:	23ac      	movs	r3, #172	; 0xac
    244e:	4a28      	ldr	r2, [pc, #160]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    2450:	492d      	ldr	r1, [pc, #180]	; (2508 <uart_aspeed_irq_tx_complete+0x120>)
    2452:	4829      	ldr	r0, [pc, #164]	; (24f8 <uart_aspeed_irq_tx_complete+0x110>)
    2454:	f003 fe56 	bl	6104 <printk>
    2458:	4924      	ldr	r1, [pc, #144]	; (24ec <uart_aspeed_irq_tx_complete+0x104>)
    245a:	482c      	ldr	r0, [pc, #176]	; (250c <uart_aspeed_irq_tx_complete+0x124>)
    245c:	f003 fe52 	bl	6104 <printk>
    2460:	21ac      	movs	r1, #172	; 0xac
    2462:	4823      	ldr	r0, [pc, #140]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    2464:	f003 ff18 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2468:	f385 8811 	msr	BASEPRI, r5
    246c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&data->lock, key);
	}

	return ret;
}
    2470:	4620      	mov	r0, r4
    2472:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2474:	f04f 0320 	mov.w	r3, #32
    2478:	f3ef 8611 	mrs	r6, BASEPRI
    247c:	f383 8811 	msr	BASEPRI, r3
    2480:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2484:	4628      	mov	r0, r5
    2486:	f000 fea9 	bl	31dc <z_spin_lock_valid>
    248a:	b968      	cbnz	r0, 24a8 <uart_aspeed_irq_tx_complete+0xc0>
    248c:	2381      	movs	r3, #129	; 0x81
    248e:	4a18      	ldr	r2, [pc, #96]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    2490:	4918      	ldr	r1, [pc, #96]	; (24f4 <uart_aspeed_irq_tx_complete+0x10c>)
    2492:	4819      	ldr	r0, [pc, #100]	; (24f8 <uart_aspeed_irq_tx_complete+0x110>)
    2494:	f003 fe36 	bl	6104 <printk>
    2498:	4629      	mov	r1, r5
    249a:	4818      	ldr	r0, [pc, #96]	; (24fc <uart_aspeed_irq_tx_complete+0x114>)
    249c:	f003 fe32 	bl	6104 <printk>
    24a0:	2181      	movs	r1, #129	; 0x81
    24a2:	4813      	ldr	r0, [pc, #76]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    24a4:	f003 fef8 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    24a8:	4628      	mov	r0, r5
    24aa:	f000 feb3 	bl	3214 <z_spin_lock_set_owner>
		lsr = sys_read32(dev_cfg->base + UART_LSR);
    24ae:	6863      	ldr	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    24b0:	4628      	mov	r0, r5
    24b2:	695c      	ldr	r4, [r3, #20]
		ret = (lsr & (UART_LSR_TEMT | UART_LSR_THRE)) ==
    24b4:	f004 0460 	and.w	r4, r4, #96	; 0x60
		       (UART_LSR_TEMT | UART_LSR_THRE) ? 1 : 0;
    24b8:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
    24bc:	425c      	negs	r4, r3
    24be:	415c      	adcs	r4, r3
    24c0:	f000 fe9a 	bl	31f8 <z_spin_unlock_valid>
    24c4:	b968      	cbnz	r0, 24e2 <uart_aspeed_irq_tx_complete+0xfa>
    24c6:	23ac      	movs	r3, #172	; 0xac
    24c8:	4a09      	ldr	r2, [pc, #36]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    24ca:	490f      	ldr	r1, [pc, #60]	; (2508 <uart_aspeed_irq_tx_complete+0x120>)
    24cc:	480a      	ldr	r0, [pc, #40]	; (24f8 <uart_aspeed_irq_tx_complete+0x110>)
    24ce:	f003 fe19 	bl	6104 <printk>
    24d2:	4629      	mov	r1, r5
    24d4:	480d      	ldr	r0, [pc, #52]	; (250c <uart_aspeed_irq_tx_complete+0x124>)
    24d6:	f003 fe15 	bl	6104 <printk>
    24da:	21ac      	movs	r1, #172	; 0xac
    24dc:	4804      	ldr	r0, [pc, #16]	; (24f0 <uart_aspeed_irq_tx_complete+0x108>)
    24de:	f003 fedb 	bl	6298 <assert_post_action>
	__asm__ volatile(
    24e2:	f386 8811 	msr	BASEPRI, r6
    24e6:	f3bf 8f6f 	isb	sy
	return ret;
    24ea:	e7c1      	b.n	2470 <uart_aspeed_irq_tx_complete+0x88>
    24ec:	00008798 	.word	0x00008798
    24f0:	00007430 	.word	0x00007430
    24f4:	00007456 	.word	0x00007456
    24f8:	000072be 	.word	0x000072be
    24fc:	0000746b 	.word	0x0000746b
    2500:	7e79e000 	.word	0x7e79e000
    2504:	7e79e004 	.word	0x7e79e004
    2508:	00007483 	.word	0x00007483
    250c:	0000749a 	.word	0x0000749a

00002510 <uart_aspeed_irq_rx_enable>:

static void uart_aspeed_irq_rx_enable(const struct device *dev)
{
    2510:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2512:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2514:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    2516:	f895 3020 	ldrb.w	r3, [r5, #32]
    251a:	2b00      	cmp	r3, #0
    251c:	d03a      	beq.n	2594 <uart_aspeed_irq_rx_enable+0x84>
	__asm__ volatile(
    251e:	f04f 0320 	mov.w	r3, #32
    2522:	f3ef 8411 	mrs	r4, BASEPRI
    2526:	f383 8811 	msr	BASEPRI, r3
    252a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    252e:	4836      	ldr	r0, [pc, #216]	; (2608 <uart_aspeed_irq_rx_enable+0xf8>)
    2530:	f000 fe54 	bl	31dc <z_spin_lock_valid>
    2534:	b968      	cbnz	r0, 2552 <uart_aspeed_irq_rx_enable+0x42>
    2536:	2381      	movs	r3, #129	; 0x81
    2538:	4a34      	ldr	r2, [pc, #208]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    253a:	4935      	ldr	r1, [pc, #212]	; (2610 <uart_aspeed_irq_rx_enable+0x100>)
    253c:	4835      	ldr	r0, [pc, #212]	; (2614 <uart_aspeed_irq_rx_enable+0x104>)
    253e:	f003 fde1 	bl	6104 <printk>
    2542:	4931      	ldr	r1, [pc, #196]	; (2608 <uart_aspeed_irq_rx_enable+0xf8>)
    2544:	4834      	ldr	r0, [pc, #208]	; (2618 <uart_aspeed_irq_rx_enable+0x108>)
    2546:	f003 fddd 	bl	6104 <printk>
    254a:	2181      	movs	r1, #129	; 0x81
    254c:	482f      	ldr	r0, [pc, #188]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    254e:	f003 fea3 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2552:	482d      	ldr	r0, [pc, #180]	; (2608 <uart_aspeed_irq_rx_enable+0xf8>)
    2554:	f000 fe5e 	bl	3214 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_RX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    2558:	2301      	movs	r3, #1
    255a:	4a30      	ldr	r2, [pc, #192]	; (261c <uart_aspeed_irq_rx_enable+0x10c>)
    255c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    255e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    2560:	4083      	lsls	r3, r0
    2562:	430b      	orrs	r3, r1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2564:	4828      	ldr	r0, [pc, #160]	; (2608 <uart_aspeed_irq_rx_enable+0xf8>)
	*(volatile uint32_t *)addr = data;
    2566:	6393      	str	r3, [r2, #56]	; 0x38
    2568:	f000 fe46 	bl	31f8 <z_spin_unlock_valid>
    256c:	b968      	cbnz	r0, 258a <uart_aspeed_irq_rx_enable+0x7a>
    256e:	23ac      	movs	r3, #172	; 0xac
    2570:	4a26      	ldr	r2, [pc, #152]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    2572:	492b      	ldr	r1, [pc, #172]	; (2620 <uart_aspeed_irq_rx_enable+0x110>)
    2574:	4827      	ldr	r0, [pc, #156]	; (2614 <uart_aspeed_irq_rx_enable+0x104>)
    2576:	f003 fdc5 	bl	6104 <printk>
    257a:	4923      	ldr	r1, [pc, #140]	; (2608 <uart_aspeed_irq_rx_enable+0xf8>)
    257c:	4829      	ldr	r0, [pc, #164]	; (2624 <uart_aspeed_irq_rx_enable+0x114>)
    257e:	f003 fdc1 	bl	6104 <printk>
    2582:	21ac      	movs	r1, #172	; 0xac
    2584:	4821      	ldr	r0, [pc, #132]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    2586:	f003 fe87 	bl	6298 <assert_post_action>
	__asm__ volatile(
    258a:	f384 8811 	msr	BASEPRI, r4
    258e:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ERBFI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    2592:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    2594:	f04f 0320 	mov.w	r3, #32
    2598:	f3ef 8611 	mrs	r6, BASEPRI
    259c:	f383 8811 	msr	BASEPRI, r3
    25a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    25a4:	4620      	mov	r0, r4
    25a6:	f000 fe19 	bl	31dc <z_spin_lock_valid>
    25aa:	b968      	cbnz	r0, 25c8 <uart_aspeed_irq_rx_enable+0xb8>
    25ac:	2381      	movs	r3, #129	; 0x81
    25ae:	4a17      	ldr	r2, [pc, #92]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    25b0:	4917      	ldr	r1, [pc, #92]	; (2610 <uart_aspeed_irq_rx_enable+0x100>)
    25b2:	4818      	ldr	r0, [pc, #96]	; (2614 <uart_aspeed_irq_rx_enable+0x104>)
    25b4:	f003 fda6 	bl	6104 <printk>
    25b8:	4621      	mov	r1, r4
    25ba:	4817      	ldr	r0, [pc, #92]	; (2618 <uart_aspeed_irq_rx_enable+0x108>)
    25bc:	f003 fda2 	bl	6104 <printk>
    25c0:	2181      	movs	r1, #129	; 0x81
    25c2:	4812      	ldr	r0, [pc, #72]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    25c4:	f003 fe68 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    25c8:	4620      	mov	r0, r4
    25ca:	f000 fe23 	bl	3214 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ERBFI;
    25ce:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    25d0:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    25d2:	6853      	ldr	r3, [r2, #4]
    25d4:	f043 0301 	orr.w	r3, r3, #1
	*(volatile uint32_t *)addr = data;
    25d8:	6053      	str	r3, [r2, #4]
    25da:	f000 fe0d 	bl	31f8 <z_spin_unlock_valid>
    25de:	b968      	cbnz	r0, 25fc <uart_aspeed_irq_rx_enable+0xec>
    25e0:	23ac      	movs	r3, #172	; 0xac
    25e2:	4a0a      	ldr	r2, [pc, #40]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    25e4:	490e      	ldr	r1, [pc, #56]	; (2620 <uart_aspeed_irq_rx_enable+0x110>)
    25e6:	480b      	ldr	r0, [pc, #44]	; (2614 <uart_aspeed_irq_rx_enable+0x104>)
    25e8:	f003 fd8c 	bl	6104 <printk>
    25ec:	4621      	mov	r1, r4
    25ee:	480d      	ldr	r0, [pc, #52]	; (2624 <uart_aspeed_irq_rx_enable+0x114>)
    25f0:	f003 fd88 	bl	6104 <printk>
    25f4:	21ac      	movs	r1, #172	; 0xac
    25f6:	4805      	ldr	r0, [pc, #20]	; (260c <uart_aspeed_irq_rx_enable+0xfc>)
    25f8:	f003 fe4e 	bl	6298 <assert_post_action>
	__asm__ volatile(
    25fc:	f386 8811 	msr	BASEPRI, r6
    2600:	f3bf 8f6f 	isb	sy
}
    2604:	e7c5      	b.n	2592 <uart_aspeed_irq_rx_enable+0x82>
    2606:	bf00      	nop
    2608:	00008798 	.word	0x00008798
    260c:	00007430 	.word	0x00007430
    2610:	00007456 	.word	0x00007456
    2614:	000072be 	.word	0x000072be
    2618:	0000746b 	.word	0x0000746b
    261c:	7e79e000 	.word	0x7e79e000
    2620:	00007483 	.word	0x00007483
    2624:	0000749a 	.word	0x0000749a

00002628 <uart_aspeed_irq_rx_disable>:

static void uart_aspeed_irq_rx_disable(const struct device *dev)
{
    2628:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    262a:	6845      	ldr	r5, [r0, #4]
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    262c:	6904      	ldr	r4, [r0, #16]
	k_spinlock_key_t key;

	if (dev_cfg->dma) {
    262e:	f895 3020 	ldrb.w	r3, [r5, #32]
    2632:	2b00      	cmp	r3, #0
    2634:	d03b      	beq.n	26ae <uart_aspeed_irq_rx_disable+0x86>
	__asm__ volatile(
    2636:	f04f 0320 	mov.w	r3, #32
    263a:	f3ef 8411 	mrs	r4, BASEPRI
    263e:	f383 8811 	msr	BASEPRI, r3
    2642:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2646:	4836      	ldr	r0, [pc, #216]	; (2720 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x10>)
    2648:	f000 fdc8 	bl	31dc <z_spin_lock_valid>
    264c:	b968      	cbnz	r0, 266a <uart_aspeed_irq_rx_disable+0x42>
    264e:	2381      	movs	r3, #129	; 0x81
    2650:	4a34      	ldr	r2, [pc, #208]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    2652:	4935      	ldr	r1, [pc, #212]	; (2728 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x18>)
    2654:	4835      	ldr	r0, [pc, #212]	; (272c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x1c>)
    2656:	f003 fd55 	bl	6104 <printk>
    265a:	4931      	ldr	r1, [pc, #196]	; (2720 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x10>)
    265c:	4834      	ldr	r0, [pc, #208]	; (2730 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x20>)
    265e:	f003 fd51 	bl	6104 <printk>
    2662:	2181      	movs	r1, #129	; 0x81
    2664:	482f      	ldr	r0, [pc, #188]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    2666:	f003 fe17 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    266a:	482d      	ldr	r0, [pc, #180]	; (2720 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x10>)
    266c:	f000 fdd2 	bl	3214 <z_spin_lock_set_owner>
		key = k_spin_lock(&udma_lock);

		reg = sys_read32(udma_base + UDMA_RX_DMA_INT_EN) & ~(0x1 << dev_cfg->dma_ch);
    2670:	2201      	movs	r2, #1
	return *(volatile uint32_t *)addr;
    2672:	4930      	ldr	r1, [pc, #192]	; (2734 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x24>)
    2674:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2676:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    2678:	4082      	lsls	r2, r0
    267a:	ea23 0302 	bic.w	r3, r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    267e:	4828      	ldr	r0, [pc, #160]	; (2720 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x10>)
	*(volatile uint32_t *)addr = data;
    2680:	638b      	str	r3, [r1, #56]	; 0x38
    2682:	f000 fdb9 	bl	31f8 <z_spin_unlock_valid>
    2686:	b968      	cbnz	r0, 26a4 <uart_aspeed_irq_rx_disable+0x7c>
    2688:	23ac      	movs	r3, #172	; 0xac
    268a:	4a26      	ldr	r2, [pc, #152]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    268c:	492a      	ldr	r1, [pc, #168]	; (2738 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x28>)
    268e:	4827      	ldr	r0, [pc, #156]	; (272c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x1c>)
    2690:	f003 fd38 	bl	6104 <printk>
    2694:	4922      	ldr	r1, [pc, #136]	; (2720 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x10>)
    2696:	4829      	ldr	r0, [pc, #164]	; (273c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x2c>)
    2698:	f003 fd34 	bl	6104 <printk>
    269c:	21ac      	movs	r1, #172	; 0xac
    269e:	4821      	ldr	r0, [pc, #132]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    26a0:	f003 fdfa 	bl	6298 <assert_post_action>
	__asm__ volatile(
    26a4:	f384 8811 	msr	BASEPRI, r4
    26a8:	f3bf 8f6f 	isb	sy
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ERBFI;
		sys_write32(reg, dev_cfg->base + UART_IER);

		k_spin_unlock(&data->lock, key);
	}
}
    26ac:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    26ae:	f04f 0320 	mov.w	r3, #32
    26b2:	f3ef 8611 	mrs	r6, BASEPRI
    26b6:	f383 8811 	msr	BASEPRI, r3
    26ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    26be:	4620      	mov	r0, r4
    26c0:	f000 fd8c 	bl	31dc <z_spin_lock_valid>
    26c4:	b968      	cbnz	r0, 26e2 <uart_aspeed_irq_rx_disable+0xba>
    26c6:	2381      	movs	r3, #129	; 0x81
    26c8:	4a16      	ldr	r2, [pc, #88]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    26ca:	4917      	ldr	r1, [pc, #92]	; (2728 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x18>)
    26cc:	4817      	ldr	r0, [pc, #92]	; (272c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x1c>)
    26ce:	f003 fd19 	bl	6104 <printk>
    26d2:	4621      	mov	r1, r4
    26d4:	4816      	ldr	r0, [pc, #88]	; (2730 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x20>)
    26d6:	f003 fd15 	bl	6104 <printk>
    26da:	2181      	movs	r1, #129	; 0x81
    26dc:	4811      	ldr	r0, [pc, #68]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    26de:	f003 fddb 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    26e2:	4620      	mov	r0, r4
    26e4:	f000 fd96 	bl	3214 <z_spin_lock_set_owner>
		reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ERBFI;
    26e8:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26ea:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    26ec:	6853      	ldr	r3, [r2, #4]
    26ee:	f023 0301 	bic.w	r3, r3, #1
	*(volatile uint32_t *)addr = data;
    26f2:	6053      	str	r3, [r2, #4]
    26f4:	f000 fd80 	bl	31f8 <z_spin_unlock_valid>
    26f8:	b968      	cbnz	r0, 2716 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x6>
    26fa:	23ac      	movs	r3, #172	; 0xac
    26fc:	4a09      	ldr	r2, [pc, #36]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    26fe:	490e      	ldr	r1, [pc, #56]	; (2738 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x28>)
    2700:	480a      	ldr	r0, [pc, #40]	; (272c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x1c>)
    2702:	f003 fcff 	bl	6104 <printk>
    2706:	4621      	mov	r1, r4
    2708:	480c      	ldr	r0, [pc, #48]	; (273c <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x2c>)
    270a:	f003 fcfb 	bl	6104 <printk>
    270e:	21ac      	movs	r1, #172	; 0xac
    2710:	4804      	ldr	r0, [pc, #16]	; (2724 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x14>)
    2712:	f003 fdc1 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2716:	f386 8811 	msr	BASEPRI, r6
    271a:	f3bf 8f6f 	isb	sy
}
    271e:	e7c5      	b.n	26ac <uart_aspeed_irq_rx_disable+0x84>
    2720:	00008798 	.word	0x00008798
    2724:	00007430 	.word	0x00007430
    2728:	00007456 	.word	0x00007456
    272c:	000072be 	.word	0x000072be
    2730:	0000746b 	.word	0x0000746b
    2734:	7e79e000 	.word	0x7e79e000
    2738:	00007483 	.word	0x00007483
    273c:	0000749a 	.word	0x0000749a

00002740 <uart_aspeed_irq_rx_ready>:

static int uart_aspeed_irq_rx_ready(const struct device *dev)
{
    2740:	b570      	push	{r4, r5, r6, lr}
	int ret;
	uint32_t iir_ai, sts;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2742:	6905      	ldr	r5, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2744:	6844      	ldr	r4, [r0, #4]
	__asm__ volatile(
    2746:	f04f 0320 	mov.w	r3, #32
    274a:	f3ef 8611 	mrs	r6, BASEPRI
    274e:	f383 8811 	msr	BASEPRI, r3
    2752:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2756:	4628      	mov	r0, r5
    2758:	f000 fd40 	bl	31dc <z_spin_lock_valid>
    275c:	b968      	cbnz	r0, 277a <uart_aspeed_irq_rx_ready+0x3a>
    275e:	2381      	movs	r3, #129	; 0x81
    2760:	4a1d      	ldr	r2, [pc, #116]	; (27d8 <uart_aspeed_irq_rx_ready+0x98>)
    2762:	491e      	ldr	r1, [pc, #120]	; (27dc <uart_aspeed_irq_rx_ready+0x9c>)
    2764:	481e      	ldr	r0, [pc, #120]	; (27e0 <uart_aspeed_irq_rx_ready+0xa0>)
    2766:	f003 fccd 	bl	6104 <printk>
    276a:	4629      	mov	r1, r5
    276c:	481d      	ldr	r0, [pc, #116]	; (27e4 <uart_aspeed_irq_rx_ready+0xa4>)
    276e:	f003 fcc9 	bl	6104 <printk>
    2772:	2181      	movs	r1, #129	; 0x81
    2774:	4818      	ldr	r0, [pc, #96]	; (27d8 <uart_aspeed_irq_rx_ready+0x98>)
    2776:	f003 fd8f 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    277a:	4628      	mov	r0, r5
    277c:	f000 fd4a 	bl	3214 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    2780:	f894 3020 	ldrb.w	r3, [r4, #32]
    2784:	b303      	cbz	r3, 27c8 <uart_aspeed_irq_rx_ready+0x88>
	return *(volatile uint32_t *)addr;
    2786:	4b18      	ldr	r3, [pc, #96]	; (27e8 <uart_aspeed_irq_rx_ready+0xa8>)
		sts = sys_read32(udma_base + UDMA_RX_DMA_INT_STS);
		ret = (sts & (0x1 << dev_cfg->dma_ch)) ? 1 : 0;
    2788:	6a61      	ldr	r1, [r4, #36]	; 0x24
    278a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    278c:	2301      	movs	r3, #1
    278e:	408b      	lsls	r3, r1
    2790:	4213      	tst	r3, r2
    2792:	bf14      	ite	ne
    2794:	2401      	movne	r4, #1
    2796:	2400      	moveq	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2798:	4628      	mov	r0, r5
    279a:	f000 fd2d 	bl	31f8 <z_spin_unlock_valid>
    279e:	b968      	cbnz	r0, 27bc <uart_aspeed_irq_rx_ready+0x7c>
    27a0:	23ac      	movs	r3, #172	; 0xac
    27a2:	4a0d      	ldr	r2, [pc, #52]	; (27d8 <uart_aspeed_irq_rx_ready+0x98>)
    27a4:	4911      	ldr	r1, [pc, #68]	; (27ec <uart_aspeed_irq_rx_ready+0xac>)
    27a6:	480e      	ldr	r0, [pc, #56]	; (27e0 <uart_aspeed_irq_rx_ready+0xa0>)
    27a8:	f003 fcac 	bl	6104 <printk>
    27ac:	4629      	mov	r1, r5
    27ae:	4810      	ldr	r0, [pc, #64]	; (27f0 <uart_aspeed_irq_rx_ready+0xb0>)
    27b0:	f003 fca8 	bl	6104 <printk>
    27b4:	21ac      	movs	r1, #172	; 0xac
    27b6:	4808      	ldr	r0, [pc, #32]	; (27d8 <uart_aspeed_irq_rx_ready+0x98>)
    27b8:	f003 fd6e 	bl	6298 <assert_post_action>
	__asm__ volatile(
    27bc:	f386 8811 	msr	BASEPRI, r6
    27c0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
    27c4:	4620      	mov	r0, r4
    27c6:	bd70      	pop	{r4, r5, r6, pc}
		iir_ai = (data->iir_cache & UART_IIR_AI_MASK) >> UART_IIR_AI_SHIFT;
    27c8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		ret = (iir_ai == UART_IIR_AI_RDA || iir_ai == UART_IIR_AI_TMOUT) ? 1 : 0;
    27ca:	f3c4 0441 	ubfx	r4, r4, #1, #2
    27ce:	1ea3      	subs	r3, r4, #2
    27d0:	425c      	negs	r4, r3
    27d2:	415c      	adcs	r4, r3
    27d4:	e7e0      	b.n	2798 <uart_aspeed_irq_rx_ready+0x58>
    27d6:	bf00      	nop
    27d8:	00007430 	.word	0x00007430
    27dc:	00007456 	.word	0x00007456
    27e0:	000072be 	.word	0x000072be
    27e4:	0000746b 	.word	0x0000746b
    27e8:	7e79e000 	.word	0x7e79e000
    27ec:	00007483 	.word	0x00007483
    27f0:	0000749a 	.word	0x0000749a

000027f4 <uart_aspeed_irq_err_enable>:

static void uart_aspeed_irq_err_enable(const struct device *dev)
{
    27f4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    27f6:	6845      	ldr	r5, [r0, #4]
	k_spinlock_key_t key;

	if (dev_cfg->dma)
    27f8:	f895 3020 	ldrb.w	r3, [r5, #32]
    27fc:	2b00      	cmp	r3, #0
    27fe:	d138      	bne.n	2872 <uart_aspeed_irq_err_enable+0x7e>
		return;

	key = k_spin_lock(&data->lock);
    2800:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    2802:	f04f 0320 	mov.w	r3, #32
    2806:	f3ef 8611 	mrs	r6, BASEPRI
    280a:	f383 8811 	msr	BASEPRI, r3
    280e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2812:	4620      	mov	r0, r4
    2814:	f000 fce2 	bl	31dc <z_spin_lock_valid>
    2818:	b968      	cbnz	r0, 2836 <uart_aspeed_irq_err_enable+0x42>
    281a:	2381      	movs	r3, #129	; 0x81
    281c:	4a15      	ldr	r2, [pc, #84]	; (2874 <uart_aspeed_irq_err_enable+0x80>)
    281e:	4916      	ldr	r1, [pc, #88]	; (2878 <uart_aspeed_irq_err_enable+0x84>)
    2820:	4816      	ldr	r0, [pc, #88]	; (287c <uart_aspeed_irq_err_enable+0x88>)
    2822:	f003 fc6f 	bl	6104 <printk>
    2826:	4621      	mov	r1, r4
    2828:	4815      	ldr	r0, [pc, #84]	; (2880 <uart_aspeed_irq_err_enable+0x8c>)
    282a:	f003 fc6b 	bl	6104 <printk>
    282e:	2181      	movs	r1, #129	; 0x81
    2830:	4810      	ldr	r0, [pc, #64]	; (2874 <uart_aspeed_irq_err_enable+0x80>)
    2832:	f003 fd31 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2836:	4620      	mov	r0, r4
    2838:	f000 fcec 	bl	3214 <z_spin_lock_set_owner>

	reg = sys_read32(dev_cfg->base + UART_IER) | UART_IER_ELSI;
    283c:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    283e:	4620      	mov	r0, r4
    2840:	6853      	ldr	r3, [r2, #4]
    2842:	f043 0304 	orr.w	r3, r3, #4
	*(volatile uint32_t *)addr = data;
    2846:	6053      	str	r3, [r2, #4]
    2848:	f000 fcd6 	bl	31f8 <z_spin_unlock_valid>
    284c:	b968      	cbnz	r0, 286a <uart_aspeed_irq_err_enable+0x76>
    284e:	23ac      	movs	r3, #172	; 0xac
    2850:	4a08      	ldr	r2, [pc, #32]	; (2874 <uart_aspeed_irq_err_enable+0x80>)
    2852:	490c      	ldr	r1, [pc, #48]	; (2884 <uart_aspeed_irq_err_enable+0x90>)
    2854:	4809      	ldr	r0, [pc, #36]	; (287c <uart_aspeed_irq_err_enable+0x88>)
    2856:	f003 fc55 	bl	6104 <printk>
    285a:	4621      	mov	r1, r4
    285c:	480a      	ldr	r0, [pc, #40]	; (2888 <uart_aspeed_irq_err_enable+0x94>)
    285e:	f003 fc51 	bl	6104 <printk>
    2862:	21ac      	movs	r1, #172	; 0xac
    2864:	4803      	ldr	r0, [pc, #12]	; (2874 <uart_aspeed_irq_err_enable+0x80>)
    2866:	f003 fd17 	bl	6298 <assert_post_action>
	__asm__ volatile(
    286a:	f386 8811 	msr	BASEPRI, r6
    286e:	f3bf 8f6f 	isb	sy
	sys_write32(reg, dev_cfg->base + UART_IER);

	k_spin_unlock(&data->lock, key);
}
    2872:	bd70      	pop	{r4, r5, r6, pc}
    2874:	00007430 	.word	0x00007430
    2878:	00007456 	.word	0x00007456
    287c:	000072be 	.word	0x000072be
    2880:	0000746b 	.word	0x0000746b
    2884:	00007483 	.word	0x00007483
    2888:	0000749a 	.word	0x0000749a

0000288c <uart_aspeed_irq_err_disable>:

static void uart_aspeed_irq_err_disable(const struct device *dev)
{
    288c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    288e:	6845      	ldr	r5, [r0, #4]
	k_spinlock_key_t key;

	if (dev_cfg->dma)
    2890:	f895 3020 	ldrb.w	r3, [r5, #32]
    2894:	2b00      	cmp	r3, #0
    2896:	d138      	bne.n	290a <uart_aspeed_irq_err_disable+0x7e>
		return;

	key = k_spin_lock(&data->lock);
    2898:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    289a:	f04f 0320 	mov.w	r3, #32
    289e:	f3ef 8611 	mrs	r6, BASEPRI
    28a2:	f383 8811 	msr	BASEPRI, r3
    28a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28aa:	4620      	mov	r0, r4
    28ac:	f000 fc96 	bl	31dc <z_spin_lock_valid>
    28b0:	b968      	cbnz	r0, 28ce <uart_aspeed_irq_err_disable+0x42>
    28b2:	2381      	movs	r3, #129	; 0x81
    28b4:	4a15      	ldr	r2, [pc, #84]	; (290c <uart_aspeed_irq_err_disable+0x80>)
    28b6:	4916      	ldr	r1, [pc, #88]	; (2910 <uart_aspeed_irq_err_disable+0x84>)
    28b8:	4816      	ldr	r0, [pc, #88]	; (2914 <uart_aspeed_irq_err_disable+0x88>)
    28ba:	f003 fc23 	bl	6104 <printk>
    28be:	4621      	mov	r1, r4
    28c0:	4815      	ldr	r0, [pc, #84]	; (2918 <uart_aspeed_irq_err_disable+0x8c>)
    28c2:	f003 fc1f 	bl	6104 <printk>
    28c6:	2181      	movs	r1, #129	; 0x81
    28c8:	4810      	ldr	r0, [pc, #64]	; (290c <uart_aspeed_irq_err_disable+0x80>)
    28ca:	f003 fce5 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    28ce:	4620      	mov	r0, r4
    28d0:	f000 fca0 	bl	3214 <z_spin_lock_set_owner>

	reg = sys_read32(dev_cfg->base + UART_IER) & ~UART_IER_ELSI;
    28d4:	686a      	ldr	r2, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    28d6:	4620      	mov	r0, r4
	return *(volatile uint32_t *)addr;
    28d8:	6853      	ldr	r3, [r2, #4]
    28da:	f023 0304 	bic.w	r3, r3, #4
	*(volatile uint32_t *)addr = data;
    28de:	6053      	str	r3, [r2, #4]
    28e0:	f000 fc8a 	bl	31f8 <z_spin_unlock_valid>
    28e4:	b968      	cbnz	r0, 2902 <uart_aspeed_irq_err_disable+0x76>
    28e6:	23ac      	movs	r3, #172	; 0xac
    28e8:	4a08      	ldr	r2, [pc, #32]	; (290c <uart_aspeed_irq_err_disable+0x80>)
    28ea:	490c      	ldr	r1, [pc, #48]	; (291c <uart_aspeed_irq_err_disable+0x90>)
    28ec:	4809      	ldr	r0, [pc, #36]	; (2914 <uart_aspeed_irq_err_disable+0x88>)
    28ee:	f003 fc09 	bl	6104 <printk>
    28f2:	4621      	mov	r1, r4
    28f4:	480a      	ldr	r0, [pc, #40]	; (2920 <uart_aspeed_irq_err_disable+0x94>)
    28f6:	f003 fc05 	bl	6104 <printk>
    28fa:	21ac      	movs	r1, #172	; 0xac
    28fc:	4803      	ldr	r0, [pc, #12]	; (290c <uart_aspeed_irq_err_disable+0x80>)
    28fe:	f003 fccb 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2902:	f386 8811 	msr	BASEPRI, r6
    2906:	f3bf 8f6f 	isb	sy
	sys_write32(reg, dev_cfg->base + UART_IER);

	k_spin_unlock(&data->lock, key);
}
    290a:	bd70      	pop	{r4, r5, r6, pc}
    290c:	00007430 	.word	0x00007430
    2910:	00007456 	.word	0x00007456
    2914:	000072be 	.word	0x000072be
    2918:	0000746b 	.word	0x0000746b
    291c:	00007483 	.word	0x00007483
    2920:	0000749a 	.word	0x0000749a

00002924 <uart_aspeed_irq_is_pending>:

static int uart_aspeed_irq_is_pending(const struct device *dev)
{
    2924:	b570      	push	{r4, r5, r6, lr}
	int ret;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2926:	6905      	ldr	r5, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2928:	6844      	ldr	r4, [r0, #4]
	__asm__ volatile(
    292a:	f04f 0320 	mov.w	r3, #32
    292e:	f3ef 8611 	mrs	r6, BASEPRI
    2932:	f383 8811 	msr	BASEPRI, r3
    2936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    293a:	4628      	mov	r0, r5
    293c:	f000 fc4e 	bl	31dc <z_spin_lock_valid>
    2940:	b968      	cbnz	r0, 295e <uart_aspeed_irq_is_pending+0x3a>
    2942:	2381      	movs	r3, #129	; 0x81
    2944:	4a1c      	ldr	r2, [pc, #112]	; (29b8 <uart_aspeed_irq_is_pending+0x94>)
    2946:	491d      	ldr	r1, [pc, #116]	; (29bc <uart_aspeed_irq_is_pending+0x98>)
    2948:	481d      	ldr	r0, [pc, #116]	; (29c0 <uart_aspeed_irq_is_pending+0x9c>)
    294a:	f003 fbdb 	bl	6104 <printk>
    294e:	4629      	mov	r1, r5
    2950:	481c      	ldr	r0, [pc, #112]	; (29c4 <uart_aspeed_irq_is_pending+0xa0>)
    2952:	f003 fbd7 	bl	6104 <printk>
    2956:	2181      	movs	r1, #129	; 0x81
    2958:	4817      	ldr	r0, [pc, #92]	; (29b8 <uart_aspeed_irq_is_pending+0x94>)
    295a:	f003 fc9d 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    295e:	4628      	mov	r0, r5
    2960:	f000 fc58 	bl	3214 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if (dev_cfg->dma) {
    2964:	f894 3020 	ldrb.w	r3, [r4, #32]
    2968:	b303      	cbz	r3, 29ac <uart_aspeed_irq_is_pending+0x88>
	return *(volatile uint32_t *)addr;
    296a:	4b17      	ldr	r3, [pc, #92]	; (29c8 <uart_aspeed_irq_is_pending+0xa4>)
    296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		ret = ((sys_read32(udma_base + UDMA_TX_DMA_INT_STS) |
    2970:	4313      	orrs	r3, r2
		       sys_read32(udma_base + UDMA_RX_DMA_INT_STS)) &
    2972:	6a62      	ldr	r2, [r4, #36]	; 0x24
		       dev_cfg->dma_ch) ? 1 : 0;
    2974:	4213      	tst	r3, r2
    2976:	bf14      	ite	ne
    2978:	2401      	movne	r4, #1
    297a:	2400      	moveq	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    297c:	4628      	mov	r0, r5
    297e:	f000 fc3b 	bl	31f8 <z_spin_unlock_valid>
    2982:	b968      	cbnz	r0, 29a0 <uart_aspeed_irq_is_pending+0x7c>
    2984:	23ac      	movs	r3, #172	; 0xac
    2986:	4a0c      	ldr	r2, [pc, #48]	; (29b8 <uart_aspeed_irq_is_pending+0x94>)
    2988:	4910      	ldr	r1, [pc, #64]	; (29cc <uart_aspeed_irq_is_pending+0xa8>)
    298a:	480d      	ldr	r0, [pc, #52]	; (29c0 <uart_aspeed_irq_is_pending+0x9c>)
    298c:	f003 fbba 	bl	6104 <printk>
    2990:	4629      	mov	r1, r5
    2992:	480f      	ldr	r0, [pc, #60]	; (29d0 <uart_aspeed_irq_is_pending+0xac>)
    2994:	f003 fbb6 	bl	6104 <printk>
    2998:	21ac      	movs	r1, #172	; 0xac
    299a:	4807      	ldr	r0, [pc, #28]	; (29b8 <uart_aspeed_irq_is_pending+0x94>)
    299c:	f003 fc7c 	bl	6298 <assert_post_action>
	__asm__ volatile(
    29a0:	f386 8811 	msr	BASEPRI, r6
    29a4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
    29a8:	4620      	mov	r0, r4
    29aa:	bd70      	pop	{r4, r5, r6, pc}
		ret = (!(data->iir_cache & UART_IIR_IPN)) ? 1 : 0;
    29ac:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    29ae:	43e4      	mvns	r4, r4
    29b0:	f004 0401 	and.w	r4, r4, #1
    29b4:	e7e2      	b.n	297c <uart_aspeed_irq_is_pending+0x58>
    29b6:	bf00      	nop
    29b8:	00007430 	.word	0x00007430
    29bc:	00007456 	.word	0x00007456
    29c0:	000072be 	.word	0x000072be
    29c4:	0000746b 	.word	0x0000746b
    29c8:	7e79e000 	.word	0x7e79e000
    29cc:	00007483 	.word	0x00007483
    29d0:	0000749a 	.word	0x0000749a

000029d4 <uart_aspeed_irq_update>:

static int uart_aspeed_irq_update(const struct device *dev)
{
    29d4:	b570      	push	{r4, r5, r6, lr}
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    29d6:	6845      	ldr	r5, [r0, #4]
	k_spinlock_key_t key;

	if (dev_cfg->dma)
    29d8:	f895 3020 	ldrb.w	r3, [r5, #32]
    29dc:	2b00      	cmp	r3, #0
    29de:	d136      	bne.n	2a4e <uart_aspeed_irq_update+0x7a>
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    29e0:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    29e2:	f04f 0320 	mov.w	r3, #32
    29e6:	f3ef 8611 	mrs	r6, BASEPRI
    29ea:	f383 8811 	msr	BASEPRI, r3
    29ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    29f2:	4620      	mov	r0, r4
    29f4:	f000 fbf2 	bl	31dc <z_spin_lock_valid>
    29f8:	b968      	cbnz	r0, 2a16 <uart_aspeed_irq_update+0x42>
    29fa:	2381      	movs	r3, #129	; 0x81
    29fc:	4a15      	ldr	r2, [pc, #84]	; (2a54 <uart_aspeed_irq_update+0x80>)
    29fe:	4916      	ldr	r1, [pc, #88]	; (2a58 <uart_aspeed_irq_update+0x84>)
    2a00:	4816      	ldr	r0, [pc, #88]	; (2a5c <uart_aspeed_irq_update+0x88>)
    2a02:	f003 fb7f 	bl	6104 <printk>
    2a06:	4621      	mov	r1, r4
    2a08:	4815      	ldr	r0, [pc, #84]	; (2a60 <uart_aspeed_irq_update+0x8c>)
    2a0a:	f003 fb7b 	bl	6104 <printk>
    2a0e:	2181      	movs	r1, #129	; 0x81
    2a10:	4810      	ldr	r0, [pc, #64]	; (2a54 <uart_aspeed_irq_update+0x80>)
    2a12:	f003 fc41 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2a16:	4620      	mov	r0, r4
    2a18:	f000 fbfc 	bl	3214 <z_spin_lock_set_owner>
		return 1;

	key = k_spin_lock(&data->lock);

	data->iir_cache = sys_read32(dev_cfg->base + UART_IIR);
    2a1c:	686b      	ldr	r3, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2a1e:	4620      	mov	r0, r4
    2a20:	689b      	ldr	r3, [r3, #8]
    2a22:	6263      	str	r3, [r4, #36]	; 0x24
    2a24:	f000 fbe8 	bl	31f8 <z_spin_unlock_valid>
    2a28:	b968      	cbnz	r0, 2a46 <uart_aspeed_irq_update+0x72>
    2a2a:	23ac      	movs	r3, #172	; 0xac
    2a2c:	4a09      	ldr	r2, [pc, #36]	; (2a54 <uart_aspeed_irq_update+0x80>)
    2a2e:	490d      	ldr	r1, [pc, #52]	; (2a64 <uart_aspeed_irq_update+0x90>)
    2a30:	480a      	ldr	r0, [pc, #40]	; (2a5c <uart_aspeed_irq_update+0x88>)
    2a32:	f003 fb67 	bl	6104 <printk>
    2a36:	4621      	mov	r1, r4
    2a38:	480b      	ldr	r0, [pc, #44]	; (2a68 <uart_aspeed_irq_update+0x94>)
    2a3a:	f003 fb63 	bl	6104 <printk>
    2a3e:	21ac      	movs	r1, #172	; 0xac
    2a40:	4804      	ldr	r0, [pc, #16]	; (2a54 <uart_aspeed_irq_update+0x80>)
    2a42:	f003 fc29 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2a46:	f386 8811 	msr	BASEPRI, r6
    2a4a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&data->lock, key);

	return 1;
}
    2a4e:	2001      	movs	r0, #1
    2a50:	bd70      	pop	{r4, r5, r6, pc}
    2a52:	bf00      	nop
    2a54:	00007430 	.word	0x00007430
    2a58:	00007456 	.word	0x00007456
    2a5c:	000072be 	.word	0x000072be
    2a60:	0000746b 	.word	0x0000746b
    2a64:	00007483 	.word	0x00007483
    2a68:	0000749a 	.word	0x0000749a

00002a6c <uart_aspeed_irq_callback_set>:

static void uart_aspeed_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb,
					 void *cb_data)
{
    2a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a6e:	460e      	mov	r6, r1
    2a70:	4615      	mov	r5, r2
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2a72:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    2a74:	f04f 0320 	mov.w	r3, #32
    2a78:	f3ef 8711 	mrs	r7, BASEPRI
    2a7c:	f383 8811 	msr	BASEPRI, r3
    2a80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a84:	4620      	mov	r0, r4
    2a86:	f000 fba9 	bl	31dc <z_spin_lock_valid>
    2a8a:	b968      	cbnz	r0, 2aa8 <uart_aspeed_irq_callback_set+0x3c>
    2a8c:	2381      	movs	r3, #129	; 0x81
    2a8e:	4a14      	ldr	r2, [pc, #80]	; (2ae0 <uart_aspeed_irq_callback_set+0x74>)
    2a90:	4914      	ldr	r1, [pc, #80]	; (2ae4 <uart_aspeed_irq_callback_set+0x78>)
    2a92:	4815      	ldr	r0, [pc, #84]	; (2ae8 <uart_aspeed_irq_callback_set+0x7c>)
    2a94:	f003 fb36 	bl	6104 <printk>
    2a98:	4621      	mov	r1, r4
    2a9a:	4814      	ldr	r0, [pc, #80]	; (2aec <uart_aspeed_irq_callback_set+0x80>)
    2a9c:	f003 fb32 	bl	6104 <printk>
    2aa0:	2181      	movs	r1, #129	; 0x81
    2aa2:	480f      	ldr	r0, [pc, #60]	; (2ae0 <uart_aspeed_irq_callback_set+0x74>)
    2aa4:	f003 fbf8 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2aa8:	4620      	mov	r0, r4
    2aaa:	f000 fbb3 	bl	3214 <z_spin_lock_set_owner>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2aae:	4620      	mov	r0, r4
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	data->cb = cb;
	data->cb_data = cb_data;
    2ab0:	e9c4 6507 	strd	r6, r5, [r4, #28]
    2ab4:	f000 fba0 	bl	31f8 <z_spin_unlock_valid>
    2ab8:	b968      	cbnz	r0, 2ad6 <uart_aspeed_irq_callback_set+0x6a>
    2aba:	23ac      	movs	r3, #172	; 0xac
    2abc:	4a08      	ldr	r2, [pc, #32]	; (2ae0 <uart_aspeed_irq_callback_set+0x74>)
    2abe:	490c      	ldr	r1, [pc, #48]	; (2af0 <uart_aspeed_irq_callback_set+0x84>)
    2ac0:	4809      	ldr	r0, [pc, #36]	; (2ae8 <uart_aspeed_irq_callback_set+0x7c>)
    2ac2:	f003 fb1f 	bl	6104 <printk>
    2ac6:	4621      	mov	r1, r4
    2ac8:	480a      	ldr	r0, [pc, #40]	; (2af4 <uart_aspeed_irq_callback_set+0x88>)
    2aca:	f003 fb1b 	bl	6104 <printk>
    2ace:	21ac      	movs	r1, #172	; 0xac
    2ad0:	4803      	ldr	r0, [pc, #12]	; (2ae0 <uart_aspeed_irq_callback_set+0x74>)
    2ad2:	f003 fbe1 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2ad6:	f387 8811 	msr	BASEPRI, r7
    2ada:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&data->lock, key);
}
    2ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ae0:	00007430 	.word	0x00007430
    2ae4:	00007456 	.word	0x00007456
    2ae8:	000072be 	.word	0x000072be
    2aec:	0000746b 	.word	0x0000746b
    2af0:	00007483 	.word	0x00007483
    2af4:	0000749a 	.word	0x0000749a

00002af8 <udma_aspeed_isr>:

static void udma_aspeed_isr(void *null_ptr)
{
    2af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    2afc:	f04f 0320 	mov.w	r3, #32
    2b00:	f3ef 8811 	mrs	r8, BASEPRI
    2b04:	f383 8811 	msr	BASEPRI, r3
    2b08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b0c:	4824      	ldr	r0, [pc, #144]	; (2ba0 <udma_aspeed_isr+0xa8>)
    2b0e:	f000 fb65 	bl	31dc <z_spin_lock_valid>
    2b12:	b968      	cbnz	r0, 2b30 <udma_aspeed_isr+0x38>
    2b14:	2381      	movs	r3, #129	; 0x81
    2b16:	4a23      	ldr	r2, [pc, #140]	; (2ba4 <udma_aspeed_isr+0xac>)
    2b18:	4923      	ldr	r1, [pc, #140]	; (2ba8 <udma_aspeed_isr+0xb0>)
    2b1a:	4824      	ldr	r0, [pc, #144]	; (2bac <udma_aspeed_isr+0xb4>)
    2b1c:	f003 faf2 	bl	6104 <printk>
    2b20:	491f      	ldr	r1, [pc, #124]	; (2ba0 <udma_aspeed_isr+0xa8>)
    2b22:	4823      	ldr	r0, [pc, #140]	; (2bb0 <udma_aspeed_isr+0xb8>)
    2b24:	f003 faee 	bl	6104 <printk>
    2b28:	2181      	movs	r1, #129	; 0x81
    2b2a:	481e      	ldr	r0, [pc, #120]	; (2ba4 <udma_aspeed_isr+0xac>)
    2b2c:	f003 fbb4 	bl	6298 <assert_post_action>
	/* invoke registered callback if any TX/RX interrupt */
	tx_sts = sys_read32(udma_base + UDMA_TX_DMA_INT_STS);
	rx_sts = sys_read32(udma_base + UDMA_RX_DMA_INT_STS);
	sts = tx_sts | rx_sts;

	for (i = 0; i < UDMA_MAX_CHANNEL; ++i) {
    2b30:	2400      	movs	r4, #0
		if (!(sts & (0x1 << i)))
    2b32:	f04f 0a01 	mov.w	sl, #1
    2b36:	4d1f      	ldr	r5, [pc, #124]	; (2bb4 <udma_aspeed_isr+0xbc>)
	z_spin_lock_set_owner(l);
    2b38:	4819      	ldr	r0, [pc, #100]	; (2ba0 <udma_aspeed_isr+0xa8>)
    2b3a:	f000 fb6b 	bl	3214 <z_spin_lock_set_owner>
    2b3e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
    2b40:	6bee      	ldr	r6, [r5, #60]	; 0x3c
			continue;

		if (!udma_udev[i])
    2b42:	f8df b074 	ldr.w	fp, [pc, #116]	; 2bb8 <udma_aspeed_isr+0xc0>
	sts = tx_sts | rx_sts;
    2b46:	ea46 0907 	orr.w	r9, r6, r7
		if (!(sts & (0x1 << i)))
    2b4a:	fa0a f304 	lsl.w	r3, sl, r4
    2b4e:	ea13 0f09 	tst.w	r3, r9
    2b52:	d007      	beq.n	2b64 <udma_aspeed_isr+0x6c>
		if (!udma_udev[i])
    2b54:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    2b58:	b120      	cbz	r0, 2b64 <udma_aspeed_isr+0x6c>
			continue;

		data = (struct uart_aspeed_data *)udma_udev[i]->data;
    2b5a:	6902      	ldr	r2, [r0, #16]
		if (data->cb)
    2b5c:	69d3      	ldr	r3, [r2, #28]
    2b5e:	b10b      	cbz	r3, 2b64 <udma_aspeed_isr+0x6c>
			data->cb(udma_udev[i], data->cb_data);
    2b60:	6a11      	ldr	r1, [r2, #32]
    2b62:	4798      	blx	r3
	for (i = 0; i < UDMA_MAX_CHANNEL; ++i) {
    2b64:	3401      	adds	r4, #1
    2b66:	2c0e      	cmp	r4, #14
    2b68:	d1ef      	bne.n	2b4a <udma_aspeed_isr+0x52>
	*(volatile uint32_t *)addr = data;
    2b6a:	636f      	str	r7, [r5, #52]	; 0x34
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2b6c:	480c      	ldr	r0, [pc, #48]	; (2ba0 <udma_aspeed_isr+0xa8>)
    2b6e:	63ee      	str	r6, [r5, #60]	; 0x3c
    2b70:	f000 fb42 	bl	31f8 <z_spin_unlock_valid>
    2b74:	b968      	cbnz	r0, 2b92 <udma_aspeed_isr+0x9a>
    2b76:	23ac      	movs	r3, #172	; 0xac
    2b78:	4a0a      	ldr	r2, [pc, #40]	; (2ba4 <udma_aspeed_isr+0xac>)
    2b7a:	4910      	ldr	r1, [pc, #64]	; (2bbc <udma_aspeed_isr+0xc4>)
    2b7c:	480b      	ldr	r0, [pc, #44]	; (2bac <udma_aspeed_isr+0xb4>)
    2b7e:	f003 fac1 	bl	6104 <printk>
    2b82:	4907      	ldr	r1, [pc, #28]	; (2ba0 <udma_aspeed_isr+0xa8>)
    2b84:	480e      	ldr	r0, [pc, #56]	; (2bc0 <udma_aspeed_isr+0xc8>)
    2b86:	f003 fabd 	bl	6104 <printk>
    2b8a:	21ac      	movs	r1, #172	; 0xac
    2b8c:	4805      	ldr	r0, [pc, #20]	; (2ba4 <udma_aspeed_isr+0xac>)
    2b8e:	f003 fb83 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2b92:	f388 8811 	msr	BASEPRI, r8
    2b96:	f3bf 8f6f 	isb	sy

	sys_write32(tx_sts, udma_base + UDMA_TX_DMA_INT_STS);
	sys_write32(rx_sts, udma_base + UDMA_RX_DMA_INT_STS);

	k_spin_unlock(&udma_lock, key);
}
    2b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b9e:	bf00      	nop
    2ba0:	00008798 	.word	0x00008798
    2ba4:	00007430 	.word	0x00007430
    2ba8:	00007456 	.word	0x00007456
    2bac:	000072be 	.word	0x000072be
    2bb0:	0000746b 	.word	0x0000746b
    2bb4:	7e79e000 	.word	0x7e79e000
    2bb8:	0000879c 	.word	0x0000879c
    2bbc:	00007483 	.word	0x00007483
    2bc0:	0000749a 	.word	0x0000749a

00002bc4 <uart_aspeed_configure>:
{
    2bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2bc8:	460c      	mov	r4, r1
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2bca:	6905      	ldr	r5, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2bcc:	6847      	ldr	r7, [r0, #4]
	__asm__ volatile(
    2bce:	f04f 0320 	mov.w	r3, #32
    2bd2:	f3ef 8611 	mrs	r6, BASEPRI
    2bd6:	f383 8811 	msr	BASEPRI, r3
    2bda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2bde:	4628      	mov	r0, r5
    2be0:	f000 fafc 	bl	31dc <z_spin_lock_valid>
    2be4:	b968      	cbnz	r0, 2c02 <uart_aspeed_configure+0x3e>
    2be6:	2381      	movs	r3, #129	; 0x81
    2be8:	4a3c      	ldr	r2, [pc, #240]	; (2cdc <uart_aspeed_configure+0x118>)
    2bea:	493d      	ldr	r1, [pc, #244]	; (2ce0 <uart_aspeed_configure+0x11c>)
    2bec:	483d      	ldr	r0, [pc, #244]	; (2ce4 <uart_aspeed_configure+0x120>)
    2bee:	f003 fa89 	bl	6104 <printk>
    2bf2:	4629      	mov	r1, r5
    2bf4:	483c      	ldr	r0, [pc, #240]	; (2ce8 <uart_aspeed_configure+0x124>)
    2bf6:	f003 fa85 	bl	6104 <printk>
    2bfa:	2181      	movs	r1, #129	; 0x81
    2bfc:	4837      	ldr	r0, [pc, #220]	; (2cdc <uart_aspeed_configure+0x118>)
    2bfe:	f003 fb4b 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    2c02:	4628      	mov	r0, r5
    2c04:	f000 fb06 	bl	3214 <z_spin_lock_set_owner>
			       dev_cfg->clk_id, &clk_rate);
    2c08:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2c0c:	4640      	mov	r0, r8
    2c0e:	f003 fbd6 	bl	63be <z_device_ready>
    2c12:	b138      	cbz	r0, 2c24 <uart_aspeed_configure+0x60>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
    2c14:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2c18:	68db      	ldr	r3, [r3, #12]
    2c1a:	b11b      	cbz	r3, 2c24 <uart_aspeed_configure+0x60>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
    2c1c:	4649      	mov	r1, r9
    2c1e:	4640      	mov	r0, r8
    2c20:	aa01      	add	r2, sp, #4
    2c22:	4798      	blx	r3
	divisor = clk_rate / (16 * uart_cfg->baudrate);
    2c24:	6823      	ldr	r3, [r4, #0]
    2c26:	9901      	ldr	r1, [sp, #4]
    2c28:	011b      	lsls	r3, r3, #4
    2c2a:	fbb1 f1f3 	udiv	r1, r1, r3
	reg = sys_read32(dev_cfg->base + UART_LCR);
    2c2e:	687a      	ldr	r2, [r7, #4]
	return *(volatile uint32_t *)addr;
    2c30:	68d3      	ldr	r3, [r2, #12]
	reg |= UART_LCR_DLAB;
    2c32:	f043 0080 	orr.w	r0, r3, #128	; 0x80
	*(volatile uint32_t *)addr = data;
    2c36:	60d0      	str	r0, [r2, #12]
	sys_write32(divisor & 0xf, dev_cfg->base + UART_DLL);
    2c38:	f001 000f 	and.w	r0, r1, #15
	sys_write32(divisor >> 8, dev_cfg->base + UART_DLH);
    2c3c:	0a09      	lsrs	r1, r1, #8
    2c3e:	6010      	str	r0, [r2, #0]
    2c40:	6051      	str	r1, [r2, #4]
	switch (uart_cfg->data_bits) {
    2c42:	79a1      	ldrb	r1, [r4, #6]
    2c44:	f023 0387 	bic.w	r3, r3, #135	; 0x87
    2c48:	2903      	cmp	r1, #3
    2c4a:	d843      	bhi.n	2cd4 <uart_aspeed_configure+0x110>
    2c4c:	e8df f001 	tbb	[pc, r1]
    2c50:	39360204 	.word	0x39360204
		reg |= ((0x1 << UART_LCR_CLS_SHIFT) & UART_LCR_CLS_MASK);
    2c54:	f043 0301 	orr.w	r3, r3, #1
	switch (uart_cfg->stop_bits) {
    2c58:	7961      	ldrb	r1, [r4, #5]
    2c5a:	2901      	cmp	r1, #1
    2c5c:	d003      	beq.n	2c66 <uart_aspeed_configure+0xa2>
    2c5e:	2903      	cmp	r1, #3
    2c60:	d138      	bne.n	2cd4 <uart_aspeed_configure+0x110>
		reg |= UART_LCR_STOP;
    2c62:	f043 0304 	orr.w	r3, r3, #4
	switch (uart_cfg->parity) {
    2c66:	7921      	ldrb	r1, [r4, #4]
    2c68:	2901      	cmp	r1, #1
    2c6a:	d02d      	beq.n	2cc8 <uart_aspeed_configure+0x104>
    2c6c:	2902      	cmp	r1, #2
    2c6e:	d02e      	beq.n	2cce <uart_aspeed_configure+0x10a>
    2c70:	bb81      	cbnz	r1, 2cd4 <uart_aspeed_configure+0x110>
		reg &= ~(UART_LCR_PARITY_EN);
    2c72:	f023 0308 	bic.w	r3, r3, #8
    2c76:	60d3      	str	r3, [r2, #12]
    2c78:	2387      	movs	r3, #135	; 0x87
    2c7a:	6093      	str	r3, [r2, #8]
	data->uart_cfg = *uart_cfg;
    2c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
	int rc = 0;
    2c80:	2400      	movs	r4, #0
	data->uart_cfg = *uart_cfg;
    2c82:	1d2b      	adds	r3, r5, #4
    2c84:	e883 0003 	stmia.w	r3, {r0, r1}
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2c88:	4628      	mov	r0, r5
    2c8a:	f000 fab5 	bl	31f8 <z_spin_unlock_valid>
    2c8e:	b968      	cbnz	r0, 2cac <uart_aspeed_configure+0xe8>
    2c90:	23ac      	movs	r3, #172	; 0xac
    2c92:	4a12      	ldr	r2, [pc, #72]	; (2cdc <uart_aspeed_configure+0x118>)
    2c94:	4915      	ldr	r1, [pc, #84]	; (2cec <uart_aspeed_configure+0x128>)
    2c96:	4813      	ldr	r0, [pc, #76]	; (2ce4 <uart_aspeed_configure+0x120>)
    2c98:	f003 fa34 	bl	6104 <printk>
    2c9c:	4629      	mov	r1, r5
    2c9e:	4814      	ldr	r0, [pc, #80]	; (2cf0 <uart_aspeed_configure+0x12c>)
    2ca0:	f003 fa30 	bl	6104 <printk>
    2ca4:	21ac      	movs	r1, #172	; 0xac
    2ca6:	480d      	ldr	r0, [pc, #52]	; (2cdc <uart_aspeed_configure+0x118>)
    2ca8:	f003 faf6 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2cac:	f386 8811 	msr	BASEPRI, r6
    2cb0:	f3bf 8f6f 	isb	sy
};
    2cb4:	4620      	mov	r0, r4
    2cb6:	b003      	add	sp, #12
    2cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reg |= ((0x2 << UART_LCR_CLS_SHIFT) & UART_LCR_CLS_MASK);
    2cbc:	f043 0302 	orr.w	r3, r3, #2
		break;
    2cc0:	e7ca      	b.n	2c58 <uart_aspeed_configure+0x94>
		reg |= ((0x3 << UART_LCR_CLS_SHIFT) & UART_LCR_CLS_MASK);
    2cc2:	f043 0303 	orr.w	r3, r3, #3
		break;
    2cc6:	e7c7      	b.n	2c58 <uart_aspeed_configure+0x94>
		reg |= UART_LCR_PARITY_EN;
    2cc8:	f043 0308 	orr.w	r3, r3, #8
		break;
    2ccc:	e7d3      	b.n	2c76 <uart_aspeed_configure+0xb2>
		reg |= (UART_LCR_PARITY_EN | UART_LCR_PARITY_MODE);
    2cce:	f043 0318 	orr.w	r3, r3, #24
		break;
    2cd2:	e7d0      	b.n	2c76 <uart_aspeed_configure+0xb2>
	switch (uart_cfg->parity) {
    2cd4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2cd8:	e7d6      	b.n	2c88 <uart_aspeed_configure+0xc4>
    2cda:	bf00      	nop
    2cdc:	00007430 	.word	0x00007430
    2ce0:	00007456 	.word	0x00007456
    2ce4:	000072be 	.word	0x000072be
    2ce8:	0000746b 	.word	0x0000746b
    2cec:	00007483 	.word	0x00007483
    2cf0:	0000749a 	.word	0x0000749a

00002cf4 <uart_aspeed_init>:
	if (data->cb)
		data->cb(dev, data->cb_data);
}

static int uart_aspeed_init(const struct device *dev)
{
    2cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t reg;
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
	struct uart_config *uart_cfg = &data->uart_cfg;

	data->iir_cache = 0;
    2cf8:	2300      	movs	r3, #0
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    2cfa:	6906      	ldr	r6, [r0, #16]
	struct uart_aspeed_config *dev_cfg = (struct uart_aspeed_config *)dev->config;
    2cfc:	6845      	ldr	r5, [r0, #4]
{
    2cfe:	4607      	mov	r7, r0
	data->cb = NULL;
	data->cb_data = NULL;

	clock_control_on(dev_cfg->clock_dev, dev_cfg->clk_id);
    2d00:	e9d5 4902 	ldrd	r4, r9, [r5, #8]
	data->cb_data = NULL;
    2d04:	e9c6 3307 	strd	r3, r3, [r6, #28]
	struct uart_config *uart_cfg = &data->uart_cfg;
    2d08:	f106 0804 	add.w	r8, r6, #4
	data->iir_cache = 0;
    2d0c:	6273      	str	r3, [r6, #36]	; 0x24
    2d0e:	4620      	mov	r0, r4
    2d10:	f003 fb55 	bl	63be <z_device_ready>
    2d14:	b120      	cbz	r0, 2d20 <uart_aspeed_init+0x2c>
	return api->on(dev, sys);
    2d16:	68a3      	ldr	r3, [r4, #8]
    2d18:	4649      	mov	r1, r9
    2d1a:	4620      	mov	r0, r4
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	4798      	blx	r3

	if (dev_cfg->dma) {
    2d20:	f895 3020 	ldrb.w	r3, [r5, #32]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d063      	beq.n	2df0 <uart_aspeed_init+0xfc>
	if (udma_init)
    2d28:	f8df 9118 	ldr.w	r9, [pc, #280]	; 2e44 <uart_aspeed_init+0x150>
    2d2c:	4c46      	ldr	r4, [pc, #280]	; (2e48 <uart_aspeed_init+0x154>)
    2d2e:	f899 3000 	ldrb.w	r3, [r9]
    2d32:	b9fb      	cbnz	r3, 2d74 <uart_aspeed_init+0x80>
    2d34:	4a45      	ldr	r2, [pc, #276]	; (2e4c <uart_aspeed_init+0x158>)
	for (i = 0; i < UDMA_MAX_CHANNEL; ++i) {
    2d36:	4946      	ldr	r1, [pc, #280]	; (2e50 <uart_aspeed_init+0x15c>)
    2d38:	6023      	str	r3, [r4, #0]
    2d3a:	6063      	str	r3, [r4, #4]
    2d3c:	60a3      	str	r3, [r4, #8]
    2d3e:	6013      	str	r3, [r2, #0]
    2d40:	60d3      	str	r3, [r2, #12]
    2d42:	3220      	adds	r2, #32
    2d44:	428a      	cmp	r2, r1
    2d46:	d1fa      	bne.n	2d3e <uart_aspeed_init+0x4a>
    2d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d4c:	6362      	str	r2, [r4, #52]	; 0x34
    2d4e:	6222      	str	r2, [r4, #32]
    2d50:	6223      	str	r3, [r4, #32]
    2d52:	63e2      	str	r2, [r4, #60]	; 0x3c
    2d54:	6262      	str	r2, [r4, #36]	; 0x24
    2d56:	6263      	str	r3, [r4, #36]	; 0x24
    2d58:	f44f 7300 	mov.w	r3, #512	; 0x200
	IRQ_CONNECT(DT_IRQ_BY_IDX(DT_INST(0, aspeed_udma), 0, irq),
    2d5c:	2200      	movs	r2, #0
    2d5e:	60e3      	str	r3, [r4, #12]
    2d60:	2101      	movs	r1, #1
    2d62:	2038      	movs	r0, #56	; 0x38
    2d64:	f7fe fcc6 	bl	16f4 <z_arm_irq_priority_set>
	irq_enable(DT_IRQ_BY_IDX(DT_INST(0, aspeed_udma), 0, irq));
    2d68:	2038      	movs	r0, #56	; 0x38
    2d6a:	f7fe fcb5 	bl	16d8 <arch_irq_enable>
	udma_init = true;
    2d6e:	2301      	movs	r3, #1
    2d70:	f889 3000 	strb.w	r3, [r9]
		udma_aspeed_init();

		udma_udev[dev_cfg->dma_ch] = dev;
    2d74:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2d76:	4b37      	ldr	r3, [pc, #220]	; (2e54 <uart_aspeed_init+0x160>)

		/* TX DMA init */
		data->tx_rb = udma_tx_rb[dev_cfg->dma_ch];
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2d78:	4937      	ldr	r1, [pc, #220]	; (2e58 <uart_aspeed_init+0x164>)
		udma_udev[dev_cfg->dma_ch] = dev;
    2d7a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
		data->tx_rb = udma_tx_rb[dev_cfg->dma_ch];
    2d7e:	4b37      	ldr	r3, [pc, #220]	; (2e5c <uart_aspeed_init+0x168>)
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2d80:	f8d1 0a04 	ldr.w	r0, [r1, #2564]	; 0xa04
		data->tx_rb = udma_tx_rb[dev_cfg->dma_ch];
    2d84:	eb03 2382 	add.w	r3, r3, r2, lsl #10
    2d88:	60f3      	str	r3, [r6, #12]
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2d8a:	4403      	add	r3, r0
		sys_write32(data->tx_rb_addr, udma_base + UDMA_CHX_TX_BUF_BASE(dev_cfg->dma_ch));
    2d8c:	4834      	ldr	r0, [pc, #208]	; (2e60 <uart_aspeed_init+0x16c>)
    2d8e:	0152      	lsls	r2, r2, #5
		data->tx_rb_addr = TO_PHY_ADDR(data->tx_rb);
    2d90:	6133      	str	r3, [r6, #16]
    2d92:	5013      	str	r3, [r2, r0]

		reg = sys_read32(udma_base + UDMA_CHX_TX_CTRL(dev_cfg->dma_ch));
    2d94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2d96:	4a33      	ldr	r2, [pc, #204]	; (2e64 <uart_aspeed_init+0x170>)
    2d98:	015b      	lsls	r3, r3, #5
	return *(volatile uint32_t *)addr;
    2d9a:	5898      	ldr	r0, [r3, r2]
	*(volatile uint32_t *)addr = data;
    2d9c:	5098      	str	r0, [r3, r2]
		reg |= (UDMA_BUFSZ_1KB << UDMA_TX_CTRL_BUFSZ_SHIFT) & UDMA_TX_CTRL_BUFSZ_MASK;
		sys_write32(reg, udma_base + UDMA_CHX_TX_CTRL(dev_cfg->dma_ch));

		reg = sys_read32(udma_base + UDMA_TX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    2d9e:	2301      	movs	r3, #1
    2da0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2da2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2da4:	fa03 f202 	lsl.w	r2, r3, r2
    2da8:	4302      	orrs	r2, r0
	*(volatile uint32_t *)addr = data;
    2daa:	6322      	str	r2, [r4, #48]	; 0x30
		sys_write32(reg, udma_base + UDMA_TX_DMA_INT_EN);

		reg = sys_read32(udma_base + UDMA_TX_DMA_EN) | (0x1 << dev_cfg->dma_ch);
    2dac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2dae:	6820      	ldr	r0, [r4, #0]
    2db0:	fa03 f202 	lsl.w	r2, r3, r2
    2db4:	4302      	orrs	r2, r0
	*(volatile uint32_t *)addr = data;
    2db6:	6022      	str	r2, [r4, #0]
		sys_write32(reg, udma_base + UDMA_TX_DMA_EN);

		/* RX DMA init */
		data->rx_rb = udma_rx_rb[dev_cfg->dma_ch];
    2db8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2dba:	4a2b      	ldr	r2, [pc, #172]	; (2e68 <uart_aspeed_init+0x174>)
		data->rx_rb_addr = TO_PHY_ADDR(data->rx_rb);
    2dbc:	f8d1 1a04 	ldr.w	r1, [r1, #2564]	; 0xa04
		data->rx_rb = udma_rx_rb[dev_cfg->dma_ch];
    2dc0:	eb02 2280 	add.w	r2, r2, r0, lsl #10
    2dc4:	6172      	str	r2, [r6, #20]
		data->rx_rb_addr = TO_PHY_ADDR(data->rx_rb);
    2dc6:	440a      	add	r2, r1
		sys_write32(data->rx_rb_addr, udma_base + UDMA_CHX_RX_BUF_BASE(dev_cfg->dma_ch));
    2dc8:	4928      	ldr	r1, [pc, #160]	; (2e6c <uart_aspeed_init+0x178>)
    2dca:	0140      	lsls	r0, r0, #5
		data->rx_rb_addr = TO_PHY_ADDR(data->rx_rb);
    2dcc:	61b2      	str	r2, [r6, #24]
    2dce:	5042      	str	r2, [r0, r1]

		reg = sys_read32(udma_base + UDMA_CHX_RX_CTRL(dev_cfg->dma_ch));
    2dd0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2dd2:	3104      	adds	r1, #4
    2dd4:	0152      	lsls	r2, r2, #5
	return *(volatile uint32_t *)addr;
    2dd6:	5850      	ldr	r0, [r2, r1]
	*(volatile uint32_t *)addr = data;
    2dd8:	5050      	str	r0, [r2, r1]
		reg |= (UDMA_BUFSZ_1KB << UDMA_RX_CTRL_BUFSZ_SHIFT) & UDMA_RX_CTRL_BUFSZ_MASK;
		sys_write32(reg, udma_base + UDMA_CHX_RX_CTRL(dev_cfg->dma_ch));

		reg = sys_read32(udma_base + UDMA_RX_DMA_INT_EN) | (0x1 << dev_cfg->dma_ch);
    2dda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2ddc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2dde:	fa03 f202 	lsl.w	r2, r3, r2
    2de2:	430a      	orrs	r2, r1
	*(volatile uint32_t *)addr = data;
    2de4:	63a2      	str	r2, [r4, #56]	; 0x38
		sys_write32(reg, udma_base + UDMA_RX_DMA_INT_EN);

		reg = sys_read32(udma_base + UDMA_RX_DMA_EN) | (0x1 << dev_cfg->dma_ch);
    2de6:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return *(volatile uint32_t *)addr;
    2de8:	6862      	ldr	r2, [r4, #4]
    2dea:	408b      	lsls	r3, r1
    2dec:	4313      	orrs	r3, r2
	*(volatile uint32_t *)addr = data;
    2dee:	6063      	str	r3, [r4, #4]
		sys_write32(reg, udma_base + UDMA_RX_DMA_EN);
	}

	if (dev_cfg->virt) {
    2df0:	7c2b      	ldrb	r3, [r5, #16]
    2df2:	b1b3      	cbz	r3, 2e22 <uart_aspeed_init+0x12e>
		sys_write32((dev_cfg->virt_port >> 0), dev_cfg->base + VUART_ADDRL);
    2df4:	686a      	ldr	r2, [r5, #4]
    2df6:	696b      	ldr	r3, [r5, #20]
    2df8:	6293      	str	r3, [r2, #40]	; 0x28
		sys_write32((dev_cfg->virt_port >> 8), dev_cfg->base + VUART_ADDRH);
    2dfa:	0a1b      	lsrs	r3, r3, #8
    2dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

		reg = sys_read32(dev_cfg->base + VUART_GCRB) & ~VUART_GCRB_HOST_SIRQ_MASK;
		reg |= ((dev_cfg->virt_sirq << VUART_GCRB_HOST_SIRQ_SHIFT) &
    2dfe:	69ab      	ldr	r3, [r5, #24]
	return *(volatile uint32_t *)addr;
    2e00:	6a51      	ldr	r1, [r2, #36]	; 0x24
    2e02:	011b      	lsls	r3, r3, #4
		reg = sys_read32(dev_cfg->base + VUART_GCRB) & ~VUART_GCRB_HOST_SIRQ_MASK;
    2e04:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
		reg |= ((dev_cfg->virt_sirq << VUART_GCRB_HOST_SIRQ_SHIFT) &
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	430b      	orrs	r3, r1
	*(volatile uint32_t *)addr = data;
    2e0c:	6253      	str	r3, [r2, #36]	; 0x24
		sys_write32(reg, dev_cfg->base + VUART_GCRB);

		reg = sys_read32(dev_cfg->base + VUART_GCRA) |
				 VUART_GCRA_DISABLE_HOST_TX_DISCARD |
				 VUART_GCRA_VUART_EN |
				 ((dev_cfg->virt_sirq_pol) ? VUART_GCRA_SIRQ_POLARITY : 0);
    2e0e:	69e9      	ldr	r1, [r5, #28]
	return *(volatile uint32_t *)addr;
    2e10:	6a13      	ldr	r3, [r2, #32]
    2e12:	3900      	subs	r1, #0
    2e14:	bf18      	it	ne
    2e16:	2101      	movne	r1, #1
				 VUART_GCRA_VUART_EN |
    2e18:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
		reg = sys_read32(dev_cfg->base + VUART_GCRA) |
    2e1c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
	*(volatile uint32_t *)addr = data;
    2e20:	6213      	str	r3, [r2, #32]
		sys_write32(reg, dev_cfg->base + VUART_GCRA);
	}

	uart_cfg->baudrate = 115200;
	uart_cfg->parity = UART_CFG_PARITY_NONE;
    2e22:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2e26:	4b12      	ldr	r3, [pc, #72]	; (2e70 <uart_aspeed_init+0x17c>)
	uart_cfg->stop_bits = UART_CFG_STOP_BITS_1;
	uart_cfg->data_bits = UART_CFG_DATA_BITS_8;
	uart_cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;

	rc = uart_aspeed_configure(dev, uart_cfg);
    2e28:	4641      	mov	r1, r8
	uart_cfg->parity = UART_CFG_PARITY_NONE;
    2e2a:	e9c6 2301 	strd	r2, r3, [r6, #4]
	rc = uart_aspeed_configure(dev, uart_cfg);
    2e2e:	4638      	mov	r0, r7
    2e30:	f7ff fec8 	bl	2bc4 <uart_aspeed_configure>
    2e34:	4604      	mov	r4, r0

	dev_cfg->irq_config_func(dev);
    2e36:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e38:	4638      	mov	r0, r7
    2e3a:	4798      	blx	r3

	return rc;
}
    2e3c:	4620      	mov	r0, r4
    2e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e42:	bf00      	nop
    2e44:	00008840 	.word	0x00008840
    2e48:	7e79e000 	.word	0x7e79e000
    2e4c:	7e79e044 	.word	0x7e79e044
    2e50:	7e79e204 	.word	0x7e79e204
    2e54:	0000879c 	.word	0x0000879c
    2e58:	7e6e2000 	.word	0x7e6e2000
    2e5c:	01003800 	.word	0x01003800
    2e60:	7e79e048 	.word	0x7e79e048
    2e64:	7e79e04c 	.word	0x7e79e04c
    2e68:	01000000 	.word	0x01000000
    2e6c:	7e79e058 	.word	0x7e79e058
    2e70:	00030100 	.word	0x00030100

00002e74 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e74:	4b0e      	ldr	r3, [pc, #56]	; (2eb0 <z_sys_init_run_level+0x3c>)
{
    2e76:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2e7c:	3001      	adds	r0, #1
    2e7e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2e82:	42a6      	cmp	r6, r4
    2e84:	d800      	bhi.n	2e88 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2e86:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2e88:	e9d4 3500 	ldrd	r3, r5, [r4]
    2e8c:	4628      	mov	r0, r5
    2e8e:	4798      	blx	r3
		if (dev != NULL) {
    2e90:	b165      	cbz	r5, 2eac <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    2e92:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    2e94:	b130      	cbz	r0, 2ea4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2e96:	2800      	cmp	r0, #0
    2e98:	bfb8      	it	lt
    2e9a:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    2e9c:	28ff      	cmp	r0, #255	; 0xff
    2e9e:	bfa8      	it	ge
    2ea0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    2ea2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2ea4:	785a      	ldrb	r2, [r3, #1]
    2ea6:	f042 0201 	orr.w	r2, r2, #1
    2eaa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2eac:	3408      	adds	r4, #8
    2eae:	e7e8      	b.n	2e82 <z_sys_init_run_level+0xe>
    2eb0:	0000716c 	.word	0x0000716c

00002eb4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    2eb4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    2eb6:	4605      	mov	r5, r0
    2eb8:	b910      	cbnz	r0, 2ec0 <z_impl_device_get_binding+0xc>
		return NULL;
    2eba:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    2ebc:	4620      	mov	r0, r4
    2ebe:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    2ec0:	7803      	ldrb	r3, [r0, #0]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d0f9      	beq.n	2eba <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    2ec6:	4c0e      	ldr	r4, [pc, #56]	; (2f00 <z_impl_device_get_binding+0x4c>)
    2ec8:	4e0e      	ldr	r6, [pc, #56]	; (2f04 <z_impl_device_get_binding+0x50>)
    2eca:	42b4      	cmp	r4, r6
    2ecc:	d108      	bne.n	2ee0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    2ece:	4c0c      	ldr	r4, [pc, #48]	; (2f00 <z_impl_device_get_binding+0x4c>)
    2ed0:	42b4      	cmp	r4, r6
    2ed2:	d0f2      	beq.n	2eba <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2ed4:	4620      	mov	r0, r4
    2ed6:	f003 fa72 	bl	63be <z_device_ready>
    2eda:	b950      	cbnz	r0, 2ef2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    2edc:	3418      	adds	r4, #24
    2ede:	e7f7      	b.n	2ed0 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    2ee0:	4620      	mov	r0, r4
    2ee2:	f003 fa6c 	bl	63be <z_device_ready>
    2ee6:	b110      	cbz	r0, 2eee <z_impl_device_get_binding+0x3a>
    2ee8:	6823      	ldr	r3, [r4, #0]
    2eea:	42ab      	cmp	r3, r5
    2eec:	d0e6      	beq.n	2ebc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    2eee:	3418      	adds	r4, #24
    2ef0:	e7eb      	b.n	2eca <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2ef2:	4628      	mov	r0, r5
    2ef4:	6821      	ldr	r1, [r4, #0]
    2ef6:	f7fd fbfd 	bl	6f4 <strcmp>
    2efa:	2800      	cmp	r0, #0
    2efc:	d1ee      	bne.n	2edc <z_impl_device_get_binding+0x28>
    2efe:	e7dd      	b.n	2ebc <z_impl_device_get_binding+0x8>
    2f00:	00008474 	.word	0x00008474
    2f04:	000084ec 	.word	0x000084ec

00002f08 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f0a:	4605      	mov	r5, r0
    2f0c:	460c      	mov	r4, r1
	__asm__ volatile(
    2f0e:	f04f 0320 	mov.w	r3, #32
    2f12:	f3ef 8711 	mrs	r7, BASEPRI
    2f16:	f383 8811 	msr	BASEPRI, r3
    2f1a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    2f1e:	f001 fc91 	bl	4844 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    2f22:	4621      	mov	r1, r4
    2f24:	4606      	mov	r6, r0
    2f26:	4628      	mov	r0, r5
    2f28:	f003 fa5c 	bl	63e4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    2f2c:	2d04      	cmp	r5, #4
    2f2e:	d127      	bne.n	2f80 <z_fatal_error+0x78>
    2f30:	4918      	ldr	r1, [pc, #96]	; (2f94 <z_fatal_error+0x8c>)
    2f32:	238f      	movs	r3, #143	; 0x8f
    2f34:	4a18      	ldr	r2, [pc, #96]	; (2f98 <z_fatal_error+0x90>)
    2f36:	4819      	ldr	r0, [pc, #100]	; (2f9c <z_fatal_error+0x94>)
    2f38:	f003 f8e4 	bl	6104 <printk>
    2f3c:	4818      	ldr	r0, [pc, #96]	; (2fa0 <z_fatal_error+0x98>)
    2f3e:	f003 f8e1 	bl	6104 <printk>
    2f42:	218f      	movs	r1, #143	; 0x8f
    2f44:	4814      	ldr	r0, [pc, #80]	; (2f98 <z_fatal_error+0x90>)
    2f46:	f003 f9a7 	bl	6298 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    2f4a:	b184      	cbz	r4, 2f6e <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    2f4c:	69e3      	ldr	r3, [r4, #28]
    2f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2f52:	b163      	cbz	r3, 2f6e <z_fatal_error+0x66>
#if defined(CONFIG_STACK_SENTINEL)
			if (reason != K_ERR_STACK_CHK_FAIL) {
				__ASSERT(0,
    2f54:	4913      	ldr	r1, [pc, #76]	; (2fa4 <z_fatal_error+0x9c>)
    2f56:	2396      	movs	r3, #150	; 0x96
    2f58:	4a0f      	ldr	r2, [pc, #60]	; (2f98 <z_fatal_error+0x90>)
    2f5a:	4810      	ldr	r0, [pc, #64]	; (2f9c <z_fatal_error+0x94>)
    2f5c:	f003 f8d2 	bl	6104 <printk>
    2f60:	4811      	ldr	r0, [pc, #68]	; (2fa8 <z_fatal_error+0xa0>)
    2f62:	f003 f8cf 	bl	6104 <printk>
    2f66:	2196      	movs	r1, #150	; 0x96
    2f68:	480b      	ldr	r0, [pc, #44]	; (2f98 <z_fatal_error+0x90>)
    2f6a:	f003 f995 	bl	6298 <assert_post_action>
	__asm__ volatile(
    2f6e:	f387 8811 	msr	BASEPRI, r7
    2f72:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    2f76:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    2f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2f7c:	f7fe bd98 	b.w	1ab0 <z_impl_k_thread_abort>
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    2f80:	2c00      	cmp	r4, #0
    2f82:	d0f4      	beq.n	2f6e <z_fatal_error+0x66>
    2f84:	69e3      	ldr	r3, [r4, #28]
    2f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d0ef      	beq.n	2f6e <z_fatal_error+0x66>
			if (reason != K_ERR_STACK_CHK_FAIL) {
    2f8e:	2d02      	cmp	r5, #2
    2f90:	d0ed      	beq.n	2f6e <z_fatal_error+0x66>
    2f92:	e7df      	b.n	2f54 <z_fatal_error+0x4c>
    2f94:	00007794 	.word	0x00007794
    2f98:	00007772 	.word	0x00007772
    2f9c:	000072be 	.word	0x000072be
    2fa0:	000077b1 	.word	0x000077b1
    2fa4:	00007a37 	.word	0x00007a37
    2fa8:	000077e6 	.word	0x000077e6

00002fac <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2fac:	4802      	ldr	r0, [pc, #8]	; (2fb8 <z_bss_zero+0xc>)
    2fae:	4a03      	ldr	r2, [pc, #12]	; (2fbc <z_bss_zero+0x10>)
    2fb0:	2100      	movs	r1, #0
    2fb2:	1a12      	subs	r2, r2, r0
    2fb4:	f003 ba70 	b.w	6498 <memset>
    2fb8:	000084f0 	.word	0x000084f0
    2fbc:	00008844 	.word	0x00008844

00002fc0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2fc0:	2201      	movs	r2, #1
{
    2fc2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    2fc4:	4b0b      	ldr	r3, [pc, #44]	; (2ff4 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2fc6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2fc8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2fca:	f7ff ff53 	bl	2e74 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    2fce:	f002 f859 	bl	5084 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
    2fd2:	f7fe f8c7 	bl	1164 <__do_global_ctors_aux>
	__do_init_array_aux();
    2fd6:	f7fe f8b7 	bl	1148 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2fda:	2003      	movs	r0, #3
    2fdc:	f7ff ff4a 	bl	2e74 <z_sys_init_run_level>

	z_init_static_threads();
    2fe0:	f000 fa8e 	bl	3500 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    2fe4:	f7fd fb98 	bl	718 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2fe8:	4a03      	ldr	r2, [pc, #12]	; (2ff8 <bg_thread_main+0x38>)
    2fea:	7b13      	ldrb	r3, [r2, #12]
    2fec:	f023 0301 	bic.w	r3, r3, #1
    2ff0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2ff2:	bd08      	pop	{r3, pc}
    2ff4:	00008841 	.word	0x00008841
    2ff8:	000085a8 	.word	0x000085a8

00002ffc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2ffc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3000:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 30ec <z_cstart+0xf0>
    3004:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3006:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    300a:	4d39      	ldr	r5, [pc, #228]	; (30f0 <z_cstart+0xf4>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    300c:	2400      	movs	r4, #0
    300e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3010:	f04f 0a01 	mov.w	sl, #1
    3014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3018:	616b      	str	r3, [r5, #20]
    301a:	23e0      	movs	r3, #224	; 0xe0
    301c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3020:	77ec      	strb	r4, [r5, #31]
    3022:	762c      	strb	r4, [r5, #24]
    3024:	766c      	strb	r4, [r5, #25]
    3026:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    302a:	4e32      	ldr	r6, [pc, #200]	; (30f4 <z_cstart+0xf8>)
    302c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3030:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3032:	f7fe fd15 	bl	1a60 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3036:	f7fe fbbd 	bl	17b4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    303a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    303e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3040:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3042:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3046:	4d2c      	ldr	r5, [pc, #176]	; (30f8 <z_cstart+0xfc>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3048:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	_current_cpu->current = dummy_thread;
    304c:	ab0a      	add	r3, sp, #40	; 0x28
    304e:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    3050:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3054:	f003 f9b2 	bl	63bc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3058:	4620      	mov	r0, r4
    305a:	f7ff ff0b 	bl	2e74 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    305e:	2001      	movs	r0, #1
    3060:	f7ff ff08 	bl	2e74 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3064:	f8df 8094 	ldr.w	r8, [pc, #148]	; 30fc <z_cstart+0x100>
	z_sched_init();
    3068:	f001 fb3e 	bl	46e8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    306c:	4b24      	ldr	r3, [pc, #144]	; (3100 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
    306e:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3074:	4923      	ldr	r1, [pc, #140]	; (3104 <z_cstart+0x108>)
    3076:	9305      	str	r3, [sp, #20]
    3078:	4630      	mov	r0, r6
    307a:	4643      	mov	r3, r8
    307c:	e9cd 4a03 	strd	r4, sl, [sp, #12]
    3080:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3084:	9400      	str	r4, [sp, #0]
    3086:	f000 f923 	bl	32d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    308a:	7b73      	ldrb	r3, [r6, #13]
    308c:	9007      	str	r0, [sp, #28]
    308e:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3092:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
    3094:	f10d 0b20 	add.w	fp, sp, #32
    3098:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    309a:	f000 fdcb 	bl	3c34 <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
    309e:	4623      	mov	r3, r4
    30a0:	2108      	movs	r1, #8
    30a2:	4a19      	ldr	r2, [pc, #100]	; (3108 <z_cstart+0x10c>)
    30a4:	4658      	mov	r0, fp
    30a6:	f003 f83a 	bl	611e <snprintk>
	z_setup_new_thread(thread, stack,
    30aa:	2338      	movs	r3, #56	; 0x38
    30ac:	4f17      	ldr	r7, [pc, #92]	; (310c <z_cstart+0x110>)
    30ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    30b2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    30b6:	4916      	ldr	r1, [pc, #88]	; (3110 <z_cstart+0x114>)
    30b8:	4b16      	ldr	r3, [pc, #88]	; (3114 <z_cstart+0x118>)
    30ba:	4638      	mov	r0, r7
    30bc:	e9cd ab04 	strd	sl, fp, [sp, #16]
    30c0:	e9cd 5400 	strd	r5, r4, [sp]
    30c4:	f000 f904 	bl	32d0 <z_setup_new_thread>
    30c8:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    30ca:	4642      	mov	r2, r8
    30cc:	f023 0304 	bic.w	r3, r3, #4
    30d0:	737b      	strb	r3, [r7, #13]
    30d2:	4630      	mov	r0, r6
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    30d4:	f105 0318 	add.w	r3, r5, #24
    30d8:	9907      	ldr	r1, [sp, #28]
	list->tail = (sys_dnode_t *)list;
    30da:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    30de:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    30e0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    30e2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    30e6:	f7fe fb53 	bl	1790 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    30ea:	bf00      	nop
    30ec:	0000a148 	.word	0x0000a148
    30f0:	e000ed00 	.word	0xe000ed00
    30f4:	000085a8 	.word	0x000085a8
    30f8:	000087d4 	.word	0x000087d4
    30fc:	00002fc1 	.word	0x00002fc1
    3100:	00007817 	.word	0x00007817
    3104:	00008948 	.word	0x00008948
    3108:	0000781c 	.word	0x0000781c
    310c:	000084f0 	.word	0x000084f0
    3110:	00008848 	.word	0x00008848
    3114:	000035f5 	.word	0x000035f5

00003118 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    311a:	4c16      	ldr	r4, [pc, #88]	; (3174 <init_mem_slab_module+0x5c>)
    311c:	4d16      	ldr	r5, [pc, #88]	; (3178 <init_mem_slab_module+0x60>)
    311e:	4e17      	ldr	r6, [pc, #92]	; (317c <init_mem_slab_module+0x64>)
    3120:	42ac      	cmp	r4, r5
    3122:	d90c      	bls.n	313e <init_mem_slab_module+0x26>
    3124:	4916      	ldr	r1, [pc, #88]	; (3180 <init_mem_slab_module+0x68>)
    3126:	233c      	movs	r3, #60	; 0x3c
    3128:	4632      	mov	r2, r6
    312a:	4816      	ldr	r0, [pc, #88]	; (3184 <init_mem_slab_module+0x6c>)
    312c:	f002 ffea 	bl	6104 <printk>
    3130:	4815      	ldr	r0, [pc, #84]	; (3188 <init_mem_slab_module+0x70>)
    3132:	f002 ffe7 	bl	6104 <printk>
    3136:	213c      	movs	r1, #60	; 0x3c
    3138:	4630      	mov	r0, r6
    313a:	f003 f8ad 	bl	6298 <assert_post_action>
    313e:	42ac      	cmp	r4, r5
    3140:	d301      	bcc.n	3146 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3142:	2000      	movs	r0, #0
	return rc;
}
    3144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3146:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    314a:	ea42 0301 	orr.w	r3, r2, r1
    314e:	f013 0303 	ands.w	r3, r3, #3
    3152:	d10b      	bne.n	316c <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    3154:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    3156:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3158:	4283      	cmp	r3, r0
    315a:	d101      	bne.n	3160 <init_mem_slab_module+0x48>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    315c:	3420      	adds	r4, #32
    315e:	e7df      	b.n	3120 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    3160:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3162:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    3164:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    3166:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    3168:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    316a:	e7f5      	b.n	3158 <init_mem_slab_module+0x40>
	return rc;
    316c:	f06f 0015 	mvn.w	r0, #21
    3170:	e7e8      	b.n	3144 <init_mem_slab_module+0x2c>
    3172:	bf00      	nop
    3174:	000084ec 	.word	0x000084ec
    3178:	000084ec 	.word	0x000084ec
    317c:	00007826 	.word	0x00007826
    3180:	0000784b 	.word	0x0000784b
    3184:	000072be 	.word	0x000072be
    3188:	00007868 	.word	0x00007868

0000318c <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    318c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    318e:	4604      	mov	r4, r0
    3190:	b908      	cbnz	r0, 3196 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    3192:	4b05      	ldr	r3, [pc, #20]	; (31a8 <z_impl_k_thread_name_set+0x1c>)
    3194:	689c      	ldr	r4, [r3, #8]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    3196:	221f      	movs	r2, #31
    3198:	f104 0078 	add.w	r0, r4, #120	; 0x78
    319c:	f003 fa1d 	bl	65da <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    31a0:	2000      	movs	r0, #0
    31a2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    31a6:	bd10      	pop	{r4, pc}
    31a8:	000087d4 	.word	0x000087d4

000031ac <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
    31ac:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <z_check_stack_sentinel+0x2c>)
    31ae:	689b      	ldr	r3, [r3, #8]
    31b0:	7b5a      	ldrb	r2, [r3, #13]
    31b2:	07d2      	lsls	r2, r2, #31
    31b4:	d40e      	bmi.n	31d4 <z_check_stack_sentinel+0x28>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
    31b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	if (*stack != STACK_SENTINEL) {
    31ba:	681a      	ldr	r2, [r3, #0]
    31bc:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
    31c0:	d008      	beq.n	31d4 <z_check_stack_sentinel+0x28>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
    31c2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
    31c6:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
    31c8:	4040      	eors	r0, r0
    31ca:	f380 8811 	msr	BASEPRI, r0
    31ce:	f04f 0002 	mov.w	r0, #2
    31d2:	df02      	svc	2
	}
}
    31d4:	4770      	bx	lr
    31d6:	bf00      	nop
    31d8:	000087d4 	.word	0x000087d4

000031dc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    31dc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    31de:	b138      	cbz	r0, 31f0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    31e0:	4b04      	ldr	r3, [pc, #16]	; (31f4 <z_spin_lock_valid+0x18>)
    31e2:	f000 0003 	and.w	r0, r0, #3
    31e6:	7d1b      	ldrb	r3, [r3, #20]
    31e8:	1ac0      	subs	r0, r0, r3
    31ea:	bf18      	it	ne
    31ec:	2001      	movne	r0, #1
    31ee:	4770      	bx	lr
			return false;
		}
	}
	return true;
    31f0:	2001      	movs	r0, #1
}
    31f2:	4770      	bx	lr
    31f4:	000087d4 	.word	0x000087d4

000031f8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    31f8:	4a05      	ldr	r2, [pc, #20]	; (3210 <z_spin_unlock_valid+0x18>)
{
    31fa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    31fc:	7d11      	ldrb	r1, [r2, #20]
    31fe:	6892      	ldr	r2, [r2, #8]
    3200:	430a      	orrs	r2, r1
    3202:	6801      	ldr	r1, [r0, #0]
    3204:	2000      	movs	r0, #0
    3206:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    3208:	bf04      	itt	eq
    320a:	6018      	streq	r0, [r3, #0]
	return true;
    320c:	2001      	moveq	r0, #1
}
    320e:	4770      	bx	lr
    3210:	000087d4 	.word	0x000087d4

00003214 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3214:	4b02      	ldr	r3, [pc, #8]	; (3220 <z_spin_lock_set_owner+0xc>)
    3216:	7d1a      	ldrb	r2, [r3, #20]
    3218:	689b      	ldr	r3, [r3, #8]
    321a:	4313      	orrs	r3, r2
    321c:	6003      	str	r3, [r0, #0]
}
    321e:	4770      	bx	lr
    3220:	000087d4 	.word	0x000087d4

00003224 <z_thread_monitor_exit>:
{
    3224:	b538      	push	{r3, r4, r5, lr}
    3226:	4604      	mov	r4, r0
	__asm__ volatile(
    3228:	f04f 0320 	mov.w	r3, #32
    322c:	f3ef 8511 	mrs	r5, BASEPRI
    3230:	f383 8811 	msr	BASEPRI, r3
    3234:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3238:	481d      	ldr	r0, [pc, #116]	; (32b0 <z_thread_monitor_exit+0x8c>)
    323a:	f7ff ffcf 	bl	31dc <z_spin_lock_valid>
    323e:	b968      	cbnz	r0, 325c <z_thread_monitor_exit+0x38>
    3240:	2381      	movs	r3, #129	; 0x81
    3242:	4a1c      	ldr	r2, [pc, #112]	; (32b4 <z_thread_monitor_exit+0x90>)
    3244:	491c      	ldr	r1, [pc, #112]	; (32b8 <z_thread_monitor_exit+0x94>)
    3246:	481d      	ldr	r0, [pc, #116]	; (32bc <z_thread_monitor_exit+0x98>)
    3248:	f002 ff5c 	bl	6104 <printk>
    324c:	4918      	ldr	r1, [pc, #96]	; (32b0 <z_thread_monitor_exit+0x8c>)
    324e:	481c      	ldr	r0, [pc, #112]	; (32c0 <z_thread_monitor_exit+0x9c>)
    3250:	f002 ff58 	bl	6104 <printk>
    3254:	2181      	movs	r1, #129	; 0x81
    3256:	4817      	ldr	r0, [pc, #92]	; (32b4 <z_thread_monitor_exit+0x90>)
    3258:	f003 f81e 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    325c:	4814      	ldr	r0, [pc, #80]	; (32b0 <z_thread_monitor_exit+0x8c>)
    325e:	f7ff ffd9 	bl	3214 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    3262:	4a18      	ldr	r2, [pc, #96]	; (32c4 <z_thread_monitor_exit+0xa0>)
    3264:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3266:	42a3      	cmp	r3, r4
    3268:	d119      	bne.n	329e <z_thread_monitor_exit+0x7a>
		_kernel.threads = _kernel.threads->next_thread;
    326a:	6f63      	ldr	r3, [r4, #116]	; 0x74
    326c:	62d3      	str	r3, [r2, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    326e:	4810      	ldr	r0, [pc, #64]	; (32b0 <z_thread_monitor_exit+0x8c>)
    3270:	f7ff ffc2 	bl	31f8 <z_spin_unlock_valid>
    3274:	b968      	cbnz	r0, 3292 <z_thread_monitor_exit+0x6e>
    3276:	23ac      	movs	r3, #172	; 0xac
    3278:	4a0e      	ldr	r2, [pc, #56]	; (32b4 <z_thread_monitor_exit+0x90>)
    327a:	4913      	ldr	r1, [pc, #76]	; (32c8 <z_thread_monitor_exit+0xa4>)
    327c:	480f      	ldr	r0, [pc, #60]	; (32bc <z_thread_monitor_exit+0x98>)
    327e:	f002 ff41 	bl	6104 <printk>
    3282:	490b      	ldr	r1, [pc, #44]	; (32b0 <z_thread_monitor_exit+0x8c>)
    3284:	4811      	ldr	r0, [pc, #68]	; (32cc <z_thread_monitor_exit+0xa8>)
    3286:	f002 ff3d 	bl	6104 <printk>
    328a:	21ac      	movs	r1, #172	; 0xac
    328c:	4809      	ldr	r0, [pc, #36]	; (32b4 <z_thread_monitor_exit+0x90>)
    328e:	f003 f803 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3292:	f385 8811 	msr	BASEPRI, r5
    3296:	f3bf 8f6f 	isb	sy
}
    329a:	bd38      	pop	{r3, r4, r5, pc}
    329c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    329e:	2b00      	cmp	r3, #0
    32a0:	d0e5      	beq.n	326e <z_thread_monitor_exit+0x4a>
			(thread != prev_thread->next_thread)) {
    32a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    32a4:	42a2      	cmp	r2, r4
    32a6:	d1f9      	bne.n	329c <z_thread_monitor_exit+0x78>
			prev_thread->next_thread = thread->next_thread;
    32a8:	6f62      	ldr	r2, [r4, #116]	; 0x74
    32aa:	675a      	str	r2, [r3, #116]	; 0x74
    32ac:	e7df      	b.n	326e <z_thread_monitor_exit+0x4a>
    32ae:	bf00      	nop
    32b0:	00008804 	.word	0x00008804
    32b4:	00007430 	.word	0x00007430
    32b8:	00007456 	.word	0x00007456
    32bc:	000072be 	.word	0x000072be
    32c0:	0000746b 	.word	0x0000746b
    32c4:	000087d4 	.word	0x000087d4
    32c8:	00007483 	.word	0x00007483
    32cc:	0000749a 	.word	0x0000749a

000032d0 <z_setup_new_thread>:
{
    32d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32d4:	b085      	sub	sp, #20
    32d6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    32da:	4604      	mov	r4, r0
	Z_ASSERT_VALID_PRIO(prio, entry);
    32dc:	f1b9 0f38 	cmp.w	r9, #56	; 0x38
{
    32e0:	460e      	mov	r6, r1
    32e2:	4615      	mov	r5, r2
    32e4:	4698      	mov	r8, r3
    32e6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    32ea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	Z_ASSERT_VALID_PRIO(prio, entry);
    32ee:	f040 8082 	bne.w	33f6 <z_setup_new_thread+0x126>
    32f2:	4b4f      	ldr	r3, [pc, #316]	; (3430 <z_setup_new_thread+0x160>)
    32f4:	4598      	cmp	r8, r3
    32f6:	f040 8083 	bne.w	3400 <z_setup_new_thread+0x130>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    32fa:	f104 0358 	add.w	r3, r4, #88	; 0x58
    32fe:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
    3302:	9b12      	ldr	r3, [sp, #72]	; 0x48
	thread_base->pended_on = NULL;
    3304:	2700      	movs	r7, #0
	thread_base->user_options = (uint8_t)options;
    3306:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3308:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    330a:	3507      	adds	r5, #7
    330c:	f025 0507 	bic.w	r5, r5, #7
__ssp_bos_icheck3(memset, void *, int)
    3310:	462a      	mov	r2, r5
	thread_base->thread_state = (uint8_t)initial_state;
    3312:	7363      	strb	r3, [r4, #13]
	thread_base->prio = priority;
    3314:	f884 900e 	strb.w	r9, [r4, #14]
    3318:	21aa      	movs	r1, #170	; 0xaa
    331a:	4630      	mov	r0, r6
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    331c:	e9c4 7706 	strd	r7, r7, [r4, #24]
	thread_base->pended_on = NULL;
    3320:	60a7      	str	r7, [r4, #8]
	thread_base->sched_locked = 0U;
    3322:	73e7      	strb	r7, [r4, #15]
    3324:	f003 f8b8 	bl	6498 <memset>
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
    3328:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
    332c:	6033      	str	r3, [r6, #0]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    332e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.size = stack_buf_size;
    3330:	e9c4 6527 	strd	r6, r5, [r4, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    3334:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3338:	9302      	str	r3, [sp, #8]
    333a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	stack_ptr = (char *)stack + stack_obj_size;
    333c:	eb06 0905 	add.w	r9, r6, r5
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3340:	e9cd b300 	strd	fp, r3, [sp]
    3344:	464a      	mov	r2, r9
    3346:	4643      	mov	r3, r8
    3348:	4631      	mov	r1, r6
    334a:	4620      	mov	r0, r4
    334c:	f7fe fa04 	bl	1758 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    3350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->entry.parameter1 = p1;
    3352:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3356:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    3358:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    335a:	6567      	str	r7, [r4, #84]	; 0x54
	new_thread->entry.parameter3 = p3;
    335c:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    335e:	f04f 0320 	mov.w	r3, #32
    3362:	f3ef 8611 	mrs	r6, BASEPRI
    3366:	f383 8811 	msr	BASEPRI, r3
    336a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    336e:	4831      	ldr	r0, [pc, #196]	; (3434 <z_setup_new_thread+0x164>)
    3370:	f7ff ff34 	bl	31dc <z_spin_lock_valid>
    3374:	b968      	cbnz	r0, 3392 <z_setup_new_thread+0xc2>
    3376:	2381      	movs	r3, #129	; 0x81
    3378:	4a2f      	ldr	r2, [pc, #188]	; (3438 <z_setup_new_thread+0x168>)
    337a:	4930      	ldr	r1, [pc, #192]	; (343c <z_setup_new_thread+0x16c>)
    337c:	4830      	ldr	r0, [pc, #192]	; (3440 <z_setup_new_thread+0x170>)
    337e:	f002 fec1 	bl	6104 <printk>
    3382:	492c      	ldr	r1, [pc, #176]	; (3434 <z_setup_new_thread+0x164>)
    3384:	482f      	ldr	r0, [pc, #188]	; (3444 <z_setup_new_thread+0x174>)
    3386:	f002 febd 	bl	6104 <printk>
    338a:	2181      	movs	r1, #129	; 0x81
    338c:	482a      	ldr	r0, [pc, #168]	; (3438 <z_setup_new_thread+0x168>)
    338e:	f002 ff83 	bl	6298 <assert_post_action>
	new_thread->next_thread = _kernel.threads;
    3392:	4d2d      	ldr	r5, [pc, #180]	; (3448 <z_setup_new_thread+0x178>)
	z_spin_lock_set_owner(l);
    3394:	4827      	ldr	r0, [pc, #156]	; (3434 <z_setup_new_thread+0x164>)
    3396:	f7ff ff3d 	bl	3214 <z_spin_lock_set_owner>
    339a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	_kernel.threads = new_thread;
    339c:	62ec      	str	r4, [r5, #44]	; 0x2c
	new_thread->next_thread = _kernel.threads;
    339e:	6763      	str	r3, [r4, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    33a0:	f7ff ff2a 	bl	31f8 <z_spin_unlock_valid>
    33a4:	b968      	cbnz	r0, 33c2 <z_setup_new_thread+0xf2>
    33a6:	23ac      	movs	r3, #172	; 0xac
    33a8:	4a23      	ldr	r2, [pc, #140]	; (3438 <z_setup_new_thread+0x168>)
    33aa:	4928      	ldr	r1, [pc, #160]	; (344c <z_setup_new_thread+0x17c>)
    33ac:	4824      	ldr	r0, [pc, #144]	; (3440 <z_setup_new_thread+0x170>)
    33ae:	f002 fea9 	bl	6104 <printk>
    33b2:	4920      	ldr	r1, [pc, #128]	; (3434 <z_setup_new_thread+0x164>)
    33b4:	4826      	ldr	r0, [pc, #152]	; (3450 <z_setup_new_thread+0x180>)
    33b6:	f002 fea5 	bl	6104 <printk>
    33ba:	21ac      	movs	r1, #172	; 0xac
    33bc:	481e      	ldr	r0, [pc, #120]	; (3438 <z_setup_new_thread+0x168>)
    33be:	f002 ff6b 	bl	6298 <assert_post_action>
	__asm__ volatile(
    33c2:	f386 8811 	msr	BASEPRI, r6
    33c6:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    33ca:	f1ba 0f00 	cmp.w	sl, #0
    33ce:	d02b      	beq.n	3428 <z_setup_new_thread+0x158>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    33d0:	221f      	movs	r2, #31
    33d2:	4651      	mov	r1, sl
    33d4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    33d8:	f003 f8ff 	bl	65da <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    33dc:	2300      	movs	r3, #0
    33de:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
    33e2:	68ab      	ldr	r3, [r5, #8]
    33e4:	b10b      	cbz	r3, 33ea <z_setup_new_thread+0x11a>
	new_thread->resource_pool = _current->resource_pool;
    33e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
    33ea:	4648      	mov	r0, r9
    33ec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    33f0:	b005      	add	sp, #20
    33f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    33f6:	f109 0310 	add.w	r3, r9, #16
    33fa:	2b47      	cmp	r3, #71	; 0x47
    33fc:	f67f af7d 	bls.w	32fa <z_setup_new_thread+0x2a>
    3400:	f44f 7302 	mov.w	r3, #520	; 0x208
    3404:	4a13      	ldr	r2, [pc, #76]	; (3454 <z_setup_new_thread+0x184>)
    3406:	4914      	ldr	r1, [pc, #80]	; (3458 <z_setup_new_thread+0x188>)
    3408:	480d      	ldr	r0, [pc, #52]	; (3440 <z_setup_new_thread+0x170>)
    340a:	f002 fe7b 	bl	6104 <printk>
    340e:	4649      	mov	r1, r9
    3410:	f06f 030f 	mvn.w	r3, #15
    3414:	2237      	movs	r2, #55	; 0x37
    3416:	4811      	ldr	r0, [pc, #68]	; (345c <z_setup_new_thread+0x18c>)
    3418:	f002 fe74 	bl	6104 <printk>
    341c:	f44f 7102 	mov.w	r1, #520	; 0x208
    3420:	480c      	ldr	r0, [pc, #48]	; (3454 <z_setup_new_thread+0x184>)
    3422:	f002 ff39 	bl	6298 <assert_post_action>
    3426:	e768      	b.n	32fa <z_setup_new_thread+0x2a>
		new_thread->name[0] = '\0';
    3428:	f884 a078 	strb.w	sl, [r4, #120]	; 0x78
    342c:	e7d9      	b.n	33e2 <z_setup_new_thread+0x112>
    342e:	bf00      	nop
    3430:	000035f5 	.word	0x000035f5
    3434:	00008804 	.word	0x00008804
    3438:	00007430 	.word	0x00007430
    343c:	00007456 	.word	0x00007456
    3440:	000072be 	.word	0x000072be
    3444:	0000746b 	.word	0x0000746b
    3448:	000087d4 	.word	0x000087d4
    344c:	00007483 	.word	0x00007483
    3450:	0000749a 	.word	0x0000749a
    3454:	00007887 	.word	0x00007887
    3458:	000078db 	.word	0x000078db
    345c:	0000795b 	.word	0x0000795b

00003460 <z_impl_k_thread_create>:
{
    3460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3464:	b087      	sub	sp, #28
    3466:	4604      	mov	r4, r0
    3468:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    346c:	460f      	mov	r7, r1
    346e:	4690      	mov	r8, r2
    3470:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3472:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    3476:	b173      	cbz	r3, 3496 <z_impl_k_thread_create+0x36>
    3478:	491c      	ldr	r1, [pc, #112]	; (34ec <z_impl_k_thread_create+0x8c>)
    347a:	f240 2371 	movw	r3, #625	; 0x271
    347e:	4a1c      	ldr	r2, [pc, #112]	; (34f0 <z_impl_k_thread_create+0x90>)
    3480:	481c      	ldr	r0, [pc, #112]	; (34f4 <z_impl_k_thread_create+0x94>)
    3482:	f002 fe3f 	bl	6104 <printk>
    3486:	481c      	ldr	r0, [pc, #112]	; (34f8 <z_impl_k_thread_create+0x98>)
    3488:	f002 fe3c 	bl	6104 <printk>
    348c:	f240 2171 	movw	r1, #625	; 0x271
    3490:	4817      	ldr	r0, [pc, #92]	; (34f0 <z_impl_k_thread_create+0x90>)
    3492:	f002 ff01 	bl	6298 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3496:	2300      	movs	r3, #0
    3498:	9305      	str	r3, [sp, #20]
    349a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    349c:	4642      	mov	r2, r8
    349e:	9304      	str	r3, [sp, #16]
    34a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    34a2:	4639      	mov	r1, r7
    34a4:	9303      	str	r3, [sp, #12]
    34a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34a8:	4620      	mov	r0, r4
    34aa:	9302      	str	r3, [sp, #8]
    34ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    34ae:	9301      	str	r3, [sp, #4]
    34b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    34b2:	9300      	str	r3, [sp, #0]
    34b4:	464b      	mov	r3, r9
    34b6:	f7ff ff0b 	bl	32d0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    34ba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    34be:	bf08      	it	eq
    34c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    34c4:	d005      	beq.n	34d2 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    34c6:	ea55 0306 	orrs.w	r3, r5, r6
    34ca:	d106      	bne.n	34da <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    34cc:	4620      	mov	r0, r4
    34ce:	f000 fc3d 	bl	3d4c <z_sched_start>
}
    34d2:	4620      	mov	r0, r4
    34d4:	b007      	add	sp, #28
    34d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    34da:	4632      	mov	r2, r6
    34dc:	462b      	mov	r3, r5
    34de:	4907      	ldr	r1, [pc, #28]	; (34fc <z_impl_k_thread_create+0x9c>)
    34e0:	f104 0018 	add.w	r0, r4, #24
    34e4:	f001 fb38 	bl	4b58 <z_add_timeout>
    34e8:	e7f3      	b.n	34d2 <z_impl_k_thread_create+0x72>
    34ea:	bf00      	nop
    34ec:	0000798c 	.word	0x0000798c
    34f0:	00007887 	.word	0x00007887
    34f4:	000072be 	.word	0x000072be
    34f8:	0000799e 	.word	0x0000799e
    34fc:	00004591 	.word	0x00004591

00003500 <z_init_static_threads>:
{
    3500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3504:	4c34      	ldr	r4, [pc, #208]	; (35d8 <z_init_static_threads+0xd8>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3506:	4d35      	ldr	r5, [pc, #212]	; (35dc <z_init_static_threads+0xdc>)
    3508:	4f35      	ldr	r7, [pc, #212]	; (35e0 <z_init_static_threads+0xe0>)
{
    350a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    350c:	42ac      	cmp	r4, r5
    350e:	4626      	mov	r6, r4
    3510:	d90e      	bls.n	3530 <z_init_static_threads+0x30>
    3512:	4934      	ldr	r1, [pc, #208]	; (35e4 <z_init_static_threads+0xe4>)
    3514:	f44f 7336 	mov.w	r3, #728	; 0x2d8
    3518:	463a      	mov	r2, r7
    351a:	4833      	ldr	r0, [pc, #204]	; (35e8 <z_init_static_threads+0xe8>)
    351c:	f002 fdf2 	bl	6104 <printk>
    3520:	4832      	ldr	r0, [pc, #200]	; (35ec <z_init_static_threads+0xec>)
    3522:	f002 fdef 	bl	6104 <printk>
    3526:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    352a:	4638      	mov	r0, r7
    352c:	f002 feb4 	bl	6298 <assert_post_action>
    3530:	42ae      	cmp	r6, r5
    3532:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3536:	d31e      	bcc.n	3576 <z_init_static_threads+0x76>
	k_sched_lock();
    3538:	f000 fc5c 	bl	3df4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    353c:	4c26      	ldr	r4, [pc, #152]	; (35d8 <z_init_static_threads+0xd8>)
    353e:	4e28      	ldr	r6, [pc, #160]	; (35e0 <z_init_static_threads+0xe0>)
    3540:	4f28      	ldr	r7, [pc, #160]	; (35e4 <z_init_static_threads+0xe4>)
    3542:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 35e8 <z_init_static_threads+0xe8>
    3546:	42ac      	cmp	r4, r5
    3548:	d90e      	bls.n	3568 <z_init_static_threads+0x68>
    354a:	4639      	mov	r1, r7
    354c:	f240 23f7 	movw	r3, #759	; 0x2f7
    3550:	4632      	mov	r2, r6
    3552:	4640      	mov	r0, r8
    3554:	f002 fdd6 	bl	6104 <printk>
    3558:	4824      	ldr	r0, [pc, #144]	; (35ec <z_init_static_threads+0xec>)
    355a:	f002 fdd3 	bl	6104 <printk>
    355e:	f240 21f7 	movw	r1, #759	; 0x2f7
    3562:	4630      	mov	r0, r6
    3564:	f002 fe98 	bl	6298 <assert_post_action>
    3568:	42ac      	cmp	r4, r5
    356a:	d320      	bcc.n	35ae <z_init_static_threads+0xae>
}
    356c:	b006      	add	sp, #24
    356e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_sched_unlock();
    3572:	f000 bcb3 	b.w	3edc <k_sched_unlock>
		z_setup_new_thread(
    3576:	f854 3c04 	ldr.w	r3, [r4, #-4]
    357a:	9305      	str	r3, [sp, #20]
    357c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3580:	9304      	str	r3, [sp, #16]
    3582:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3586:	9303      	str	r3, [sp, #12]
    3588:	f854 3c18 	ldr.w	r3, [r4, #-24]
    358c:	9302      	str	r3, [sp, #8]
    358e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3592:	9301      	str	r3, [sp, #4]
    3594:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3598:	9300      	str	r3, [sp, #0]
    359a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    359e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    35a2:	f7ff fe95 	bl	32d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    35a6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    35aa:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    35ac:	e7ae      	b.n	350c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    35ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    35b0:	1c53      	adds	r3, r2, #1
    35b2:	d00a      	beq.n	35ca <z_init_static_threads+0xca>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
    35b4:	230a      	movs	r3, #10
					    K_MSEC(thread_data->init_delay));
    35b6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    35ba:	fb82 2303 	smull	r2, r3, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35be:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
    35c2:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35c4:	d103      	bne.n	35ce <z_init_static_threads+0xce>
	z_sched_start(thread);
    35c6:	f000 fbc1 	bl	3d4c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    35ca:	3430      	adds	r4, #48	; 0x30
    35cc:	e7bb      	b.n	3546 <z_init_static_threads+0x46>
    35ce:	4908      	ldr	r1, [pc, #32]	; (35f0 <z_init_static_threads+0xf0>)
    35d0:	3018      	adds	r0, #24
    35d2:	f001 fac1 	bl	4b58 <z_add_timeout>
    35d6:	e7f8      	b.n	35ca <z_init_static_threads+0xca>
    35d8:	000084ec 	.word	0x000084ec
    35dc:	000084ec 	.word	0x000084ec
    35e0:	00007887 	.word	0x00007887
    35e4:	000079c3 	.word	0x000079c3
    35e8:	000072be 	.word	0x000072be
    35ec:	00007868 	.word	0x00007868
    35f0:	00004591 	.word	0x00004591

000035f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    35f4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    35f6:	4b0d      	ldr	r3, [pc, #52]	; (362c <idle+0x38>)
    35f8:	689b      	ldr	r3, [r3, #8]
    35fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    35fe:	2b00      	cmp	r3, #0
    3600:	da09      	bge.n	3616 <idle+0x22>
    3602:	490b      	ldr	r1, [pc, #44]	; (3630 <idle+0x3c>)
    3604:	480b      	ldr	r0, [pc, #44]	; (3634 <idle+0x40>)
    3606:	2346      	movs	r3, #70	; 0x46
    3608:	4a0b      	ldr	r2, [pc, #44]	; (3638 <idle+0x44>)
    360a:	f002 fd7b 	bl	6104 <printk>
    360e:	2146      	movs	r1, #70	; 0x46
    3610:	4809      	ldr	r0, [pc, #36]	; (3638 <idle+0x44>)
    3612:	f002 fe41 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3616:	f04f 0220 	mov.w	r2, #32
    361a:	f3ef 8311 	mrs	r3, BASEPRI
    361e:	f382 8811 	msr	BASEPRI, r2
    3622:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3626:	f7fe f8cb 	bl	17c0 <arch_cpu_idle>
    362a:	e7f4      	b.n	3616 <idle+0x22>
    362c:	000087d4 	.word	0x000087d4
    3630:	00007a11 	.word	0x00007a11
    3634:	000072be 	.word	0x000072be
    3638:	000079f0 	.word	0x000079f0

0000363c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    363c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3640:	4604      	mov	r4, r0
    3642:	4617      	mov	r7, r2
    3644:	461e      	mov	r6, r3
    3646:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    364a:	b163      	cbz	r3, 3666 <z_impl_k_mutex_lock+0x2a>
    364c:	496d      	ldr	r1, [pc, #436]	; (3804 <z_impl_k_mutex_lock+0x1c8>)
    364e:	2365      	movs	r3, #101	; 0x65
    3650:	4a6d      	ldr	r2, [pc, #436]	; (3808 <z_impl_k_mutex_lock+0x1cc>)
    3652:	486e      	ldr	r0, [pc, #440]	; (380c <z_impl_k_mutex_lock+0x1d0>)
    3654:	f002 fd56 	bl	6104 <printk>
    3658:	486d      	ldr	r0, [pc, #436]	; (3810 <z_impl_k_mutex_lock+0x1d4>)
    365a:	f002 fd53 	bl	6104 <printk>
    365e:	2165      	movs	r1, #101	; 0x65
    3660:	4869      	ldr	r0, [pc, #420]	; (3808 <z_impl_k_mutex_lock+0x1cc>)
    3662:	f002 fe19 	bl	6298 <assert_post_action>
    3666:	f04f 0320 	mov.w	r3, #32
    366a:	f3ef 8811 	mrs	r8, BASEPRI
    366e:	f383 8811 	msr	BASEPRI, r3
    3672:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3676:	4867      	ldr	r0, [pc, #412]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    3678:	f7ff fdb0 	bl	31dc <z_spin_lock_valid>
    367c:	b968      	cbnz	r0, 369a <z_impl_k_mutex_lock+0x5e>
    367e:	2381      	movs	r3, #129	; 0x81
    3680:	4a65      	ldr	r2, [pc, #404]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    3682:	4966      	ldr	r1, [pc, #408]	; (381c <z_impl_k_mutex_lock+0x1e0>)
    3684:	4861      	ldr	r0, [pc, #388]	; (380c <z_impl_k_mutex_lock+0x1d0>)
    3686:	f002 fd3d 	bl	6104 <printk>
    368a:	4962      	ldr	r1, [pc, #392]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    368c:	4864      	ldr	r0, [pc, #400]	; (3820 <z_impl_k_mutex_lock+0x1e4>)
    368e:	f002 fd39 	bl	6104 <printk>
    3692:	2181      	movs	r1, #129	; 0x81
    3694:	4860      	ldr	r0, [pc, #384]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    3696:	f002 fdff 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    369a:	485e      	ldr	r0, [pc, #376]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    369c:	f7ff fdba 	bl	3214 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    36a0:	68e3      	ldr	r3, [r4, #12]
    36a2:	4a60      	ldr	r2, [pc, #384]	; (3824 <z_impl_k_mutex_lock+0x1e8>)
    36a4:	b30b      	cbz	r3, 36ea <z_impl_k_mutex_lock+0xae>
    36a6:	68a0      	ldr	r0, [r4, #8]
    36a8:	6891      	ldr	r1, [r2, #8]
    36aa:	4288      	cmp	r0, r1
    36ac:	d03d      	beq.n	372a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    36ae:	ea57 0306 	orrs.w	r3, r7, r6
    36b2:	d13c      	bne.n	372e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    36b4:	4857      	ldr	r0, [pc, #348]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    36b6:	f7ff fd9f 	bl	31f8 <z_spin_unlock_valid>
    36ba:	b968      	cbnz	r0, 36d8 <z_impl_k_mutex_lock+0x9c>
    36bc:	23ac      	movs	r3, #172	; 0xac
    36be:	4a56      	ldr	r2, [pc, #344]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    36c0:	4959      	ldr	r1, [pc, #356]	; (3828 <z_impl_k_mutex_lock+0x1ec>)
    36c2:	4852      	ldr	r0, [pc, #328]	; (380c <z_impl_k_mutex_lock+0x1d0>)
    36c4:	f002 fd1e 	bl	6104 <printk>
    36c8:	4952      	ldr	r1, [pc, #328]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    36ca:	4858      	ldr	r0, [pc, #352]	; (382c <z_impl_k_mutex_lock+0x1f0>)
    36cc:	f002 fd1a 	bl	6104 <printk>
    36d0:	21ac      	movs	r1, #172	; 0xac
    36d2:	4851      	ldr	r0, [pc, #324]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    36d4:	f002 fde0 	bl	6298 <assert_post_action>
	__asm__ volatile(
    36d8:	f388 8811 	msr	BASEPRI, r8
    36dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    36e0:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    36e4:	b002      	add	sp, #8
    36e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    36ea:	6891      	ldr	r1, [r2, #8]
    36ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    36f0:	3301      	adds	r3, #1
    36f2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    36f4:	6893      	ldr	r3, [r2, #8]
    36f6:	4847      	ldr	r0, [pc, #284]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    36f8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    36fa:	60a3      	str	r3, [r4, #8]
    36fc:	f7ff fd7c 	bl	31f8 <z_spin_unlock_valid>
    3700:	b968      	cbnz	r0, 371e <z_impl_k_mutex_lock+0xe2>
    3702:	23ac      	movs	r3, #172	; 0xac
    3704:	4a44      	ldr	r2, [pc, #272]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    3706:	4948      	ldr	r1, [pc, #288]	; (3828 <z_impl_k_mutex_lock+0x1ec>)
    3708:	4840      	ldr	r0, [pc, #256]	; (380c <z_impl_k_mutex_lock+0x1d0>)
    370a:	f002 fcfb 	bl	6104 <printk>
    370e:	4941      	ldr	r1, [pc, #260]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    3710:	4846      	ldr	r0, [pc, #280]	; (382c <z_impl_k_mutex_lock+0x1f0>)
    3712:	f002 fcf7 	bl	6104 <printk>
    3716:	21ac      	movs	r1, #172	; 0xac
    3718:	483f      	ldr	r0, [pc, #252]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    371a:	f002 fdbd 	bl	6298 <assert_post_action>
    371e:	f388 8811 	msr	BASEPRI, r8
    3722:	f3bf 8f6f 	isb	sy
		return 0;
    3726:	2000      	movs	r0, #0
    3728:	e7dc      	b.n	36e4 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    372a:	6921      	ldr	r1, [r4, #16]
    372c:	e7e0      	b.n	36f0 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    372e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3732:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3736:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    373a:	4299      	cmp	r1, r3
    373c:	bfa8      	it	ge
    373e:	4619      	movge	r1, r3
    3740:	4291      	cmp	r1, r2
    3742:	bfb8      	it	lt
    3744:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3746:	428b      	cmp	r3, r1
    3748:	dd53      	ble.n	37f2 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    374a:	f002 fe56 	bl	63fa <adjust_owner_prio.isra.0>
    374e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3750:	4622      	mov	r2, r4
    3752:	4641      	mov	r1, r8
    3754:	e9cd 7600 	strd	r7, r6, [sp]
    3758:	482e      	ldr	r0, [pc, #184]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    375a:	f000 fd17 	bl	418c <z_pend_curr>
	if (got_mutex == 0) {
    375e:	2800      	cmp	r0, #0
    3760:	d0e1      	beq.n	3726 <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    3762:	f04f 0320 	mov.w	r3, #32
    3766:	f3ef 8611 	mrs	r6, BASEPRI
    376a:	f383 8811 	msr	BASEPRI, r3
    376e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3772:	4828      	ldr	r0, [pc, #160]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    3774:	f7ff fd32 	bl	31dc <z_spin_lock_valid>
    3778:	b968      	cbnz	r0, 3796 <z_impl_k_mutex_lock+0x15a>
    377a:	2381      	movs	r3, #129	; 0x81
    377c:	4a26      	ldr	r2, [pc, #152]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    377e:	4927      	ldr	r1, [pc, #156]	; (381c <z_impl_k_mutex_lock+0x1e0>)
    3780:	4822      	ldr	r0, [pc, #136]	; (380c <z_impl_k_mutex_lock+0x1d0>)
    3782:	f002 fcbf 	bl	6104 <printk>
    3786:	4923      	ldr	r1, [pc, #140]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    3788:	4825      	ldr	r0, [pc, #148]	; (3820 <z_impl_k_mutex_lock+0x1e4>)
    378a:	f002 fcbb 	bl	6104 <printk>
    378e:	2181      	movs	r1, #129	; 0x81
    3790:	4821      	ldr	r0, [pc, #132]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    3792:	f002 fd81 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    3796:	481f      	ldr	r0, [pc, #124]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    3798:	f7ff fd3c 	bl	3214 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    379c:	6823      	ldr	r3, [r4, #0]
    379e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37a0:	429c      	cmp	r4, r3
    37a2:	d00a      	beq.n	37ba <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    37a4:	b14b      	cbz	r3, 37ba <z_impl_k_mutex_lock+0x17e>
    37a6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    37aa:	4299      	cmp	r1, r3
    37ac:	bfa8      	it	ge
    37ae:	4619      	movge	r1, r3
    37b0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    37b4:	4299      	cmp	r1, r3
    37b6:	bfb8      	it	lt
    37b8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    37ba:	68a0      	ldr	r0, [r4, #8]
    37bc:	f002 fe1d 	bl	63fa <adjust_owner_prio.isra.0>
    37c0:	b9c8      	cbnz	r0, 37f6 <z_impl_k_mutex_lock+0x1ba>
    37c2:	b9c5      	cbnz	r5, 37f6 <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    37c4:	4813      	ldr	r0, [pc, #76]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    37c6:	f7ff fd17 	bl	31f8 <z_spin_unlock_valid>
    37ca:	b968      	cbnz	r0, 37e8 <z_impl_k_mutex_lock+0x1ac>
    37cc:	23ac      	movs	r3, #172	; 0xac
    37ce:	4a12      	ldr	r2, [pc, #72]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    37d0:	4915      	ldr	r1, [pc, #84]	; (3828 <z_impl_k_mutex_lock+0x1ec>)
    37d2:	480e      	ldr	r0, [pc, #56]	; (380c <z_impl_k_mutex_lock+0x1d0>)
    37d4:	f002 fc96 	bl	6104 <printk>
    37d8:	490e      	ldr	r1, [pc, #56]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    37da:	4814      	ldr	r0, [pc, #80]	; (382c <z_impl_k_mutex_lock+0x1f0>)
    37dc:	f002 fc92 	bl	6104 <printk>
    37e0:	21ac      	movs	r1, #172	; 0xac
    37e2:	480d      	ldr	r0, [pc, #52]	; (3818 <z_impl_k_mutex_lock+0x1dc>)
    37e4:	f002 fd58 	bl	6298 <assert_post_action>
	__asm__ volatile(
    37e8:	f386 8811 	msr	BASEPRI, r6
    37ec:	f3bf 8f6f 	isb	sy
    37f0:	e005      	b.n	37fe <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    37f2:	2500      	movs	r5, #0
    37f4:	e7ac      	b.n	3750 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    37f6:	4631      	mov	r1, r6
    37f8:	4806      	ldr	r0, [pc, #24]	; (3814 <z_impl_k_mutex_lock+0x1d8>)
    37fa:	f000 fa63 	bl	3cc4 <z_reschedule>
	return -EAGAIN;
    37fe:	f06f 000a 	mvn.w	r0, #10
    3802:	e76f      	b.n	36e4 <z_impl_k_mutex_lock+0xa8>
    3804:	0000798c 	.word	0x0000798c
    3808:	00007a39 	.word	0x00007a39
    380c:	000072be 	.word	0x000072be
    3810:	00007a5b 	.word	0x00007a5b
    3814:	00008808 	.word	0x00008808
    3818:	00007430 	.word	0x00007430
    381c:	00007456 	.word	0x00007456
    3820:	0000746b 	.word	0x0000746b
    3824:	000087d4 	.word	0x000087d4
    3828:	00007483 	.word	0x00007483
    382c:	0000749a 	.word	0x0000749a

00003830 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3830:	b538      	push	{r3, r4, r5, lr}
    3832:	4604      	mov	r4, r0
    3834:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3838:	b163      	cbz	r3, 3854 <z_impl_k_mutex_unlock+0x24>
    383a:	4950      	ldr	r1, [pc, #320]	; (397c <z_impl_k_mutex_unlock+0x14c>)
    383c:	23c7      	movs	r3, #199	; 0xc7
    383e:	4a50      	ldr	r2, [pc, #320]	; (3980 <z_impl_k_mutex_unlock+0x150>)
    3840:	4850      	ldr	r0, [pc, #320]	; (3984 <z_impl_k_mutex_unlock+0x154>)
    3842:	f002 fc5f 	bl	6104 <printk>
    3846:	4850      	ldr	r0, [pc, #320]	; (3988 <z_impl_k_mutex_unlock+0x158>)
    3848:	f002 fc5c 	bl	6104 <printk>
    384c:	21c7      	movs	r1, #199	; 0xc7
    384e:	484c      	ldr	r0, [pc, #304]	; (3980 <z_impl_k_mutex_unlock+0x150>)
    3850:	f002 fd22 	bl	6298 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3854:	68a3      	ldr	r3, [r4, #8]
    3856:	2b00      	cmp	r3, #0
    3858:	f000 808a 	beq.w	3970 <z_impl_k_mutex_unlock+0x140>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    385c:	4d4b      	ldr	r5, [pc, #300]	; (398c <z_impl_k_mutex_unlock+0x15c>)
    385e:	68aa      	ldr	r2, [r5, #8]
    3860:	4293      	cmp	r3, r2
    3862:	f040 8088 	bne.w	3976 <z_impl_k_mutex_unlock+0x146>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    3866:	68e3      	ldr	r3, [r4, #12]
    3868:	b94b      	cbnz	r3, 387e <z_impl_k_mutex_unlock+0x4e>
    386a:	4949      	ldr	r1, [pc, #292]	; (3990 <z_impl_k_mutex_unlock+0x160>)
    386c:	4845      	ldr	r0, [pc, #276]	; (3984 <z_impl_k_mutex_unlock+0x154>)
    386e:	23df      	movs	r3, #223	; 0xdf
    3870:	4a43      	ldr	r2, [pc, #268]	; (3980 <z_impl_k_mutex_unlock+0x150>)
    3872:	f002 fc47 	bl	6104 <printk>
    3876:	21df      	movs	r1, #223	; 0xdf
    3878:	4841      	ldr	r0, [pc, #260]	; (3980 <z_impl_k_mutex_unlock+0x150>)
    387a:	f002 fd0d 	bl	6298 <assert_post_action>
    387e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    3882:	b163      	cbz	r3, 389e <z_impl_k_mutex_unlock+0x6e>
    3884:	493d      	ldr	r1, [pc, #244]	; (397c <z_impl_k_mutex_unlock+0x14c>)
    3886:	23fd      	movs	r3, #253	; 0xfd
    3888:	4a42      	ldr	r2, [pc, #264]	; (3994 <z_impl_k_mutex_unlock+0x164>)
    388a:	483e      	ldr	r0, [pc, #248]	; (3984 <z_impl_k_mutex_unlock+0x154>)
    388c:	f002 fc3a 	bl	6104 <printk>
    3890:	4841      	ldr	r0, [pc, #260]	; (3998 <z_impl_k_mutex_unlock+0x168>)
    3892:	f002 fc37 	bl	6104 <printk>
    3896:	21fd      	movs	r1, #253	; 0xfd
    3898:	483e      	ldr	r0, [pc, #248]	; (3994 <z_impl_k_mutex_unlock+0x164>)
    389a:	f002 fcfd 	bl	6298 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    389e:	68ab      	ldr	r3, [r5, #8]
    38a0:	7bdb      	ldrb	r3, [r3, #15]
    38a2:	2b01      	cmp	r3, #1
    38a4:	d10c      	bne.n	38c0 <z_impl_k_mutex_unlock+0x90>
    38a6:	493d      	ldr	r1, [pc, #244]	; (399c <z_impl_k_mutex_unlock+0x16c>)
    38a8:	23fe      	movs	r3, #254	; 0xfe
    38aa:	4a3a      	ldr	r2, [pc, #232]	; (3994 <z_impl_k_mutex_unlock+0x164>)
    38ac:	4835      	ldr	r0, [pc, #212]	; (3984 <z_impl_k_mutex_unlock+0x154>)
    38ae:	f002 fc29 	bl	6104 <printk>
    38b2:	4839      	ldr	r0, [pc, #228]	; (3998 <z_impl_k_mutex_unlock+0x168>)
    38b4:	f002 fc26 	bl	6104 <printk>
    38b8:	21fe      	movs	r1, #254	; 0xfe
    38ba:	4836      	ldr	r0, [pc, #216]	; (3994 <z_impl_k_mutex_unlock+0x164>)
    38bc:	f002 fcec 	bl	6298 <assert_post_action>

	--_current->base.sched_locked;
    38c0:	68aa      	ldr	r2, [r5, #8]
    38c2:	7bd3      	ldrb	r3, [r2, #15]
    38c4:	3b01      	subs	r3, #1
    38c6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    38c8:	68e3      	ldr	r3, [r4, #12]
    38ca:	2b01      	cmp	r3, #1
    38cc:	d005      	beq.n	38da <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    38ce:	3b01      	subs	r3, #1
    38d0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    38d2:	f000 fb03 	bl	3edc <k_sched_unlock>

	return 0;
    38d6:	2000      	movs	r0, #0
}
    38d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    38da:	f04f 0320 	mov.w	r3, #32
    38de:	f3ef 8511 	mrs	r5, BASEPRI
    38e2:	f383 8811 	msr	BASEPRI, r3
    38e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    38ea:	482d      	ldr	r0, [pc, #180]	; (39a0 <z_impl_k_mutex_unlock+0x170>)
    38ec:	f7ff fc76 	bl	31dc <z_spin_lock_valid>
    38f0:	b968      	cbnz	r0, 390e <z_impl_k_mutex_unlock+0xde>
    38f2:	2381      	movs	r3, #129	; 0x81
    38f4:	4a2b      	ldr	r2, [pc, #172]	; (39a4 <z_impl_k_mutex_unlock+0x174>)
    38f6:	492c      	ldr	r1, [pc, #176]	; (39a8 <z_impl_k_mutex_unlock+0x178>)
    38f8:	4822      	ldr	r0, [pc, #136]	; (3984 <z_impl_k_mutex_unlock+0x154>)
    38fa:	f002 fc03 	bl	6104 <printk>
    38fe:	4928      	ldr	r1, [pc, #160]	; (39a0 <z_impl_k_mutex_unlock+0x170>)
    3900:	482a      	ldr	r0, [pc, #168]	; (39ac <z_impl_k_mutex_unlock+0x17c>)
    3902:	f002 fbff 	bl	6104 <printk>
    3906:	2181      	movs	r1, #129	; 0x81
    3908:	4826      	ldr	r0, [pc, #152]	; (39a4 <z_impl_k_mutex_unlock+0x174>)
    390a:	f002 fcc5 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    390e:	4824      	ldr	r0, [pc, #144]	; (39a0 <z_impl_k_mutex_unlock+0x170>)
    3910:	f7ff fc80 	bl	3214 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3914:	6921      	ldr	r1, [r4, #16]
    3916:	68a0      	ldr	r0, [r4, #8]
    3918:	f002 fd6f 	bl	63fa <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    391c:	4620      	mov	r0, r4
    391e:	f000 fe91 	bl	4644 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3922:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3924:	b160      	cbz	r0, 3940 <z_impl_k_mutex_unlock+0x110>
		mutex->owner_orig_prio = new_owner->base.prio;
    3926:	f990 200e 	ldrsb.w	r2, [r0, #14]
    392a:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    392c:	2200      	movs	r2, #0
    392e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    3932:	f000 f97f 	bl	3c34 <z_ready_thread>
		z_reschedule(&lock, key);
    3936:	4629      	mov	r1, r5
    3938:	4819      	ldr	r0, [pc, #100]	; (39a0 <z_impl_k_mutex_unlock+0x170>)
    393a:	f000 f9c3 	bl	3cc4 <z_reschedule>
    393e:	e7c8      	b.n	38d2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    3940:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3942:	4817      	ldr	r0, [pc, #92]	; (39a0 <z_impl_k_mutex_unlock+0x170>)
    3944:	f7ff fc58 	bl	31f8 <z_spin_unlock_valid>
    3948:	b968      	cbnz	r0, 3966 <z_impl_k_mutex_unlock+0x136>
    394a:	23ac      	movs	r3, #172	; 0xac
    394c:	4a15      	ldr	r2, [pc, #84]	; (39a4 <z_impl_k_mutex_unlock+0x174>)
    394e:	4918      	ldr	r1, [pc, #96]	; (39b0 <z_impl_k_mutex_unlock+0x180>)
    3950:	480c      	ldr	r0, [pc, #48]	; (3984 <z_impl_k_mutex_unlock+0x154>)
    3952:	f002 fbd7 	bl	6104 <printk>
    3956:	4912      	ldr	r1, [pc, #72]	; (39a0 <z_impl_k_mutex_unlock+0x170>)
    3958:	4816      	ldr	r0, [pc, #88]	; (39b4 <z_impl_k_mutex_unlock+0x184>)
    395a:	f002 fbd3 	bl	6104 <printk>
    395e:	21ac      	movs	r1, #172	; 0xac
    3960:	4810      	ldr	r0, [pc, #64]	; (39a4 <z_impl_k_mutex_unlock+0x174>)
    3962:	f002 fc99 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3966:	f385 8811 	msr	BASEPRI, r5
    396a:	f3bf 8f6f 	isb	sy
    396e:	e7b0      	b.n	38d2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    3970:	f06f 0015 	mvn.w	r0, #21
    3974:	e7b0      	b.n	38d8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    3976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    397a:	e7ad      	b.n	38d8 <z_impl_k_mutex_unlock+0xa8>
    397c:	0000798c 	.word	0x0000798c
    3980:	00007a39 	.word	0x00007a39
    3984:	000072be 	.word	0x000072be
    3988:	00007a5b 	.word	0x00007a5b
    398c:	000087d4 	.word	0x000087d4
    3990:	00007a80 	.word	0x00007a80
    3994:	00007a97 	.word	0x00007a97
    3998:	00007ac2 	.word	0x00007ac2
    399c:	00007ac5 	.word	0x00007ac5
    39a0:	00008808 	.word	0x00008808
    39a4:	00007430 	.word	0x00007430
    39a8:	00007456 	.word	0x00007456
    39ac:	0000746b 	.word	0x0000746b
    39b0:	00007483 	.word	0x00007483
    39b4:	0000749a 	.word	0x0000749a

000039b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    39b8:	b538      	push	{r3, r4, r5, lr}
    39ba:	4604      	mov	r4, r0
	__asm__ volatile(
    39bc:	f04f 0320 	mov.w	r3, #32
    39c0:	f3ef 8511 	mrs	r5, BASEPRI
    39c4:	f383 8811 	msr	BASEPRI, r3
    39c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    39cc:	4817      	ldr	r0, [pc, #92]	; (3a2c <z_impl_k_sem_give+0x74>)
    39ce:	f7ff fc05 	bl	31dc <z_spin_lock_valid>
    39d2:	b968      	cbnz	r0, 39f0 <z_impl_k_sem_give+0x38>
    39d4:	2381      	movs	r3, #129	; 0x81
    39d6:	4a16      	ldr	r2, [pc, #88]	; (3a30 <z_impl_k_sem_give+0x78>)
    39d8:	4916      	ldr	r1, [pc, #88]	; (3a34 <z_impl_k_sem_give+0x7c>)
    39da:	4817      	ldr	r0, [pc, #92]	; (3a38 <z_impl_k_sem_give+0x80>)
    39dc:	f002 fb92 	bl	6104 <printk>
    39e0:	4912      	ldr	r1, [pc, #72]	; (3a2c <z_impl_k_sem_give+0x74>)
    39e2:	4816      	ldr	r0, [pc, #88]	; (3a3c <z_impl_k_sem_give+0x84>)
    39e4:	f002 fb8e 	bl	6104 <printk>
    39e8:	2181      	movs	r1, #129	; 0x81
    39ea:	4811      	ldr	r0, [pc, #68]	; (3a30 <z_impl_k_sem_give+0x78>)
    39ec:	f002 fc54 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    39f0:	480e      	ldr	r0, [pc, #56]	; (3a2c <z_impl_k_sem_give+0x74>)
    39f2:	f7ff fc0f 	bl	3214 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    39f6:	4620      	mov	r0, r4
    39f8:	f000 fe24 	bl	4644 <z_unpend_first_thread>

	if (thread != NULL) {
    39fc:	b150      	cbz	r0, 3a14 <z_impl_k_sem_give+0x5c>
    39fe:	2200      	movs	r2, #0
    3a00:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3a04:	f000 f916 	bl	3c34 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3a08:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3a0e:	4807      	ldr	r0, [pc, #28]	; (3a2c <z_impl_k_sem_give+0x74>)
    3a10:	f000 b958 	b.w	3cc4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3a14:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3a18:	429a      	cmp	r2, r3
    3a1a:	bf18      	it	ne
    3a1c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    3a1e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3a20:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    3a22:	f104 0010 	add.w	r0, r4, #16
    3a26:	f002 fd0f 	bl	6448 <z_handle_obj_poll_events>
}
    3a2a:	e7ed      	b.n	3a08 <z_impl_k_sem_give+0x50>
    3a2c:	0000880c 	.word	0x0000880c
    3a30:	00007430 	.word	0x00007430
    3a34:	00007456 	.word	0x00007456
    3a38:	000072be 	.word	0x000072be
    3a3c:	0000746b 	.word	0x0000746b

00003a40 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3a40:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3a42:	4c08      	ldr	r4, [pc, #32]	; (3a64 <z_reset_time_slice+0x24>)
    3a44:	6823      	ldr	r3, [r4, #0]
    3a46:	b15b      	cbz	r3, 3a60 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3a48:	f7fd fd94 	bl	1574 <sys_clock_elapsed>
    3a4c:	4603      	mov	r3, r0
    3a4e:	6820      	ldr	r0, [r4, #0]
    3a50:	4a05      	ldr	r2, [pc, #20]	; (3a68 <z_reset_time_slice+0x28>)
    3a52:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    3a54:	2100      	movs	r1, #0
	}
}
    3a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3a5a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3a5c:	f001 b992 	b.w	4d84 <z_set_timeout_expiry>
}
    3a60:	bd10      	pop	{r4, pc}
    3a62:	bf00      	nop
    3a64:	00008818 	.word	0x00008818
    3a68:	000087d4 	.word	0x000087d4

00003a6c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3a6c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3a6e:	4c16      	ldr	r4, [pc, #88]	; (3ac8 <update_cache+0x5c>)
    3a70:	4623      	mov	r3, r4
    3a72:	f853 5f24 	ldr.w	r5, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a76:	429d      	cmp	r5, r3
    3a78:	d000      	beq.n	3a7c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3a7a:	b905      	cbnz	r5, 3a7e <update_cache+0x12>
    3a7c:	68e5      	ldr	r5, [r4, #12]
	__ASSERT(_current != NULL, "");
    3a7e:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    3a80:	b120      	cbz	r0, 3a8c <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3a82:	68a3      	ldr	r3, [r4, #8]
    3a84:	42ab      	cmp	r3, r5
    3a86:	d11b      	bne.n	3ac0 <update_cache+0x54>
			z_reset_time_slice();
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3a88:	462b      	mov	r3, r5
    3a8a:	e017      	b.n	3abc <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    3a8c:	b963      	cbnz	r3, 3aa8 <update_cache+0x3c>
    3a8e:	490f      	ldr	r1, [pc, #60]	; (3acc <update_cache+0x60>)
    3a90:	2381      	movs	r3, #129	; 0x81
    3a92:	4a0f      	ldr	r2, [pc, #60]	; (3ad0 <update_cache+0x64>)
    3a94:	480f      	ldr	r0, [pc, #60]	; (3ad4 <update_cache+0x68>)
    3a96:	f002 fb35 	bl	6104 <printk>
    3a9a:	480f      	ldr	r0, [pc, #60]	; (3ad8 <update_cache+0x6c>)
    3a9c:	f002 fb32 	bl	6104 <printk>
    3aa0:	2181      	movs	r1, #129	; 0x81
    3aa2:	480b      	ldr	r0, [pc, #44]	; (3ad0 <update_cache+0x64>)
    3aa4:	f002 fbf8 	bl	6298 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    3aa8:	68a3      	ldr	r3, [r4, #8]
    3aaa:	7b5a      	ldrb	r2, [r3, #13]
    3aac:	06d2      	lsls	r2, r2, #27
    3aae:	d1e8      	bne.n	3a82 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3ab0:	69aa      	ldr	r2, [r5, #24]
    3ab2:	2a00      	cmp	r2, #0
    3ab4:	d1e5      	bne.n	3a82 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    3ab6:	89da      	ldrh	r2, [r3, #14]
    3ab8:	2a7f      	cmp	r2, #127	; 0x7f
    3aba:	d9e2      	bls.n	3a82 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    3abc:	6223      	str	r3, [r4, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3abe:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice();
    3ac0:	f7ff ffbe 	bl	3a40 <z_reset_time_slice>
    3ac4:	e7e0      	b.n	3a88 <update_cache+0x1c>
    3ac6:	bf00      	nop
    3ac8:	000087d4 	.word	0x000087d4
    3acc:	00007b18 	.word	0x00007b18
    3ad0:	00007af6 	.word	0x00007af6
    3ad4:	000072be 	.word	0x000072be
    3ad8:	00007ac2 	.word	0x00007ac2

00003adc <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    3adc:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3ade:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3ae2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3ae4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3ae6:	7b43      	ldrb	r3, [r0, #13]
    3ae8:	db3c      	blt.n	3b64 <ready_thread+0x88>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3aea:	06da      	lsls	r2, r3, #27
    3aec:	d13a      	bne.n	3b64 <ready_thread+0x88>
    3aee:	6982      	ldr	r2, [r0, #24]
    3af0:	2a00      	cmp	r2, #0
    3af2:	d137      	bne.n	3b64 <ready_thread+0x88>
	thread->base.thread_state |= _THREAD_QUEUED;
    3af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3af8:	7343      	strb	r3, [r0, #13]

ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3afa:	4b1b      	ldr	r3, [pc, #108]	; (3b68 <ready_thread+0x8c>)
    3afc:	4298      	cmp	r0, r3
    3afe:	d10b      	bne.n	3b18 <ready_thread+0x3c>
    3b00:	491a      	ldr	r1, [pc, #104]	; (3b6c <ready_thread+0x90>)
    3b02:	481b      	ldr	r0, [pc, #108]	; (3b70 <ready_thread+0x94>)
    3b04:	f240 33a6 	movw	r3, #934	; 0x3a6
    3b08:	4a1a      	ldr	r2, [pc, #104]	; (3b74 <ready_thread+0x98>)
    3b0a:	f002 fafb 	bl	6104 <printk>
    3b0e:	f240 31a6 	movw	r1, #934	; 0x3a6
    3b12:	4818      	ldr	r0, [pc, #96]	; (3b74 <ready_thread+0x98>)
    3b14:	f002 fbc0 	bl	6298 <assert_post_action>
	return list->head == list;
    3b18:	4a17      	ldr	r2, [pc, #92]	; (3b78 <ready_thread+0x9c>)
    3b1a:	4610      	mov	r0, r2
    3b1c:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b20:	4283      	cmp	r3, r0
    3b22:	d11d      	bne.n	3b60 <ready_thread+0x84>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3b24:	6a91      	ldr	r1, [r2, #40]	; 0x28
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3b26:	e9c4 0100 	strd	r0, r1, [r4]

	tail->next = node;
    3b2a:	600c      	str	r4, [r1, #0]
	list->tail = node;
    3b2c:	6294      	str	r4, [r2, #40]	; 0x28
}
    3b2e:	e012      	b.n	3b56 <ready_thread+0x7a>
	return (node == list->tail) ? NULL : node->next;
    3b30:	428b      	cmp	r3, r1
    3b32:	d0f8      	beq.n	3b26 <ready_thread+0x4a>
    3b34:	681b      	ldr	r3, [r3, #0]

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3b36:	2b00      	cmp	r3, #0
    3b38:	d0f5      	beq.n	3b26 <ready_thread+0x4a>
	int32_t b1 = thread_1->base.prio;
    3b3a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3b3e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    3b42:	42ae      	cmp	r6, r5
    3b44:	d0f4      	beq.n	3b30 <ready_thread+0x54>
		return b2 - b1;
    3b46:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3b48:	2d00      	cmp	r5, #0
    3b4a:	ddf1      	ble.n	3b30 <ready_thread+0x54>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3b4c:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3b4e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3b52:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3b54:	605c      	str	r4, [r3, #4]
		update_cache(0);
    3b56:	2000      	movs	r0, #0
}
    3b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    3b5c:	f7ff bf86 	b.w	3a6c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3b60:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3b62:	e7e8      	b.n	3b36 <ready_thread+0x5a>
}
    3b64:	bd70      	pop	{r4, r5, r6, pc}
    3b66:	bf00      	nop
    3b68:	000084f0 	.word	0x000084f0
    3b6c:	00007b3f 	.word	0x00007b3f
    3b70:	000072be 	.word	0x000072be
    3b74:	00007af6 	.word	0x00007af6
    3b78:	000087d4 	.word	0x000087d4

00003b7c <k_sched_time_slice_set>:
{
    3b7c:	b570      	push	{r4, r5, r6, lr}
    3b7e:	4604      	mov	r4, r0
    3b80:	460d      	mov	r5, r1
    3b82:	f04f 0320 	mov.w	r3, #32
    3b86:	f3ef 8611 	mrs	r6, BASEPRI
    3b8a:	f383 8811 	msr	BASEPRI, r3
    3b8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3b92:	481e      	ldr	r0, [pc, #120]	; (3c0c <k_sched_time_slice_set+0x90>)
    3b94:	f7ff fb22 	bl	31dc <z_spin_lock_valid>
    3b98:	b968      	cbnz	r0, 3bb6 <k_sched_time_slice_set+0x3a>
    3b9a:	2381      	movs	r3, #129	; 0x81
    3b9c:	4a1c      	ldr	r2, [pc, #112]	; (3c10 <k_sched_time_slice_set+0x94>)
    3b9e:	491d      	ldr	r1, [pc, #116]	; (3c14 <k_sched_time_slice_set+0x98>)
    3ba0:	481d      	ldr	r0, [pc, #116]	; (3c18 <k_sched_time_slice_set+0x9c>)
    3ba2:	f002 faaf 	bl	6104 <printk>
    3ba6:	4919      	ldr	r1, [pc, #100]	; (3c0c <k_sched_time_slice_set+0x90>)
    3ba8:	481c      	ldr	r0, [pc, #112]	; (3c1c <k_sched_time_slice_set+0xa0>)
    3baa:	f002 faab 	bl	6104 <printk>
    3bae:	2181      	movs	r1, #129	; 0x81
    3bb0:	4817      	ldr	r0, [pc, #92]	; (3c10 <k_sched_time_slice_set+0x94>)
    3bb2:	f002 fb71 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    3bb6:	4815      	ldr	r0, [pc, #84]	; (3c0c <k_sched_time_slice_set+0x90>)
    3bb8:	f7ff fb2c 	bl	3214 <z_spin_lock_set_owner>
			return ((uint32_t)t) * (to_hz / from_hz);
    3bbc:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3bbe:	2c00      	cmp	r4, #0
    3bc0:	fb04 f303 	mul.w	r3, r4, r3
    3bc4:	dd02      	ble.n	3bcc <k_sched_time_slice_set+0x50>
			slice_time = MAX(2, slice_time);
    3bc6:	2b02      	cmp	r3, #2
    3bc8:	bfb8      	it	lt
    3bca:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
    3bcc:	2100      	movs	r1, #0
    3bce:	4a14      	ldr	r2, [pc, #80]	; (3c20 <k_sched_time_slice_set+0xa4>)
    3bd0:	6111      	str	r1, [r2, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
    3bd2:	4a14      	ldr	r2, [pc, #80]	; (3c24 <k_sched_time_slice_set+0xa8>)
    3bd4:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
    3bd6:	4b14      	ldr	r3, [pc, #80]	; (3c28 <k_sched_time_slice_set+0xac>)
    3bd8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3bda:	f7ff ff31 	bl	3a40 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3bde:	480b      	ldr	r0, [pc, #44]	; (3c0c <k_sched_time_slice_set+0x90>)
    3be0:	f7ff fb0a 	bl	31f8 <z_spin_unlock_valid>
    3be4:	b968      	cbnz	r0, 3c02 <k_sched_time_slice_set+0x86>
    3be6:	23ac      	movs	r3, #172	; 0xac
    3be8:	4a09      	ldr	r2, [pc, #36]	; (3c10 <k_sched_time_slice_set+0x94>)
    3bea:	4910      	ldr	r1, [pc, #64]	; (3c2c <k_sched_time_slice_set+0xb0>)
    3bec:	480a      	ldr	r0, [pc, #40]	; (3c18 <k_sched_time_slice_set+0x9c>)
    3bee:	f002 fa89 	bl	6104 <printk>
    3bf2:	4906      	ldr	r1, [pc, #24]	; (3c0c <k_sched_time_slice_set+0x90>)
    3bf4:	480e      	ldr	r0, [pc, #56]	; (3c30 <k_sched_time_slice_set+0xb4>)
    3bf6:	f002 fa85 	bl	6104 <printk>
    3bfa:	21ac      	movs	r1, #172	; 0xac
    3bfc:	4804      	ldr	r0, [pc, #16]	; (3c10 <k_sched_time_slice_set+0x94>)
    3bfe:	f002 fb4b 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3c02:	f386 8811 	msr	BASEPRI, r6
    3c06:	f3bf 8f6f 	isb	sy
}
    3c0a:	bd70      	pop	{r4, r5, r6, pc}
    3c0c:	0000881c 	.word	0x0000881c
    3c10:	00007430 	.word	0x00007430
    3c14:	00007456 	.word	0x00007456
    3c18:	000072be 	.word	0x000072be
    3c1c:	0000746b 	.word	0x0000746b
    3c20:	000087d4 	.word	0x000087d4
    3c24:	00008818 	.word	0x00008818
    3c28:	00008814 	.word	0x00008814
    3c2c:	00007483 	.word	0x00007483
    3c30:	0000749a 	.word	0x0000749a

00003c34 <z_ready_thread>:
{
    3c34:	b538      	push	{r3, r4, r5, lr}
    3c36:	4604      	mov	r4, r0
	__asm__ volatile(
    3c38:	f04f 0320 	mov.w	r3, #32
    3c3c:	f3ef 8511 	mrs	r5, BASEPRI
    3c40:	f383 8811 	msr	BASEPRI, r3
    3c44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3c48:	4817      	ldr	r0, [pc, #92]	; (3ca8 <z_ready_thread+0x74>)
    3c4a:	f7ff fac7 	bl	31dc <z_spin_lock_valid>
    3c4e:	b968      	cbnz	r0, 3c6c <z_ready_thread+0x38>
    3c50:	2381      	movs	r3, #129	; 0x81
    3c52:	4a16      	ldr	r2, [pc, #88]	; (3cac <z_ready_thread+0x78>)
    3c54:	4916      	ldr	r1, [pc, #88]	; (3cb0 <z_ready_thread+0x7c>)
    3c56:	4817      	ldr	r0, [pc, #92]	; (3cb4 <z_ready_thread+0x80>)
    3c58:	f002 fa54 	bl	6104 <printk>
    3c5c:	4912      	ldr	r1, [pc, #72]	; (3ca8 <z_ready_thread+0x74>)
    3c5e:	4816      	ldr	r0, [pc, #88]	; (3cb8 <z_ready_thread+0x84>)
    3c60:	f002 fa50 	bl	6104 <printk>
    3c64:	2181      	movs	r1, #129	; 0x81
    3c66:	4811      	ldr	r0, [pc, #68]	; (3cac <z_ready_thread+0x78>)
    3c68:	f002 fb16 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    3c6c:	480e      	ldr	r0, [pc, #56]	; (3ca8 <z_ready_thread+0x74>)
    3c6e:	f7ff fad1 	bl	3214 <z_spin_lock_set_owner>
			ready_thread(thread);
    3c72:	4620      	mov	r0, r4
    3c74:	f7ff ff32 	bl	3adc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c78:	480b      	ldr	r0, [pc, #44]	; (3ca8 <z_ready_thread+0x74>)
    3c7a:	f7ff fabd 	bl	31f8 <z_spin_unlock_valid>
    3c7e:	b968      	cbnz	r0, 3c9c <z_ready_thread+0x68>
    3c80:	23ac      	movs	r3, #172	; 0xac
    3c82:	4a0a      	ldr	r2, [pc, #40]	; (3cac <z_ready_thread+0x78>)
    3c84:	490d      	ldr	r1, [pc, #52]	; (3cbc <z_ready_thread+0x88>)
    3c86:	480b      	ldr	r0, [pc, #44]	; (3cb4 <z_ready_thread+0x80>)
    3c88:	f002 fa3c 	bl	6104 <printk>
    3c8c:	4906      	ldr	r1, [pc, #24]	; (3ca8 <z_ready_thread+0x74>)
    3c8e:	480c      	ldr	r0, [pc, #48]	; (3cc0 <z_ready_thread+0x8c>)
    3c90:	f002 fa38 	bl	6104 <printk>
    3c94:	21ac      	movs	r1, #172	; 0xac
    3c96:	4805      	ldr	r0, [pc, #20]	; (3cac <z_ready_thread+0x78>)
    3c98:	f002 fafe 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3c9c:	f385 8811 	msr	BASEPRI, r5
    3ca0:	f3bf 8f6f 	isb	sy
}
    3ca4:	bd38      	pop	{r3, r4, r5, pc}
    3ca6:	bf00      	nop
    3ca8:	0000881c 	.word	0x0000881c
    3cac:	00007430 	.word	0x00007430
    3cb0:	00007456 	.word	0x00007456
    3cb4:	000072be 	.word	0x000072be
    3cb8:	0000746b 	.word	0x0000746b
    3cbc:	00007483 	.word	0x00007483
    3cc0:	0000749a 	.word	0x0000749a

00003cc4 <z_reschedule>:
{
    3cc4:	b538      	push	{r3, r4, r5, lr}
    3cc6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3cc8:	460d      	mov	r5, r1
    3cca:	b9e9      	cbnz	r1, 3d08 <z_reschedule+0x44>
    3ccc:	f3ef 8305 	mrs	r3, IPSR
    3cd0:	b9d3      	cbnz	r3, 3d08 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    3cd2:	4b19      	ldr	r3, [pc, #100]	; (3d38 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    3cd4:	6a1a      	ldr	r2, [r3, #32]
    3cd6:	689b      	ldr	r3, [r3, #8]
    3cd8:	429a      	cmp	r2, r3
    3cda:	d015      	beq.n	3d08 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3cdc:	f7ff fa8c 	bl	31f8 <z_spin_unlock_valid>
    3ce0:	b968      	cbnz	r0, 3cfe <z_reschedule+0x3a>
    3ce2:	23c3      	movs	r3, #195	; 0xc3
    3ce4:	4a15      	ldr	r2, [pc, #84]	; (3d3c <z_reschedule+0x78>)
    3ce6:	4916      	ldr	r1, [pc, #88]	; (3d40 <z_reschedule+0x7c>)
    3ce8:	4816      	ldr	r0, [pc, #88]	; (3d44 <z_reschedule+0x80>)
    3cea:	f002 fa0b 	bl	6104 <printk>
    3cee:	4621      	mov	r1, r4
    3cf0:	4815      	ldr	r0, [pc, #84]	; (3d48 <z_reschedule+0x84>)
    3cf2:	f002 fa07 	bl	6104 <printk>
    3cf6:	21c3      	movs	r1, #195	; 0xc3
    3cf8:	4810      	ldr	r0, [pc, #64]	; (3d3c <z_reschedule+0x78>)
    3cfa:	f002 facd 	bl	6298 <assert_post_action>
}
    3cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_swap_irqlock(key.key);
    3d02:	2000      	movs	r0, #0
    3d04:	f002 bb81 	b.w	640a <z_swap_irqlock>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d08:	4620      	mov	r0, r4
    3d0a:	f7ff fa75 	bl	31f8 <z_spin_unlock_valid>
    3d0e:	b968      	cbnz	r0, 3d2c <z_reschedule+0x68>
    3d10:	23ac      	movs	r3, #172	; 0xac
    3d12:	4a0a      	ldr	r2, [pc, #40]	; (3d3c <z_reschedule+0x78>)
    3d14:	490a      	ldr	r1, [pc, #40]	; (3d40 <z_reschedule+0x7c>)
    3d16:	480b      	ldr	r0, [pc, #44]	; (3d44 <z_reschedule+0x80>)
    3d18:	f002 f9f4 	bl	6104 <printk>
    3d1c:	4621      	mov	r1, r4
    3d1e:	480a      	ldr	r0, [pc, #40]	; (3d48 <z_reschedule+0x84>)
    3d20:	f002 f9f0 	bl	6104 <printk>
    3d24:	21ac      	movs	r1, #172	; 0xac
    3d26:	4805      	ldr	r0, [pc, #20]	; (3d3c <z_reschedule+0x78>)
    3d28:	f002 fab6 	bl	6298 <assert_post_action>
    3d2c:	f385 8811 	msr	BASEPRI, r5
    3d30:	f3bf 8f6f 	isb	sy
    3d34:	bd38      	pop	{r3, r4, r5, pc}
    3d36:	bf00      	nop
    3d38:	000087d4 	.word	0x000087d4
    3d3c:	00007430 	.word	0x00007430
    3d40:	00007483 	.word	0x00007483
    3d44:	000072be 	.word	0x000072be
    3d48:	0000749a 	.word	0x0000749a

00003d4c <z_sched_start>:
{
    3d4c:	b538      	push	{r3, r4, r5, lr}
    3d4e:	4604      	mov	r4, r0
	__asm__ volatile(
    3d50:	f04f 0320 	mov.w	r3, #32
    3d54:	f3ef 8511 	mrs	r5, BASEPRI
    3d58:	f383 8811 	msr	BASEPRI, r3
    3d5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d60:	481d      	ldr	r0, [pc, #116]	; (3dd8 <z_sched_start+0x8c>)
    3d62:	f7ff fa3b 	bl	31dc <z_spin_lock_valid>
    3d66:	b968      	cbnz	r0, 3d84 <z_sched_start+0x38>
    3d68:	2381      	movs	r3, #129	; 0x81
    3d6a:	4a1c      	ldr	r2, [pc, #112]	; (3ddc <z_sched_start+0x90>)
    3d6c:	491c      	ldr	r1, [pc, #112]	; (3de0 <z_sched_start+0x94>)
    3d6e:	481d      	ldr	r0, [pc, #116]	; (3de4 <z_sched_start+0x98>)
    3d70:	f002 f9c8 	bl	6104 <printk>
    3d74:	4918      	ldr	r1, [pc, #96]	; (3dd8 <z_sched_start+0x8c>)
    3d76:	481c      	ldr	r0, [pc, #112]	; (3de8 <z_sched_start+0x9c>)
    3d78:	f002 f9c4 	bl	6104 <printk>
    3d7c:	2181      	movs	r1, #129	; 0x81
    3d7e:	4817      	ldr	r0, [pc, #92]	; (3ddc <z_sched_start+0x90>)
    3d80:	f002 fa8a 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    3d84:	4814      	ldr	r0, [pc, #80]	; (3dd8 <z_sched_start+0x8c>)
    3d86:	f7ff fa45 	bl	3214 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3d8a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    3d8c:	075a      	lsls	r2, r3, #29
    3d8e:	d416      	bmi.n	3dbe <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d90:	4811      	ldr	r0, [pc, #68]	; (3dd8 <z_sched_start+0x8c>)
    3d92:	f7ff fa31 	bl	31f8 <z_spin_unlock_valid>
    3d96:	b968      	cbnz	r0, 3db4 <z_sched_start+0x68>
    3d98:	23ac      	movs	r3, #172	; 0xac
    3d9a:	4a10      	ldr	r2, [pc, #64]	; (3ddc <z_sched_start+0x90>)
    3d9c:	4913      	ldr	r1, [pc, #76]	; (3dec <z_sched_start+0xa0>)
    3d9e:	4811      	ldr	r0, [pc, #68]	; (3de4 <z_sched_start+0x98>)
    3da0:	f002 f9b0 	bl	6104 <printk>
    3da4:	490c      	ldr	r1, [pc, #48]	; (3dd8 <z_sched_start+0x8c>)
    3da6:	4812      	ldr	r0, [pc, #72]	; (3df0 <z_sched_start+0xa4>)
    3da8:	f002 f9ac 	bl	6104 <printk>
    3dac:	21ac      	movs	r1, #172	; 0xac
    3dae:	480b      	ldr	r0, [pc, #44]	; (3ddc <z_sched_start+0x90>)
    3db0:	f002 fa72 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3db4:	f385 8811 	msr	BASEPRI, r5
    3db8:	f3bf 8f6f 	isb	sy
}
    3dbc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3dbe:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    3dc2:	4620      	mov	r0, r4
    3dc4:	7363      	strb	r3, [r4, #13]
    3dc6:	f7ff fe89 	bl	3adc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3dca:	4629      	mov	r1, r5
}
    3dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    3dd0:	4801      	ldr	r0, [pc, #4]	; (3dd8 <z_sched_start+0x8c>)
    3dd2:	f7ff bf77 	b.w	3cc4 <z_reschedule>
    3dd6:	bf00      	nop
    3dd8:	0000881c 	.word	0x0000881c
    3ddc:	00007430 	.word	0x00007430
    3de0:	00007456 	.word	0x00007456
    3de4:	000072be 	.word	0x000072be
    3de8:	0000746b 	.word	0x0000746b
    3dec:	00007483 	.word	0x00007483
    3df0:	0000749a 	.word	0x0000749a

00003df4 <k_sched_lock>:
{
    3df4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3df6:	f04f 0320 	mov.w	r3, #32
    3dfa:	f3ef 8511 	mrs	r5, BASEPRI
    3dfe:	f383 8811 	msr	BASEPRI, r3
    3e02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e06:	4829      	ldr	r0, [pc, #164]	; (3eac <k_sched_lock+0xb8>)
    3e08:	f7ff f9e8 	bl	31dc <z_spin_lock_valid>
    3e0c:	b968      	cbnz	r0, 3e2a <k_sched_lock+0x36>
    3e0e:	2381      	movs	r3, #129	; 0x81
    3e10:	4a27      	ldr	r2, [pc, #156]	; (3eb0 <k_sched_lock+0xbc>)
    3e12:	4928      	ldr	r1, [pc, #160]	; (3eb4 <k_sched_lock+0xc0>)
    3e14:	4828      	ldr	r0, [pc, #160]	; (3eb8 <k_sched_lock+0xc4>)
    3e16:	f002 f975 	bl	6104 <printk>
    3e1a:	4924      	ldr	r1, [pc, #144]	; (3eac <k_sched_lock+0xb8>)
    3e1c:	4827      	ldr	r0, [pc, #156]	; (3ebc <k_sched_lock+0xc8>)
    3e1e:	f002 f971 	bl	6104 <printk>
    3e22:	2181      	movs	r1, #129	; 0x81
    3e24:	4822      	ldr	r0, [pc, #136]	; (3eb0 <k_sched_lock+0xbc>)
    3e26:	f002 fa37 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    3e2a:	4820      	ldr	r0, [pc, #128]	; (3eac <k_sched_lock+0xb8>)
    3e2c:	f7ff f9f2 	bl	3214 <z_spin_lock_set_owner>
    3e30:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    3e34:	b163      	cbz	r3, 3e50 <k_sched_lock+0x5c>
    3e36:	4922      	ldr	r1, [pc, #136]	; (3ec0 <k_sched_lock+0xcc>)
    3e38:	23fd      	movs	r3, #253	; 0xfd
    3e3a:	4a22      	ldr	r2, [pc, #136]	; (3ec4 <k_sched_lock+0xd0>)
    3e3c:	481e      	ldr	r0, [pc, #120]	; (3eb8 <k_sched_lock+0xc4>)
    3e3e:	f002 f961 	bl	6104 <printk>
    3e42:	4821      	ldr	r0, [pc, #132]	; (3ec8 <k_sched_lock+0xd4>)
    3e44:	f002 f95e 	bl	6104 <printk>
    3e48:	21fd      	movs	r1, #253	; 0xfd
    3e4a:	481e      	ldr	r0, [pc, #120]	; (3ec4 <k_sched_lock+0xd0>)
    3e4c:	f002 fa24 	bl	6298 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    3e50:	4c1e      	ldr	r4, [pc, #120]	; (3ecc <k_sched_lock+0xd8>)
    3e52:	68a3      	ldr	r3, [r4, #8]
    3e54:	7bdb      	ldrb	r3, [r3, #15]
    3e56:	2b01      	cmp	r3, #1
    3e58:	d10c      	bne.n	3e74 <k_sched_lock+0x80>
    3e5a:	491d      	ldr	r1, [pc, #116]	; (3ed0 <k_sched_lock+0xdc>)
    3e5c:	23fe      	movs	r3, #254	; 0xfe
    3e5e:	4a19      	ldr	r2, [pc, #100]	; (3ec4 <k_sched_lock+0xd0>)
    3e60:	4815      	ldr	r0, [pc, #84]	; (3eb8 <k_sched_lock+0xc4>)
    3e62:	f002 f94f 	bl	6104 <printk>
    3e66:	4818      	ldr	r0, [pc, #96]	; (3ec8 <k_sched_lock+0xd4>)
    3e68:	f002 f94c 	bl	6104 <printk>
    3e6c:	21fe      	movs	r1, #254	; 0xfe
    3e6e:	4815      	ldr	r0, [pc, #84]	; (3ec4 <k_sched_lock+0xd0>)
    3e70:	f002 fa12 	bl	6298 <assert_post_action>
	--_current->base.sched_locked;
    3e74:	68a2      	ldr	r2, [r4, #8]
    3e76:	7bd3      	ldrb	r3, [r2, #15]
    3e78:	3b01      	subs	r3, #1
    3e7a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e7c:	480b      	ldr	r0, [pc, #44]	; (3eac <k_sched_lock+0xb8>)
    3e7e:	f7ff f9bb 	bl	31f8 <z_spin_unlock_valid>
    3e82:	b968      	cbnz	r0, 3ea0 <k_sched_lock+0xac>
    3e84:	23ac      	movs	r3, #172	; 0xac
    3e86:	4a0a      	ldr	r2, [pc, #40]	; (3eb0 <k_sched_lock+0xbc>)
    3e88:	4912      	ldr	r1, [pc, #72]	; (3ed4 <k_sched_lock+0xe0>)
    3e8a:	480b      	ldr	r0, [pc, #44]	; (3eb8 <k_sched_lock+0xc4>)
    3e8c:	f002 f93a 	bl	6104 <printk>
    3e90:	4906      	ldr	r1, [pc, #24]	; (3eac <k_sched_lock+0xb8>)
    3e92:	4811      	ldr	r0, [pc, #68]	; (3ed8 <k_sched_lock+0xe4>)
    3e94:	f002 f936 	bl	6104 <printk>
    3e98:	21ac      	movs	r1, #172	; 0xac
    3e9a:	4805      	ldr	r0, [pc, #20]	; (3eb0 <k_sched_lock+0xbc>)
    3e9c:	f002 f9fc 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3ea0:	f385 8811 	msr	BASEPRI, r5
    3ea4:	f3bf 8f6f 	isb	sy
}
    3ea8:	bd38      	pop	{r3, r4, r5, pc}
    3eaa:	bf00      	nop
    3eac:	0000881c 	.word	0x0000881c
    3eb0:	00007430 	.word	0x00007430
    3eb4:	00007456 	.word	0x00007456
    3eb8:	000072be 	.word	0x000072be
    3ebc:	0000746b 	.word	0x0000746b
    3ec0:	0000798c 	.word	0x0000798c
    3ec4:	00007a97 	.word	0x00007a97
    3ec8:	00007ac2 	.word	0x00007ac2
    3ecc:	000087d4 	.word	0x000087d4
    3ed0:	00007ac5 	.word	0x00007ac5
    3ed4:	00007483 	.word	0x00007483
    3ed8:	0000749a 	.word	0x0000749a

00003edc <k_sched_unlock>:
{
    3edc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3ede:	f04f 0320 	mov.w	r3, #32
    3ee2:	f3ef 8511 	mrs	r5, BASEPRI
    3ee6:	f383 8811 	msr	BASEPRI, r3
    3eea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3eee:	482d      	ldr	r0, [pc, #180]	; (3fa4 <k_sched_unlock+0xc8>)
    3ef0:	f7ff f974 	bl	31dc <z_spin_lock_valid>
    3ef4:	b968      	cbnz	r0, 3f12 <k_sched_unlock+0x36>
    3ef6:	2381      	movs	r3, #129	; 0x81
    3ef8:	4a2b      	ldr	r2, [pc, #172]	; (3fa8 <k_sched_unlock+0xcc>)
    3efa:	492c      	ldr	r1, [pc, #176]	; (3fac <k_sched_unlock+0xd0>)
    3efc:	482c      	ldr	r0, [pc, #176]	; (3fb0 <k_sched_unlock+0xd4>)
    3efe:	f002 f901 	bl	6104 <printk>
    3f02:	4928      	ldr	r1, [pc, #160]	; (3fa4 <k_sched_unlock+0xc8>)
    3f04:	482b      	ldr	r0, [pc, #172]	; (3fb4 <k_sched_unlock+0xd8>)
    3f06:	f002 f8fd 	bl	6104 <printk>
    3f0a:	2181      	movs	r1, #129	; 0x81
    3f0c:	4826      	ldr	r0, [pc, #152]	; (3fa8 <k_sched_unlock+0xcc>)
    3f0e:	f002 f9c3 	bl	6298 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    3f12:	4c29      	ldr	r4, [pc, #164]	; (3fb8 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    3f14:	4823      	ldr	r0, [pc, #140]	; (3fa4 <k_sched_unlock+0xc8>)
    3f16:	f7ff f97d 	bl	3214 <z_spin_lock_set_owner>
    3f1a:	68a3      	ldr	r3, [r4, #8]
    3f1c:	7bdb      	ldrb	r3, [r3, #15]
    3f1e:	b973      	cbnz	r3, 3f3e <k_sched_unlock+0x62>
    3f20:	4926      	ldr	r1, [pc, #152]	; (3fbc <k_sched_unlock+0xe0>)
    3f22:	f44f 7351 	mov.w	r3, #836	; 0x344
    3f26:	4a26      	ldr	r2, [pc, #152]	; (3fc0 <k_sched_unlock+0xe4>)
    3f28:	4821      	ldr	r0, [pc, #132]	; (3fb0 <k_sched_unlock+0xd4>)
    3f2a:	f002 f8eb 	bl	6104 <printk>
    3f2e:	4825      	ldr	r0, [pc, #148]	; (3fc4 <k_sched_unlock+0xe8>)
    3f30:	f002 f8e8 	bl	6104 <printk>
    3f34:	f44f 7151 	mov.w	r1, #836	; 0x344
    3f38:	4821      	ldr	r0, [pc, #132]	; (3fc0 <k_sched_unlock+0xe4>)
    3f3a:	f002 f9ad 	bl	6298 <assert_post_action>
    3f3e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    3f42:	b173      	cbz	r3, 3f62 <k_sched_unlock+0x86>
    3f44:	4920      	ldr	r1, [pc, #128]	; (3fc8 <k_sched_unlock+0xec>)
    3f46:	f240 3345 	movw	r3, #837	; 0x345
    3f4a:	4a1d      	ldr	r2, [pc, #116]	; (3fc0 <k_sched_unlock+0xe4>)
    3f4c:	4818      	ldr	r0, [pc, #96]	; (3fb0 <k_sched_unlock+0xd4>)
    3f4e:	f002 f8d9 	bl	6104 <printk>
    3f52:	481c      	ldr	r0, [pc, #112]	; (3fc4 <k_sched_unlock+0xe8>)
    3f54:	f002 f8d6 	bl	6104 <printk>
    3f58:	f240 3145 	movw	r1, #837	; 0x345
    3f5c:	4818      	ldr	r0, [pc, #96]	; (3fc0 <k_sched_unlock+0xe4>)
    3f5e:	f002 f99b 	bl	6298 <assert_post_action>
		++_current->base.sched_locked;
    3f62:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    3f64:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3f66:	7bd3      	ldrb	r3, [r2, #15]
    3f68:	3301      	adds	r3, #1
    3f6a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3f6c:	f7ff fd7e 	bl	3a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f70:	480c      	ldr	r0, [pc, #48]	; (3fa4 <k_sched_unlock+0xc8>)
    3f72:	f7ff f941 	bl	31f8 <z_spin_unlock_valid>
    3f76:	b968      	cbnz	r0, 3f94 <k_sched_unlock+0xb8>
    3f78:	23ac      	movs	r3, #172	; 0xac
    3f7a:	4a0b      	ldr	r2, [pc, #44]	; (3fa8 <k_sched_unlock+0xcc>)
    3f7c:	4913      	ldr	r1, [pc, #76]	; (3fcc <k_sched_unlock+0xf0>)
    3f7e:	480c      	ldr	r0, [pc, #48]	; (3fb0 <k_sched_unlock+0xd4>)
    3f80:	f002 f8c0 	bl	6104 <printk>
    3f84:	4907      	ldr	r1, [pc, #28]	; (3fa4 <k_sched_unlock+0xc8>)
    3f86:	4812      	ldr	r0, [pc, #72]	; (3fd0 <k_sched_unlock+0xf4>)
    3f88:	f002 f8bc 	bl	6104 <printk>
    3f8c:	21ac      	movs	r1, #172	; 0xac
    3f8e:	4806      	ldr	r0, [pc, #24]	; (3fa8 <k_sched_unlock+0xcc>)
    3f90:	f002 f982 	bl	6298 <assert_post_action>
	__asm__ volatile(
    3f94:	f385 8811 	msr	BASEPRI, r5
    3f98:	f3bf 8f6f 	isb	sy
}
    3f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    3fa0:	f002 ba48 	b.w	6434 <z_reschedule_unlocked>
    3fa4:	0000881c 	.word	0x0000881c
    3fa8:	00007430 	.word	0x00007430
    3fac:	00007456 	.word	0x00007456
    3fb0:	000072be 	.word	0x000072be
    3fb4:	0000746b 	.word	0x0000746b
    3fb8:	000087d4 	.word	0x000087d4
    3fbc:	00007b60 	.word	0x00007b60
    3fc0:	00007af6 	.word	0x00007af6
    3fc4:	00007ac2 	.word	0x00007ac2
    3fc8:	0000798c 	.word	0x0000798c
    3fcc:	00007483 	.word	0x00007483
    3fd0:	0000749a 	.word	0x0000749a

00003fd4 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3fd4:	4b0c      	ldr	r3, [pc, #48]	; (4008 <CONFIG_SRAM_NC_SIZE+0x8>)
{
    3fd6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3fd8:	4299      	cmp	r1, r3
{
    3fda:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3fdc:	d10b      	bne.n	3ff6 <z_priq_dumb_remove+0x22>
    3fde:	490b      	ldr	r1, [pc, #44]	; (400c <CONFIG_SRAM_NC_SIZE+0xc>)
    3fe0:	480b      	ldr	r0, [pc, #44]	; (4010 <CONFIG_SRAM_NC_SIZE+0x10>)
    3fe2:	f240 33b5 	movw	r3, #949	; 0x3b5
    3fe6:	4a0b      	ldr	r2, [pc, #44]	; (4014 <CONFIG_SRAM_NC_SIZE+0x14>)
    3fe8:	f002 f88c 	bl	6104 <printk>
    3fec:	f240 31b5 	movw	r1, #949	; 0x3b5
    3ff0:	4808      	ldr	r0, [pc, #32]	; (4014 <CONFIG_SRAM_NC_SIZE+0x14>)
    3ff2:	f002 f951 	bl	6298 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3ff6:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    3ffa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3ffc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3ffe:	2300      	movs	r3, #0
	node->prev = NULL;
    4000:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4004:	bd10      	pop	{r4, pc}
    4006:	bf00      	nop
    4008:	000084f0 	.word	0x000084f0
    400c:	00007b3f 	.word	0x00007b3f
    4010:	000072be 	.word	0x000072be
    4014:	00007af6 	.word	0x00007af6

00004018 <unready_thread>:
{
    4018:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    401a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    401e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4020:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    4022:	7b43      	ldrb	r3, [r0, #13]
    4024:	da06      	bge.n	4034 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    402a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    402c:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    402e:	4806      	ldr	r0, [pc, #24]	; (4048 <unready_thread+0x30>)
    4030:	f7ff ffd0 	bl	3fd4 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4034:	4b05      	ldr	r3, [pc, #20]	; (404c <unready_thread+0x34>)
    4036:	6898      	ldr	r0, [r3, #8]
    4038:	1b03      	subs	r3, r0, r4
    403a:	4258      	negs	r0, r3
    403c:	4158      	adcs	r0, r3
}
    403e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4042:	f7ff bd13 	b.w	3a6c <update_cache>
    4046:	bf00      	nop
    4048:	000087f8 	.word	0x000087f8
    404c:	000087d4 	.word	0x000087d4

00004050 <add_to_waitq_locked>:
{
    4050:	b538      	push	{r3, r4, r5, lr}
    4052:	4604      	mov	r4, r0
    4054:	460d      	mov	r5, r1
	unready_thread(thread);
    4056:	f7ff ffdf 	bl	4018 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    405a:	7b63      	ldrb	r3, [r4, #13]
    405c:	f043 0302 	orr.w	r3, r3, #2
    4060:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4062:	b365      	cbz	r5, 40be <add_to_waitq_locked+0x6e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4064:	4b16      	ldr	r3, [pc, #88]	; (40c0 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    4066:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4068:	429c      	cmp	r4, r3
    406a:	d10b      	bne.n	4084 <add_to_waitq_locked+0x34>
    406c:	4915      	ldr	r1, [pc, #84]	; (40c4 <add_to_waitq_locked+0x74>)
    406e:	4816      	ldr	r0, [pc, #88]	; (40c8 <add_to_waitq_locked+0x78>)
    4070:	f240 33a6 	movw	r3, #934	; 0x3a6
    4074:	4a15      	ldr	r2, [pc, #84]	; (40cc <add_to_waitq_locked+0x7c>)
    4076:	f002 f845 	bl	6104 <printk>
    407a:	f240 31a6 	movw	r1, #934	; 0x3a6
    407e:	4813      	ldr	r0, [pc, #76]	; (40cc <add_to_waitq_locked+0x7c>)
    4080:	f002 f90a 	bl	6298 <assert_post_action>
	return list->head == list;
    4084:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4086:	429d      	cmp	r5, r3
    4088:	d109      	bne.n	409e <add_to_waitq_locked+0x4e>
	sys_dnode_t *const tail = list->tail;
    408a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    408c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4090:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4092:	606c      	str	r4, [r5, #4]
}
    4094:	e013      	b.n	40be <add_to_waitq_locked+0x6e>
	return (node == list->tail) ? NULL : node->next;
    4096:	686a      	ldr	r2, [r5, #4]
    4098:	429a      	cmp	r2, r3
    409a:	d0f6      	beq.n	408a <add_to_waitq_locked+0x3a>
    409c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    409e:	2b00      	cmp	r3, #0
    40a0:	d0f3      	beq.n	408a <add_to_waitq_locked+0x3a>
	int32_t b1 = thread_1->base.prio;
    40a2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    40a6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    40aa:	4291      	cmp	r1, r2
    40ac:	d0f3      	beq.n	4096 <add_to_waitq_locked+0x46>
		return b2 - b1;
    40ae:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    40b0:	2a00      	cmp	r2, #0
    40b2:	ddf0      	ble.n	4096 <add_to_waitq_locked+0x46>
	sys_dnode_t *const prev = successor->prev;
    40b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    40b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    40ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    40bc:	605c      	str	r4, [r3, #4]
}
    40be:	bd38      	pop	{r3, r4, r5, pc}
    40c0:	000084f0 	.word	0x000084f0
    40c4:	00007b3f 	.word	0x00007b3f
    40c8:	000072be 	.word	0x000072be
    40cc:	00007af6 	.word	0x00007af6

000040d0 <pend>:
{
    40d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40d4:	4604      	mov	r4, r0
    40d6:	4688      	mov	r8, r1
    40d8:	4616      	mov	r6, r2
    40da:	461d      	mov	r5, r3
	__asm__ volatile(
    40dc:	f04f 0320 	mov.w	r3, #32
    40e0:	f3ef 8711 	mrs	r7, BASEPRI
    40e4:	f383 8811 	msr	BASEPRI, r3
    40e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40ec:	481f      	ldr	r0, [pc, #124]	; (416c <pend+0x9c>)
    40ee:	f7ff f875 	bl	31dc <z_spin_lock_valid>
    40f2:	b968      	cbnz	r0, 4110 <pend+0x40>
    40f4:	2381      	movs	r3, #129	; 0x81
    40f6:	4a1e      	ldr	r2, [pc, #120]	; (4170 <pend+0xa0>)
    40f8:	491e      	ldr	r1, [pc, #120]	; (4174 <pend+0xa4>)
    40fa:	481f      	ldr	r0, [pc, #124]	; (4178 <pend+0xa8>)
    40fc:	f002 f802 	bl	6104 <printk>
    4100:	491a      	ldr	r1, [pc, #104]	; (416c <pend+0x9c>)
    4102:	481e      	ldr	r0, [pc, #120]	; (417c <pend+0xac>)
    4104:	f001 fffe 	bl	6104 <printk>
    4108:	2181      	movs	r1, #129	; 0x81
    410a:	4819      	ldr	r0, [pc, #100]	; (4170 <pend+0xa0>)
    410c:	f002 f8c4 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4110:	4816      	ldr	r0, [pc, #88]	; (416c <pend+0x9c>)
    4112:	f7ff f87f 	bl	3214 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    4116:	4620      	mov	r0, r4
    4118:	4641      	mov	r1, r8
    411a:	f7ff ff99 	bl	4050 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    411e:	4813      	ldr	r0, [pc, #76]	; (416c <pend+0x9c>)
    4120:	f7ff f86a 	bl	31f8 <z_spin_unlock_valid>
    4124:	b968      	cbnz	r0, 4142 <pend+0x72>
    4126:	23ac      	movs	r3, #172	; 0xac
    4128:	4a11      	ldr	r2, [pc, #68]	; (4170 <pend+0xa0>)
    412a:	4915      	ldr	r1, [pc, #84]	; (4180 <pend+0xb0>)
    412c:	4812      	ldr	r0, [pc, #72]	; (4178 <pend+0xa8>)
    412e:	f001 ffe9 	bl	6104 <printk>
    4132:	490e      	ldr	r1, [pc, #56]	; (416c <pend+0x9c>)
    4134:	4813      	ldr	r0, [pc, #76]	; (4184 <pend+0xb4>)
    4136:	f001 ffe5 	bl	6104 <printk>
    413a:	21ac      	movs	r1, #172	; 0xac
    413c:	480c      	ldr	r0, [pc, #48]	; (4170 <pend+0xa0>)
    413e:	f002 f8ab 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4142:	f387 8811 	msr	BASEPRI, r7
    4146:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    414a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    414e:	bf08      	it	eq
    4150:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4154:	d008      	beq.n	4168 <pend+0x98>
    4156:	4632      	mov	r2, r6
    4158:	462b      	mov	r3, r5
    415a:	f104 0018 	add.w	r0, r4, #24
    415e:	490a      	ldr	r1, [pc, #40]	; (4188 <pend+0xb8>)
}
    4160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4164:	f000 bcf8 	b.w	4b58 <z_add_timeout>
    4168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    416c:	0000881c 	.word	0x0000881c
    4170:	00007430 	.word	0x00007430
    4174:	00007456 	.word	0x00007456
    4178:	000072be 	.word	0x000072be
    417c:	0000746b 	.word	0x0000746b
    4180:	00007483 	.word	0x00007483
    4184:	0000749a 	.word	0x0000749a
    4188:	00004591 	.word	0x00004591

0000418c <z_pend_curr>:
{
    418c:	b538      	push	{r3, r4, r5, lr}
    418e:	4604      	mov	r4, r0
	pending_current = _current;
    4190:	4b10      	ldr	r3, [pc, #64]	; (41d4 <z_pend_curr+0x48>)
{
    4192:	460d      	mov	r5, r1
	pending_current = _current;
    4194:	6898      	ldr	r0, [r3, #8]
    4196:	4b10      	ldr	r3, [pc, #64]	; (41d8 <z_pend_curr+0x4c>)
{
    4198:	4611      	mov	r1, r2
	pending_current = _current;
    419a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    419c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    41a0:	f7ff ff96 	bl	40d0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41a4:	4620      	mov	r0, r4
    41a6:	f7ff f827 	bl	31f8 <z_spin_unlock_valid>
    41aa:	b968      	cbnz	r0, 41c8 <z_pend_curr+0x3c>
    41ac:	23c3      	movs	r3, #195	; 0xc3
    41ae:	4a0b      	ldr	r2, [pc, #44]	; (41dc <z_pend_curr+0x50>)
    41b0:	490b      	ldr	r1, [pc, #44]	; (41e0 <z_pend_curr+0x54>)
    41b2:	480c      	ldr	r0, [pc, #48]	; (41e4 <z_pend_curr+0x58>)
    41b4:	f001 ffa6 	bl	6104 <printk>
    41b8:	4621      	mov	r1, r4
    41ba:	480b      	ldr	r0, [pc, #44]	; (41e8 <z_pend_curr+0x5c>)
    41bc:	f001 ffa2 	bl	6104 <printk>
    41c0:	21c3      	movs	r1, #195	; 0xc3
    41c2:	4806      	ldr	r0, [pc, #24]	; (41dc <z_pend_curr+0x50>)
    41c4:	f002 f868 	bl	6298 <assert_post_action>
    41c8:	4628      	mov	r0, r5
}
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f002 b91c 	b.w	640a <z_swap_irqlock>
    41d2:	bf00      	nop
    41d4:	000087d4 	.word	0x000087d4
    41d8:	00008810 	.word	0x00008810
    41dc:	00007430 	.word	0x00007430
    41e0:	00007483 	.word	0x00007483
    41e4:	000072be 	.word	0x000072be
    41e8:	0000749a 	.word	0x0000749a

000041ec <move_thread_to_end_of_prio_q>:
{
    41ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    41ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    41f2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    41f4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    41f6:	7b43      	ldrb	r3, [r0, #13]
    41f8:	da06      	bge.n	4208 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    41fe:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4200:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4202:	481e      	ldr	r0, [pc, #120]	; (427c <move_thread_to_end_of_prio_q+0x90>)
    4204:	f7ff fee6 	bl	3fd4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4208:	7b63      	ldrb	r3, [r4, #13]
    420a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    420e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4210:	4b1b      	ldr	r3, [pc, #108]	; (4280 <move_thread_to_end_of_prio_q+0x94>)
    4212:	429c      	cmp	r4, r3
    4214:	d10b      	bne.n	422e <move_thread_to_end_of_prio_q+0x42>
    4216:	491b      	ldr	r1, [pc, #108]	; (4284 <move_thread_to_end_of_prio_q+0x98>)
    4218:	481b      	ldr	r0, [pc, #108]	; (4288 <move_thread_to_end_of_prio_q+0x9c>)
    421a:	f240 33a6 	movw	r3, #934	; 0x3a6
    421e:	4a1b      	ldr	r2, [pc, #108]	; (428c <move_thread_to_end_of_prio_q+0xa0>)
    4220:	f001 ff70 	bl	6104 <printk>
    4224:	f240 31a6 	movw	r1, #934	; 0x3a6
    4228:	4818      	ldr	r0, [pc, #96]	; (428c <move_thread_to_end_of_prio_q+0xa0>)
    422a:	f002 f835 	bl	6298 <assert_post_action>
	return list->head == list;
    422e:	4a18      	ldr	r2, [pc, #96]	; (4290 <move_thread_to_end_of_prio_q+0xa4>)
    4230:	4610      	mov	r0, r2
    4232:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
    4236:	6a91      	ldr	r1, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4238:	4283      	cmp	r3, r0
    423a:	d107      	bne.n	424c <move_thread_to_end_of_prio_q+0x60>
	node->prev = tail;
    423c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4240:	600c      	str	r4, [r1, #0]
	list->tail = node;
    4242:	6294      	str	r4, [r2, #40]	; 0x28
}
    4244:	e012      	b.n	426c <move_thread_to_end_of_prio_q+0x80>
	return (node == list->tail) ? NULL : node->next;
    4246:	4299      	cmp	r1, r3
    4248:	d0f8      	beq.n	423c <move_thread_to_end_of_prio_q+0x50>
    424a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    424c:	2b00      	cmp	r3, #0
    424e:	d0f5      	beq.n	423c <move_thread_to_end_of_prio_q+0x50>
	int32_t b1 = thread_1->base.prio;
    4250:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4254:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4258:	42ae      	cmp	r6, r5
    425a:	d0f4      	beq.n	4246 <move_thread_to_end_of_prio_q+0x5a>
		return b2 - b1;
    425c:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    425e:	2d00      	cmp	r5, #0
    4260:	ddf1      	ble.n	4246 <move_thread_to_end_of_prio_q+0x5a>
	sys_dnode_t *const prev = successor->prev;
    4262:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4264:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4268:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    426a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    426c:	6890      	ldr	r0, [r2, #8]
    426e:	1b03      	subs	r3, r0, r4
    4270:	4258      	negs	r0, r3
    4272:	4158      	adcs	r0, r3
}
    4274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4278:	f7ff bbf8 	b.w	3a6c <update_cache>
    427c:	000087f8 	.word	0x000087f8
    4280:	000084f0 	.word	0x000084f0
    4284:	00007b3f 	.word	0x00007b3f
    4288:	000072be 	.word	0x000072be
    428c:	00007af6 	.word	0x00007af6
    4290:	000087d4 	.word	0x000087d4

00004294 <z_time_slice>:
{
    4294:	b538      	push	{r3, r4, r5, lr}
    4296:	4604      	mov	r4, r0
	__asm__ volatile(
    4298:	f04f 0320 	mov.w	r3, #32
    429c:	f3ef 8511 	mrs	r5, BASEPRI
    42a0:	f383 8811 	msr	BASEPRI, r3
    42a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    42a8:	4829      	ldr	r0, [pc, #164]	; (4350 <z_time_slice+0xbc>)
    42aa:	f7fe ff97 	bl	31dc <z_spin_lock_valid>
    42ae:	b968      	cbnz	r0, 42cc <z_time_slice+0x38>
    42b0:	2381      	movs	r3, #129	; 0x81
    42b2:	4a28      	ldr	r2, [pc, #160]	; (4354 <z_time_slice+0xc0>)
    42b4:	4928      	ldr	r1, [pc, #160]	; (4358 <z_time_slice+0xc4>)
    42b6:	4829      	ldr	r0, [pc, #164]	; (435c <z_time_slice+0xc8>)
    42b8:	f001 ff24 	bl	6104 <printk>
    42bc:	4924      	ldr	r1, [pc, #144]	; (4350 <z_time_slice+0xbc>)
    42be:	4828      	ldr	r0, [pc, #160]	; (4360 <z_time_slice+0xcc>)
    42c0:	f001 ff20 	bl	6104 <printk>
    42c4:	2181      	movs	r1, #129	; 0x81
    42c6:	4823      	ldr	r0, [pc, #140]	; (4354 <z_time_slice+0xc0>)
    42c8:	f001 ffe6 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    42cc:	4820      	ldr	r0, [pc, #128]	; (4350 <z_time_slice+0xbc>)
    42ce:	f7fe ffa1 	bl	3214 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    42d2:	4b24      	ldr	r3, [pc, #144]	; (4364 <z_time_slice+0xd0>)
    42d4:	4a24      	ldr	r2, [pc, #144]	; (4368 <z_time_slice+0xd4>)
    42d6:	6898      	ldr	r0, [r3, #8]
    42d8:	6811      	ldr	r1, [r2, #0]
    42da:	4288      	cmp	r0, r1
    42dc:	d118      	bne.n	4310 <z_time_slice+0x7c>
			z_reset_time_slice();
    42de:	f7ff fbaf 	bl	3a40 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42e2:	481b      	ldr	r0, [pc, #108]	; (4350 <z_time_slice+0xbc>)
    42e4:	f7fe ff88 	bl	31f8 <z_spin_unlock_valid>
    42e8:	b968      	cbnz	r0, 4306 <z_time_slice+0x72>
    42ea:	23ac      	movs	r3, #172	; 0xac
    42ec:	4a19      	ldr	r2, [pc, #100]	; (4354 <z_time_slice+0xc0>)
    42ee:	491f      	ldr	r1, [pc, #124]	; (436c <z_time_slice+0xd8>)
    42f0:	481a      	ldr	r0, [pc, #104]	; (435c <z_time_slice+0xc8>)
    42f2:	f001 ff07 	bl	6104 <printk>
    42f6:	4916      	ldr	r1, [pc, #88]	; (4350 <z_time_slice+0xbc>)
    42f8:	481d      	ldr	r0, [pc, #116]	; (4370 <z_time_slice+0xdc>)
    42fa:	f001 ff03 	bl	6104 <printk>
    42fe:	21ac      	movs	r1, #172	; 0xac
    4300:	4814      	ldr	r0, [pc, #80]	; (4354 <z_time_slice+0xc0>)
    4302:	f001 ffc9 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4306:	f385 8811 	msr	BASEPRI, r5
    430a:	f3bf 8f6f 	isb	sy
}
    430e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4310:	2100      	movs	r1, #0
    4312:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4314:	4a17      	ldr	r2, [pc, #92]	; (4374 <z_time_slice+0xe0>)
    4316:	6812      	ldr	r2, [r2, #0]
    4318:	b1ba      	cbz	r2, 434a <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    431a:	89c2      	ldrh	r2, [r0, #14]
    431c:	2a7f      	cmp	r2, #127	; 0x7f
    431e:	d814      	bhi.n	434a <z_time_slice+0xb6>
		&& !z_is_thread_prevented_from_running(thread)
    4320:	7b42      	ldrb	r2, [r0, #13]
    4322:	06d2      	lsls	r2, r2, #27
    4324:	d111      	bne.n	434a <z_time_slice+0xb6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4326:	4a14      	ldr	r2, [pc, #80]	; (4378 <z_time_slice+0xe4>)
    4328:	f990 100e 	ldrsb.w	r1, [r0, #14]
    432c:	6812      	ldr	r2, [r2, #0]
    432e:	4291      	cmp	r1, r2
    4330:	db0b      	blt.n	434a <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    4332:	4a12      	ldr	r2, [pc, #72]	; (437c <z_time_slice+0xe8>)
    4334:	4290      	cmp	r0, r2
    4336:	d008      	beq.n	434a <z_time_slice+0xb6>
		if (ticks >= _current_cpu->slice_ticks) {
    4338:	691a      	ldr	r2, [r3, #16]
    433a:	42a2      	cmp	r2, r4
    433c:	dc02      	bgt.n	4344 <z_time_slice+0xb0>
			move_thread_to_end_of_prio_q(_current);
    433e:	f7ff ff55 	bl	41ec <move_thread_to_end_of_prio_q>
    4342:	e7cc      	b.n	42de <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    4344:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
    4346:	611a      	str	r2, [r3, #16]
    4348:	e7cb      	b.n	42e2 <z_time_slice+0x4e>
    434a:	2200      	movs	r2, #0
    434c:	e7fb      	b.n	4346 <z_time_slice+0xb2>
    434e:	bf00      	nop
    4350:	0000881c 	.word	0x0000881c
    4354:	00007430 	.word	0x00007430
    4358:	00007456 	.word	0x00007456
    435c:	000072be 	.word	0x000072be
    4360:	0000746b 	.word	0x0000746b
    4364:	000087d4 	.word	0x000087d4
    4368:	00008810 	.word	0x00008810
    436c:	00007483 	.word	0x00007483
    4370:	0000749a 	.word	0x0000749a
    4374:	00008818 	.word	0x00008818
    4378:	00008814 	.word	0x00008814
    437c:	000084f0 	.word	0x000084f0

00004380 <z_set_prio>:
{
    4380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4382:	4604      	mov	r4, r0
    4384:	460d      	mov	r5, r1
	__asm__ volatile(
    4386:	f04f 0320 	mov.w	r3, #32
    438a:	f3ef 8611 	mrs	r6, BASEPRI
    438e:	f383 8811 	msr	BASEPRI, r3
    4392:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4396:	483b      	ldr	r0, [pc, #236]	; (4484 <z_set_prio+0x104>)
    4398:	f7fe ff20 	bl	31dc <z_spin_lock_valid>
    439c:	b968      	cbnz	r0, 43ba <z_set_prio+0x3a>
    439e:	2381      	movs	r3, #129	; 0x81
    43a0:	4a39      	ldr	r2, [pc, #228]	; (4488 <z_set_prio+0x108>)
    43a2:	493a      	ldr	r1, [pc, #232]	; (448c <z_set_prio+0x10c>)
    43a4:	483a      	ldr	r0, [pc, #232]	; (4490 <z_set_prio+0x110>)
    43a6:	f001 fead 	bl	6104 <printk>
    43aa:	4936      	ldr	r1, [pc, #216]	; (4484 <z_set_prio+0x104>)
    43ac:	4839      	ldr	r0, [pc, #228]	; (4494 <z_set_prio+0x114>)
    43ae:	f001 fea9 	bl	6104 <printk>
    43b2:	2181      	movs	r1, #129	; 0x81
    43b4:	4834      	ldr	r0, [pc, #208]	; (4488 <z_set_prio+0x108>)
    43b6:	f001 ff6f 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    43ba:	4832      	ldr	r0, [pc, #200]	; (4484 <z_set_prio+0x104>)
    43bc:	f7fe ff2a 	bl	3214 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    43c0:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    43c2:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    43c4:	06da      	lsls	r2, r3, #27
    43c6:	d128      	bne.n	441a <z_set_prio+0x9a>
    43c8:	69a2      	ldr	r2, [r4, #24]
    43ca:	bb32      	cbnz	r2, 441a <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    43cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43d0:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    43d2:	4621      	mov	r1, r4
    43d4:	4830      	ldr	r0, [pc, #192]	; (4498 <z_set_prio+0x118>)
    43d6:	f7ff fdfd 	bl	3fd4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    43da:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    43dc:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    43de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43e2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    43e4:	4b2d      	ldr	r3, [pc, #180]	; (449c <z_set_prio+0x11c>)
    43e6:	429c      	cmp	r4, r3
    43e8:	d10b      	bne.n	4402 <z_set_prio+0x82>
    43ea:	492d      	ldr	r1, [pc, #180]	; (44a0 <z_set_prio+0x120>)
    43ec:	4828      	ldr	r0, [pc, #160]	; (4490 <z_set_prio+0x110>)
    43ee:	f240 33a6 	movw	r3, #934	; 0x3a6
    43f2:	4a2c      	ldr	r2, [pc, #176]	; (44a4 <z_set_prio+0x124>)
    43f4:	f001 fe86 	bl	6104 <printk>
    43f8:	f240 31a6 	movw	r1, #934	; 0x3a6
    43fc:	4829      	ldr	r0, [pc, #164]	; (44a4 <z_set_prio+0x124>)
    43fe:	f001 ff4b 	bl	6298 <assert_post_action>
	return list->head == list;
    4402:	4a29      	ldr	r2, [pc, #164]	; (44a8 <z_set_prio+0x128>)
    4404:	4610      	mov	r0, r2
    4406:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    440a:	4283      	cmp	r3, r0
    440c:	d137      	bne.n	447e <z_set_prio+0xfe>
	return (node == list->tail) ? NULL : node->next;
    440e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	node->prev = tail;
    4410:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4414:	600c      	str	r4, [r1, #0]
	list->tail = node;
    4416:	6294      	str	r4, [r2, #40]	; 0x28
}
    4418:	e02c      	b.n	4474 <z_set_prio+0xf4>
			thread->base.prio = prio;
    441a:	73a5      	strb	r5, [r4, #14]
    441c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    441e:	4819      	ldr	r0, [pc, #100]	; (4484 <z_set_prio+0x104>)
    4420:	f7fe feea 	bl	31f8 <z_spin_unlock_valid>
    4424:	b968      	cbnz	r0, 4442 <z_set_prio+0xc2>
    4426:	23ac      	movs	r3, #172	; 0xac
    4428:	4a17      	ldr	r2, [pc, #92]	; (4488 <z_set_prio+0x108>)
    442a:	4920      	ldr	r1, [pc, #128]	; (44ac <z_set_prio+0x12c>)
    442c:	4818      	ldr	r0, [pc, #96]	; (4490 <z_set_prio+0x110>)
    442e:	f001 fe69 	bl	6104 <printk>
    4432:	4914      	ldr	r1, [pc, #80]	; (4484 <z_set_prio+0x104>)
    4434:	481e      	ldr	r0, [pc, #120]	; (44b0 <z_set_prio+0x130>)
    4436:	f001 fe65 	bl	6104 <printk>
    443a:	21ac      	movs	r1, #172	; 0xac
    443c:	4812      	ldr	r0, [pc, #72]	; (4488 <z_set_prio+0x108>)
    443e:	f001 ff2b 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4442:	f386 8811 	msr	BASEPRI, r6
    4446:	f3bf 8f6f 	isb	sy
}
    444a:	4620      	mov	r0, r4
    444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    444e:	428b      	cmp	r3, r1
    4450:	d0de      	beq.n	4410 <z_set_prio+0x90>
    4452:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4454:	2b00      	cmp	r3, #0
    4456:	d0db      	beq.n	4410 <z_set_prio+0x90>
	int32_t b1 = thread_1->base.prio;
    4458:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    445c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4460:	42af      	cmp	r7, r5
    4462:	d0f4      	beq.n	444e <z_set_prio+0xce>
		return b2 - b1;
    4464:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4466:	2d00      	cmp	r5, #0
    4468:	ddf1      	ble.n	444e <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
    446a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    446c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4470:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4472:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4474:	2001      	movs	r0, #1
    4476:	f7ff faf9 	bl	3a6c <update_cache>
    447a:	2401      	movs	r4, #1
    447c:	e7cf      	b.n	441e <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    447e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    4480:	e7e8      	b.n	4454 <z_set_prio+0xd4>
    4482:	bf00      	nop
    4484:	0000881c 	.word	0x0000881c
    4488:	00007430 	.word	0x00007430
    448c:	00007456 	.word	0x00007456
    4490:	000072be 	.word	0x000072be
    4494:	0000746b 	.word	0x0000746b
    4498:	000087f8 	.word	0x000087f8
    449c:	000084f0 	.word	0x000084f0
    44a0:	00007b3f 	.word	0x00007b3f
    44a4:	00007af6 	.word	0x00007af6
    44a8:	000087d4 	.word	0x000087d4
    44ac:	00007483 	.word	0x00007483
    44b0:	0000749a 	.word	0x0000749a

000044b4 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    44b4:	6883      	ldr	r3, [r0, #8]
{
    44b6:	b510      	push	{r4, lr}
    44b8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    44ba:	b95b      	cbnz	r3, 44d4 <unpend_thread_no_timeout+0x20>
    44bc:	490b      	ldr	r1, [pc, #44]	; (44ec <unpend_thread_no_timeout+0x38>)
    44be:	480c      	ldr	r0, [pc, #48]	; (44f0 <unpend_thread_no_timeout+0x3c>)
    44c0:	f240 2342 	movw	r3, #578	; 0x242
    44c4:	4a0b      	ldr	r2, [pc, #44]	; (44f4 <unpend_thread_no_timeout+0x40>)
    44c6:	f001 fe1d 	bl	6104 <printk>
    44ca:	f240 2142 	movw	r1, #578	; 0x242
    44ce:	4809      	ldr	r0, [pc, #36]	; (44f4 <unpend_thread_no_timeout+0x40>)
    44d0:	f001 fee2 	bl	6298 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    44d4:	4621      	mov	r1, r4
    44d6:	68a0      	ldr	r0, [r4, #8]
    44d8:	f7ff fd7c 	bl	3fd4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44dc:	7b63      	ldrb	r3, [r4, #13]
    44de:	f023 0302 	bic.w	r3, r3, #2
    44e2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    44e4:	2300      	movs	r3, #0
    44e6:	60a3      	str	r3, [r4, #8]
}
    44e8:	bd10      	pop	{r4, pc}
    44ea:	bf00      	nop
    44ec:	00007b91 	.word	0x00007b91
    44f0:	000072be 	.word	0x000072be
    44f4:	00007af6 	.word	0x00007af6

000044f8 <z_unpend_thread>:
{
    44f8:	b538      	push	{r3, r4, r5, lr}
    44fa:	4604      	mov	r4, r0
	__asm__ volatile(
    44fc:	f04f 0320 	mov.w	r3, #32
    4500:	f3ef 8511 	mrs	r5, BASEPRI
    4504:	f383 8811 	msr	BASEPRI, r3
    4508:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    450c:	4819      	ldr	r0, [pc, #100]	; (4574 <z_unpend_thread+0x7c>)
    450e:	f7fe fe65 	bl	31dc <z_spin_lock_valid>
    4512:	b968      	cbnz	r0, 4530 <z_unpend_thread+0x38>
    4514:	2381      	movs	r3, #129	; 0x81
    4516:	4a18      	ldr	r2, [pc, #96]	; (4578 <z_unpend_thread+0x80>)
    4518:	4918      	ldr	r1, [pc, #96]	; (457c <z_unpend_thread+0x84>)
    451a:	4819      	ldr	r0, [pc, #100]	; (4580 <z_unpend_thread+0x88>)
    451c:	f001 fdf2 	bl	6104 <printk>
    4520:	4914      	ldr	r1, [pc, #80]	; (4574 <z_unpend_thread+0x7c>)
    4522:	4818      	ldr	r0, [pc, #96]	; (4584 <z_unpend_thread+0x8c>)
    4524:	f001 fdee 	bl	6104 <printk>
    4528:	2181      	movs	r1, #129	; 0x81
    452a:	4813      	ldr	r0, [pc, #76]	; (4578 <z_unpend_thread+0x80>)
    452c:	f001 feb4 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4530:	4810      	ldr	r0, [pc, #64]	; (4574 <z_unpend_thread+0x7c>)
    4532:	f7fe fe6f 	bl	3214 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    4536:	4620      	mov	r0, r4
    4538:	f7ff ffbc 	bl	44b4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    453c:	480d      	ldr	r0, [pc, #52]	; (4574 <z_unpend_thread+0x7c>)
    453e:	f7fe fe5b 	bl	31f8 <z_spin_unlock_valid>
    4542:	b968      	cbnz	r0, 4560 <z_unpend_thread+0x68>
    4544:	23ac      	movs	r3, #172	; 0xac
    4546:	4a0c      	ldr	r2, [pc, #48]	; (4578 <z_unpend_thread+0x80>)
    4548:	490f      	ldr	r1, [pc, #60]	; (4588 <z_unpend_thread+0x90>)
    454a:	480d      	ldr	r0, [pc, #52]	; (4580 <z_unpend_thread+0x88>)
    454c:	f001 fdda 	bl	6104 <printk>
    4550:	4908      	ldr	r1, [pc, #32]	; (4574 <z_unpend_thread+0x7c>)
    4552:	480e      	ldr	r0, [pc, #56]	; (458c <z_unpend_thread+0x94>)
    4554:	f001 fdd6 	bl	6104 <printk>
    4558:	21ac      	movs	r1, #172	; 0xac
    455a:	4807      	ldr	r0, [pc, #28]	; (4578 <z_unpend_thread+0x80>)
    455c:	f001 fe9c 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4560:	f385 8811 	msr	BASEPRI, r5
    4564:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4568:	f104 0018 	add.w	r0, r4, #24
}
    456c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4570:	f000 bbba 	b.w	4ce8 <z_abort_timeout>
    4574:	0000881c 	.word	0x0000881c
    4578:	00007430 	.word	0x00007430
    457c:	00007456 	.word	0x00007456
    4580:	000072be 	.word	0x000072be
    4584:	0000746b 	.word	0x0000746b
    4588:	00007483 	.word	0x00007483
    458c:	0000749a 	.word	0x0000749a

00004590 <z_thread_timeout>:
{
    4590:	b570      	push	{r4, r5, r6, lr}
    4592:	4604      	mov	r4, r0
	__asm__ volatile(
    4594:	f04f 0320 	mov.w	r3, #32
    4598:	f3ef 8611 	mrs	r6, BASEPRI
    459c:	f383 8811 	msr	BASEPRI, r3
    45a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    45a4:	4820      	ldr	r0, [pc, #128]	; (4628 <z_thread_timeout+0x98>)
    45a6:	f7fe fe19 	bl	31dc <z_spin_lock_valid>
    45aa:	b968      	cbnz	r0, 45c8 <z_thread_timeout+0x38>
    45ac:	2381      	movs	r3, #129	; 0x81
    45ae:	4a1f      	ldr	r2, [pc, #124]	; (462c <z_thread_timeout+0x9c>)
    45b0:	491f      	ldr	r1, [pc, #124]	; (4630 <z_thread_timeout+0xa0>)
    45b2:	4820      	ldr	r0, [pc, #128]	; (4634 <z_thread_timeout+0xa4>)
    45b4:	f001 fda6 	bl	6104 <printk>
    45b8:	491b      	ldr	r1, [pc, #108]	; (4628 <z_thread_timeout+0x98>)
    45ba:	481f      	ldr	r0, [pc, #124]	; (4638 <z_thread_timeout+0xa8>)
    45bc:	f001 fda2 	bl	6104 <printk>
    45c0:	2181      	movs	r1, #129	; 0x81
    45c2:	481a      	ldr	r0, [pc, #104]	; (462c <z_thread_timeout+0x9c>)
    45c4:	f001 fe68 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    45c8:	4817      	ldr	r0, [pc, #92]	; (4628 <z_thread_timeout+0x98>)
    45ca:	f7fe fe23 	bl	3214 <z_spin_lock_set_owner>
		if (!killed) {
    45ce:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    45d2:	f013 0f28 	tst.w	r3, #40	; 0x28
    45d6:	d110      	bne.n	45fa <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    45d8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    45dc:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    45e0:	b113      	cbz	r3, 45e8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    45e2:	4628      	mov	r0, r5
    45e4:	f7ff ff66 	bl	44b4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    45e8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    45ec:	4628      	mov	r0, r5
    45ee:	f023 0314 	bic.w	r3, r3, #20
    45f2:	f804 3c0b 	strb.w	r3, [r4, #-11]
    45f6:	f7ff fa71 	bl	3adc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45fa:	480b      	ldr	r0, [pc, #44]	; (4628 <z_thread_timeout+0x98>)
    45fc:	f7fe fdfc 	bl	31f8 <z_spin_unlock_valid>
    4600:	b968      	cbnz	r0, 461e <z_thread_timeout+0x8e>
    4602:	23ac      	movs	r3, #172	; 0xac
    4604:	4a09      	ldr	r2, [pc, #36]	; (462c <z_thread_timeout+0x9c>)
    4606:	490d      	ldr	r1, [pc, #52]	; (463c <z_thread_timeout+0xac>)
    4608:	480a      	ldr	r0, [pc, #40]	; (4634 <z_thread_timeout+0xa4>)
    460a:	f001 fd7b 	bl	6104 <printk>
    460e:	4906      	ldr	r1, [pc, #24]	; (4628 <z_thread_timeout+0x98>)
    4610:	480b      	ldr	r0, [pc, #44]	; (4640 <z_thread_timeout+0xb0>)
    4612:	f001 fd77 	bl	6104 <printk>
    4616:	21ac      	movs	r1, #172	; 0xac
    4618:	4804      	ldr	r0, [pc, #16]	; (462c <z_thread_timeout+0x9c>)
    461a:	f001 fe3d 	bl	6298 <assert_post_action>
	__asm__ volatile(
    461e:	f386 8811 	msr	BASEPRI, r6
    4622:	f3bf 8f6f 	isb	sy
}
    4626:	bd70      	pop	{r4, r5, r6, pc}
    4628:	0000881c 	.word	0x0000881c
    462c:	00007430 	.word	0x00007430
    4630:	00007456 	.word	0x00007456
    4634:	000072be 	.word	0x000072be
    4638:	0000746b 	.word	0x0000746b
    463c:	00007483 	.word	0x00007483
    4640:	0000749a 	.word	0x0000749a

00004644 <z_unpend_first_thread>:
{
    4644:	b570      	push	{r4, r5, r6, lr}
    4646:	4605      	mov	r5, r0
	__asm__ volatile(
    4648:	f04f 0320 	mov.w	r3, #32
    464c:	f3ef 8611 	mrs	r6, BASEPRI
    4650:	f383 8811 	msr	BASEPRI, r3
    4654:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4658:	481c      	ldr	r0, [pc, #112]	; (46cc <z_unpend_first_thread+0x88>)
    465a:	f7fe fdbf 	bl	31dc <z_spin_lock_valid>
    465e:	b968      	cbnz	r0, 467c <z_unpend_first_thread+0x38>
    4660:	2381      	movs	r3, #129	; 0x81
    4662:	4a1b      	ldr	r2, [pc, #108]	; (46d0 <z_unpend_first_thread+0x8c>)
    4664:	491b      	ldr	r1, [pc, #108]	; (46d4 <z_unpend_first_thread+0x90>)
    4666:	481c      	ldr	r0, [pc, #112]	; (46d8 <z_unpend_first_thread+0x94>)
    4668:	f001 fd4c 	bl	6104 <printk>
    466c:	4917      	ldr	r1, [pc, #92]	; (46cc <z_unpend_first_thread+0x88>)
    466e:	481b      	ldr	r0, [pc, #108]	; (46dc <z_unpend_first_thread+0x98>)
    4670:	f001 fd48 	bl	6104 <printk>
    4674:	2181      	movs	r1, #129	; 0x81
    4676:	4816      	ldr	r0, [pc, #88]	; (46d0 <z_unpend_first_thread+0x8c>)
    4678:	f001 fe0e 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    467c:	4813      	ldr	r0, [pc, #76]	; (46cc <z_unpend_first_thread+0x88>)
    467e:	f7fe fdc9 	bl	3214 <z_spin_lock_set_owner>
	return list->head == list;
    4682:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4684:	42a5      	cmp	r5, r4
    4686:	d01f      	beq.n	46c8 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    4688:	b134      	cbz	r4, 4698 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    468a:	4620      	mov	r0, r4
    468c:	f7ff ff12 	bl	44b4 <unpend_thread_no_timeout>
    4690:	f104 0018 	add.w	r0, r4, #24
    4694:	f000 fb28 	bl	4ce8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4698:	480c      	ldr	r0, [pc, #48]	; (46cc <z_unpend_first_thread+0x88>)
    469a:	f7fe fdad 	bl	31f8 <z_spin_unlock_valid>
    469e:	b968      	cbnz	r0, 46bc <z_unpend_first_thread+0x78>
    46a0:	23ac      	movs	r3, #172	; 0xac
    46a2:	4a0b      	ldr	r2, [pc, #44]	; (46d0 <z_unpend_first_thread+0x8c>)
    46a4:	490e      	ldr	r1, [pc, #56]	; (46e0 <z_unpend_first_thread+0x9c>)
    46a6:	480c      	ldr	r0, [pc, #48]	; (46d8 <z_unpend_first_thread+0x94>)
    46a8:	f001 fd2c 	bl	6104 <printk>
    46ac:	4907      	ldr	r1, [pc, #28]	; (46cc <z_unpend_first_thread+0x88>)
    46ae:	480d      	ldr	r0, [pc, #52]	; (46e4 <z_unpend_first_thread+0xa0>)
    46b0:	f001 fd28 	bl	6104 <printk>
    46b4:	21ac      	movs	r1, #172	; 0xac
    46b6:	4806      	ldr	r0, [pc, #24]	; (46d0 <z_unpend_first_thread+0x8c>)
    46b8:	f001 fdee 	bl	6298 <assert_post_action>
	__asm__ volatile(
    46bc:	f386 8811 	msr	BASEPRI, r6
    46c0:	f3bf 8f6f 	isb	sy
}
    46c4:	4620      	mov	r0, r4
    46c6:	bd70      	pop	{r4, r5, r6, pc}
    46c8:	2400      	movs	r4, #0
    46ca:	e7e5      	b.n	4698 <z_unpend_first_thread+0x54>
    46cc:	0000881c 	.word	0x0000881c
    46d0:	00007430 	.word	0x00007430
    46d4:	00007456 	.word	0x00007456
    46d8:	000072be 	.word	0x000072be
    46dc:	0000746b 	.word	0x0000746b
    46e0:	00007483 	.word	0x00007483
    46e4:	0000749a 	.word	0x0000749a

000046e8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    46e8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    46ea:	4b04      	ldr	r3, [pc, #16]	; (46fc <z_sched_init+0x14>)
    46ec:	4608      	mov	r0, r1
    46ee:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    46f2:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    46f6:	f7ff ba41 	b.w	3b7c <k_sched_time_slice_set>
    46fa:	bf00      	nop
    46fc:	000087d4 	.word	0x000087d4

00004700 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4702:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4706:	b173      	cbz	r3, 4726 <z_impl_k_yield+0x26>
    4708:	4940      	ldr	r1, [pc, #256]	; (480c <z_impl_k_yield+0x10c>)
    470a:	f240 43a1 	movw	r3, #1185	; 0x4a1
    470e:	4a40      	ldr	r2, [pc, #256]	; (4810 <z_impl_k_yield+0x110>)
    4710:	4840      	ldr	r0, [pc, #256]	; (4814 <z_impl_k_yield+0x114>)
    4712:	f001 fcf7 	bl	6104 <printk>
    4716:	4840      	ldr	r0, [pc, #256]	; (4818 <z_impl_k_yield+0x118>)
    4718:	f001 fcf4 	bl	6104 <printk>
    471c:	f240 41a1 	movw	r1, #1185	; 0x4a1
    4720:	483b      	ldr	r0, [pc, #236]	; (4810 <z_impl_k_yield+0x110>)
    4722:	f001 fdb9 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4726:	f04f 0320 	mov.w	r3, #32
    472a:	f3ef 8611 	mrs	r6, BASEPRI
    472e:	f383 8811 	msr	BASEPRI, r3
    4732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4736:	4839      	ldr	r0, [pc, #228]	; (481c <z_impl_k_yield+0x11c>)
    4738:	f7fe fd50 	bl	31dc <z_spin_lock_valid>
    473c:	b968      	cbnz	r0, 475a <z_impl_k_yield+0x5a>
    473e:	2381      	movs	r3, #129	; 0x81
    4740:	4a37      	ldr	r2, [pc, #220]	; (4820 <z_impl_k_yield+0x120>)
    4742:	4938      	ldr	r1, [pc, #224]	; (4824 <z_impl_k_yield+0x124>)
    4744:	4833      	ldr	r0, [pc, #204]	; (4814 <z_impl_k_yield+0x114>)
    4746:	f001 fcdd 	bl	6104 <printk>
    474a:	4934      	ldr	r1, [pc, #208]	; (481c <z_impl_k_yield+0x11c>)
    474c:	4836      	ldr	r0, [pc, #216]	; (4828 <z_impl_k_yield+0x128>)
    474e:	f001 fcd9 	bl	6104 <printk>
    4752:	2181      	movs	r1, #129	; 0x81
    4754:	4832      	ldr	r0, [pc, #200]	; (4820 <z_impl_k_yield+0x120>)
    4756:	f001 fd9f 	bl	6298 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    475a:	4d34      	ldr	r5, [pc, #208]	; (482c <z_impl_k_yield+0x12c>)
	z_spin_lock_set_owner(l);
    475c:	482f      	ldr	r0, [pc, #188]	; (481c <z_impl_k_yield+0x11c>)
    475e:	f7fe fd59 	bl	3214 <z_spin_lock_set_owner>
    4762:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    4764:	f105 0024 	add.w	r0, r5, #36	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4768:	7b4b      	ldrb	r3, [r1, #13]
    476a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    476e:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    4770:	f7ff fc30 	bl	3fd4 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    4774:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4776:	7b63      	ldrb	r3, [r4, #13]
    4778:	f063 037f 	orn	r3, r3, #127	; 0x7f
    477c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    477e:	4b2c      	ldr	r3, [pc, #176]	; (4830 <z_impl_k_yield+0x130>)
    4780:	429c      	cmp	r4, r3
    4782:	d10b      	bne.n	479c <z_impl_k_yield+0x9c>
    4784:	492b      	ldr	r1, [pc, #172]	; (4834 <z_impl_k_yield+0x134>)
    4786:	4823      	ldr	r0, [pc, #140]	; (4814 <z_impl_k_yield+0x114>)
    4788:	f240 33a6 	movw	r3, #934	; 0x3a6
    478c:	4a20      	ldr	r2, [pc, #128]	; (4810 <z_impl_k_yield+0x110>)
    478e:	f001 fcb9 	bl	6104 <printk>
    4792:	f240 31a6 	movw	r1, #934	; 0x3a6
    4796:	481e      	ldr	r0, [pc, #120]	; (4810 <z_impl_k_yield+0x110>)
    4798:	f001 fd7e 	bl	6298 <assert_post_action>
	return list->head == list;
    479c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    479e:	4826      	ldr	r0, [pc, #152]	; (4838 <z_impl_k_yield+0x138>)
	return (node == list->tail) ? NULL : node->next;
    47a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47a2:	4283      	cmp	r3, r0
    47a4:	d107      	bne.n	47b6 <z_impl_k_yield+0xb6>
	node->prev = tail;
    47a6:	e9c4 0200 	strd	r0, r2, [r4]
	tail->next = node;
    47aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    47ac:	62ac      	str	r4, [r5, #40]	; 0x28
}
    47ae:	e012      	b.n	47d6 <z_impl_k_yield+0xd6>
	return (node == list->tail) ? NULL : node->next;
    47b0:	429a      	cmp	r2, r3
    47b2:	d0f8      	beq.n	47a6 <z_impl_k_yield+0xa6>
    47b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47b6:	2b00      	cmp	r3, #0
    47b8:	d0f5      	beq.n	47a6 <z_impl_k_yield+0xa6>
	int32_t b1 = thread_1->base.prio;
    47ba:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    47be:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    47c2:	428f      	cmp	r7, r1
    47c4:	d0f4      	beq.n	47b0 <z_impl_k_yield+0xb0>
		return b2 - b1;
    47c6:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    47c8:	2900      	cmp	r1, #0
    47ca:	ddf1      	ble.n	47b0 <z_impl_k_yield+0xb0>
	sys_dnode_t *const prev = successor->prev;
    47cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    47ce:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    47d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    47d4:	605c      	str	r4, [r3, #4]
	update_cache(1);
    47d6:	2001      	movs	r0, #1
    47d8:	f7ff f948 	bl	3a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    47dc:	480f      	ldr	r0, [pc, #60]	; (481c <z_impl_k_yield+0x11c>)
    47de:	f7fe fd0b 	bl	31f8 <z_spin_unlock_valid>
    47e2:	b968      	cbnz	r0, 4800 <z_impl_k_yield+0x100>
    47e4:	23c3      	movs	r3, #195	; 0xc3
    47e6:	4a0e      	ldr	r2, [pc, #56]	; (4820 <z_impl_k_yield+0x120>)
    47e8:	4914      	ldr	r1, [pc, #80]	; (483c <z_impl_k_yield+0x13c>)
    47ea:	480a      	ldr	r0, [pc, #40]	; (4814 <z_impl_k_yield+0x114>)
    47ec:	f001 fc8a 	bl	6104 <printk>
    47f0:	490a      	ldr	r1, [pc, #40]	; (481c <z_impl_k_yield+0x11c>)
    47f2:	4813      	ldr	r0, [pc, #76]	; (4840 <z_impl_k_yield+0x140>)
    47f4:	f001 fc86 	bl	6104 <printk>
    47f8:	21c3      	movs	r1, #195	; 0xc3
    47fa:	4809      	ldr	r0, [pc, #36]	; (4820 <z_impl_k_yield+0x120>)
    47fc:	f001 fd4c 	bl	6298 <assert_post_action>
    4800:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    4802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4806:	f001 be00 	b.w	640a <z_swap_irqlock>
    480a:	bf00      	nop
    480c:	0000798c 	.word	0x0000798c
    4810:	00007af6 	.word	0x00007af6
    4814:	000072be 	.word	0x000072be
    4818:	00007ac2 	.word	0x00007ac2
    481c:	0000881c 	.word	0x0000881c
    4820:	00007430 	.word	0x00007430
    4824:	00007456 	.word	0x00007456
    4828:	0000746b 	.word	0x0000746b
    482c:	000087d4 	.word	0x000087d4
    4830:	000084f0 	.word	0x000084f0
    4834:	00007b3f 	.word	0x00007b3f
    4838:	000087f8 	.word	0x000087f8
    483c:	00007483 	.word	0x00007483
    4840:	0000749a 	.word	0x0000749a

00004844 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4844:	4b01      	ldr	r3, [pc, #4]	; (484c <z_impl_k_current_get+0x8>)
    4846:	6898      	ldr	r0, [r3, #8]
    4848:	4770      	bx	lr
    484a:	bf00      	nop
    484c:	000087d4 	.word	0x000087d4

00004850 <z_impl_k_is_preempt_thread>:
    4850:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    4854:	b93b      	cbnz	r3, 4866 <z_impl_k_is_preempt_thread+0x16>
    4856:	4b05      	ldr	r3, [pc, #20]	; (486c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4858:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    485a:	89d8      	ldrh	r0, [r3, #14]
    485c:	287f      	cmp	r0, #127	; 0x7f
    485e:	bf8c      	ite	hi
    4860:	2000      	movhi	r0, #0
    4862:	2001      	movls	r0, #1
    4864:	4770      	bx	lr
    4866:	2000      	movs	r0, #0
}
    4868:	4770      	bx	lr
    486a:	bf00      	nop
    486c:	000087d4 	.word	0x000087d4

00004870 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4874:	4604      	mov	r4, r0
    4876:	f04f 0320 	mov.w	r3, #32
    487a:	f3ef 8611 	mrs	r6, BASEPRI
    487e:	f383 8811 	msr	BASEPRI, r3
    4882:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4886:	4849      	ldr	r0, [pc, #292]	; (49ac <z_thread_abort+0x13c>)
    4888:	f7fe fca8 	bl	31dc <z_spin_lock_valid>
    488c:	b968      	cbnz	r0, 48aa <z_thread_abort+0x3a>
    488e:	2381      	movs	r3, #129	; 0x81
    4890:	4a47      	ldr	r2, [pc, #284]	; (49b0 <z_thread_abort+0x140>)
    4892:	4948      	ldr	r1, [pc, #288]	; (49b4 <z_thread_abort+0x144>)
    4894:	4848      	ldr	r0, [pc, #288]	; (49b8 <z_thread_abort+0x148>)
    4896:	f001 fc35 	bl	6104 <printk>
    489a:	4944      	ldr	r1, [pc, #272]	; (49ac <z_thread_abort+0x13c>)
    489c:	4847      	ldr	r0, [pc, #284]	; (49bc <z_thread_abort+0x14c>)
    489e:	f001 fc31 	bl	6104 <printk>
    48a2:	2181      	movs	r1, #129	; 0x81
    48a4:	4842      	ldr	r0, [pc, #264]	; (49b0 <z_thread_abort+0x140>)
    48a6:	f001 fcf7 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    48aa:	4840      	ldr	r0, [pc, #256]	; (49ac <z_thread_abort+0x13c>)
    48ac:	f7fe fcb2 	bl	3214 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    48b0:	7b63      	ldrb	r3, [r4, #13]
    48b2:	071a      	lsls	r2, r3, #28
    48b4:	d517      	bpl.n	48e6 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48b6:	483d      	ldr	r0, [pc, #244]	; (49ac <z_thread_abort+0x13c>)
    48b8:	f7fe fc9e 	bl	31f8 <z_spin_unlock_valid>
    48bc:	b968      	cbnz	r0, 48da <z_thread_abort+0x6a>
    48be:	23ac      	movs	r3, #172	; 0xac
    48c0:	4a3b      	ldr	r2, [pc, #236]	; (49b0 <z_thread_abort+0x140>)
    48c2:	493f      	ldr	r1, [pc, #252]	; (49c0 <z_thread_abort+0x150>)
    48c4:	483c      	ldr	r0, [pc, #240]	; (49b8 <z_thread_abort+0x148>)
    48c6:	f001 fc1d 	bl	6104 <printk>
    48ca:	4938      	ldr	r1, [pc, #224]	; (49ac <z_thread_abort+0x13c>)
    48cc:	483d      	ldr	r0, [pc, #244]	; (49c4 <z_thread_abort+0x154>)
    48ce:	f001 fc19 	bl	6104 <printk>
    48d2:	21ac      	movs	r1, #172	; 0xac
    48d4:	4836      	ldr	r0, [pc, #216]	; (49b0 <z_thread_abort+0x140>)
    48d6:	f001 fcdf 	bl	6298 <assert_post_action>
	__asm__ volatile(
    48da:	f386 8811 	msr	BASEPRI, r6
    48de:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    48e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    48e6:	f023 0220 	bic.w	r2, r3, #32
    48ea:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    48ee:	09d2      	lsrs	r2, r2, #7
    48f0:	d145      	bne.n	497e <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    48f2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    48f4:	68a3      	ldr	r3, [r4, #8]
    48f6:	b113      	cbz	r3, 48fe <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    48f8:	4620      	mov	r0, r4
    48fa:	f7ff fddb 	bl	44b4 <unpend_thread_no_timeout>
    48fe:	f104 0018 	add.w	r0, r4, #24
    4902:	f000 f9f1 	bl	4ce8 <z_abort_timeout>
    4906:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    490a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    490e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4910:	42bd      	cmp	r5, r7
    4912:	d001      	beq.n	4918 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4914:	2d00      	cmp	r5, #0
    4916:	d13c      	bne.n	4992 <z_thread_abort+0x122>
		update_cache(1);
    4918:	2001      	movs	r0, #1
    491a:	f7ff f8a7 	bl	3a6c <update_cache>
		z_thread_monitor_exit(thread);
    491e:	4620      	mov	r0, r4
    4920:	f7fe fc80 	bl	3224 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    4924:	4b28      	ldr	r3, [pc, #160]	; (49c8 <z_thread_abort+0x158>)
    4926:	689b      	ldr	r3, [r3, #8]
    4928:	42a3      	cmp	r3, r4
    492a:	d1c4      	bne.n	48b6 <z_thread_abort+0x46>
    492c:	f3ef 8305 	mrs	r3, IPSR
    4930:	2b00      	cmp	r3, #0
    4932:	d1c0      	bne.n	48b6 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4934:	481d      	ldr	r0, [pc, #116]	; (49ac <z_thread_abort+0x13c>)
    4936:	f7fe fc5f 	bl	31f8 <z_spin_unlock_valid>
    493a:	b968      	cbnz	r0, 4958 <z_thread_abort+0xe8>
    493c:	23c3      	movs	r3, #195	; 0xc3
    493e:	4a1c      	ldr	r2, [pc, #112]	; (49b0 <z_thread_abort+0x140>)
    4940:	491f      	ldr	r1, [pc, #124]	; (49c0 <z_thread_abort+0x150>)
    4942:	481d      	ldr	r0, [pc, #116]	; (49b8 <z_thread_abort+0x148>)
    4944:	f001 fbde 	bl	6104 <printk>
    4948:	4918      	ldr	r1, [pc, #96]	; (49ac <z_thread_abort+0x13c>)
    494a:	481e      	ldr	r0, [pc, #120]	; (49c4 <z_thread_abort+0x154>)
    494c:	f001 fbda 	bl	6104 <printk>
    4950:	21c3      	movs	r1, #195	; 0xc3
    4952:	4817      	ldr	r0, [pc, #92]	; (49b0 <z_thread_abort+0x140>)
    4954:	f001 fca0 	bl	6298 <assert_post_action>
    4958:	4630      	mov	r0, r6
    495a:	f001 fd56 	bl	640a <z_swap_irqlock>
		__ASSERT(false, "aborted _current back from dead");
    495e:	f240 6301 	movw	r3, #1537	; 0x601
    4962:	4a1a      	ldr	r2, [pc, #104]	; (49cc <z_thread_abort+0x15c>)
    4964:	491a      	ldr	r1, [pc, #104]	; (49d0 <z_thread_abort+0x160>)
    4966:	4814      	ldr	r0, [pc, #80]	; (49b8 <z_thread_abort+0x148>)
    4968:	f001 fbcc 	bl	6104 <printk>
    496c:	4819      	ldr	r0, [pc, #100]	; (49d4 <z_thread_abort+0x164>)
    496e:	f001 fbc9 	bl	6104 <printk>
    4972:	f240 6101 	movw	r1, #1537	; 0x601
    4976:	4815      	ldr	r0, [pc, #84]	; (49cc <z_thread_abort+0x15c>)
    4978:	f001 fc8e 	bl	6298 <assert_post_action>
    497c:	e79b      	b.n	48b6 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    497e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4982:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    4986:	4621      	mov	r1, r4
    4988:	4813      	ldr	r0, [pc, #76]	; (49d8 <z_thread_abort+0x168>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    498a:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    498c:	f7ff fb22 	bl	3fd4 <z_priq_dumb_remove>
}
    4990:	e7b0      	b.n	48f4 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    4992:	4628      	mov	r0, r5
    4994:	f7ff fd8e 	bl	44b4 <unpend_thread_no_timeout>
    4998:	f105 0018 	add.w	r0, r5, #24
    499c:	f000 f9a4 	bl	4ce8 <z_abort_timeout>
		ready_thread(thread);
    49a0:	4628      	mov	r0, r5
    49a2:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
    49a6:	f7ff f899 	bl	3adc <ready_thread>
    49aa:	e7b0      	b.n	490e <z_thread_abort+0x9e>
    49ac:	0000881c 	.word	0x0000881c
    49b0:	00007430 	.word	0x00007430
    49b4:	00007456 	.word	0x00007456
    49b8:	000072be 	.word	0x000072be
    49bc:	0000746b 	.word	0x0000746b
    49c0:	00007483 	.word	0x00007483
    49c4:	0000749a 	.word	0x0000749a
    49c8:	000087d4 	.word	0x000087d4
    49cc:	00007af6 	.word	0x00007af6
    49d0:	00007a37 	.word	0x00007a37
    49d4:	00007ba8 	.word	0x00007ba8
    49d8:	000087f8 	.word	0x000087f8

000049dc <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    49dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49e0:	4605      	mov	r5, r0
    49e2:	460f      	mov	r7, r1
    49e4:	4616      	mov	r6, r2
	__asm__ volatile(
    49e6:	f04f 0320 	mov.w	r3, #32
    49ea:	f3ef 8811 	mrs	r8, BASEPRI
    49ee:	f383 8811 	msr	BASEPRI, r3
    49f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    49f6:	4821      	ldr	r0, [pc, #132]	; (4a7c <z_sched_wake+0xa0>)
    49f8:	f7fe fbf0 	bl	31dc <z_spin_lock_valid>
    49fc:	b968      	cbnz	r0, 4a1a <z_sched_wake+0x3e>
    49fe:	2381      	movs	r3, #129	; 0x81
    4a00:	4a1f      	ldr	r2, [pc, #124]	; (4a80 <z_sched_wake+0xa4>)
    4a02:	4920      	ldr	r1, [pc, #128]	; (4a84 <z_sched_wake+0xa8>)
    4a04:	4820      	ldr	r0, [pc, #128]	; (4a88 <z_sched_wake+0xac>)
    4a06:	f001 fb7d 	bl	6104 <printk>
    4a0a:	491c      	ldr	r1, [pc, #112]	; (4a7c <z_sched_wake+0xa0>)
    4a0c:	481f      	ldr	r0, [pc, #124]	; (4a8c <z_sched_wake+0xb0>)
    4a0e:	f001 fb79 	bl	6104 <printk>
    4a12:	2181      	movs	r1, #129	; 0x81
    4a14:	481a      	ldr	r0, [pc, #104]	; (4a80 <z_sched_wake+0xa4>)
    4a16:	f001 fc3f 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a1a:	4818      	ldr	r0, [pc, #96]	; (4a7c <z_sched_wake+0xa0>)
    4a1c:	f7fe fbfa 	bl	3214 <z_spin_lock_set_owner>
	return list->head == list;
    4a20:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a22:	42a5      	cmp	r5, r4
    4a24:	d027      	beq.n	4a76 <z_sched_wake+0x9a>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
    4a26:	b16c      	cbz	r4, 4a44 <z_sched_wake+0x68>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    4a28:	4620      	mov	r0, r4
    4a2a:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4a2e:	6166      	str	r6, [r4, #20]
    4a30:	f7ff fd40 	bl	44b4 <unpend_thread_no_timeout>
    4a34:	f104 0018 	add.w	r0, r4, #24
    4a38:	f000 f956 	bl	4ce8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    4a3c:	4620      	mov	r0, r4
    4a3e:	f7ff f84d 	bl	3adc <ready_thread>
			ret = true;
    4a42:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a44:	480d      	ldr	r0, [pc, #52]	; (4a7c <z_sched_wake+0xa0>)
    4a46:	f7fe fbd7 	bl	31f8 <z_spin_unlock_valid>
    4a4a:	b968      	cbnz	r0, 4a68 <z_sched_wake+0x8c>
    4a4c:	23ac      	movs	r3, #172	; 0xac
    4a4e:	4a0c      	ldr	r2, [pc, #48]	; (4a80 <z_sched_wake+0xa4>)
    4a50:	490f      	ldr	r1, [pc, #60]	; (4a90 <z_sched_wake+0xb4>)
    4a52:	480d      	ldr	r0, [pc, #52]	; (4a88 <z_sched_wake+0xac>)
    4a54:	f001 fb56 	bl	6104 <printk>
    4a58:	4908      	ldr	r1, [pc, #32]	; (4a7c <z_sched_wake+0xa0>)
    4a5a:	480e      	ldr	r0, [pc, #56]	; (4a94 <z_sched_wake+0xb8>)
    4a5c:	f001 fb52 	bl	6104 <printk>
    4a60:	21ac      	movs	r1, #172	; 0xac
    4a62:	4807      	ldr	r0, [pc, #28]	; (4a80 <z_sched_wake+0xa4>)
    4a64:	f001 fc18 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4a68:	f388 8811 	msr	BASEPRI, r8
    4a6c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4a70:	4620      	mov	r0, r4
    4a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool ret = false;
    4a76:	2400      	movs	r4, #0
    4a78:	e7e4      	b.n	4a44 <z_sched_wake+0x68>
    4a7a:	bf00      	nop
    4a7c:	0000881c 	.word	0x0000881c
    4a80:	00007430 	.word	0x00007430
    4a84:	00007456 	.word	0x00007456
    4a88:	000072be 	.word	0x000072be
    4a8c:	0000746b 	.word	0x0000746b
    4a90:	00007483 	.word	0x00007483
    4a94:	0000749a 	.word	0x0000749a

00004a98 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4a98:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4a9a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    4a9e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4aa0:	e9cd 6700 	strd	r6, r7, [sp]
    4aa4:	f7ff fb72 	bl	418c <z_pend_curr>

	if (data != NULL) {
    4aa8:	b11c      	cbz	r4, 4ab2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    4aaa:	4b03      	ldr	r3, [pc, #12]	; (4ab8 <z_sched_wait+0x20>)
    4aac:	689b      	ldr	r3, [r3, #8]
    4aae:	695b      	ldr	r3, [r3, #20]
    4ab0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    4ab2:	b002      	add	sp, #8
    4ab4:	bdd0      	pop	{r4, r6, r7, pc}
    4ab6:	bf00      	nop
    4ab8:	000087d4 	.word	0x000087d4

00004abc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4abc:	4b03      	ldr	r3, [pc, #12]	; (4acc <elapsed+0x10>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	b90b      	cbnz	r3, 4ac6 <elapsed+0xa>
    4ac2:	f7fc bd57 	b.w	1574 <sys_clock_elapsed>
}
    4ac6:	2000      	movs	r0, #0
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	00008820 	.word	0x00008820

00004ad0 <next_timeout>:
	return list->head == list;
    4ad0:	4b12      	ldr	r3, [pc, #72]	; (4b1c <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
    4ad2:	b510      	push	{r4, lr}
    4ad4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ad6:	429c      	cmp	r4, r3
    4ad8:	d104      	bne.n	4ae4 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4ada:	f7ff ffef 	bl	4abc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4ade:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4ae2:	e012      	b.n	4b0a <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
    4ae4:	f7ff ffea 	bl	4abc <elapsed>
    4ae8:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4aea:	2c00      	cmp	r4, #0
    4aec:	d0f7      	beq.n	4ade <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4aee:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    4af2:	1a40      	subs	r0, r0, r1
    4af4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4af8:	2801      	cmp	r0, #1
    4afa:	f173 0200 	sbcs.w	r2, r3, #0
    4afe:	db0b      	blt.n	4b18 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4b00:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    4b04:	f173 0300 	sbcs.w	r3, r3, #0
    4b08:	dae9      	bge.n	4ade <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4b0a:	4b05      	ldr	r3, [pc, #20]	; (4b20 <next_timeout+0x50>)
    4b0c:	691b      	ldr	r3, [r3, #16]
    4b0e:	b113      	cbz	r3, 4b16 <next_timeout+0x46>
    4b10:	4298      	cmp	r0, r3
    4b12:	bfa8      	it	ge
    4b14:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4b16:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4b18:	2000      	movs	r0, #0
    4b1a:	e7f6      	b.n	4b0a <next_timeout+0x3a>
    4b1c:	00008408 	.word	0x00008408
    4b20:	000087d4 	.word	0x000087d4

00004b24 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    4b24:	4a0b      	ldr	r2, [pc, #44]	; (4b54 <remove_timeout+0x30>)
{
    4b26:	b530      	push	{r4, r5, lr}
    4b28:	6852      	ldr	r2, [r2, #4]
    4b2a:	6803      	ldr	r3, [r0, #0]
    4b2c:	4290      	cmp	r0, r2
    4b2e:	d009      	beq.n	4b44 <remove_timeout+0x20>
	if (next(t) != NULL) {
    4b30:	b143      	cbz	r3, 4b44 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    4b32:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4b36:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4b3a:	1912      	adds	r2, r2, r4
    4b3c:	eb41 0105 	adc.w	r1, r1, r5
    4b40:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    4b44:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    4b46:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4b48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4b4a:	2300      	movs	r3, #0
	node->prev = NULL;
    4b4c:	e9c0 3300 	strd	r3, r3, [r0]
}
    4b50:	bd30      	pop	{r4, r5, pc}
    4b52:	bf00      	nop
    4b54:	00008408 	.word	0x00008408

00004b58 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b5c:	bf08      	it	eq
    4b5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b66:	4604      	mov	r4, r0
    4b68:	460e      	mov	r6, r1
    4b6a:	461d      	mov	r5, r3
    4b6c:	4617      	mov	r7, r2
    4b6e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b70:	f000 8095 	beq.w	4c9e <z_add_timeout+0x146>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    4b74:	6803      	ldr	r3, [r0, #0]
    4b76:	b163      	cbz	r3, 4b92 <z_add_timeout+0x3a>
    4b78:	494e      	ldr	r1, [pc, #312]	; (4cb4 <z_add_timeout+0x15c>)
    4b7a:	235d      	movs	r3, #93	; 0x5d
    4b7c:	4a4e      	ldr	r2, [pc, #312]	; (4cb8 <z_add_timeout+0x160>)
    4b7e:	484f      	ldr	r0, [pc, #316]	; (4cbc <z_add_timeout+0x164>)
    4b80:	f001 fac0 	bl	6104 <printk>
    4b84:	484e      	ldr	r0, [pc, #312]	; (4cc0 <z_add_timeout+0x168>)
    4b86:	f001 fabd 	bl	6104 <printk>
    4b8a:	215d      	movs	r1, #93	; 0x5d
    4b8c:	484a      	ldr	r0, [pc, #296]	; (4cb8 <z_add_timeout+0x160>)
    4b8e:	f001 fb83 	bl	6298 <assert_post_action>
	to->fn = fn;
    4b92:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    4b94:	f04f 0320 	mov.w	r3, #32
    4b98:	f3ef 8611 	mrs	r6, BASEPRI
    4b9c:	f383 8811 	msr	BASEPRI, r3
    4ba0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ba4:	4847      	ldr	r0, [pc, #284]	; (4cc4 <z_add_timeout+0x16c>)
    4ba6:	f7fe fb19 	bl	31dc <z_spin_lock_valid>
    4baa:	b968      	cbnz	r0, 4bc8 <z_add_timeout+0x70>
    4bac:	2381      	movs	r3, #129	; 0x81
    4bae:	4a46      	ldr	r2, [pc, #280]	; (4cc8 <z_add_timeout+0x170>)
    4bb0:	4946      	ldr	r1, [pc, #280]	; (4ccc <z_add_timeout+0x174>)
    4bb2:	4842      	ldr	r0, [pc, #264]	; (4cbc <z_add_timeout+0x164>)
    4bb4:	f001 faa6 	bl	6104 <printk>
    4bb8:	4942      	ldr	r1, [pc, #264]	; (4cc4 <z_add_timeout+0x16c>)
    4bba:	4845      	ldr	r0, [pc, #276]	; (4cd0 <z_add_timeout+0x178>)
    4bbc:	f001 faa2 	bl	6104 <printk>
    4bc0:	2181      	movs	r1, #129	; 0x81
    4bc2:	4841      	ldr	r0, [pc, #260]	; (4cc8 <z_add_timeout+0x170>)
    4bc4:	f001 fb68 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4bc8:	483e      	ldr	r0, [pc, #248]	; (4cc4 <z_add_timeout+0x16c>)
    4bca:	f7fe fb23 	bl	3214 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4bce:	f06f 0301 	mvn.w	r3, #1
    4bd2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4bd6:	1bda      	subs	r2, r3, r7
    4bd8:	eb6c 0208 	sbc.w	r2, ip, r8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4bdc:	2a00      	cmp	r2, #0
    4bde:	db1e      	blt.n	4c1e <z_add_timeout+0xc6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4be0:	493c      	ldr	r1, [pc, #240]	; (4cd4 <z_add_timeout+0x17c>)
    4be2:	e9d1 2000 	ldrd	r2, r0, [r1]
    4be6:	1a9b      	subs	r3, r3, r2
    4be8:	eb6c 0000 	sbc.w	r0, ip, r0
    4bec:	1bda      	subs	r2, r3, r7
    4bee:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    4bf2:	2a01      	cmp	r2, #1
    4bf4:	f170 0300 	sbcs.w	r3, r0, #0
    4bf8:	da01      	bge.n	4bfe <z_add_timeout+0xa6>
    4bfa:	2201      	movs	r2, #1
    4bfc:	2000      	movs	r0, #0
    4bfe:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
    4c02:	4a35      	ldr	r2, [pc, #212]	; (4cd8 <z_add_timeout+0x180>)
    4c04:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    4c06:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c0a:	4293      	cmp	r3, r2
    4c0c:	bf08      	it	eq
    4c0e:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    4c10:	b973      	cbnz	r3, 4c30 <z_add_timeout+0xd8>
	node->prev = tail;
    4c12:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    4c16:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4c1a:	6054      	str	r4, [r2, #4]
}
    4c1c:	e01a      	b.n	4c54 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
    4c1e:	f7ff ff4d 	bl	4abc <elapsed>
    4c22:	1c7a      	adds	r2, r7, #1
    4c24:	f145 0500 	adc.w	r5, r5, #0
    4c28:	1812      	adds	r2, r2, r0
    4c2a:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4c2e:	e7e6      	b.n	4bfe <z_add_timeout+0xa6>
			if (t->dticks > to->dticks) {
    4c30:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    4c34:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    4c38:	4281      	cmp	r1, r0
    4c3a:	eb75 0e07 	sbcs.w	lr, r5, r7
    4c3e:	da30      	bge.n	4ca2 <z_add_timeout+0x14a>
				t->dticks -= to->dticks;
    4c40:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    4c42:	6859      	ldr	r1, [r3, #4]
    4c44:	eb67 0705 	sbc.w	r7, r7, r5
    4c48:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    4c4c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4c50:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4c52:	605c      	str	r4, [r3, #4]
	return list->head == list;
    4c54:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c56:	4293      	cmp	r3, r2
    4c58:	d00b      	beq.n	4c72 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4c5a:	429c      	cmp	r4, r3
    4c5c:	d109      	bne.n	4c72 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4c5e:	f7ff ff37 	bl	4ad0 <next_timeout>

			if (next_time == 0 ||
    4c62:	b118      	cbz	r0, 4c6c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
    4c64:	4b1d      	ldr	r3, [pc, #116]	; (4cdc <z_add_timeout+0x184>)
			if (next_time == 0 ||
    4c66:	691b      	ldr	r3, [r3, #16]
    4c68:	4283      	cmp	r3, r0
    4c6a:	d002      	beq.n	4c72 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
    4c6c:	2100      	movs	r1, #0
    4c6e:	f7fc fbdb 	bl	1428 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c72:	4814      	ldr	r0, [pc, #80]	; (4cc4 <z_add_timeout+0x16c>)
    4c74:	f7fe fac0 	bl	31f8 <z_spin_unlock_valid>
    4c78:	b968      	cbnz	r0, 4c96 <z_add_timeout+0x13e>
    4c7a:	23ac      	movs	r3, #172	; 0xac
    4c7c:	4a12      	ldr	r2, [pc, #72]	; (4cc8 <z_add_timeout+0x170>)
    4c7e:	4918      	ldr	r1, [pc, #96]	; (4ce0 <z_add_timeout+0x188>)
    4c80:	480e      	ldr	r0, [pc, #56]	; (4cbc <z_add_timeout+0x164>)
    4c82:	f001 fa3f 	bl	6104 <printk>
    4c86:	490f      	ldr	r1, [pc, #60]	; (4cc4 <z_add_timeout+0x16c>)
    4c88:	4816      	ldr	r0, [pc, #88]	; (4ce4 <z_add_timeout+0x18c>)
    4c8a:	f001 fa3b 	bl	6104 <printk>
    4c8e:	21ac      	movs	r1, #172	; 0xac
    4c90:	480d      	ldr	r0, [pc, #52]	; (4cc8 <z_add_timeout+0x170>)
    4c92:	f001 fb01 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4c96:	f386 8811 	msr	BASEPRI, r6
    4c9a:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			to->dticks -= t->dticks;
    4ca2:	1a09      	subs	r1, r1, r0
    4ca4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    4ca8:	4563      	cmp	r3, ip
    4caa:	e9c4 1504 	strd	r1, r5, [r4, #16]
    4cae:	d0b0      	beq.n	4c12 <z_add_timeout+0xba>
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	e7ad      	b.n	4c10 <z_add_timeout+0xb8>
    4cb4:	00007bee 	.word	0x00007bee
    4cb8:	00007bca 	.word	0x00007bca
    4cbc:	000072be 	.word	0x000072be
    4cc0:	00007ac2 	.word	0x00007ac2
    4cc4:	00008824 	.word	0x00008824
    4cc8:	00007430 	.word	0x00007430
    4ccc:	00007456 	.word	0x00007456
    4cd0:	0000746b 	.word	0x0000746b
    4cd4:	00008660 	.word	0x00008660
    4cd8:	00008408 	.word	0x00008408
    4cdc:	000087d4 	.word	0x000087d4
    4ce0:	00007483 	.word	0x00007483
    4ce4:	0000749a 	.word	0x0000749a

00004ce8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    4ce8:	b538      	push	{r3, r4, r5, lr}
    4cea:	4604      	mov	r4, r0
	__asm__ volatile(
    4cec:	f04f 0320 	mov.w	r3, #32
    4cf0:	f3ef 8511 	mrs	r5, BASEPRI
    4cf4:	f383 8811 	msr	BASEPRI, r3
    4cf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cfc:	481a      	ldr	r0, [pc, #104]	; (4d68 <z_abort_timeout+0x80>)
    4cfe:	f7fe fa6d 	bl	31dc <z_spin_lock_valid>
    4d02:	b968      	cbnz	r0, 4d20 <z_abort_timeout+0x38>
    4d04:	2381      	movs	r3, #129	; 0x81
    4d06:	4a19      	ldr	r2, [pc, #100]	; (4d6c <z_abort_timeout+0x84>)
    4d08:	4919      	ldr	r1, [pc, #100]	; (4d70 <z_abort_timeout+0x88>)
    4d0a:	481a      	ldr	r0, [pc, #104]	; (4d74 <z_abort_timeout+0x8c>)
    4d0c:	f001 f9fa 	bl	6104 <printk>
    4d10:	4915      	ldr	r1, [pc, #84]	; (4d68 <z_abort_timeout+0x80>)
    4d12:	4819      	ldr	r0, [pc, #100]	; (4d78 <z_abort_timeout+0x90>)
    4d14:	f001 f9f6 	bl	6104 <printk>
    4d18:	2181      	movs	r1, #129	; 0x81
    4d1a:	4814      	ldr	r0, [pc, #80]	; (4d6c <z_abort_timeout+0x84>)
    4d1c:	f001 fabc 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d20:	4811      	ldr	r0, [pc, #68]	; (4d68 <z_abort_timeout+0x80>)
    4d22:	f7fe fa77 	bl	3214 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    4d26:	6823      	ldr	r3, [r4, #0]
    4d28:	b1db      	cbz	r3, 4d62 <z_abort_timeout+0x7a>
			remove_timeout(to);
    4d2a:	4620      	mov	r0, r4
    4d2c:	f7ff fefa 	bl	4b24 <remove_timeout>
			ret = 0;
    4d30:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d32:	480d      	ldr	r0, [pc, #52]	; (4d68 <z_abort_timeout+0x80>)
    4d34:	f7fe fa60 	bl	31f8 <z_spin_unlock_valid>
    4d38:	b968      	cbnz	r0, 4d56 <z_abort_timeout+0x6e>
    4d3a:	23ac      	movs	r3, #172	; 0xac
    4d3c:	4a0b      	ldr	r2, [pc, #44]	; (4d6c <z_abort_timeout+0x84>)
    4d3e:	490f      	ldr	r1, [pc, #60]	; (4d7c <z_abort_timeout+0x94>)
    4d40:	480c      	ldr	r0, [pc, #48]	; (4d74 <z_abort_timeout+0x8c>)
    4d42:	f001 f9df 	bl	6104 <printk>
    4d46:	4908      	ldr	r1, [pc, #32]	; (4d68 <z_abort_timeout+0x80>)
    4d48:	480d      	ldr	r0, [pc, #52]	; (4d80 <z_abort_timeout+0x98>)
    4d4a:	f001 f9db 	bl	6104 <printk>
    4d4e:	21ac      	movs	r1, #172	; 0xac
    4d50:	4806      	ldr	r0, [pc, #24]	; (4d6c <z_abort_timeout+0x84>)
    4d52:	f001 faa1 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4d56:	f385 8811 	msr	BASEPRI, r5
    4d5a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4d5e:	4620      	mov	r0, r4
    4d60:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    4d62:	f06f 0415 	mvn.w	r4, #21
    4d66:	e7e4      	b.n	4d32 <z_abort_timeout+0x4a>
    4d68:	00008824 	.word	0x00008824
    4d6c:	00007430 	.word	0x00007430
    4d70:	00007456 	.word	0x00007456
    4d74:	000072be 	.word	0x000072be
    4d78:	0000746b 	.word	0x0000746b
    4d7c:	00007483 	.word	0x00007483
    4d80:	0000749a 	.word	0x0000749a

00004d84 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    4d84:	b570      	push	{r4, r5, r6, lr}
    4d86:	4604      	mov	r4, r0
    4d88:	460d      	mov	r5, r1
	__asm__ volatile(
    4d8a:	f04f 0320 	mov.w	r3, #32
    4d8e:	f3ef 8611 	mrs	r6, BASEPRI
    4d92:	f383 8811 	msr	BASEPRI, r3
    4d96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d9a:	481c      	ldr	r0, [pc, #112]	; (4e0c <z_set_timeout_expiry+0x88>)
    4d9c:	f7fe fa1e 	bl	31dc <z_spin_lock_valid>
    4da0:	b968      	cbnz	r0, 4dbe <z_set_timeout_expiry+0x3a>
    4da2:	2381      	movs	r3, #129	; 0x81
    4da4:	4a1a      	ldr	r2, [pc, #104]	; (4e10 <z_set_timeout_expiry+0x8c>)
    4da6:	491b      	ldr	r1, [pc, #108]	; (4e14 <z_set_timeout_expiry+0x90>)
    4da8:	481b      	ldr	r0, [pc, #108]	; (4e18 <z_set_timeout_expiry+0x94>)
    4daa:	f001 f9ab 	bl	6104 <printk>
    4dae:	4917      	ldr	r1, [pc, #92]	; (4e0c <z_set_timeout_expiry+0x88>)
    4db0:	481a      	ldr	r0, [pc, #104]	; (4e1c <z_set_timeout_expiry+0x98>)
    4db2:	f001 f9a7 	bl	6104 <printk>
    4db6:	2181      	movs	r1, #129	; 0x81
    4db8:	4815      	ldr	r0, [pc, #84]	; (4e10 <z_set_timeout_expiry+0x8c>)
    4dba:	f001 fa6d 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4dbe:	4813      	ldr	r0, [pc, #76]	; (4e0c <z_set_timeout_expiry+0x88>)
    4dc0:	f7fe fa28 	bl	3214 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    4dc4:	f7ff fe84 	bl	4ad0 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    4dc8:	2801      	cmp	r0, #1
    4dca:	dd07      	ble.n	4ddc <z_set_timeout_expiry+0x58>
    4dcc:	42a0      	cmp	r0, r4
    4dce:	db05      	blt.n	4ddc <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4dd0:	42a0      	cmp	r0, r4
    4dd2:	4629      	mov	r1, r5
    4dd4:	bfa8      	it	ge
    4dd6:	4620      	movge	r0, r4
    4dd8:	f7fc fb26 	bl	1428 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ddc:	480b      	ldr	r0, [pc, #44]	; (4e0c <z_set_timeout_expiry+0x88>)
    4dde:	f7fe fa0b 	bl	31f8 <z_spin_unlock_valid>
    4de2:	b968      	cbnz	r0, 4e00 <z_set_timeout_expiry+0x7c>
    4de4:	23ac      	movs	r3, #172	; 0xac
    4de6:	4a0a      	ldr	r2, [pc, #40]	; (4e10 <z_set_timeout_expiry+0x8c>)
    4de8:	490d      	ldr	r1, [pc, #52]	; (4e20 <z_set_timeout_expiry+0x9c>)
    4dea:	480b      	ldr	r0, [pc, #44]	; (4e18 <z_set_timeout_expiry+0x94>)
    4dec:	f001 f98a 	bl	6104 <printk>
    4df0:	4906      	ldr	r1, [pc, #24]	; (4e0c <z_set_timeout_expiry+0x88>)
    4df2:	480c      	ldr	r0, [pc, #48]	; (4e24 <z_set_timeout_expiry+0xa0>)
    4df4:	f001 f986 	bl	6104 <printk>
    4df8:	21ac      	movs	r1, #172	; 0xac
    4dfa:	4805      	ldr	r0, [pc, #20]	; (4e10 <z_set_timeout_expiry+0x8c>)
    4dfc:	f001 fa4c 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4e00:	f386 8811 	msr	BASEPRI, r6
    4e04:	f3bf 8f6f 	isb	sy
		}
	}
}
    4e08:	bd70      	pop	{r4, r5, r6, pc}
    4e0a:	bf00      	nop
    4e0c:	00008824 	.word	0x00008824
    4e10:	00007430 	.word	0x00007430
    4e14:	00007456 	.word	0x00007456
    4e18:	000072be 	.word	0x000072be
    4e1c:	0000746b 	.word	0x0000746b
    4e20:	00007483 	.word	0x00007483
    4e24:	0000749a 	.word	0x0000749a

00004e28 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    4e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e2c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4e2e:	f7ff fa31 	bl	4294 <z_time_slice>
	__asm__ volatile(
    4e32:	f04f 0320 	mov.w	r3, #32
    4e36:	f3ef 8511 	mrs	r5, BASEPRI
    4e3a:	f383 8811 	msr	BASEPRI, r3
    4e3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e42:	484c      	ldr	r0, [pc, #304]	; (4f74 <sys_clock_announce+0x14c>)
    4e44:	f7fe f9ca 	bl	31dc <z_spin_lock_valid>
    4e48:	b968      	cbnz	r0, 4e66 <sys_clock_announce+0x3e>
    4e4a:	2381      	movs	r3, #129	; 0x81
    4e4c:	4a4a      	ldr	r2, [pc, #296]	; (4f78 <sys_clock_announce+0x150>)
    4e4e:	494b      	ldr	r1, [pc, #300]	; (4f7c <sys_clock_announce+0x154>)
    4e50:	484b      	ldr	r0, [pc, #300]	; (4f80 <sys_clock_announce+0x158>)
    4e52:	f001 f957 	bl	6104 <printk>
    4e56:	4947      	ldr	r1, [pc, #284]	; (4f74 <sys_clock_announce+0x14c>)
    4e58:	484a      	ldr	r0, [pc, #296]	; (4f84 <sys_clock_announce+0x15c>)
    4e5a:	f001 f953 	bl	6104 <printk>
    4e5e:	2181      	movs	r1, #129	; 0x81
    4e60:	4845      	ldr	r0, [pc, #276]	; (4f78 <sys_clock_announce+0x150>)
    4e62:	f001 fa19 	bl	6298 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4e66:	4f48      	ldr	r7, [pc, #288]	; (4f88 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    4e68:	4842      	ldr	r0, [pc, #264]	; (4f74 <sys_clock_announce+0x14c>)
	return list->head == list;
    4e6a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4f8c <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4e6e:	4e48      	ldr	r6, [pc, #288]	; (4f90 <sys_clock_announce+0x168>)
    4e70:	f7fe f9d0 	bl	3214 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    4e74:	603c      	str	r4, [r7, #0]
    4e76:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4e7a:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e7c:	4544      	cmp	r4, r8
    4e7e:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
    4e82:	e9d6 1e00 	ldrd	r1, lr, [r6]
    4e86:	d00b      	beq.n	4ea0 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4e88:	b154      	cbz	r4, 4ea0 <sys_clock_announce+0x78>
    4e8a:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    4e8e:	429a      	cmp	r2, r3
    4e90:	eb70 090c 	sbcs.w	r9, r0, ip
    4e94:	da28      	bge.n	4ee8 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4e96:	1a9b      	subs	r3, r3, r2
    4e98:	eb6c 0c00 	sbc.w	ip, ip, r0
    4e9c:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4ea0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4ea2:	1851      	adds	r1, r2, r1
    4ea4:	eb4e 0000 	adc.w	r0, lr, r0
    4ea8:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    4eac:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4eae:	f7ff fe0f 	bl	4ad0 <next_timeout>
    4eb2:	4621      	mov	r1, r4
    4eb4:	f7fc fab8 	bl	1428 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4eb8:	482e      	ldr	r0, [pc, #184]	; (4f74 <sys_clock_announce+0x14c>)
    4eba:	f7fe f99d 	bl	31f8 <z_spin_unlock_valid>
    4ebe:	b968      	cbnz	r0, 4edc <sys_clock_announce+0xb4>
    4ec0:	23ac      	movs	r3, #172	; 0xac
    4ec2:	4a2d      	ldr	r2, [pc, #180]	; (4f78 <sys_clock_announce+0x150>)
    4ec4:	4933      	ldr	r1, [pc, #204]	; (4f94 <sys_clock_announce+0x16c>)
    4ec6:	482e      	ldr	r0, [pc, #184]	; (4f80 <sys_clock_announce+0x158>)
    4ec8:	f001 f91c 	bl	6104 <printk>
    4ecc:	4929      	ldr	r1, [pc, #164]	; (4f74 <sys_clock_announce+0x14c>)
    4ece:	4832      	ldr	r0, [pc, #200]	; (4f98 <sys_clock_announce+0x170>)
    4ed0:	f001 f918 	bl	6104 <printk>
    4ed4:	21ac      	movs	r1, #172	; 0xac
    4ed6:	4828      	ldr	r0, [pc, #160]	; (4f78 <sys_clock_announce+0x150>)
    4ed8:	f001 f9de 	bl	6298 <assert_post_action>
	__asm__ volatile(
    4edc:	f385 8811 	msr	BASEPRI, r5
    4ee0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4ee8:	1859      	adds	r1, r3, r1
    4eea:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    4eee:	1ad3      	subs	r3, r2, r3
    4ef0:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    4ef2:	2200      	movs	r2, #0
    4ef4:	2300      	movs	r3, #0
		curr_tick += dt;
    4ef6:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    4efa:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4efe:	4620      	mov	r0, r4
    4f00:	f7ff fe10 	bl	4b24 <remove_timeout>
    4f04:	481b      	ldr	r0, [pc, #108]	; (4f74 <sys_clock_announce+0x14c>)
    4f06:	f7fe f977 	bl	31f8 <z_spin_unlock_valid>
    4f0a:	b968      	cbnz	r0, 4f28 <sys_clock_announce+0x100>
    4f0c:	23ac      	movs	r3, #172	; 0xac
    4f0e:	4a1a      	ldr	r2, [pc, #104]	; (4f78 <sys_clock_announce+0x150>)
    4f10:	4920      	ldr	r1, [pc, #128]	; (4f94 <sys_clock_announce+0x16c>)
    4f12:	481b      	ldr	r0, [pc, #108]	; (4f80 <sys_clock_announce+0x158>)
    4f14:	f001 f8f6 	bl	6104 <printk>
    4f18:	4916      	ldr	r1, [pc, #88]	; (4f74 <sys_clock_announce+0x14c>)
    4f1a:	481f      	ldr	r0, [pc, #124]	; (4f98 <sys_clock_announce+0x170>)
    4f1c:	f001 f8f2 	bl	6104 <printk>
    4f20:	21ac      	movs	r1, #172	; 0xac
    4f22:	4815      	ldr	r0, [pc, #84]	; (4f78 <sys_clock_announce+0x150>)
    4f24:	f001 f9b8 	bl	6298 <assert_post_action>
    4f28:	f385 8811 	msr	BASEPRI, r5
    4f2c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4f30:	4620      	mov	r0, r4
    4f32:	68a3      	ldr	r3, [r4, #8]
    4f34:	4798      	blx	r3
	__asm__ volatile(
    4f36:	f04f 0320 	mov.w	r3, #32
    4f3a:	f3ef 8511 	mrs	r5, BASEPRI
    4f3e:	f383 8811 	msr	BASEPRI, r3
    4f42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f46:	480b      	ldr	r0, [pc, #44]	; (4f74 <sys_clock_announce+0x14c>)
    4f48:	f7fe f948 	bl	31dc <z_spin_lock_valid>
    4f4c:	b968      	cbnz	r0, 4f6a <sys_clock_announce+0x142>
    4f4e:	2381      	movs	r3, #129	; 0x81
    4f50:	4a09      	ldr	r2, [pc, #36]	; (4f78 <sys_clock_announce+0x150>)
    4f52:	490a      	ldr	r1, [pc, #40]	; (4f7c <sys_clock_announce+0x154>)
    4f54:	480a      	ldr	r0, [pc, #40]	; (4f80 <sys_clock_announce+0x158>)
    4f56:	f001 f8d5 	bl	6104 <printk>
    4f5a:	4906      	ldr	r1, [pc, #24]	; (4f74 <sys_clock_announce+0x14c>)
    4f5c:	4809      	ldr	r0, [pc, #36]	; (4f84 <sys_clock_announce+0x15c>)
    4f5e:	f001 f8d1 	bl	6104 <printk>
    4f62:	2181      	movs	r1, #129	; 0x81
    4f64:	4804      	ldr	r0, [pc, #16]	; (4f78 <sys_clock_announce+0x150>)
    4f66:	f001 f997 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f6a:	4802      	ldr	r0, [pc, #8]	; (4f74 <sys_clock_announce+0x14c>)
    4f6c:	f7fe f952 	bl	3214 <z_spin_lock_set_owner>
	return k;
    4f70:	e781      	b.n	4e76 <sys_clock_announce+0x4e>
    4f72:	bf00      	nop
    4f74:	00008824 	.word	0x00008824
    4f78:	00007430 	.word	0x00007430
    4f7c:	00007456 	.word	0x00007456
    4f80:	000072be 	.word	0x000072be
    4f84:	0000746b 	.word	0x0000746b
    4f88:	00008820 	.word	0x00008820
    4f8c:	00008408 	.word	0x00008408
    4f90:	00008660 	.word	0x00008660
    4f94:	00007483 	.word	0x00007483
    4f98:	0000749a 	.word	0x0000749a

00004f9c <signal_poll_event>:
{
    4f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    4fa0:	6884      	ldr	r4, [r0, #8]
{
    4fa2:	4605      	mov	r5, r0
    4fa4:	460e      	mov	r6, r1
	if (poller != NULL) {
    4fa6:	b1d4      	cbz	r4, 4fde <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    4fa8:	7863      	ldrb	r3, [r4, #1]
    4faa:	2b01      	cmp	r3, #1
    4fac:	d141      	bne.n	5032 <signal_poll_event+0x96>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    4fae:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    4fb2:	d10e      	bne.n	4fd2 <signal_poll_event+0x36>
    4fb4:	23f5      	movs	r3, #245	; 0xf5
    4fb6:	4a2f      	ldr	r2, [pc, #188]	; (5074 <signal_poll_event+0xd8>)
    4fb8:	492f      	ldr	r1, [pc, #188]	; (5078 <signal_poll_event+0xdc>)
    4fba:	4830      	ldr	r0, [pc, #192]	; (507c <signal_poll_event+0xe0>)
    4fbc:	f001 f8a2 	bl	6104 <printk>
    4fc0:	482f      	ldr	r0, [pc, #188]	; (5080 <signal_poll_event+0xe4>)
    4fc2:	f001 f89f 	bl	6104 <printk>
    4fc6:	21f5      	movs	r1, #245	; 0xf5
    4fc8:	482a      	ldr	r0, [pc, #168]	; (5074 <signal_poll_event+0xd8>)
    4fca:	f001 f965 	bl	6298 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
    4fce:	7b7b      	ldrb	r3, [r7, #13]
    4fd0:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
    4fd2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    4fd6:	f013 0302 	ands.w	r3, r3, #2
    4fda:	d10a      	bne.n	4ff2 <signal_poll_event+0x56>
		poller->is_polling = false;
    4fdc:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    4fde:	2000      	movs	r0, #0
	event->state |= state;
    4fe0:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
    4fe2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    4fe4:	f3c3 3245 	ubfx	r2, r3, #13, #6
    4fe8:	4316      	orrs	r6, r2
    4fea:	f366 3352 	bfi	r3, r6, #13, #6
    4fee:	60eb      	str	r3, [r5, #12]
	return retcode;
    4ff0:	e03e      	b.n	5070 <signal_poll_event+0xd4>
	if (z_is_thread_timeout_expired(thread)) {
    4ff2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    4ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4ffa:	bf08      	it	eq
    4ffc:	f112 0f02 	cmneq.w	r2, #2
    5000:	d032      	beq.n	5068 <signal_poll_event+0xcc>
	z_unpend_thread(thread);
    5002:	4638      	mov	r0, r7
    5004:	f7ff fa78 	bl	44f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    5008:	2e08      	cmp	r6, #8
    500a:	bf0c      	ite	eq
    500c:	f06f 0303 	mvneq.w	r3, #3
    5010:	2300      	movne	r3, #0
    5012:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5014:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    5018:	06db      	lsls	r3, r3, #27
    501a:	d10c      	bne.n	5036 <signal_poll_event+0x9a>
    501c:	f854 8c48 	ldr.w	r8, [r4, #-72]
    5020:	f1b8 0f00 	cmp.w	r8, #0
    5024:	d107      	bne.n	5036 <signal_poll_event+0x9a>
	z_ready_thread(thread);
    5026:	4638      	mov	r0, r7
    5028:	f7fe fe04 	bl	3c34 <z_ready_thread>
		poller->is_polling = false;
    502c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    5030:	e7d5      	b.n	4fde <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    5032:	2b02      	cmp	r3, #2
    5034:	d001      	beq.n	503a <signal_poll_event+0x9e>
		poller->is_polling = false;
    5036:	2300      	movs	r3, #0
    5038:	e7d0      	b.n	4fdc <signal_poll_event+0x40>
	if (poller->is_polling && twork->workq != NULL) {
    503a:	7823      	ldrb	r3, [r4, #0]
    503c:	2b00      	cmp	r3, #0
    503e:	d0ce      	beq.n	4fde <signal_poll_event+0x42>
    5040:	f854 7c04 	ldr.w	r7, [r4, #-4]
    5044:	b177      	cbz	r7, 5064 <signal_poll_event+0xc8>
		twork->poll_result = 0;
    5046:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    504a:	f1a4 0914 	sub.w	r9, r4, #20
    504e:	f104 0014 	add.w	r0, r4, #20
    5052:	f7ff fe49 	bl	4ce8 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
    5056:	4649      	mov	r1, r9
    5058:	4638      	mov	r0, r7
		twork->poll_result = 0;
    505a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    505e:	f000 f9df 	bl	5420 <k_work_submit_to_queue>
    5062:	e7e3      	b.n	502c <signal_poll_event+0x90>
		poller->is_polling = false;
    5064:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    5066:	e7ba      	b.n	4fde <signal_poll_event+0x42>
		poller->is_polling = false;
    5068:	2300      	movs	r3, #0
		return -EAGAIN;
    506a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
    506e:	7023      	strb	r3, [r4, #0]
}
    5070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5074:	00007c0e 	.word	0x00007c0e
    5078:	00007d26 	.word	0x00007d26
    507c:	000072be 	.word	0x000072be
    5080:	00007d3c 	.word	0x00007d3c

00005084 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5084:	4a02      	ldr	r2, [pc, #8]	; (5090 <boot_banner+0xc>)
    5086:	4903      	ldr	r1, [pc, #12]	; (5094 <boot_banner+0x10>)
    5088:	4803      	ldr	r0, [pc, #12]	; (5098 <boot_banner+0x14>)
    508a:	f001 b83b 	b.w	6104 <printk>
    508e:	bf00      	nop
    5090:	00007ac4 	.word	0x00007ac4
    5094:	00007d5b 	.word	0x00007d5b
    5098:	00007d65 	.word	0x00007d65

0000509c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    509c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    509e:	4c0e      	ldr	r4, [pc, #56]	; (50d8 <statics_init+0x3c>)
    50a0:	4d0e      	ldr	r5, [pc, #56]	; (50dc <statics_init+0x40>)
    50a2:	4e0f      	ldr	r6, [pc, #60]	; (50e0 <statics_init+0x44>)
    50a4:	42ac      	cmp	r4, r5
    50a6:	d90c      	bls.n	50c2 <statics_init+0x26>
    50a8:	490e      	ldr	r1, [pc, #56]	; (50e4 <statics_init+0x48>)
    50aa:	2317      	movs	r3, #23
    50ac:	4632      	mov	r2, r6
    50ae:	480e      	ldr	r0, [pc, #56]	; (50e8 <statics_init+0x4c>)
    50b0:	f001 f828 	bl	6104 <printk>
    50b4:	480d      	ldr	r0, [pc, #52]	; (50ec <statics_init+0x50>)
    50b6:	f001 f825 	bl	6104 <printk>
    50ba:	2117      	movs	r1, #23
    50bc:	4630      	mov	r0, r6
    50be:	f001 f8eb 	bl	6298 <assert_post_action>
    50c2:	42ac      	cmp	r4, r5
    50c4:	d301      	bcc.n	50ca <statics_init+0x2e>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    50c6:	2000      	movs	r0, #0
    50c8:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    50ca:	4620      	mov	r0, r4
    50cc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    50d0:	f001 f9c8 	bl	6464 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    50d4:	3418      	adds	r4, #24
    50d6:	e7e5      	b.n	50a4 <statics_init+0x8>
    50d8:	000084ec 	.word	0x000084ec
    50dc:	000084ec 	.word	0x000084ec
    50e0:	00007d8c 	.word	0x00007d8c
    50e4:	00007dae 	.word	0x00007dae
    50e8:	000072be 	.word	0x000072be
    50ec:	00007868 	.word	0x00007868

000050f0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    50f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    50f2:	2400      	movs	r4, #0
    50f4:	4b08      	ldr	r3, [pc, #32]	; (5118 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    50f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    50fa:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    50fc:	ab02      	add	r3, sp, #8
    50fe:	9300      	str	r3, [sp, #0]
    5100:	4906      	ldr	r1, [pc, #24]	; (511c <k_sys_work_q_init+0x2c>)
    5102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5106:	4806      	ldr	r0, [pc, #24]	; (5120 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    5108:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    510c:	f000 f9ec 	bl	54e8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    5110:	4620      	mov	r0, r4
    5112:	b004      	add	sp, #16
    5114:	bd10      	pop	{r4, pc}
    5116:	bf00      	nop
    5118:	00007dc4 	.word	0x00007dc4
    511c:	0000a148 	.word	0x0000a148
    5120:	00008668 	.word	0x00008668

00005124 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    5124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5128:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    512a:	4d7d      	ldr	r5, [pc, #500]	; (5320 <work_queue_main+0x1fc>)
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    512c:	4f7d      	ldr	r7, [pc, #500]	; (5324 <work_queue_main+0x200>)
    512e:	b085      	sub	sp, #20
    5130:	f04f 0320 	mov.w	r3, #32
    5134:	f3ef 8811 	mrs	r8, BASEPRI
    5138:	f383 8811 	msr	BASEPRI, r3
    513c:	f3bf 8f6f 	isb	sy
    5140:	4628      	mov	r0, r5
    5142:	f7fe f84b 	bl	31dc <z_spin_lock_valid>
    5146:	b968      	cbnz	r0, 5164 <work_queue_main+0x40>
    5148:	2381      	movs	r3, #129	; 0x81
    514a:	4a77      	ldr	r2, [pc, #476]	; (5328 <work_queue_main+0x204>)
    514c:	4977      	ldr	r1, [pc, #476]	; (532c <work_queue_main+0x208>)
    514e:	4878      	ldr	r0, [pc, #480]	; (5330 <work_queue_main+0x20c>)
    5150:	f000 ffd8 	bl	6104 <printk>
    5154:	4629      	mov	r1, r5
    5156:	4877      	ldr	r0, [pc, #476]	; (5334 <work_queue_main+0x210>)
    5158:	f000 ffd4 	bl	6104 <printk>
    515c:	2181      	movs	r1, #129	; 0x81
    515e:	4872      	ldr	r0, [pc, #456]	; (5328 <work_queue_main+0x204>)
    5160:	f001 f89a 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    5164:	4628      	mov	r0, r5
    5166:	f7fe f855 	bl	3214 <z_spin_lock_set_owner>
    516a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    516e:	b9b6      	cbnz	r6, 519e <work_queue_main+0x7a>
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    5170:	2102      	movs	r1, #2
    5172:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    5176:	f001 f97d 	bl	6474 <flag_test_and_clear>
    517a:	2800      	cmp	r0, #0
    517c:	f040 8094 	bne.w	52a8 <work_queue_main+0x184>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    5180:	2300      	movs	r3, #0
    5182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5186:	9302      	str	r3, [sp, #8]
    5188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    518c:	4641      	mov	r1, r8
    518e:	e9cd 2300 	strd	r2, r3, [sp]
    5192:	4628      	mov	r0, r5
    5194:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    5198:	f7ff fc7e 	bl	4a98 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    519c:	e7c8      	b.n	5130 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    519e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    51a2:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    51a4:	4296      	cmp	r6, r2
	list->tail = node;
    51a6:	bf08      	it	eq
    51a8:	f8c4 30bc 	streq.w	r3, [r4, #188]	; 0xbc
	list->head = node;
    51ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	*flagp |= BIT(bit);
    51b0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51b4:	4628      	mov	r0, r5
    51b6:	f043 0302 	orr.w	r3, r3, #2
    51ba:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    51be:	68f3      	ldr	r3, [r6, #12]
			handler = work->handler;
    51c0:	f8d6 9004 	ldr.w	r9, [r6, #4]
	*flagp &= ~BIT(bit);
    51c4:	f023 0304 	bic.w	r3, r3, #4
    51c8:	f043 0301 	orr.w	r3, r3, #1
    51cc:	60f3      	str	r3, [r6, #12]
    51ce:	f7fe f813 	bl	31f8 <z_spin_unlock_valid>
    51d2:	b968      	cbnz	r0, 51f0 <work_queue_main+0xcc>
    51d4:	23ac      	movs	r3, #172	; 0xac
    51d6:	4a54      	ldr	r2, [pc, #336]	; (5328 <work_queue_main+0x204>)
    51d8:	4957      	ldr	r1, [pc, #348]	; (5338 <work_queue_main+0x214>)
    51da:	4855      	ldr	r0, [pc, #340]	; (5330 <work_queue_main+0x20c>)
    51dc:	f000 ff92 	bl	6104 <printk>
    51e0:	4629      	mov	r1, r5
    51e2:	4856      	ldr	r0, [pc, #344]	; (533c <work_queue_main+0x218>)
    51e4:	f000 ff8e 	bl	6104 <printk>
    51e8:	21ac      	movs	r1, #172	; 0xac
    51ea:	484f      	ldr	r0, [pc, #316]	; (5328 <work_queue_main+0x204>)
    51ec:	f001 f854 	bl	6298 <assert_post_action>
	__asm__ volatile(
    51f0:	f388 8811 	msr	BASEPRI, r8
    51f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
    51f8:	f1b9 0f00 	cmp.w	r9, #0
    51fc:	d10b      	bne.n	5216 <work_queue_main+0xf2>
    51fe:	4950      	ldr	r1, [pc, #320]	; (5340 <work_queue_main+0x21c>)
    5200:	484b      	ldr	r0, [pc, #300]	; (5330 <work_queue_main+0x20c>)
    5202:	f240 237d 	movw	r3, #637	; 0x27d
    5206:	4a4f      	ldr	r2, [pc, #316]	; (5344 <work_queue_main+0x220>)
    5208:	f000 ff7c 	bl	6104 <printk>
    520c:	f240 217d 	movw	r1, #637	; 0x27d
    5210:	484c      	ldr	r0, [pc, #304]	; (5344 <work_queue_main+0x220>)
    5212:	f001 f841 	bl	6298 <assert_post_action>
			handler(work);
    5216:	4630      	mov	r0, r6
    5218:	47c8      	blx	r9
	__asm__ volatile(
    521a:	f04f 0320 	mov.w	r3, #32
    521e:	f3ef 8811 	mrs	r8, BASEPRI
    5222:	f383 8811 	msr	BASEPRI, r3
    5226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    522a:	4628      	mov	r0, r5
    522c:	f7fd ffd6 	bl	31dc <z_spin_lock_valid>
    5230:	b968      	cbnz	r0, 524e <work_queue_main+0x12a>
    5232:	2381      	movs	r3, #129	; 0x81
    5234:	4a3c      	ldr	r2, [pc, #240]	; (5328 <work_queue_main+0x204>)
    5236:	493d      	ldr	r1, [pc, #244]	; (532c <work_queue_main+0x208>)
    5238:	483d      	ldr	r0, [pc, #244]	; (5330 <work_queue_main+0x20c>)
    523a:	f000 ff63 	bl	6104 <printk>
    523e:	4629      	mov	r1, r5
    5240:	483c      	ldr	r0, [pc, #240]	; (5334 <work_queue_main+0x210>)
    5242:	f000 ff5f 	bl	6104 <printk>
    5246:	2181      	movs	r1, #129	; 0x81
    5248:	4837      	ldr	r0, [pc, #220]	; (5328 <work_queue_main+0x204>)
    524a:	f001 f825 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    524e:	4628      	mov	r0, r5
    5250:	f7fd ffe0 	bl	3214 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    5254:	68f3      	ldr	r3, [r6, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5256:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    5258:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    525c:	d42e      	bmi.n	52bc <work_queue_main+0x198>
	*flagp &= ~BIT(bit);
    525e:	60f2      	str	r2, [r6, #12]
    5260:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5264:	4628      	mov	r0, r5
    5266:	f023 0302 	bic.w	r3, r3, #2
    526a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
    526e:	f3c3 2600 	ubfx	r6, r3, #8, #1
    5272:	f7fd ffc1 	bl	31f8 <z_spin_unlock_valid>
    5276:	b968      	cbnz	r0, 5294 <work_queue_main+0x170>
    5278:	23ac      	movs	r3, #172	; 0xac
    527a:	4a2b      	ldr	r2, [pc, #172]	; (5328 <work_queue_main+0x204>)
    527c:	492e      	ldr	r1, [pc, #184]	; (5338 <work_queue_main+0x214>)
    527e:	482c      	ldr	r0, [pc, #176]	; (5330 <work_queue_main+0x20c>)
    5280:	f000 ff40 	bl	6104 <printk>
    5284:	4629      	mov	r1, r5
    5286:	482d      	ldr	r0, [pc, #180]	; (533c <work_queue_main+0x218>)
    5288:	f000 ff3c 	bl	6104 <printk>
    528c:	21ac      	movs	r1, #172	; 0xac
    528e:	4826      	ldr	r0, [pc, #152]	; (5328 <work_queue_main+0x204>)
    5290:	f001 f802 	bl	6298 <assert_post_action>
	__asm__ volatile(
    5294:	f388 8811 	msr	BASEPRI, r8
    5298:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    529c:	2e00      	cmp	r6, #0
    529e:	f47f af47 	bne.w	5130 <work_queue_main+0xc>
	z_impl_k_yield();
    52a2:	f7ff fa2d 	bl	4700 <z_impl_k_yield>
}
    52a6:	e743      	b.n	5130 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    52a8:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    52ac:	2200      	movs	r2, #0
    52ae:	2101      	movs	r1, #1
    52b0:	4630      	mov	r0, r6
    52b2:	f7ff fb93 	bl	49dc <z_sched_wake>
    52b6:	2800      	cmp	r0, #0
    52b8:	d1f8      	bne.n	52ac <work_queue_main+0x188>
    52ba:	e761      	b.n	5180 <work_queue_main+0x5c>
	return list->head;
    52bc:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    52be:	f023 0303 	bic.w	r3, r3, #3
    52c2:	60f3      	str	r3, [r6, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    52c4:	2800      	cmp	r0, #0
    52c6:	d0cb      	beq.n	5260 <work_queue_main+0x13c>
	return node->next;
    52c8:	f04f 0900 	mov.w	r9, #0
	parent->next = child;
    52cc:	46cb      	mov	fp, r9
	return node->next;
    52ce:	f8d0 a000 	ldr.w	sl, [r0]
    52d2:	2800      	cmp	r0, #0
    52d4:	d0c4      	beq.n	5260 <work_queue_main+0x13c>
		if (wc->work == work) {
    52d6:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    52d8:	4602      	mov	r2, r0
		if (wc->work == work) {
    52da:	429e      	cmp	r6, r3
    52dc:	d10d      	bne.n	52fa <work_queue_main+0x1d6>
    52de:	6803      	ldr	r3, [r0, #0]
	return list->tail;
    52e0:	687a      	ldr	r2, [r7, #4]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    52e2:	f1b9 0f00 	cmp.w	r9, #0
    52e6:	d111      	bne.n	530c <work_queue_main+0x1e8>
    52e8:	4290      	cmp	r0, r2
	list->head = node;
    52ea:	603b      	str	r3, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    52ec:	d100      	bne.n	52f0 <work_queue_main+0x1cc>
	list->tail = node;
    52ee:	607b      	str	r3, [r7, #4]
	parent->next = child;
    52f0:	f840 bb08 	str.w	fp, [r0], #8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    52f4:	f7fe fb60 	bl	39b8 <z_impl_k_sem_give>
}
    52f8:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    52fa:	f1ba 0f00 	cmp.w	sl, #0
    52fe:	d00c      	beq.n	531a <work_queue_main+0x1f6>
	return node->next;
    5300:	f8da 3000 	ldr.w	r3, [sl]
    5304:	4650      	mov	r0, sl
    5306:	4691      	mov	r9, r2
    5308:	469a      	mov	sl, r3
    530a:	e7e2      	b.n	52d2 <work_queue_main+0x1ae>
Z_GENLIST_REMOVE(slist, snode)
    530c:	4290      	cmp	r0, r2
	parent->next = child;
    530e:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
    5312:	bf08      	it	eq
    5314:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    5318:	e7ea      	b.n	52f0 <work_queue_main+0x1cc>
    531a:	4653      	mov	r3, sl
    531c:	e7f2      	b.n	5304 <work_queue_main+0x1e0>
    531e:	bf00      	nop
    5320:	00008830 	.word	0x00008830
    5324:	00008828 	.word	0x00008828
    5328:	00007430 	.word	0x00007430
    532c:	00007456 	.word	0x00007456
    5330:	000072be 	.word	0x000072be
    5334:	0000746b 	.word	0x0000746b
    5338:	00007483 	.word	0x00007483
    533c:	0000749a 	.word	0x0000749a
    5340:	00007dee 	.word	0x00007dee
    5344:	00007dcd 	.word	0x00007dcd

00005348 <submit_to_queue_locked>:
{
    5348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    534a:	68c3      	ldr	r3, [r0, #12]
{
    534c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    534e:	0799      	lsls	r1, r3, #30
{
    5350:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5352:	f3c3 0640 	ubfx	r6, r3, #1, #1
    5356:	d439      	bmi.n	53cc <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    5358:	075a      	lsls	r2, r3, #29
    535a:	d425      	bmi.n	53a8 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
    535c:	683a      	ldr	r2, [r7, #0]
    535e:	b90a      	cbnz	r2, 5364 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    5360:	6882      	ldr	r2, [r0, #8]
    5362:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    5364:	07dd      	lsls	r5, r3, #31
    5366:	d522      	bpl.n	53ae <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
    5368:	68a3      	ldr	r3, [r4, #8]
    536a:	b95b      	cbnz	r3, 5384 <submit_to_queue_locked+0x3c>
    536c:	4928      	ldr	r1, [pc, #160]	; (5410 <submit_to_queue_locked+0xc8>)
    536e:	4829      	ldr	r0, [pc, #164]	; (5414 <submit_to_queue_locked+0xcc>)
    5370:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    5374:	4a28      	ldr	r2, [pc, #160]	; (5418 <submit_to_queue_locked+0xd0>)
    5376:	f000 fec5 	bl	6104 <printk>
    537a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    537e:	4826      	ldr	r0, [pc, #152]	; (5418 <submit_to_queue_locked+0xd0>)
    5380:	f000 ff8a 	bl	6298 <assert_post_action>
			ret = 2;
    5384:	2602      	movs	r6, #2
			*queuep = work->queue;
    5386:	68a3      	ldr	r3, [r4, #8]
    5388:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    538a:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
    538c:	2d00      	cmp	r5, #0
    538e:	d03c      	beq.n	540a <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5390:	4b22      	ldr	r3, [pc, #136]	; (541c <submit_to_queue_locked+0xd4>)
    5392:	689b      	ldr	r3, [r3, #8]
    5394:	42ab      	cmp	r3, r5
    5396:	d00c      	beq.n	53b2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    5398:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    539c:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    539e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    53a2:	d416      	bmi.n	53d2 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
    53a4:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    53a8:	2300      	movs	r3, #0
    53aa:	603b      	str	r3, [r7, #0]
	return ret;
    53ac:	e027      	b.n	53fe <submit_to_queue_locked+0xb6>
		ret = 1;
    53ae:	2601      	movs	r6, #1
    53b0:	e7eb      	b.n	538a <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    53b2:	f001 f81a 	bl	63ea <k_is_in_isr>
    53b6:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    53ba:	2800      	cmp	r0, #0
    53bc:	d1ee      	bne.n	539c <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    53be:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    53c0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    53c4:	d5ee      	bpl.n	53a4 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
    53c6:	b152      	cbz	r2, 53de <submit_to_queue_locked+0x96>
    53c8:	075b      	lsls	r3, r3, #29
    53ca:	d408      	bmi.n	53de <submit_to_queue_locked+0x96>
		ret = -EBUSY;
    53cc:	f06f 060f 	mvn.w	r6, #15
    53d0:	e7ea      	b.n	53a8 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
    53d2:	2a00      	cmp	r2, #0
    53d4:	d1fa      	bne.n	53cc <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
    53d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    53da:	2b00      	cmp	r3, #0
    53dc:	d1f6      	bne.n	53cc <submit_to_queue_locked+0x84>
	parent->next = child;
    53de:	2300      	movs	r3, #0
    53e0:	6023      	str	r3, [r4, #0]
	return list->tail;
    53e2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    53e6:	b963      	cbnz	r3, 5402 <submit_to_queue_locked+0xba>
	list->head = node;
    53e8:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    53ec:	4628      	mov	r0, r5
    53ee:	f001 f84c 	bl	648a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    53f2:	68e3      	ldr	r3, [r4, #12]
    53f4:	f043 0304 	orr.w	r3, r3, #4
    53f8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    53fa:	683b      	ldr	r3, [r7, #0]
    53fc:	60a3      	str	r3, [r4, #8]
}
    53fe:	4630      	mov	r0, r6
    5400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    5402:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5404:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    5408:	e7f0      	b.n	53ec <submit_to_queue_locked+0xa4>
		return -EINVAL;
    540a:	f06f 0615 	mvn.w	r6, #21
    540e:	e7cb      	b.n	53a8 <submit_to_queue_locked+0x60>
    5410:	00007e05 	.word	0x00007e05
    5414:	000072be 	.word	0x000072be
    5418:	00007dcd 	.word	0x00007dcd
    541c:	000087d4 	.word	0x000087d4

00005420 <k_work_submit_to_queue>:
{
    5420:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    5422:	460c      	mov	r4, r1
{
    5424:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    5426:	b959      	cbnz	r1, 5440 <k_work_submit_to_queue+0x20>
    5428:	4926      	ldr	r1, [pc, #152]	; (54c4 <k_work_submit_to_queue+0xa4>)
    542a:	4827      	ldr	r0, [pc, #156]	; (54c8 <k_work_submit_to_queue+0xa8>)
    542c:	f240 1369 	movw	r3, #361	; 0x169
    5430:	4a26      	ldr	r2, [pc, #152]	; (54cc <k_work_submit_to_queue+0xac>)
    5432:	f000 fe67 	bl	6104 <printk>
    5436:	f240 1169 	movw	r1, #361	; 0x169
    543a:	4824      	ldr	r0, [pc, #144]	; (54cc <k_work_submit_to_queue+0xac>)
    543c:	f000 ff2c 	bl	6298 <assert_post_action>
	__asm__ volatile(
    5440:	f04f 0320 	mov.w	r3, #32
    5444:	f3ef 8511 	mrs	r5, BASEPRI
    5448:	f383 8811 	msr	BASEPRI, r3
    544c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5450:	481f      	ldr	r0, [pc, #124]	; (54d0 <k_work_submit_to_queue+0xb0>)
    5452:	f7fd fec3 	bl	31dc <z_spin_lock_valid>
    5456:	b968      	cbnz	r0, 5474 <k_work_submit_to_queue+0x54>
    5458:	2381      	movs	r3, #129	; 0x81
    545a:	4a1e      	ldr	r2, [pc, #120]	; (54d4 <k_work_submit_to_queue+0xb4>)
    545c:	491e      	ldr	r1, [pc, #120]	; (54d8 <k_work_submit_to_queue+0xb8>)
    545e:	481a      	ldr	r0, [pc, #104]	; (54c8 <k_work_submit_to_queue+0xa8>)
    5460:	f000 fe50 	bl	6104 <printk>
    5464:	491a      	ldr	r1, [pc, #104]	; (54d0 <k_work_submit_to_queue+0xb0>)
    5466:	481d      	ldr	r0, [pc, #116]	; (54dc <k_work_submit_to_queue+0xbc>)
    5468:	f000 fe4c 	bl	6104 <printk>
    546c:	2181      	movs	r1, #129	; 0x81
    546e:	4819      	ldr	r0, [pc, #100]	; (54d4 <k_work_submit_to_queue+0xb4>)
    5470:	f000 ff12 	bl	6298 <assert_post_action>
	z_spin_lock_set_owner(l);
    5474:	4816      	ldr	r0, [pc, #88]	; (54d0 <k_work_submit_to_queue+0xb0>)
    5476:	f7fd fecd 	bl	3214 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    547a:	4620      	mov	r0, r4
    547c:	a901      	add	r1, sp, #4
    547e:	f7ff ff63 	bl	5348 <submit_to_queue_locked>
    5482:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5484:	4812      	ldr	r0, [pc, #72]	; (54d0 <k_work_submit_to_queue+0xb0>)
    5486:	f7fd feb7 	bl	31f8 <z_spin_unlock_valid>
    548a:	b968      	cbnz	r0, 54a8 <k_work_submit_to_queue+0x88>
    548c:	23ac      	movs	r3, #172	; 0xac
    548e:	4a11      	ldr	r2, [pc, #68]	; (54d4 <k_work_submit_to_queue+0xb4>)
    5490:	4913      	ldr	r1, [pc, #76]	; (54e0 <k_work_submit_to_queue+0xc0>)
    5492:	480d      	ldr	r0, [pc, #52]	; (54c8 <k_work_submit_to_queue+0xa8>)
    5494:	f000 fe36 	bl	6104 <printk>
    5498:	490d      	ldr	r1, [pc, #52]	; (54d0 <k_work_submit_to_queue+0xb0>)
    549a:	4812      	ldr	r0, [pc, #72]	; (54e4 <k_work_submit_to_queue+0xc4>)
    549c:	f000 fe32 	bl	6104 <printk>
    54a0:	21ac      	movs	r1, #172	; 0xac
    54a2:	480c      	ldr	r0, [pc, #48]	; (54d4 <k_work_submit_to_queue+0xb4>)
    54a4:	f000 fef8 	bl	6298 <assert_post_action>
	__asm__ volatile(
    54a8:	f385 8811 	msr	BASEPRI, r5
    54ac:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    54b0:	2c00      	cmp	r4, #0
    54b2:	dd04      	ble.n	54be <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    54b4:	f7ff f9cc 	bl	4850 <z_impl_k_is_preempt_thread>
    54b8:	b108      	cbz	r0, 54be <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    54ba:	f7ff f921 	bl	4700 <z_impl_k_yield>
}
    54be:	4620      	mov	r0, r4
    54c0:	b003      	add	sp, #12
    54c2:	bd30      	pop	{r4, r5, pc}
    54c4:	00007e20 	.word	0x00007e20
    54c8:	000072be 	.word	0x000072be
    54cc:	00007dcd 	.word	0x00007dcd
    54d0:	00008830 	.word	0x00008830
    54d4:	00007430 	.word	0x00007430
    54d8:	00007456 	.word	0x00007456
    54dc:	0000746b 	.word	0x0000746b
    54e0:	00007483 	.word	0x00007483
    54e4:	0000749a 	.word	0x0000749a

000054e8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    54e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54ec:	b088      	sub	sp, #32
    54ee:	460e      	mov	r6, r1
    54f0:	4617      	mov	r7, r2
    54f2:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    54f4:	4604      	mov	r4, r0
{
    54f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
    54f8:	b958      	cbnz	r0, 5512 <k_work_queue_start+0x2a>
    54fa:	492e      	ldr	r1, [pc, #184]	; (55b4 <k_work_queue_start+0xcc>)
    54fc:	482e      	ldr	r0, [pc, #184]	; (55b8 <k_work_queue_start+0xd0>)
    54fe:	f44f 7328 	mov.w	r3, #672	; 0x2a0
    5502:	4a2e      	ldr	r2, [pc, #184]	; (55bc <k_work_queue_start+0xd4>)
    5504:	f000 fdfe 	bl	6104 <printk>
    5508:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    550c:	482b      	ldr	r0, [pc, #172]	; (55bc <k_work_queue_start+0xd4>)
    550e:	f000 fec3 	bl	6298 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    5512:	b95e      	cbnz	r6, 552c <k_work_queue_start+0x44>
    5514:	492a      	ldr	r1, [pc, #168]	; (55c0 <k_work_queue_start+0xd8>)
    5516:	4828      	ldr	r0, [pc, #160]	; (55b8 <k_work_queue_start+0xd0>)
    5518:	f240 23a1 	movw	r3, #673	; 0x2a1
    551c:	4a27      	ldr	r2, [pc, #156]	; (55bc <k_work_queue_start+0xd4>)
    551e:	f000 fdf1 	bl	6104 <printk>
    5522:	f240 21a1 	movw	r1, #673	; 0x2a1
    5526:	4825      	ldr	r0, [pc, #148]	; (55bc <k_work_queue_start+0xd4>)
    5528:	f000 feb6 	bl	6298 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    552c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    5530:	07db      	lsls	r3, r3, #31
    5532:	d50b      	bpl.n	554c <k_work_queue_start+0x64>
    5534:	4923      	ldr	r1, [pc, #140]	; (55c4 <k_work_queue_start+0xdc>)
    5536:	4820      	ldr	r0, [pc, #128]	; (55b8 <k_work_queue_start+0xd0>)
    5538:	f240 23a2 	movw	r3, #674	; 0x2a2
    553c:	4a1f      	ldr	r2, [pc, #124]	; (55bc <k_work_queue_start+0xd4>)
    553e:	f000 fde1 	bl	6104 <printk>
    5542:	f240 21a2 	movw	r1, #674	; 0x2a2
    5546:	481d      	ldr	r0, [pc, #116]	; (55bc <k_work_queue_start+0xd4>)
    5548:	f000 fea6 	bl	6298 <assert_post_action>
	list->head = NULL;
    554c:	2300      	movs	r3, #0
	list->tail = NULL;
    554e:	e9c4 332e 	strd	r3, r3, [r4, #184]	; 0xb8
	sys_dlist_init(&w->waitq);
    5552:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    5556:	e9c4 3330 	strd	r3, r3, [r4, #192]	; 0xc0
    555a:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    555e:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    5562:	b32d      	cbz	r5, 55b0 <k_work_queue_start+0xc8>
    5564:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    5566:	f240 1101 	movw	r1, #257	; 0x101
    556a:	2b00      	cmp	r3, #0
    556c:	bf08      	it	eq
    556e:	2101      	moveq	r1, #1
	*flagp = flags;
    5570:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    557c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5580:	2200      	movs	r2, #0
    5582:	4631      	mov	r1, r6
    5584:	e9cd 8203 	strd	r8, r2, [sp, #12]
    5588:	e9cd 2201 	strd	r2, r2, [sp, #4]
    558c:	4620      	mov	r0, r4
    558e:	463a      	mov	r2, r7
    5590:	4b0d      	ldr	r3, [pc, #52]	; (55c8 <k_work_queue_start+0xe0>)
    5592:	9400      	str	r4, [sp, #0]
    5594:	f7fd ff64 	bl	3460 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    5598:	b125      	cbz	r5, 55a4 <k_work_queue_start+0xbc>
    559a:	6829      	ldr	r1, [r5, #0]
    559c:	b111      	cbz	r1, 55a4 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    559e:	4620      	mov	r0, r4
    55a0:	f7fd fdf4 	bl	318c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    55a4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    55a6:	b008      	add	sp, #32
    55a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    55ac:	f000 bf23 	b.w	63f6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    55b0:	2101      	movs	r1, #1
    55b2:	e7dd      	b.n	5570 <k_work_queue_start+0x88>
    55b4:	00007e34 	.word	0x00007e34
    55b8:	000072be 	.word	0x000072be
    55bc:	00007dcd 	.word	0x00007dcd
    55c0:	00007e3a 	.word	0x00007e3a
    55c4:	00007e40 	.word	0x00007e40
    55c8:	00005125 	.word	0x00005125

000055cc <_free_r>:
    55cc:	b538      	push	{r3, r4, r5, lr}
    55ce:	4605      	mov	r5, r0
    55d0:	2900      	cmp	r1, #0
    55d2:	d040      	beq.n	5656 <_free_r+0x8a>
    55d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    55d8:	1f0c      	subs	r4, r1, #4
    55da:	2b00      	cmp	r3, #0
    55dc:	bfb8      	it	lt
    55de:	18e4      	addlt	r4, r4, r3
    55e0:	f7fc fadc 	bl	1b9c <__malloc_lock>
    55e4:	4a1c      	ldr	r2, [pc, #112]	; (5658 <_free_r+0x8c>)
    55e6:	6813      	ldr	r3, [r2, #0]
    55e8:	b933      	cbnz	r3, 55f8 <_free_r+0x2c>
    55ea:	6063      	str	r3, [r4, #4]
    55ec:	6014      	str	r4, [r2, #0]
    55ee:	4628      	mov	r0, r5
    55f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    55f4:	f7fc badc 	b.w	1bb0 <__malloc_unlock>
    55f8:	42a3      	cmp	r3, r4
    55fa:	d908      	bls.n	560e <_free_r+0x42>
    55fc:	6820      	ldr	r0, [r4, #0]
    55fe:	1821      	adds	r1, r4, r0
    5600:	428b      	cmp	r3, r1
    5602:	bf01      	itttt	eq
    5604:	6819      	ldreq	r1, [r3, #0]
    5606:	685b      	ldreq	r3, [r3, #4]
    5608:	1809      	addeq	r1, r1, r0
    560a:	6021      	streq	r1, [r4, #0]
    560c:	e7ed      	b.n	55ea <_free_r+0x1e>
    560e:	461a      	mov	r2, r3
    5610:	685b      	ldr	r3, [r3, #4]
    5612:	b10b      	cbz	r3, 5618 <_free_r+0x4c>
    5614:	42a3      	cmp	r3, r4
    5616:	d9fa      	bls.n	560e <_free_r+0x42>
    5618:	6811      	ldr	r1, [r2, #0]
    561a:	1850      	adds	r0, r2, r1
    561c:	42a0      	cmp	r0, r4
    561e:	d10b      	bne.n	5638 <_free_r+0x6c>
    5620:	6820      	ldr	r0, [r4, #0]
    5622:	4401      	add	r1, r0
    5624:	1850      	adds	r0, r2, r1
    5626:	4283      	cmp	r3, r0
    5628:	6011      	str	r1, [r2, #0]
    562a:	d1e0      	bne.n	55ee <_free_r+0x22>
    562c:	6818      	ldr	r0, [r3, #0]
    562e:	685b      	ldr	r3, [r3, #4]
    5630:	4408      	add	r0, r1
    5632:	6010      	str	r0, [r2, #0]
    5634:	6053      	str	r3, [r2, #4]
    5636:	e7da      	b.n	55ee <_free_r+0x22>
    5638:	d902      	bls.n	5640 <_free_r+0x74>
    563a:	230c      	movs	r3, #12
    563c:	602b      	str	r3, [r5, #0]
    563e:	e7d6      	b.n	55ee <_free_r+0x22>
    5640:	6820      	ldr	r0, [r4, #0]
    5642:	1821      	adds	r1, r4, r0
    5644:	428b      	cmp	r3, r1
    5646:	bf01      	itttt	eq
    5648:	6819      	ldreq	r1, [r3, #0]
    564a:	685b      	ldreq	r3, [r3, #4]
    564c:	1809      	addeq	r1, r1, r0
    564e:	6021      	streq	r1, [r4, #0]
    5650:	6063      	str	r3, [r4, #4]
    5652:	6054      	str	r4, [r2, #4]
    5654:	e7cb      	b.n	55ee <_free_r+0x22>
    5656:	bd38      	pop	{r3, r4, r5, pc}
    5658:	00008838 	.word	0x00008838

0000565c <_malloc_r>:
    565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    565e:	1ccd      	adds	r5, r1, #3
    5660:	f025 0503 	bic.w	r5, r5, #3
    5664:	3508      	adds	r5, #8
    5666:	2d0c      	cmp	r5, #12
    5668:	bf38      	it	cc
    566a:	250c      	movcc	r5, #12
    566c:	2d00      	cmp	r5, #0
    566e:	4606      	mov	r6, r0
    5670:	db01      	blt.n	5676 <_malloc_r+0x1a>
    5672:	42a9      	cmp	r1, r5
    5674:	d903      	bls.n	567e <_malloc_r+0x22>
    5676:	230c      	movs	r3, #12
    5678:	6033      	str	r3, [r6, #0]
    567a:	2000      	movs	r0, #0
    567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    567e:	f7fc fa8d 	bl	1b9c <__malloc_lock>
    5682:	4921      	ldr	r1, [pc, #132]	; (5708 <_malloc_r+0xac>)
    5684:	680a      	ldr	r2, [r1, #0]
    5686:	4614      	mov	r4, r2
    5688:	b99c      	cbnz	r4, 56b2 <_malloc_r+0x56>
    568a:	4f20      	ldr	r7, [pc, #128]	; (570c <_malloc_r+0xb0>)
    568c:	683b      	ldr	r3, [r7, #0]
    568e:	b923      	cbnz	r3, 569a <_malloc_r+0x3e>
    5690:	4621      	mov	r1, r4
    5692:	4630      	mov	r0, r6
    5694:	f000 faae 	bl	5bf4 <_sbrk_r>
    5698:	6038      	str	r0, [r7, #0]
    569a:	4629      	mov	r1, r5
    569c:	4630      	mov	r0, r6
    569e:	f000 faa9 	bl	5bf4 <_sbrk_r>
    56a2:	1c43      	adds	r3, r0, #1
    56a4:	d123      	bne.n	56ee <_malloc_r+0x92>
    56a6:	230c      	movs	r3, #12
    56a8:	4630      	mov	r0, r6
    56aa:	6033      	str	r3, [r6, #0]
    56ac:	f7fc fa80 	bl	1bb0 <__malloc_unlock>
    56b0:	e7e3      	b.n	567a <_malloc_r+0x1e>
    56b2:	6823      	ldr	r3, [r4, #0]
    56b4:	1b5b      	subs	r3, r3, r5
    56b6:	d417      	bmi.n	56e8 <_malloc_r+0x8c>
    56b8:	2b0b      	cmp	r3, #11
    56ba:	d903      	bls.n	56c4 <_malloc_r+0x68>
    56bc:	6023      	str	r3, [r4, #0]
    56be:	441c      	add	r4, r3
    56c0:	6025      	str	r5, [r4, #0]
    56c2:	e004      	b.n	56ce <_malloc_r+0x72>
    56c4:	6863      	ldr	r3, [r4, #4]
    56c6:	42a2      	cmp	r2, r4
    56c8:	bf0c      	ite	eq
    56ca:	600b      	streq	r3, [r1, #0]
    56cc:	6053      	strne	r3, [r2, #4]
    56ce:	4630      	mov	r0, r6
    56d0:	f7fc fa6e 	bl	1bb0 <__malloc_unlock>
    56d4:	f104 000b 	add.w	r0, r4, #11
    56d8:	1d23      	adds	r3, r4, #4
    56da:	f020 0007 	bic.w	r0, r0, #7
    56de:	1ac2      	subs	r2, r0, r3
    56e0:	bf1c      	itt	ne
    56e2:	1a1b      	subne	r3, r3, r0
    56e4:	50a3      	strne	r3, [r4, r2]
    56e6:	e7c9      	b.n	567c <_malloc_r+0x20>
    56e8:	4622      	mov	r2, r4
    56ea:	6864      	ldr	r4, [r4, #4]
    56ec:	e7cc      	b.n	5688 <_malloc_r+0x2c>
    56ee:	1cc4      	adds	r4, r0, #3
    56f0:	f024 0403 	bic.w	r4, r4, #3
    56f4:	42a0      	cmp	r0, r4
    56f6:	d0e3      	beq.n	56c0 <_malloc_r+0x64>
    56f8:	1a21      	subs	r1, r4, r0
    56fa:	4630      	mov	r0, r6
    56fc:	f000 fa7a 	bl	5bf4 <_sbrk_r>
    5700:	3001      	adds	r0, #1
    5702:	d1dd      	bne.n	56c0 <_malloc_r+0x64>
    5704:	e7cf      	b.n	56a6 <_malloc_r+0x4a>
    5706:	bf00      	nop
    5708:	00008838 	.word	0x00008838
    570c:	00008834 	.word	0x00008834

00005710 <_vfiprintf_r>:
    5710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5714:	460d      	mov	r5, r1
    5716:	4614      	mov	r4, r2
    5718:	4698      	mov	r8, r3
    571a:	4606      	mov	r6, r0
    571c:	b09d      	sub	sp, #116	; 0x74
    571e:	b118      	cbz	r0, 5728 <_vfiprintf_r+0x18>
    5720:	6983      	ldr	r3, [r0, #24]
    5722:	b90b      	cbnz	r3, 5728 <_vfiprintf_r+0x18>
    5724:	f000 fbb2 	bl	5e8c <__sinit>
    5728:	4b87      	ldr	r3, [pc, #540]	; (5948 <_vfiprintf_r+0x238>)
    572a:	429d      	cmp	r5, r3
    572c:	d11b      	bne.n	5766 <_vfiprintf_r+0x56>
    572e:	6875      	ldr	r5, [r6, #4]
    5730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    5732:	07d9      	lsls	r1, r3, #31
    5734:	d405      	bmi.n	5742 <_vfiprintf_r+0x32>
    5736:	89ab      	ldrh	r3, [r5, #12]
    5738:	059a      	lsls	r2, r3, #22
    573a:	d402      	bmi.n	5742 <_vfiprintf_r+0x32>
    573c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    573e:	f001 f821 	bl	6784 <__retarget_lock_acquire_recursive>
    5742:	89ab      	ldrh	r3, [r5, #12]
    5744:	071b      	lsls	r3, r3, #28
    5746:	d501      	bpl.n	574c <_vfiprintf_r+0x3c>
    5748:	692b      	ldr	r3, [r5, #16]
    574a:	b9eb      	cbnz	r3, 5788 <_vfiprintf_r+0x78>
    574c:	4629      	mov	r1, r5
    574e:	4630      	mov	r0, r6
    5750:	f000 fab2 	bl	5cb8 <__swsetup_r>
    5754:	b1c0      	cbz	r0, 5788 <_vfiprintf_r+0x78>
    5756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    5758:	07dc      	lsls	r4, r3, #31
    575a:	d50e      	bpl.n	577a <_vfiprintf_r+0x6a>
    575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5760:	b01d      	add	sp, #116	; 0x74
    5762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5766:	4b79      	ldr	r3, [pc, #484]	; (594c <_vfiprintf_r+0x23c>)
    5768:	429d      	cmp	r5, r3
    576a:	d101      	bne.n	5770 <_vfiprintf_r+0x60>
    576c:	68b5      	ldr	r5, [r6, #8]
    576e:	e7df      	b.n	5730 <_vfiprintf_r+0x20>
    5770:	4b77      	ldr	r3, [pc, #476]	; (5950 <_vfiprintf_r+0x240>)
    5772:	429d      	cmp	r5, r3
    5774:	bf08      	it	eq
    5776:	68f5      	ldreq	r5, [r6, #12]
    5778:	e7da      	b.n	5730 <_vfiprintf_r+0x20>
    577a:	89ab      	ldrh	r3, [r5, #12]
    577c:	0598      	lsls	r0, r3, #22
    577e:	d4ed      	bmi.n	575c <_vfiprintf_r+0x4c>
    5780:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5782:	f001 f800 	bl	6786 <__retarget_lock_release_recursive>
    5786:	e7e9      	b.n	575c <_vfiprintf_r+0x4c>
    5788:	2300      	movs	r3, #0
    578a:	9309      	str	r3, [sp, #36]	; 0x24
    578c:	2320      	movs	r3, #32
    578e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5792:	2330      	movs	r3, #48	; 0x30
    5794:	f04f 0901 	mov.w	r9, #1
    5798:	f8cd 800c 	str.w	r8, [sp, #12]
    579c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5954 <_vfiprintf_r+0x244>
    57a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    57a4:	4623      	mov	r3, r4
    57a6:	469a      	mov	sl, r3
    57a8:	f813 2b01 	ldrb.w	r2, [r3], #1
    57ac:	b10a      	cbz	r2, 57b2 <_vfiprintf_r+0xa2>
    57ae:	2a25      	cmp	r2, #37	; 0x25
    57b0:	d1f9      	bne.n	57a6 <_vfiprintf_r+0x96>
    57b2:	ebba 0b04 	subs.w	fp, sl, r4
    57b6:	d00b      	beq.n	57d0 <_vfiprintf_r+0xc0>
    57b8:	465b      	mov	r3, fp
    57ba:	4622      	mov	r2, r4
    57bc:	4629      	mov	r1, r5
    57be:	4630      	mov	r0, r6
    57c0:	f000 fe87 	bl	64d2 <__sfputs_r>
    57c4:	3001      	adds	r0, #1
    57c6:	f000 80a6 	beq.w	5916 <_vfiprintf_r+0x206>
    57ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    57cc:	445a      	add	r2, fp
    57ce:	9209      	str	r2, [sp, #36]	; 0x24
    57d0:	f89a 3000 	ldrb.w	r3, [sl]
    57d4:	2b00      	cmp	r3, #0
    57d6:	f000 809e 	beq.w	5916 <_vfiprintf_r+0x206>
    57da:	2300      	movs	r3, #0
    57dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    57e4:	f10a 0a01 	add.w	sl, sl, #1
    57e8:	9304      	str	r3, [sp, #16]
    57ea:	9307      	str	r3, [sp, #28]
    57ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    57f0:	931a      	str	r3, [sp, #104]	; 0x68
    57f2:	4654      	mov	r4, sl
    57f4:	2205      	movs	r2, #5
    57f6:	f814 1b01 	ldrb.w	r1, [r4], #1
    57fa:	4856      	ldr	r0, [pc, #344]	; (5954 <_vfiprintf_r+0x244>)
    57fc:	f000 ffe9 	bl	67d2 <memchr>
    5800:	9b04      	ldr	r3, [sp, #16]
    5802:	b9d0      	cbnz	r0, 583a <_vfiprintf_r+0x12a>
    5804:	06d9      	lsls	r1, r3, #27
    5806:	bf44      	itt	mi
    5808:	2220      	movmi	r2, #32
    580a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    580e:	071a      	lsls	r2, r3, #28
    5810:	bf44      	itt	mi
    5812:	222b      	movmi	r2, #43	; 0x2b
    5814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5818:	f89a 2000 	ldrb.w	r2, [sl]
    581c:	2a2a      	cmp	r2, #42	; 0x2a
    581e:	d014      	beq.n	584a <_vfiprintf_r+0x13a>
    5820:	4654      	mov	r4, sl
    5822:	2000      	movs	r0, #0
    5824:	f04f 0c0a 	mov.w	ip, #10
    5828:	9a07      	ldr	r2, [sp, #28]
    582a:	4621      	mov	r1, r4
    582c:	f811 3b01 	ldrb.w	r3, [r1], #1
    5830:	3b30      	subs	r3, #48	; 0x30
    5832:	2b09      	cmp	r3, #9
    5834:	d94a      	bls.n	58cc <_vfiprintf_r+0x1bc>
    5836:	b970      	cbnz	r0, 5856 <_vfiprintf_r+0x146>
    5838:	e014      	b.n	5864 <_vfiprintf_r+0x154>
    583a:	eba0 0008 	sub.w	r0, r0, r8
    583e:	fa09 f000 	lsl.w	r0, r9, r0
    5842:	4318      	orrs	r0, r3
    5844:	46a2      	mov	sl, r4
    5846:	9004      	str	r0, [sp, #16]
    5848:	e7d3      	b.n	57f2 <_vfiprintf_r+0xe2>
    584a:	9a03      	ldr	r2, [sp, #12]
    584c:	1d11      	adds	r1, r2, #4
    584e:	6812      	ldr	r2, [r2, #0]
    5850:	9103      	str	r1, [sp, #12]
    5852:	2a00      	cmp	r2, #0
    5854:	db01      	blt.n	585a <_vfiprintf_r+0x14a>
    5856:	9207      	str	r2, [sp, #28]
    5858:	e004      	b.n	5864 <_vfiprintf_r+0x154>
    585a:	4252      	negs	r2, r2
    585c:	f043 0302 	orr.w	r3, r3, #2
    5860:	9207      	str	r2, [sp, #28]
    5862:	9304      	str	r3, [sp, #16]
    5864:	7823      	ldrb	r3, [r4, #0]
    5866:	2b2e      	cmp	r3, #46	; 0x2e
    5868:	d10a      	bne.n	5880 <_vfiprintf_r+0x170>
    586a:	7863      	ldrb	r3, [r4, #1]
    586c:	2b2a      	cmp	r3, #42	; 0x2a
    586e:	d132      	bne.n	58d6 <_vfiprintf_r+0x1c6>
    5870:	9b03      	ldr	r3, [sp, #12]
    5872:	3402      	adds	r4, #2
    5874:	1d1a      	adds	r2, r3, #4
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	9203      	str	r2, [sp, #12]
    587a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    587e:	9305      	str	r3, [sp, #20]
    5880:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 5958 <_vfiprintf_r+0x248>
    5884:	2203      	movs	r2, #3
    5886:	4650      	mov	r0, sl
    5888:	7821      	ldrb	r1, [r4, #0]
    588a:	f000 ffa2 	bl	67d2 <memchr>
    588e:	b138      	cbz	r0, 58a0 <_vfiprintf_r+0x190>
    5890:	2240      	movs	r2, #64	; 0x40
    5892:	9b04      	ldr	r3, [sp, #16]
    5894:	eba0 000a 	sub.w	r0, r0, sl
    5898:	4082      	lsls	r2, r0
    589a:	4313      	orrs	r3, r2
    589c:	3401      	adds	r4, #1
    589e:	9304      	str	r3, [sp, #16]
    58a0:	f814 1b01 	ldrb.w	r1, [r4], #1
    58a4:	2206      	movs	r2, #6
    58a6:	482d      	ldr	r0, [pc, #180]	; (595c <_vfiprintf_r+0x24c>)
    58a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    58ac:	f000 ff91 	bl	67d2 <memchr>
    58b0:	2800      	cmp	r0, #0
    58b2:	d03f      	beq.n	5934 <_vfiprintf_r+0x224>
    58b4:	4b2a      	ldr	r3, [pc, #168]	; (5960 <_vfiprintf_r+0x250>)
    58b6:	bb1b      	cbnz	r3, 5900 <_vfiprintf_r+0x1f0>
    58b8:	9b03      	ldr	r3, [sp, #12]
    58ba:	3307      	adds	r3, #7
    58bc:	f023 0307 	bic.w	r3, r3, #7
    58c0:	3308      	adds	r3, #8
    58c2:	9303      	str	r3, [sp, #12]
    58c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58c6:	443b      	add	r3, r7
    58c8:	9309      	str	r3, [sp, #36]	; 0x24
    58ca:	e76b      	b.n	57a4 <_vfiprintf_r+0x94>
    58cc:	460c      	mov	r4, r1
    58ce:	2001      	movs	r0, #1
    58d0:	fb0c 3202 	mla	r2, ip, r2, r3
    58d4:	e7a9      	b.n	582a <_vfiprintf_r+0x11a>
    58d6:	2300      	movs	r3, #0
    58d8:	f04f 0c0a 	mov.w	ip, #10
    58dc:	4619      	mov	r1, r3
    58de:	3401      	adds	r4, #1
    58e0:	9305      	str	r3, [sp, #20]
    58e2:	4620      	mov	r0, r4
    58e4:	f810 2b01 	ldrb.w	r2, [r0], #1
    58e8:	3a30      	subs	r2, #48	; 0x30
    58ea:	2a09      	cmp	r2, #9
    58ec:	d903      	bls.n	58f6 <_vfiprintf_r+0x1e6>
    58ee:	2b00      	cmp	r3, #0
    58f0:	d0c6      	beq.n	5880 <_vfiprintf_r+0x170>
    58f2:	9105      	str	r1, [sp, #20]
    58f4:	e7c4      	b.n	5880 <_vfiprintf_r+0x170>
    58f6:	4604      	mov	r4, r0
    58f8:	2301      	movs	r3, #1
    58fa:	fb0c 2101 	mla	r1, ip, r1, r2
    58fe:	e7f0      	b.n	58e2 <_vfiprintf_r+0x1d2>
    5900:	ab03      	add	r3, sp, #12
    5902:	9300      	str	r3, [sp, #0]
    5904:	462a      	mov	r2, r5
    5906:	4630      	mov	r0, r6
    5908:	4b16      	ldr	r3, [pc, #88]	; (5964 <_vfiprintf_r+0x254>)
    590a:	a904      	add	r1, sp, #16
    590c:	f3af 8000 	nop.w
    5910:	4607      	mov	r7, r0
    5912:	1c78      	adds	r0, r7, #1
    5914:	d1d6      	bne.n	58c4 <_vfiprintf_r+0x1b4>
    5916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    5918:	07d9      	lsls	r1, r3, #31
    591a:	d405      	bmi.n	5928 <_vfiprintf_r+0x218>
    591c:	89ab      	ldrh	r3, [r5, #12]
    591e:	059a      	lsls	r2, r3, #22
    5920:	d402      	bmi.n	5928 <_vfiprintf_r+0x218>
    5922:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5924:	f000 ff2f 	bl	6786 <__retarget_lock_release_recursive>
    5928:	89ab      	ldrh	r3, [r5, #12]
    592a:	065b      	lsls	r3, r3, #25
    592c:	f53f af16 	bmi.w	575c <_vfiprintf_r+0x4c>
    5930:	9809      	ldr	r0, [sp, #36]	; 0x24
    5932:	e715      	b.n	5760 <_vfiprintf_r+0x50>
    5934:	ab03      	add	r3, sp, #12
    5936:	9300      	str	r3, [sp, #0]
    5938:	462a      	mov	r2, r5
    593a:	4630      	mov	r0, r6
    593c:	4b09      	ldr	r3, [pc, #36]	; (5964 <_vfiprintf_r+0x254>)
    593e:	a904      	add	r1, sp, #16
    5940:	f000 f812 	bl	5968 <_printf_i>
    5944:	e7e4      	b.n	5910 <_vfiprintf_r+0x200>
    5946:	bf00      	nop
    5948:	000071c8 	.word	0x000071c8
    594c:	000071a8 	.word	0x000071a8
    5950:	00007188 	.word	0x00007188
    5954:	00007f75 	.word	0x00007f75
    5958:	00007f7b 	.word	0x00007f7b
    595c:	00007f7f 	.word	0x00007f7f
    5960:	00000000 	.word	0x00000000
    5964:	000064d3 	.word	0x000064d3

00005968 <_printf_i>:
    5968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    596c:	7e0f      	ldrb	r7, [r1, #24]
    596e:	4691      	mov	r9, r2
    5970:	2f78      	cmp	r7, #120	; 0x78
    5972:	4680      	mov	r8, r0
    5974:	460c      	mov	r4, r1
    5976:	469a      	mov	sl, r3
    5978:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    597a:	f101 0243 	add.w	r2, r1, #67	; 0x43
    597e:	d807      	bhi.n	5990 <_printf_i+0x28>
    5980:	2f62      	cmp	r7, #98	; 0x62
    5982:	d80a      	bhi.n	599a <_printf_i+0x32>
    5984:	2f00      	cmp	r7, #0
    5986:	f000 80e0 	beq.w	5b4a <_printf_i+0x1e2>
    598a:	2f58      	cmp	r7, #88	; 0x58
    598c:	f000 80bb 	beq.w	5b06 <_printf_i+0x19e>
    5990:	f104 0642 	add.w	r6, r4, #66	; 0x42
    5994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    5998:	e03a      	b.n	5a10 <_printf_i+0xa8>
    599a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    599e:	2b15      	cmp	r3, #21
    59a0:	d8f6      	bhi.n	5990 <_printf_i+0x28>
    59a2:	a101      	add	r1, pc, #4	; (adr r1, 59a8 <_printf_i+0x40>)
    59a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    59a8:	00005a01 	.word	0x00005a01
    59ac:	00005a15 	.word	0x00005a15
    59b0:	00005991 	.word	0x00005991
    59b4:	00005991 	.word	0x00005991
    59b8:	00005991 	.word	0x00005991
    59bc:	00005991 	.word	0x00005991
    59c0:	00005a15 	.word	0x00005a15
    59c4:	00005991 	.word	0x00005991
    59c8:	00005991 	.word	0x00005991
    59cc:	00005991 	.word	0x00005991
    59d0:	00005991 	.word	0x00005991
    59d4:	00005b31 	.word	0x00005b31
    59d8:	00005aa5 	.word	0x00005aa5
    59dc:	00005ae7 	.word	0x00005ae7
    59e0:	00005991 	.word	0x00005991
    59e4:	00005991 	.word	0x00005991
    59e8:	00005b53 	.word	0x00005b53
    59ec:	00005991 	.word	0x00005991
    59f0:	00005aa5 	.word	0x00005aa5
    59f4:	00005991 	.word	0x00005991
    59f8:	00005991 	.word	0x00005991
    59fc:	00005aef 	.word	0x00005aef
    5a00:	682b      	ldr	r3, [r5, #0]
    5a02:	f104 0642 	add.w	r6, r4, #66	; 0x42
    5a06:	1d1a      	adds	r2, r3, #4
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	602a      	str	r2, [r5, #0]
    5a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5a10:	2301      	movs	r3, #1
    5a12:	e0ab      	b.n	5b6c <_printf_i+0x204>
    5a14:	6823      	ldr	r3, [r4, #0]
    5a16:	6829      	ldr	r1, [r5, #0]
    5a18:	061f      	lsls	r7, r3, #24
    5a1a:	f101 0004 	add.w	r0, r1, #4
    5a1e:	6028      	str	r0, [r5, #0]
    5a20:	d501      	bpl.n	5a26 <_printf_i+0xbe>
    5a22:	680d      	ldr	r5, [r1, #0]
    5a24:	e003      	b.n	5a2e <_printf_i+0xc6>
    5a26:	065e      	lsls	r6, r3, #25
    5a28:	d5fb      	bpl.n	5a22 <_printf_i+0xba>
    5a2a:	f9b1 5000 	ldrsh.w	r5, [r1]
    5a2e:	2d00      	cmp	r5, #0
    5a30:	6861      	ldr	r1, [r4, #4]
    5a32:	da7a      	bge.n	5b2a <_printf_i+0x1c2>
    5a34:	202d      	movs	r0, #45	; 0x2d
    5a36:	2900      	cmp	r1, #0
    5a38:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5a3c:	60a1      	str	r1, [r4, #8]
    5a3e:	da2d      	bge.n	5a9c <_printf_i+0x134>
    5a40:	230a      	movs	r3, #10
    5a42:	485e      	ldr	r0, [pc, #376]	; (5bbc <_printf_i+0x254>)
    5a44:	426d      	negs	r5, r5
    5a46:	4616      	mov	r6, r2
    5a48:	fbb5 f1f3 	udiv	r1, r5, r3
    5a4c:	fb03 5711 	mls	r7, r3, r1, r5
    5a50:	5dc7      	ldrb	r7, [r0, r7]
    5a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
    5a56:	462f      	mov	r7, r5
    5a58:	42bb      	cmp	r3, r7
    5a5a:	460d      	mov	r5, r1
    5a5c:	d9f4      	bls.n	5a48 <_printf_i+0xe0>
    5a5e:	2b08      	cmp	r3, #8
    5a60:	d10b      	bne.n	5a7a <_printf_i+0x112>
    5a62:	6823      	ldr	r3, [r4, #0]
    5a64:	07df      	lsls	r7, r3, #31
    5a66:	d508      	bpl.n	5a7a <_printf_i+0x112>
    5a68:	6923      	ldr	r3, [r4, #16]
    5a6a:	6861      	ldr	r1, [r4, #4]
    5a6c:	4299      	cmp	r1, r3
    5a6e:	bfde      	ittt	le
    5a70:	2330      	movle	r3, #48	; 0x30
    5a72:	f806 3c01 	strble.w	r3, [r6, #-1]
    5a76:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
    5a7a:	1b92      	subs	r2, r2, r6
    5a7c:	6122      	str	r2, [r4, #16]
    5a7e:	464b      	mov	r3, r9
    5a80:	4621      	mov	r1, r4
    5a82:	4640      	mov	r0, r8
    5a84:	f8cd a000 	str.w	sl, [sp]
    5a88:	aa03      	add	r2, sp, #12
    5a8a:	f000 fd34 	bl	64f6 <_printf_common>
    5a8e:	3001      	adds	r0, #1
    5a90:	d171      	bne.n	5b76 <_printf_i+0x20e>
    5a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a96:	b004      	add	sp, #16
    5a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a9c:	f023 0304 	bic.w	r3, r3, #4
    5aa0:	6023      	str	r3, [r4, #0]
    5aa2:	e7cd      	b.n	5a40 <_printf_i+0xd8>
    5aa4:	682b      	ldr	r3, [r5, #0]
    5aa6:	6820      	ldr	r0, [r4, #0]
    5aa8:	1d19      	adds	r1, r3, #4
    5aaa:	6029      	str	r1, [r5, #0]
    5aac:	0605      	lsls	r5, r0, #24
    5aae:	d501      	bpl.n	5ab4 <_printf_i+0x14c>
    5ab0:	681d      	ldr	r5, [r3, #0]
    5ab2:	e002      	b.n	5aba <_printf_i+0x152>
    5ab4:	0641      	lsls	r1, r0, #25
    5ab6:	d5fb      	bpl.n	5ab0 <_printf_i+0x148>
    5ab8:	881d      	ldrh	r5, [r3, #0]
    5aba:	2f6f      	cmp	r7, #111	; 0x6f
    5abc:	bf14      	ite	ne
    5abe:	230a      	movne	r3, #10
    5ac0:	2308      	moveq	r3, #8
    5ac2:	483e      	ldr	r0, [pc, #248]	; (5bbc <_printf_i+0x254>)
    5ac4:	2100      	movs	r1, #0
    5ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    5aca:	6866      	ldr	r6, [r4, #4]
    5acc:	2e00      	cmp	r6, #0
    5ace:	60a6      	str	r6, [r4, #8]
    5ad0:	dbb9      	blt.n	5a46 <_printf_i+0xde>
    5ad2:	6821      	ldr	r1, [r4, #0]
    5ad4:	f021 0104 	bic.w	r1, r1, #4
    5ad8:	6021      	str	r1, [r4, #0]
    5ada:	2d00      	cmp	r5, #0
    5adc:	d1b3      	bne.n	5a46 <_printf_i+0xde>
    5ade:	2e00      	cmp	r6, #0
    5ae0:	d1b1      	bne.n	5a46 <_printf_i+0xde>
    5ae2:	4616      	mov	r6, r2
    5ae4:	e7bb      	b.n	5a5e <_printf_i+0xf6>
    5ae6:	6823      	ldr	r3, [r4, #0]
    5ae8:	f043 0320 	orr.w	r3, r3, #32
    5aec:	6023      	str	r3, [r4, #0]
    5aee:	2778      	movs	r7, #120	; 0x78
    5af0:	4833      	ldr	r0, [pc, #204]	; (5bc0 <_printf_i+0x258>)
    5af2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    5af6:	6829      	ldr	r1, [r5, #0]
    5af8:	6823      	ldr	r3, [r4, #0]
    5afa:	1d0e      	adds	r6, r1, #4
    5afc:	602e      	str	r6, [r5, #0]
    5afe:	061e      	lsls	r6, r3, #24
    5b00:	d503      	bpl.n	5b0a <_printf_i+0x1a2>
    5b02:	680d      	ldr	r5, [r1, #0]
    5b04:	e004      	b.n	5b10 <_printf_i+0x1a8>
    5b06:	482d      	ldr	r0, [pc, #180]	; (5bbc <_printf_i+0x254>)
    5b08:	e7f3      	b.n	5af2 <_printf_i+0x18a>
    5b0a:	065d      	lsls	r5, r3, #25
    5b0c:	d5f9      	bpl.n	5b02 <_printf_i+0x19a>
    5b0e:	880d      	ldrh	r5, [r1, #0]
    5b10:	07d9      	lsls	r1, r3, #31
    5b12:	bf44      	itt	mi
    5b14:	f043 0320 	orrmi.w	r3, r3, #32
    5b18:	6023      	strmi	r3, [r4, #0]
    5b1a:	b10d      	cbz	r5, 5b20 <_printf_i+0x1b8>
    5b1c:	2310      	movs	r3, #16
    5b1e:	e7d1      	b.n	5ac4 <_printf_i+0x15c>
    5b20:	6823      	ldr	r3, [r4, #0]
    5b22:	f023 0320 	bic.w	r3, r3, #32
    5b26:	6023      	str	r3, [r4, #0]
    5b28:	e7f8      	b.n	5b1c <_printf_i+0x1b4>
    5b2a:	230a      	movs	r3, #10
    5b2c:	4823      	ldr	r0, [pc, #140]	; (5bbc <_printf_i+0x254>)
    5b2e:	e7cc      	b.n	5aca <_printf_i+0x162>
    5b30:	682b      	ldr	r3, [r5, #0]
    5b32:	6826      	ldr	r6, [r4, #0]
    5b34:	1d18      	adds	r0, r3, #4
    5b36:	6961      	ldr	r1, [r4, #20]
    5b38:	6028      	str	r0, [r5, #0]
    5b3a:	0635      	lsls	r5, r6, #24
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	d501      	bpl.n	5b44 <_printf_i+0x1dc>
    5b40:	6019      	str	r1, [r3, #0]
    5b42:	e002      	b.n	5b4a <_printf_i+0x1e2>
    5b44:	0670      	lsls	r0, r6, #25
    5b46:	d5fb      	bpl.n	5b40 <_printf_i+0x1d8>
    5b48:	8019      	strh	r1, [r3, #0]
    5b4a:	2300      	movs	r3, #0
    5b4c:	4616      	mov	r6, r2
    5b4e:	6123      	str	r3, [r4, #16]
    5b50:	e795      	b.n	5a7e <_printf_i+0x116>
    5b52:	682b      	ldr	r3, [r5, #0]
    5b54:	2100      	movs	r1, #0
    5b56:	1d1a      	adds	r2, r3, #4
    5b58:	602a      	str	r2, [r5, #0]
    5b5a:	681e      	ldr	r6, [r3, #0]
    5b5c:	6862      	ldr	r2, [r4, #4]
    5b5e:	4630      	mov	r0, r6
    5b60:	f000 fe37 	bl	67d2 <memchr>
    5b64:	b108      	cbz	r0, 5b6a <_printf_i+0x202>
    5b66:	1b80      	subs	r0, r0, r6
    5b68:	6060      	str	r0, [r4, #4]
    5b6a:	6863      	ldr	r3, [r4, #4]
    5b6c:	6123      	str	r3, [r4, #16]
    5b6e:	2300      	movs	r3, #0
    5b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5b74:	e783      	b.n	5a7e <_printf_i+0x116>
    5b76:	4632      	mov	r2, r6
    5b78:	4649      	mov	r1, r9
    5b7a:	4640      	mov	r0, r8
    5b7c:	6923      	ldr	r3, [r4, #16]
    5b7e:	47d0      	blx	sl
    5b80:	3001      	adds	r0, #1
    5b82:	d086      	beq.n	5a92 <_printf_i+0x12a>
    5b84:	6823      	ldr	r3, [r4, #0]
    5b86:	079b      	lsls	r3, r3, #30
    5b88:	d414      	bmi.n	5bb4 <_printf_i+0x24c>
    5b8a:	68e0      	ldr	r0, [r4, #12]
    5b8c:	9b03      	ldr	r3, [sp, #12]
    5b8e:	4298      	cmp	r0, r3
    5b90:	bfb8      	it	lt
    5b92:	4618      	movlt	r0, r3
    5b94:	e77f      	b.n	5a96 <_printf_i+0x12e>
    5b96:	2301      	movs	r3, #1
    5b98:	4632      	mov	r2, r6
    5b9a:	4649      	mov	r1, r9
    5b9c:	4640      	mov	r0, r8
    5b9e:	47d0      	blx	sl
    5ba0:	3001      	adds	r0, #1
    5ba2:	f43f af76 	beq.w	5a92 <_printf_i+0x12a>
    5ba6:	3501      	adds	r5, #1
    5ba8:	68e3      	ldr	r3, [r4, #12]
    5baa:	9903      	ldr	r1, [sp, #12]
    5bac:	1a5b      	subs	r3, r3, r1
    5bae:	42ab      	cmp	r3, r5
    5bb0:	dcf1      	bgt.n	5b96 <_printf_i+0x22e>
    5bb2:	e7ea      	b.n	5b8a <_printf_i+0x222>
    5bb4:	2500      	movs	r5, #0
    5bb6:	f104 0619 	add.w	r6, r4, #25
    5bba:	e7f5      	b.n	5ba8 <_printf_i+0x240>
    5bbc:	00007f86 	.word	0x00007f86
    5bc0:	00007f97 	.word	0x00007f97

00005bc4 <iprintf>:
    5bc4:	b40f      	push	{r0, r1, r2, r3}
    5bc6:	4b0a      	ldr	r3, [pc, #40]	; (5bf0 <iprintf+0x2c>)
    5bc8:	b513      	push	{r0, r1, r4, lr}
    5bca:	681c      	ldr	r4, [r3, #0]
    5bcc:	b124      	cbz	r4, 5bd8 <iprintf+0x14>
    5bce:	69a3      	ldr	r3, [r4, #24]
    5bd0:	b913      	cbnz	r3, 5bd8 <iprintf+0x14>
    5bd2:	4620      	mov	r0, r4
    5bd4:	f000 f95a 	bl	5e8c <__sinit>
    5bd8:	ab05      	add	r3, sp, #20
    5bda:	4620      	mov	r0, r4
    5bdc:	9a04      	ldr	r2, [sp, #16]
    5bde:	68a1      	ldr	r1, [r4, #8]
    5be0:	9301      	str	r3, [sp, #4]
    5be2:	f7ff fd95 	bl	5710 <_vfiprintf_r>
    5be6:	b002      	add	sp, #8
    5be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5bec:	b004      	add	sp, #16
    5bee:	4770      	bx	lr
    5bf0:	00008410 	.word	0x00008410

00005bf4 <_sbrk_r>:
    5bf4:	b538      	push	{r3, r4, r5, lr}
    5bf6:	2300      	movs	r3, #0
    5bf8:	4d05      	ldr	r5, [pc, #20]	; (5c10 <_sbrk_r+0x1c>)
    5bfa:	4604      	mov	r4, r0
    5bfc:	4608      	mov	r0, r1
    5bfe:	602b      	str	r3, [r5, #0]
    5c00:	f7fb ffba 	bl	1b78 <_sbrk>
    5c04:	1c43      	adds	r3, r0, #1
    5c06:	d102      	bne.n	5c0e <_sbrk_r+0x1a>
    5c08:	682b      	ldr	r3, [r5, #0]
    5c0a:	b103      	cbz	r3, 5c0e <_sbrk_r+0x1a>
    5c0c:	6023      	str	r3, [r4, #0]
    5c0e:	bd38      	pop	{r3, r4, r5, pc}
    5c10:	0000883c 	.word	0x0000883c

00005c14 <__swbuf_r>:
    5c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c16:	460e      	mov	r6, r1
    5c18:	4614      	mov	r4, r2
    5c1a:	4605      	mov	r5, r0
    5c1c:	b118      	cbz	r0, 5c26 <__swbuf_r+0x12>
    5c1e:	6983      	ldr	r3, [r0, #24]
    5c20:	b90b      	cbnz	r3, 5c26 <__swbuf_r+0x12>
    5c22:	f000 f933 	bl	5e8c <__sinit>
    5c26:	4b21      	ldr	r3, [pc, #132]	; (5cac <__swbuf_r+0x98>)
    5c28:	429c      	cmp	r4, r3
    5c2a:	d110      	bne.n	5c4e <__swbuf_r+0x3a>
    5c2c:	686c      	ldr	r4, [r5, #4]
    5c2e:	69a3      	ldr	r3, [r4, #24]
    5c30:	60a3      	str	r3, [r4, #8]
    5c32:	89a3      	ldrh	r3, [r4, #12]
    5c34:	071a      	lsls	r2, r3, #28
    5c36:	d501      	bpl.n	5c3c <__swbuf_r+0x28>
    5c38:	6923      	ldr	r3, [r4, #16]
    5c3a:	b993      	cbnz	r3, 5c62 <__swbuf_r+0x4e>
    5c3c:	4621      	mov	r1, r4
    5c3e:	4628      	mov	r0, r5
    5c40:	f000 f83a 	bl	5cb8 <__swsetup_r>
    5c44:	b168      	cbz	r0, 5c62 <__swbuf_r+0x4e>
    5c46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    5c4a:	4638      	mov	r0, r7
    5c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c4e:	4b18      	ldr	r3, [pc, #96]	; (5cb0 <__swbuf_r+0x9c>)
    5c50:	429c      	cmp	r4, r3
    5c52:	d101      	bne.n	5c58 <__swbuf_r+0x44>
    5c54:	68ac      	ldr	r4, [r5, #8]
    5c56:	e7ea      	b.n	5c2e <__swbuf_r+0x1a>
    5c58:	4b16      	ldr	r3, [pc, #88]	; (5cb4 <__swbuf_r+0xa0>)
    5c5a:	429c      	cmp	r4, r3
    5c5c:	bf08      	it	eq
    5c5e:	68ec      	ldreq	r4, [r5, #12]
    5c60:	e7e5      	b.n	5c2e <__swbuf_r+0x1a>
    5c62:	6923      	ldr	r3, [r4, #16]
    5c64:	6820      	ldr	r0, [r4, #0]
    5c66:	b2f6      	uxtb	r6, r6
    5c68:	1ac0      	subs	r0, r0, r3
    5c6a:	6963      	ldr	r3, [r4, #20]
    5c6c:	4637      	mov	r7, r6
    5c6e:	4283      	cmp	r3, r0
    5c70:	dc05      	bgt.n	5c7e <__swbuf_r+0x6a>
    5c72:	4621      	mov	r1, r4
    5c74:	4628      	mov	r0, r5
    5c76:	f000 f88b 	bl	5d90 <_fflush_r>
    5c7a:	2800      	cmp	r0, #0
    5c7c:	d1e3      	bne.n	5c46 <__swbuf_r+0x32>
    5c7e:	68a3      	ldr	r3, [r4, #8]
    5c80:	3001      	adds	r0, #1
    5c82:	3b01      	subs	r3, #1
    5c84:	60a3      	str	r3, [r4, #8]
    5c86:	6823      	ldr	r3, [r4, #0]
    5c88:	1c5a      	adds	r2, r3, #1
    5c8a:	6022      	str	r2, [r4, #0]
    5c8c:	701e      	strb	r6, [r3, #0]
    5c8e:	6963      	ldr	r3, [r4, #20]
    5c90:	4283      	cmp	r3, r0
    5c92:	d004      	beq.n	5c9e <__swbuf_r+0x8a>
    5c94:	89a3      	ldrh	r3, [r4, #12]
    5c96:	07db      	lsls	r3, r3, #31
    5c98:	d5d7      	bpl.n	5c4a <__swbuf_r+0x36>
    5c9a:	2e0a      	cmp	r6, #10
    5c9c:	d1d5      	bne.n	5c4a <__swbuf_r+0x36>
    5c9e:	4621      	mov	r1, r4
    5ca0:	4628      	mov	r0, r5
    5ca2:	f000 f875 	bl	5d90 <_fflush_r>
    5ca6:	2800      	cmp	r0, #0
    5ca8:	d0cf      	beq.n	5c4a <__swbuf_r+0x36>
    5caa:	e7cc      	b.n	5c46 <__swbuf_r+0x32>
    5cac:	000071c8 	.word	0x000071c8
    5cb0:	000071a8 	.word	0x000071a8
    5cb4:	00007188 	.word	0x00007188

00005cb8 <__swsetup_r>:
    5cb8:	4b31      	ldr	r3, [pc, #196]	; (5d80 <__swsetup_r+0xc8>)
    5cba:	b570      	push	{r4, r5, r6, lr}
    5cbc:	681d      	ldr	r5, [r3, #0]
    5cbe:	4606      	mov	r6, r0
    5cc0:	460c      	mov	r4, r1
    5cc2:	b125      	cbz	r5, 5cce <__swsetup_r+0x16>
    5cc4:	69ab      	ldr	r3, [r5, #24]
    5cc6:	b913      	cbnz	r3, 5cce <__swsetup_r+0x16>
    5cc8:	4628      	mov	r0, r5
    5cca:	f000 f8df 	bl	5e8c <__sinit>
    5cce:	4b2d      	ldr	r3, [pc, #180]	; (5d84 <__swsetup_r+0xcc>)
    5cd0:	429c      	cmp	r4, r3
    5cd2:	d10e      	bne.n	5cf2 <__swsetup_r+0x3a>
    5cd4:	686c      	ldr	r4, [r5, #4]
    5cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5cda:	071a      	lsls	r2, r3, #28
    5cdc:	d42c      	bmi.n	5d38 <__swsetup_r+0x80>
    5cde:	06dd      	lsls	r5, r3, #27
    5ce0:	d411      	bmi.n	5d06 <__swsetup_r+0x4e>
    5ce2:	2209      	movs	r2, #9
    5ce4:	6032      	str	r2, [r6, #0]
    5ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5cee:	81a3      	strh	r3, [r4, #12]
    5cf0:	e03d      	b.n	5d6e <__swsetup_r+0xb6>
    5cf2:	4b25      	ldr	r3, [pc, #148]	; (5d88 <__swsetup_r+0xd0>)
    5cf4:	429c      	cmp	r4, r3
    5cf6:	d101      	bne.n	5cfc <__swsetup_r+0x44>
    5cf8:	68ac      	ldr	r4, [r5, #8]
    5cfa:	e7ec      	b.n	5cd6 <__swsetup_r+0x1e>
    5cfc:	4b23      	ldr	r3, [pc, #140]	; (5d8c <__swsetup_r+0xd4>)
    5cfe:	429c      	cmp	r4, r3
    5d00:	bf08      	it	eq
    5d02:	68ec      	ldreq	r4, [r5, #12]
    5d04:	e7e7      	b.n	5cd6 <__swsetup_r+0x1e>
    5d06:	0758      	lsls	r0, r3, #29
    5d08:	d512      	bpl.n	5d30 <__swsetup_r+0x78>
    5d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5d0c:	b141      	cbz	r1, 5d20 <__swsetup_r+0x68>
    5d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
    5d12:	4299      	cmp	r1, r3
    5d14:	d002      	beq.n	5d1c <__swsetup_r+0x64>
    5d16:	4630      	mov	r0, r6
    5d18:	f7ff fc58 	bl	55cc <_free_r>
    5d1c:	2300      	movs	r3, #0
    5d1e:	6363      	str	r3, [r4, #52]	; 0x34
    5d20:	89a3      	ldrh	r3, [r4, #12]
    5d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    5d26:	81a3      	strh	r3, [r4, #12]
    5d28:	2300      	movs	r3, #0
    5d2a:	6063      	str	r3, [r4, #4]
    5d2c:	6923      	ldr	r3, [r4, #16]
    5d2e:	6023      	str	r3, [r4, #0]
    5d30:	89a3      	ldrh	r3, [r4, #12]
    5d32:	f043 0308 	orr.w	r3, r3, #8
    5d36:	81a3      	strh	r3, [r4, #12]
    5d38:	6923      	ldr	r3, [r4, #16]
    5d3a:	b94b      	cbnz	r3, 5d50 <__swsetup_r+0x98>
    5d3c:	89a3      	ldrh	r3, [r4, #12]
    5d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
    5d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5d46:	d003      	beq.n	5d50 <__swsetup_r+0x98>
    5d48:	4621      	mov	r1, r4
    5d4a:	4630      	mov	r0, r6
    5d4c:	f000 f91c 	bl	5f88 <__smakebuf_r>
    5d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5d54:	f013 0201 	ands.w	r2, r3, #1
    5d58:	d00a      	beq.n	5d70 <__swsetup_r+0xb8>
    5d5a:	2200      	movs	r2, #0
    5d5c:	60a2      	str	r2, [r4, #8]
    5d5e:	6962      	ldr	r2, [r4, #20]
    5d60:	4252      	negs	r2, r2
    5d62:	61a2      	str	r2, [r4, #24]
    5d64:	6922      	ldr	r2, [r4, #16]
    5d66:	b942      	cbnz	r2, 5d7a <__swsetup_r+0xc2>
    5d68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    5d6c:	d1bb      	bne.n	5ce6 <__swsetup_r+0x2e>
    5d6e:	bd70      	pop	{r4, r5, r6, pc}
    5d70:	0799      	lsls	r1, r3, #30
    5d72:	bf58      	it	pl
    5d74:	6962      	ldrpl	r2, [r4, #20]
    5d76:	60a2      	str	r2, [r4, #8]
    5d78:	e7f4      	b.n	5d64 <__swsetup_r+0xac>
    5d7a:	2000      	movs	r0, #0
    5d7c:	e7f7      	b.n	5d6e <__swsetup_r+0xb6>
    5d7e:	bf00      	nop
    5d80:	00008410 	.word	0x00008410
    5d84:	000071c8 	.word	0x000071c8
    5d88:	000071a8 	.word	0x000071a8
    5d8c:	00007188 	.word	0x00007188

00005d90 <_fflush_r>:
    5d90:	b538      	push	{r3, r4, r5, lr}
    5d92:	690b      	ldr	r3, [r1, #16]
    5d94:	4605      	mov	r5, r0
    5d96:	460c      	mov	r4, r1
    5d98:	b913      	cbnz	r3, 5da0 <_fflush_r+0x10>
    5d9a:	2500      	movs	r5, #0
    5d9c:	4628      	mov	r0, r5
    5d9e:	bd38      	pop	{r3, r4, r5, pc}
    5da0:	b118      	cbz	r0, 5daa <_fflush_r+0x1a>
    5da2:	6983      	ldr	r3, [r0, #24]
    5da4:	b90b      	cbnz	r3, 5daa <_fflush_r+0x1a>
    5da6:	f000 f871 	bl	5e8c <__sinit>
    5daa:	4b14      	ldr	r3, [pc, #80]	; (5dfc <_fflush_r+0x6c>)
    5dac:	429c      	cmp	r4, r3
    5dae:	d11b      	bne.n	5de8 <_fflush_r+0x58>
    5db0:	686c      	ldr	r4, [r5, #4]
    5db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5db6:	2b00      	cmp	r3, #0
    5db8:	d0ef      	beq.n	5d9a <_fflush_r+0xa>
    5dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
    5dbc:	07d0      	lsls	r0, r2, #31
    5dbe:	d404      	bmi.n	5dca <_fflush_r+0x3a>
    5dc0:	0599      	lsls	r1, r3, #22
    5dc2:	d402      	bmi.n	5dca <_fflush_r+0x3a>
    5dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5dc6:	f000 fcdd 	bl	6784 <__retarget_lock_acquire_recursive>
    5dca:	4628      	mov	r0, r5
    5dcc:	4621      	mov	r1, r4
    5dce:	f000 fc23 	bl	6618 <__sflush_r>
    5dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5dd4:	4605      	mov	r5, r0
    5dd6:	07da      	lsls	r2, r3, #31
    5dd8:	d4e0      	bmi.n	5d9c <_fflush_r+0xc>
    5dda:	89a3      	ldrh	r3, [r4, #12]
    5ddc:	059b      	lsls	r3, r3, #22
    5dde:	d4dd      	bmi.n	5d9c <_fflush_r+0xc>
    5de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5de2:	f000 fcd0 	bl	6786 <__retarget_lock_release_recursive>
    5de6:	e7d9      	b.n	5d9c <_fflush_r+0xc>
    5de8:	4b05      	ldr	r3, [pc, #20]	; (5e00 <_fflush_r+0x70>)
    5dea:	429c      	cmp	r4, r3
    5dec:	d101      	bne.n	5df2 <_fflush_r+0x62>
    5dee:	68ac      	ldr	r4, [r5, #8]
    5df0:	e7df      	b.n	5db2 <_fflush_r+0x22>
    5df2:	4b04      	ldr	r3, [pc, #16]	; (5e04 <_fflush_r+0x74>)
    5df4:	429c      	cmp	r4, r3
    5df6:	bf08      	it	eq
    5df8:	68ec      	ldreq	r4, [r5, #12]
    5dfa:	e7da      	b.n	5db2 <_fflush_r+0x22>
    5dfc:	000071c8 	.word	0x000071c8
    5e00:	000071a8 	.word	0x000071a8
    5e04:	00007188 	.word	0x00007188

00005e08 <std>:
    5e08:	2300      	movs	r3, #0
    5e0a:	b510      	push	{r4, lr}
    5e0c:	4604      	mov	r4, r0
    5e0e:	e9c0 3300 	strd	r3, r3, [r0]
    5e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
    5e16:	6083      	str	r3, [r0, #8]
    5e18:	8181      	strh	r1, [r0, #12]
    5e1a:	6643      	str	r3, [r0, #100]	; 0x64
    5e1c:	81c2      	strh	r2, [r0, #14]
    5e1e:	6183      	str	r3, [r0, #24]
    5e20:	4619      	mov	r1, r3
    5e22:	2208      	movs	r2, #8
    5e24:	305c      	adds	r0, #92	; 0x5c
    5e26:	f000 fb37 	bl	6498 <memset>
    5e2a:	4b05      	ldr	r3, [pc, #20]	; (5e40 <std+0x38>)
    5e2c:	6224      	str	r4, [r4, #32]
    5e2e:	6263      	str	r3, [r4, #36]	; 0x24
    5e30:	4b04      	ldr	r3, [pc, #16]	; (5e44 <std+0x3c>)
    5e32:	62a3      	str	r3, [r4, #40]	; 0x28
    5e34:	4b04      	ldr	r3, [pc, #16]	; (5e48 <std+0x40>)
    5e36:	62e3      	str	r3, [r4, #44]	; 0x2c
    5e38:	4b04      	ldr	r3, [pc, #16]	; (5e4c <std+0x44>)
    5e3a:	6323      	str	r3, [r4, #48]	; 0x30
    5e3c:	bd10      	pop	{r4, pc}
    5e3e:	bf00      	nop
    5e40:	000067ef 	.word	0x000067ef
    5e44:	00006811 	.word	0x00006811
    5e48:	00006849 	.word	0x00006849
    5e4c:	0000686d 	.word	0x0000686d

00005e50 <_cleanup_r>:
    5e50:	4901      	ldr	r1, [pc, #4]	; (5e58 <_cleanup_r+0x8>)
    5e52:	f000 bc77 	b.w	6744 <_fwalk_reent>
    5e56:	bf00      	nop
    5e58:	00005d91 	.word	0x00005d91

00005e5c <__sfp_lock_acquire>:
    5e5c:	4801      	ldr	r0, [pc, #4]	; (5e64 <__sfp_lock_acquire+0x8>)
    5e5e:	f000 bc91 	b.w	6784 <__retarget_lock_acquire_recursive>
    5e62:	bf00      	nop
    5e64:	00008842 	.word	0x00008842

00005e68 <__sfp_lock_release>:
    5e68:	4801      	ldr	r0, [pc, #4]	; (5e70 <__sfp_lock_release+0x8>)
    5e6a:	f000 bc8c 	b.w	6786 <__retarget_lock_release_recursive>
    5e6e:	bf00      	nop
    5e70:	00008842 	.word	0x00008842

00005e74 <__sinit_lock_acquire>:
    5e74:	4801      	ldr	r0, [pc, #4]	; (5e7c <__sinit_lock_acquire+0x8>)
    5e76:	f000 bc85 	b.w	6784 <__retarget_lock_acquire_recursive>
    5e7a:	bf00      	nop
    5e7c:	00008843 	.word	0x00008843

00005e80 <__sinit_lock_release>:
    5e80:	4801      	ldr	r0, [pc, #4]	; (5e88 <__sinit_lock_release+0x8>)
    5e82:	f000 bc80 	b.w	6786 <__retarget_lock_release_recursive>
    5e86:	bf00      	nop
    5e88:	00008843 	.word	0x00008843

00005e8c <__sinit>:
    5e8c:	b510      	push	{r4, lr}
    5e8e:	4604      	mov	r4, r0
    5e90:	f7ff fff0 	bl	5e74 <__sinit_lock_acquire>
    5e94:	69a3      	ldr	r3, [r4, #24]
    5e96:	b11b      	cbz	r3, 5ea0 <__sinit+0x14>
    5e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e9c:	f7ff bff0 	b.w	5e80 <__sinit_lock_release>
    5ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    5ea4:	6523      	str	r3, [r4, #80]	; 0x50
    5ea6:	4b13      	ldr	r3, [pc, #76]	; (5ef4 <__sinit+0x68>)
    5ea8:	4a13      	ldr	r2, [pc, #76]	; (5ef8 <__sinit+0x6c>)
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	62a2      	str	r2, [r4, #40]	; 0x28
    5eae:	42a3      	cmp	r3, r4
    5eb0:	bf08      	it	eq
    5eb2:	2301      	moveq	r3, #1
    5eb4:	4620      	mov	r0, r4
    5eb6:	bf08      	it	eq
    5eb8:	61a3      	streq	r3, [r4, #24]
    5eba:	f000 f81f 	bl	5efc <__sfp>
    5ebe:	6060      	str	r0, [r4, #4]
    5ec0:	4620      	mov	r0, r4
    5ec2:	f000 f81b 	bl	5efc <__sfp>
    5ec6:	60a0      	str	r0, [r4, #8]
    5ec8:	4620      	mov	r0, r4
    5eca:	f000 f817 	bl	5efc <__sfp>
    5ece:	2200      	movs	r2, #0
    5ed0:	2104      	movs	r1, #4
    5ed2:	60e0      	str	r0, [r4, #12]
    5ed4:	6860      	ldr	r0, [r4, #4]
    5ed6:	f7ff ff97 	bl	5e08 <std>
    5eda:	2201      	movs	r2, #1
    5edc:	2109      	movs	r1, #9
    5ede:	68a0      	ldr	r0, [r4, #8]
    5ee0:	f7ff ff92 	bl	5e08 <std>
    5ee4:	2202      	movs	r2, #2
    5ee6:	2112      	movs	r1, #18
    5ee8:	68e0      	ldr	r0, [r4, #12]
    5eea:	f7ff ff8d 	bl	5e08 <std>
    5eee:	2301      	movs	r3, #1
    5ef0:	61a3      	str	r3, [r4, #24]
    5ef2:	e7d1      	b.n	5e98 <__sinit+0xc>
    5ef4:	00007184 	.word	0x00007184
    5ef8:	00005e51 	.word	0x00005e51

00005efc <__sfp>:
    5efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5efe:	4607      	mov	r7, r0
    5f00:	f7ff ffac 	bl	5e5c <__sfp_lock_acquire>
    5f04:	4b1e      	ldr	r3, [pc, #120]	; (5f80 <__sfp+0x84>)
    5f06:	681e      	ldr	r6, [r3, #0]
    5f08:	69b3      	ldr	r3, [r6, #24]
    5f0a:	b913      	cbnz	r3, 5f12 <__sfp+0x16>
    5f0c:	4630      	mov	r0, r6
    5f0e:	f7ff ffbd 	bl	5e8c <__sinit>
    5f12:	3648      	adds	r6, #72	; 0x48
    5f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    5f18:	3b01      	subs	r3, #1
    5f1a:	d503      	bpl.n	5f24 <__sfp+0x28>
    5f1c:	6833      	ldr	r3, [r6, #0]
    5f1e:	b30b      	cbz	r3, 5f64 <__sfp+0x68>
    5f20:	6836      	ldr	r6, [r6, #0]
    5f22:	e7f7      	b.n	5f14 <__sfp+0x18>
    5f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    5f28:	b9d5      	cbnz	r5, 5f60 <__sfp+0x64>
    5f2a:	4b16      	ldr	r3, [pc, #88]	; (5f84 <__sfp+0x88>)
    5f2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    5f30:	60e3      	str	r3, [r4, #12]
    5f32:	6665      	str	r5, [r4, #100]	; 0x64
    5f34:	f000 fc25 	bl	6782 <__retarget_lock_init_recursive>
    5f38:	f7ff ff96 	bl	5e68 <__sfp_lock_release>
    5f3c:	2208      	movs	r2, #8
    5f3e:	4629      	mov	r1, r5
    5f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
    5f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
    5f48:	6025      	str	r5, [r4, #0]
    5f4a:	61a5      	str	r5, [r4, #24]
    5f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    5f50:	f000 faa2 	bl	6498 <memset>
    5f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    5f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    5f5c:	4620      	mov	r0, r4
    5f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f60:	3468      	adds	r4, #104	; 0x68
    5f62:	e7d9      	b.n	5f18 <__sfp+0x1c>
    5f64:	2104      	movs	r1, #4
    5f66:	4638      	mov	r0, r7
    5f68:	f000 fbd6 	bl	6718 <__sfmoreglue>
    5f6c:	4604      	mov	r4, r0
    5f6e:	6030      	str	r0, [r6, #0]
    5f70:	2800      	cmp	r0, #0
    5f72:	d1d5      	bne.n	5f20 <__sfp+0x24>
    5f74:	f7ff ff78 	bl	5e68 <__sfp_lock_release>
    5f78:	230c      	movs	r3, #12
    5f7a:	603b      	str	r3, [r7, #0]
    5f7c:	e7ee      	b.n	5f5c <__sfp+0x60>
    5f7e:	bf00      	nop
    5f80:	00007184 	.word	0x00007184
    5f84:	ffff0001 	.word	0xffff0001

00005f88 <__smakebuf_r>:
    5f88:	898b      	ldrh	r3, [r1, #12]
    5f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f8c:	079d      	lsls	r5, r3, #30
    5f8e:	4606      	mov	r6, r0
    5f90:	460c      	mov	r4, r1
    5f92:	d507      	bpl.n	5fa4 <__smakebuf_r+0x1c>
    5f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
    5f98:	6023      	str	r3, [r4, #0]
    5f9a:	6123      	str	r3, [r4, #16]
    5f9c:	2301      	movs	r3, #1
    5f9e:	6163      	str	r3, [r4, #20]
    5fa0:	b003      	add	sp, #12
    5fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fa4:	466a      	mov	r2, sp
    5fa6:	ab01      	add	r3, sp, #4
    5fa8:	f000 fbee 	bl	6788 <__swhatbuf_r>
    5fac:	9f00      	ldr	r7, [sp, #0]
    5fae:	4605      	mov	r5, r0
    5fb0:	4639      	mov	r1, r7
    5fb2:	4630      	mov	r0, r6
    5fb4:	f7ff fb52 	bl	565c <_malloc_r>
    5fb8:	b948      	cbnz	r0, 5fce <__smakebuf_r+0x46>
    5fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5fbe:	059a      	lsls	r2, r3, #22
    5fc0:	d4ee      	bmi.n	5fa0 <__smakebuf_r+0x18>
    5fc2:	f023 0303 	bic.w	r3, r3, #3
    5fc6:	f043 0302 	orr.w	r3, r3, #2
    5fca:	81a3      	strh	r3, [r4, #12]
    5fcc:	e7e2      	b.n	5f94 <__smakebuf_r+0xc>
    5fce:	4b0d      	ldr	r3, [pc, #52]	; (6004 <__smakebuf_r+0x7c>)
    5fd0:	62b3      	str	r3, [r6, #40]	; 0x28
    5fd2:	89a3      	ldrh	r3, [r4, #12]
    5fd4:	e9c4 0704 	strd	r0, r7, [r4, #16]
    5fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5fdc:	81a3      	strh	r3, [r4, #12]
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	6020      	str	r0, [r4, #0]
    5fe2:	b15b      	cbz	r3, 5ffc <__smakebuf_r+0x74>
    5fe4:	4630      	mov	r0, r6
    5fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5fea:	f000 f841 	bl	6070 <_isatty_r>
    5fee:	b128      	cbz	r0, 5ffc <__smakebuf_r+0x74>
    5ff0:	89a3      	ldrh	r3, [r4, #12]
    5ff2:	f023 0303 	bic.w	r3, r3, #3
    5ff6:	f043 0301 	orr.w	r3, r3, #1
    5ffa:	81a3      	strh	r3, [r4, #12]
    5ffc:	89a3      	ldrh	r3, [r4, #12]
    5ffe:	431d      	orrs	r5, r3
    6000:	81a5      	strh	r5, [r4, #12]
    6002:	e7cd      	b.n	5fa0 <__smakebuf_r+0x18>
    6004:	00005e51 	.word	0x00005e51

00006008 <_write_r>:
    6008:	b538      	push	{r3, r4, r5, lr}
    600a:	4604      	mov	r4, r0
    600c:	4608      	mov	r0, r1
    600e:	4611      	mov	r1, r2
    6010:	2200      	movs	r2, #0
    6012:	4d05      	ldr	r5, [pc, #20]	; (6028 <_write_r+0x20>)
    6014:	602a      	str	r2, [r5, #0]
    6016:	461a      	mov	r2, r3
    6018:	f000 f99b 	bl	6352 <_write>
    601c:	1c43      	adds	r3, r0, #1
    601e:	d102      	bne.n	6026 <_write_r+0x1e>
    6020:	682b      	ldr	r3, [r5, #0]
    6022:	b103      	cbz	r3, 6026 <_write_r+0x1e>
    6024:	6023      	str	r3, [r4, #0]
    6026:	bd38      	pop	{r3, r4, r5, pc}
    6028:	0000883c 	.word	0x0000883c

0000602c <_close_r>:
    602c:	b538      	push	{r3, r4, r5, lr}
    602e:	2300      	movs	r3, #0
    6030:	4d05      	ldr	r5, [pc, #20]	; (6048 <_close_r+0x1c>)
    6032:	4604      	mov	r4, r0
    6034:	4608      	mov	r0, r1
    6036:	602b      	str	r3, [r5, #0]
    6038:	f000 f98f 	bl	635a <_close>
    603c:	1c43      	adds	r3, r0, #1
    603e:	d102      	bne.n	6046 <_close_r+0x1a>
    6040:	682b      	ldr	r3, [r5, #0]
    6042:	b103      	cbz	r3, 6046 <_close_r+0x1a>
    6044:	6023      	str	r3, [r4, #0]
    6046:	bd38      	pop	{r3, r4, r5, pc}
    6048:	0000883c 	.word	0x0000883c

0000604c <_fstat_r>:
    604c:	b538      	push	{r3, r4, r5, lr}
    604e:	2300      	movs	r3, #0
    6050:	4d06      	ldr	r5, [pc, #24]	; (606c <_fstat_r+0x20>)
    6052:	4604      	mov	r4, r0
    6054:	4608      	mov	r0, r1
    6056:	4611      	mov	r1, r2
    6058:	602b      	str	r3, [r5, #0]
    605a:	f000 f988 	bl	636e <_fstat>
    605e:	1c43      	adds	r3, r0, #1
    6060:	d102      	bne.n	6068 <_fstat_r+0x1c>
    6062:	682b      	ldr	r3, [r5, #0]
    6064:	b103      	cbz	r3, 6068 <_fstat_r+0x1c>
    6066:	6023      	str	r3, [r4, #0]
    6068:	bd38      	pop	{r3, r4, r5, pc}
    606a:	bf00      	nop
    606c:	0000883c 	.word	0x0000883c

00006070 <_isatty_r>:
    6070:	b538      	push	{r3, r4, r5, lr}
    6072:	2300      	movs	r3, #0
    6074:	4d05      	ldr	r5, [pc, #20]	; (608c <_isatty_r+0x1c>)
    6076:	4604      	mov	r4, r0
    6078:	4608      	mov	r0, r1
    607a:	602b      	str	r3, [r5, #0]
    607c:	f000 f972 	bl	6364 <_isatty>
    6080:	1c43      	adds	r3, r0, #1
    6082:	d102      	bne.n	608a <_isatty_r+0x1a>
    6084:	682b      	ldr	r3, [r5, #0]
    6086:	b103      	cbz	r3, 608a <_isatty_r+0x1a>
    6088:	6023      	str	r3, [r4, #0]
    608a:	bd38      	pop	{r3, r4, r5, pc}
    608c:	0000883c 	.word	0x0000883c

00006090 <_lseek_r>:
    6090:	b538      	push	{r3, r4, r5, lr}
    6092:	4604      	mov	r4, r0
    6094:	4608      	mov	r0, r1
    6096:	4611      	mov	r1, r2
    6098:	2200      	movs	r2, #0
    609a:	4d05      	ldr	r5, [pc, #20]	; (60b0 <_lseek_r+0x20>)
    609c:	602a      	str	r2, [r5, #0]
    609e:	461a      	mov	r2, r3
    60a0:	f000 f95e 	bl	6360 <_lseek>
    60a4:	1c43      	adds	r3, r0, #1
    60a6:	d102      	bne.n	60ae <_lseek_r+0x1e>
    60a8:	682b      	ldr	r3, [r5, #0]
    60aa:	b103      	cbz	r3, 60ae <_lseek_r+0x1e>
    60ac:	6023      	str	r3, [r4, #0]
    60ae:	bd38      	pop	{r3, r4, r5, pc}
    60b0:	0000883c 	.word	0x0000883c

000060b4 <_read_r>:
    60b4:	b538      	push	{r3, r4, r5, lr}
    60b6:	4604      	mov	r4, r0
    60b8:	4608      	mov	r0, r1
    60ba:	4611      	mov	r1, r2
    60bc:	2200      	movs	r2, #0
    60be:	4d05      	ldr	r5, [pc, #20]	; (60d4 <_read_r+0x20>)
    60c0:	602a      	str	r2, [r5, #0]
    60c2:	461a      	mov	r2, r3
    60c4:	f000 f941 	bl	634a <_read>
    60c8:	1c43      	adds	r3, r0, #1
    60ca:	d102      	bne.n	60d2 <_read_r+0x1e>
    60cc:	682b      	ldr	r3, [r5, #0]
    60ce:	b103      	cbz	r3, 60d2 <_read_r+0x1e>
    60d0:	6023      	str	r3, [r4, #0]
    60d2:	bd38      	pop	{r3, r4, r5, pc}
    60d4:	0000883c 	.word	0x0000883c

000060d8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    60d8:	4770      	bx	lr

000060da <arch_printk_char_out>:
}
    60da:	2000      	movs	r0, #0
    60dc:	4770      	bx	lr

000060de <str_out>:
{
    60de:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    60e0:	688a      	ldr	r2, [r1, #8]
    60e2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    60e4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    60e6:	b114      	cbz	r4, 60ee <str_out+0x10>
    60e8:	684b      	ldr	r3, [r1, #4]
    60ea:	4293      	cmp	r3, r2
    60ec:	dc01      	bgt.n	60f2 <str_out+0x14>
		ctx->count++;
    60ee:	608d      	str	r5, [r1, #8]
}
    60f0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    60f2:	3b01      	subs	r3, #1
    60f4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    60f6:	bf08      	it	eq
    60f8:	2200      	moveq	r2, #0
    60fa:	608d      	str	r5, [r1, #8]
    60fc:	bf0c      	ite	eq
    60fe:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    6100:	54a0      	strbne	r0, [r4, r2]
    6102:	e7f5      	b.n	60f0 <str_out+0x12>

00006104 <printk>:
{
    6104:	b40f      	push	{r0, r1, r2, r3}
    6106:	b507      	push	{r0, r1, r2, lr}
    6108:	a904      	add	r1, sp, #16
    610a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    610e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    6110:	f7fa fb42 	bl	798 <vprintk>
}
    6114:	b003      	add	sp, #12
    6116:	f85d eb04 	ldr.w	lr, [sp], #4
    611a:	b004      	add	sp, #16
    611c:	4770      	bx	lr

0000611e <snprintk>:
{
    611e:	b40c      	push	{r2, r3}
    6120:	b507      	push	{r0, r1, r2, lr}
    6122:	ab04      	add	r3, sp, #16
    6124:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6128:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    612a:	f7fa fb43 	bl	7b4 <vsnprintk>
}
    612e:	b003      	add	sp, #12
    6130:	f85d eb04 	ldr.w	lr, [sp], #4
    6134:	b002      	add	sp, #8
    6136:	4770      	bx	lr

00006138 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6138:	4604      	mov	r4, r0
    613a:	b508      	push	{r3, lr}
    613c:	4608      	mov	r0, r1
    613e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    6140:	461a      	mov	r2, r3
    6142:	47a0      	blx	r4
	return z_impl_k_current_get();
    6144:	f7fe fb7e 	bl	4844 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    6148:	f7fb fcb2 	bl	1ab0 <z_impl_k_thread_abort>

0000614c <chunk_field>:
	if (big_heap(h)) {
    614c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    614e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    6152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    6156:	bf2c      	ite	cs
    6158:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
    615c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
    6160:	4770      	bx	lr

00006162 <chunk_set>:
	void *cmem = &buf[c];
    6162:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    6166:	6880      	ldr	r0, [r0, #8]
    6168:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
    616c:	bf2c      	ite	cs
    616e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
    6172:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
    6176:	4770      	bx	lr

00006178 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    6178:	2201      	movs	r2, #1
{
    617a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    617c:	f7ff ffe6 	bl	614c <chunk_field>
}
    6180:	40d0      	lsrs	r0, r2
    6182:	bd08      	pop	{r3, pc}

00006184 <set_chunk_used>:
	if (big_heap(h)) {
    6184:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    6186:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    618a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    618e:	d308      	bcc.n	61a2 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    6190:	684b      	ldr	r3, [r1, #4]
		if (used) {
    6192:	b11a      	cbz	r2, 619c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    6194:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    6198:	604b      	str	r3, [r1, #4]
    619a:	4770      	bx	lr
    619c:	f023 0301 	bic.w	r3, r3, #1
    61a0:	e7fa      	b.n	6198 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    61a2:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    61a4:	b11a      	cbz	r2, 61ae <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    61a6:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    61aa:	804b      	strh	r3, [r1, #2]
}
    61ac:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    61ae:	f023 0301 	bic.w	r3, r3, #1
    61b2:	e7fa      	b.n	61aa <set_chunk_used+0x26>

000061b4 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    61b4:	0053      	lsls	r3, r2, #1
    61b6:	2201      	movs	r2, #1
    61b8:	f7ff bfd3 	b.w	6162 <chunk_set>

000061bc <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
    61bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    61c0:	bf34      	ite	cc
    61c2:	2304      	movcc	r3, #4
    61c4:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    61c6:	3107      	adds	r1, #7
    61c8:	18c8      	adds	r0, r1, r3
}
    61ca:	08c0      	lsrs	r0, r0, #3
    61cc:	4770      	bx	lr

000061ce <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
    61ce:	460a      	mov	r2, r1
    61d0:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
    61d2:	2101      	movs	r1, #1
    61d4:	f7ff fff2 	bl	61bc <bytes_to_chunksz.isra.0>
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    61d8:	3201      	adds	r2, #1
    61da:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
    61dc:	fab2 f082 	clz	r0, r2
}
    61e0:	f1c0 001f 	rsb	r0, r0, #31
    61e4:	bd08      	pop	{r3, pc}

000061e6 <free_list_add>:
{
    61e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61ea:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    61ec:	6886      	ldr	r6, [r0, #8]
    61ee:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    61f0:	f7ff ffc2 	bl	6178 <chunk_size>
    61f4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    61f8:	4601      	mov	r1, r0
    61fa:	d301      	bcc.n	6200 <free_list_add+0x1a>
    61fc:	2801      	cmp	r0, #1
    61fe:	d032      	beq.n	6266 <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
    6200:	4630      	mov	r0, r6
    6202:	f7ff ffe4 	bl	61ce <bucket_idx.isra.0>
	if (b->next == 0U) {
    6206:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    620a:	690e      	ldr	r6, [r1, #16]
    620c:	b996      	cbnz	r6, 6234 <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
    620e:	2201      	movs	r2, #1
    6210:	68e3      	ldr	r3, [r4, #12]
    6212:	4082      	lsls	r2, r0
    6214:	4313      	orrs	r3, r2
    6216:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    6218:	2202      	movs	r2, #2
		b->next = c;
    621a:	610d      	str	r5, [r1, #16]
    621c:	462b      	mov	r3, r5
    621e:	4629      	mov	r1, r5
    6220:	4620      	mov	r0, r4
    6222:	f7ff ff9e 	bl	6162 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    6226:	2203      	movs	r2, #3
    6228:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    622a:	4620      	mov	r0, r4
}
    622c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6230:	f7ff bf97 	b.w	6162 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    6234:	2202      	movs	r2, #2
    6236:	4631      	mov	r1, r6
    6238:	4620      	mov	r0, r4
    623a:	f7ff ff87 	bl	614c <chunk_field>
    623e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    6240:	4603      	mov	r3, r0
    6242:	4629      	mov	r1, r5
    6244:	4620      	mov	r0, r4
    6246:	f7ff ff8c 	bl	6162 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    624a:	2203      	movs	r2, #3
    624c:	4633      	mov	r3, r6
    624e:	4629      	mov	r1, r5
    6250:	4620      	mov	r0, r4
    6252:	f7ff ff86 	bl	6162 <chunk_set>
    6256:	4639      	mov	r1, r7
    6258:	462b      	mov	r3, r5
    625a:	4620      	mov	r0, r4
    625c:	f7ff ff81 	bl	6162 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    6260:	2202      	movs	r2, #2
    6262:	4631      	mov	r1, r6
    6264:	e7e1      	b.n	622a <free_list_add+0x44>
    6266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000626a <outs>:
{
    626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    626e:	4607      	mov	r7, r0
    6270:	4688      	mov	r8, r1
    6272:	4615      	mov	r5, r2
    6274:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6276:	4614      	mov	r4, r2
    6278:	42b4      	cmp	r4, r6
    627a:	d305      	bcc.n	6288 <outs+0x1e>
    627c:	b10e      	cbz	r6, 6282 <outs+0x18>
	return (int)count;
    627e:	1b60      	subs	r0, r4, r5
    6280:	e008      	b.n	6294 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6282:	7823      	ldrb	r3, [r4, #0]
    6284:	2b00      	cmp	r3, #0
    6286:	d0fa      	beq.n	627e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6288:	4641      	mov	r1, r8
    628a:	f814 0b01 	ldrb.w	r0, [r4], #1
    628e:	47b8      	blx	r7
		if (rc < 0) {
    6290:	2800      	cmp	r0, #0
    6292:	daf1      	bge.n	6278 <outs+0xe>
}
    6294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006298 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6298:	4040      	eors	r0, r0
    629a:	f380 8811 	msr	BASEPRI, r0
    629e:	f04f 0004 	mov.w	r0, #4
    62a2:	df02      	svc	2
}
    62a4:	4770      	bx	lr

000062a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    62a6:	4770      	bx	lr

000062a8 <aspeed_clock_control_on>:
	if (clk_gate >= ASPEED_CLK_GRP_2_OFFSET) {
    62a8:	293f      	cmp	r1, #63	; 0x3f
    62aa:	d809      	bhi.n	62c0 <aspeed_clock_control_on+0x18>
	sys_write32(BIT(clk_gate), addr);
    62ac:	2201      	movs	r2, #1
	uint32_t addr = DEV_CFG(dev)->base + 0x84;
    62ae:	6843      	ldr	r3, [r0, #4]
	if (clk_gate >= ASPEED_CLK_GRP_1_OFFSET) {
    62b0:	291f      	cmp	r1, #31
	uint32_t addr = DEV_CFG(dev)->base + 0x84;
    62b2:	681b      	ldr	r3, [r3, #0]
		clk_gate -= ASPEED_CLK_GRP_1_OFFSET;
    62b4:	bf8a      	itet	hi
    62b6:	3920      	subhi	r1, #32
	uint32_t addr = DEV_CFG(dev)->base + 0x84;
    62b8:	3384      	addls	r3, #132	; 0x84
		addr += 0x10;
    62ba:	3394      	addhi	r3, #148	; 0x94
	sys_write32(BIT(clk_gate), addr);
    62bc:	408a      	lsls	r2, r1
    62be:	601a      	str	r2, [r3, #0]
}
    62c0:	2000      	movs	r0, #0
    62c2:	4770      	bx	lr

000062c4 <aspeed_clock_control_off>:
	if (clk_gate >= ASPEED_CLK_GRP_2_OFFSET) {
    62c4:	293f      	cmp	r1, #63	; 0x3f
    62c6:	d809      	bhi.n	62dc <aspeed_clock_control_off+0x18>
	sys_write32(BIT(clk_gate), addr);
    62c8:	2201      	movs	r2, #1
	uint32_t addr = DEV_CFG(dev)->base + 0x80;
    62ca:	6843      	ldr	r3, [r0, #4]
	if (clk_gate >= ASPEED_CLK_GRP_1_OFFSET) {
    62cc:	291f      	cmp	r1, #31
	uint32_t addr = DEV_CFG(dev)->base + 0x80;
    62ce:	681b      	ldr	r3, [r3, #0]
		clk_gate -= ASPEED_CLK_GRP_1_OFFSET;
    62d0:	bf8a      	itet	hi
    62d2:	3920      	subhi	r1, #32
	uint32_t addr = DEV_CFG(dev)->base + 0x80;
    62d4:	3380      	addls	r3, #128	; 0x80
		addr += 0x10;
    62d6:	3390      	addhi	r3, #144	; 0x90
	sys_write32(BIT(clk_gate), addr);
    62d8:	408a      	lsls	r2, r1
    62da:	601a      	str	r2, [r3, #0]
}
    62dc:	2000      	movs	r0, #0
    62de:	4770      	bx	lr

000062e0 <aspeed_clock_control_init>:

static int aspeed_clock_control_init(const struct device *dev)
{
	return 0;
}
    62e0:	2000      	movs	r0, #0
    62e2:	4770      	bx	lr

000062e4 <aspeed_reset_control_deassert>:
					 reset_control_subsys_t sub_system)
{
	uint32_t rst_id = (uint32_t) sub_system;
	uint32_t scu_base = DEV_CFG(dev)->base;

	sys_write32(BIT(GET_RST_BIT(rst_id)),
    62e4:	2301      	movs	r3, #1
    62e6:	b2ca      	uxtb	r2, r1
    62e8:	4093      	lsls	r3, r2
	uint32_t scu_base = DEV_CFG(dev)->base;
    62ea:	6842      	ldr	r2, [r0, #4]
		    scu_base + GET_DEASSERT_OFFSET(rst_id));
    62ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
    62f0:	6812      	ldr	r2, [r2, #0]
	/* Add dummy read to ensure reset clear is finished */
	sys_read32(scu_base + GET_DEASSERT_OFFSET(rst_id));
	LOG_DBG("Deassert offset:0x%08x bit:%d", GET_DEASSERT_OFFSET(rst_id),
		GET_RST_BIT(rst_id));
	return 0;
}
    62f2:	2000      	movs	r0, #0
    62f4:	508b      	str	r3, [r1, r2]
	return *(volatile uint32_t *)addr;
    62f6:	588b      	ldr	r3, [r1, r2]
    62f8:	4770      	bx	lr

000062fa <aspeed_reset_control_assert>:
				       reset_control_subsys_t sub_system)
{
	uint32_t rst_id = (uint32_t) sub_system;
	uint32_t scu_base = DEV_CFG(dev)->base;

	sys_write32(BIT(GET_RST_BIT(rst_id)),
    62fa:	2301      	movs	r3, #1
    62fc:	b2ca      	uxtb	r2, r1
    62fe:	4093      	lsls	r3, r2
	uint32_t scu_base = DEV_CFG(dev)->base;
    6300:	6842      	ldr	r2, [r0, #4]
		    scu_base + GET_ASSERT_OFFSET(rst_id));
    6302:	f3c1 4107 	ubfx	r1, r1, #16, #8
    6306:	6812      	ldr	r2, [r2, #0]
	LOG_DBG("Assert offset:0x%08x bit:%d", GET_ASSERT_OFFSET(rst_id),
		GET_RST_BIT(rst_id));
	return 0;
}
    6308:	2000      	movs	r0, #0
	*(volatile uint32_t *)addr = data;
    630a:	508b      	str	r3, [r1, r2]
    630c:	4770      	bx	lr

0000630e <aspeed_reset_control_init>:


static int aspeed_reset_control_init(const struct device *dev)
{
	return 0;
}
    630e:	2000      	movs	r0, #0
    6310:	4770      	bx	lr

00006312 <pinmux_aspeed_pullup>:
}
    6312:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6316:	4770      	bx	lr

00006318 <pinmux_aspeed_input>:
static int pinmux_aspeed_input(const struct device *dev,
    6318:	f06f 0085 	mvn.w	r0, #133	; 0x85
    631c:	4770      	bx	lr

0000631e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    631e:	2100      	movs	r1, #0
    6320:	2001      	movs	r0, #1
    6322:	f000 b800 	b.w	6326 <z_arm_fatal_error>

00006326 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6326:	f7fc bdef 	b.w	2f08 <z_fatal_error>

0000632a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    632a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    632c:	6800      	ldr	r0, [r0, #0]
    632e:	f7fc bdeb 	b.w	2f08 <z_fatal_error>

00006332 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6332:	b508      	push	{r3, lr}
	handler();
    6334:	f7fb fa52 	bl	17dc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    633c:	f7fb bb98 	b.w	1a70 <z_arm_exc_exit>

00006340 <_stdout_hook_default>:
}
    6340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6344:	4770      	bx	lr

00006346 <_stdin_hook_default>:
}
    6346:	2000      	movs	r0, #0
    6348:	4770      	bx	lr

0000634a <_read>:
{
    634a:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
    634c:	4611      	mov	r1, r2
    634e:	f7fb bbe7 	b.w	1b20 <z_impl_zephyr_read_stdin>

00006352 <_write>:
{
    6352:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
    6354:	4611      	mov	r1, r2
    6356:	f7fb bbf7 	b.w	1b48 <z_impl_zephyr_write_stdout>

0000635a <_close>:
int _close(int file)
    635a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    635e:	4770      	bx	lr

00006360 <_lseek>:
}
    6360:	2000      	movs	r0, #0
    6362:	4770      	bx	lr

00006364 <_isatty>:
}
    6364:	2802      	cmp	r0, #2
    6366:	bfcc      	ite	gt
    6368:	2000      	movgt	r0, #0
    636a:	2001      	movle	r0, #1
    636c:	4770      	bx	lr

0000636e <_fstat>:
	st->st_mode = S_IFCHR;
    636e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
    6372:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    6374:	604b      	str	r3, [r1, #4]
}
    6376:	4770      	bx	lr

00006378 <uart_aspeed_config_get>:
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    6378:	6903      	ldr	r3, [r0, #16]
}
    637a:	2000      	movs	r0, #0
	uart_cfg->baudrate = data->uart_cfg.baudrate;
    637c:	685a      	ldr	r2, [r3, #4]
    637e:	600a      	str	r2, [r1, #0]
	uart_cfg->parity = data->uart_cfg.parity;
    6380:	7a1a      	ldrb	r2, [r3, #8]
    6382:	710a      	strb	r2, [r1, #4]
	uart_cfg->stop_bits = data->uart_cfg.stop_bits;
    6384:	7a5a      	ldrb	r2, [r3, #9]
    6386:	714a      	strb	r2, [r1, #5]
	uart_cfg->data_bits = data->uart_cfg.data_bits;
    6388:	7a9a      	ldrb	r2, [r3, #10]
    638a:	718a      	strb	r2, [r1, #6]
	uart_cfg->flow_ctrl = data->uart_cfg.flow_ctrl;
    638c:	7adb      	ldrb	r3, [r3, #11]
    638e:	71cb      	strb	r3, [r1, #7]
}
    6390:	4770      	bx	lr

00006392 <uart_aspeed_isr>:
	struct uart_aspeed_data *data = (struct uart_aspeed_data *)dev->data;
    6392:	6902      	ldr	r2, [r0, #16]
	if (data->cb)
    6394:	69d3      	ldr	r3, [r2, #28]
    6396:	b10b      	cbz	r3, 639c <uart_aspeed_isr+0xa>
		data->cb(dev, data->cb_data);
    6398:	6a11      	ldr	r1, [r2, #32]
    639a:	4718      	bx	r3
}
    639c:	4770      	bx	lr

0000639e <uart_aspeed_irq_config_func_0>:
			      &uart_aspeed_data_##n, &uart_aspeed_config_##n,			\
			      PRE_KERNEL_1,							\
			      CONFIG_KERNEL_INIT_PRIORITY_DEVICE,				\
			      &uart_aspeed_driver_api);

DT_INST_FOREACH_STATUS_OKAY(UART_ASPEED_INIT)
    639e:	b508      	push	{r3, lr}
    63a0:	6843      	ldr	r3, [r0, #4]
    63a2:	f893 2020 	ldrb.w	r2, [r3, #32]
    63a6:	b942      	cbnz	r2, 63ba <uart_aspeed_irq_config_func_0+0x1c>
    63a8:	203e      	movs	r0, #62	; 0x3e
    63aa:	2101      	movs	r1, #1
    63ac:	f7fb f9a2 	bl	16f4 <z_arm_irq_priority_set>
    63b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    63b4:	203e      	movs	r0, #62	; 0x3e
    63b6:	f7fb b98f 	b.w	16d8 <arch_irq_enable>
    63ba:	bd08      	pop	{r3, pc}

000063bc <z_device_state_init>:
}
    63bc:	4770      	bx	lr

000063be <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    63be:	b138      	cbz	r0, 63d0 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    63c0:	68c3      	ldr	r3, [r0, #12]
    63c2:	8818      	ldrh	r0, [r3, #0]
    63c4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    63c8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    63cc:	4258      	negs	r0, r3
    63ce:	4158      	adcs	r0, r3
}
    63d0:	4770      	bx	lr

000063d2 <arch_system_halt>:
	__asm__ volatile(
    63d2:	f04f 0220 	mov.w	r2, #32
    63d6:	f3ef 8311 	mrs	r3, BASEPRI
    63da:	f382 8811 	msr	BASEPRI, r2
    63de:	f3bf 8f6f 	isb	sy
	for (;;) {
    63e2:	e7fe      	b.n	63e2 <arch_system_halt+0x10>

000063e4 <k_sys_fatal_error_handler>:
{
    63e4:	b508      	push	{r3, lr}
	arch_system_halt(reason);
    63e6:	f7ff fff4 	bl	63d2 <arch_system_halt>

000063ea <k_is_in_isr>:
    63ea:	f3ef 8005 	mrs	r0, IPSR
}
    63ee:	3800      	subs	r0, #0
    63f0:	bf18      	it	ne
    63f2:	2001      	movne	r0, #1
    63f4:	4770      	bx	lr

000063f6 <z_impl_k_thread_start>:
	z_sched_start(thread);
    63f6:	f7fd bca9 	b.w	3d4c <z_sched_start>

000063fa <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    63fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    63fe:	428b      	cmp	r3, r1
    6400:	d001      	beq.n	6406 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6402:	f7fd bfbd 	b.w	4380 <z_set_prio>
}
    6406:	2000      	movs	r0, #0
    6408:	4770      	bx	lr

0000640a <z_swap_irqlock>:
{
    640a:	b510      	push	{r4, lr}
    640c:	4604      	mov	r4, r0
	z_check_stack_sentinel();
    640e:	f7fc fecd 	bl	31ac <z_check_stack_sentinel>
	ret = arch_swap(key);
    6412:	4620      	mov	r0, r4
}
    6414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    6418:	f7fb b90c 	b.w	1634 <arch_swap>

0000641c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    641c:	4603      	mov	r3, r0
    641e:	b920      	cbnz	r0, 642a <z_reschedule_irqlock+0xe>
    6420:	f3ef 8205 	mrs	r2, IPSR
    6424:	b90a      	cbnz	r2, 642a <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
    6426:	f7ff bff0 	b.w	640a <z_swap_irqlock>
	__asm__ volatile(
    642a:	f383 8811 	msr	BASEPRI, r3
    642e:	f3bf 8f6f 	isb	sy
}
    6432:	4770      	bx	lr

00006434 <z_reschedule_unlocked>:
	__asm__ volatile(
    6434:	f04f 0320 	mov.w	r3, #32
    6438:	f3ef 8011 	mrs	r0, BASEPRI
    643c:	f383 8811 	msr	BASEPRI, r3
    6440:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6444:	f7ff bfea 	b.w	641c <z_reschedule_irqlock>

00006448 <z_handle_obj_poll_events>:
{
    6448:	4603      	mov	r3, r0
	return list->head == list;
    644a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    644c:	4283      	cmp	r3, r0
    644e:	d008      	beq.n	6462 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    6450:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6454:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6456:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6458:	2300      	movs	r3, #0
	node->prev = NULL;
    645a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    645e:	f7fe bd9d 	b.w	4f9c <signal_poll_event>
}
    6462:	4770      	bx	lr

00006464 <k_heap_init>:
{
    6464:	b410      	push	{r4}
    6466:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    646a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    646e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    6470:	f7fa b9b4 	b.w	7dc <sys_heap_init>

00006474 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    6474:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    6476:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    6478:	408b      	lsls	r3, r1
    647a:	ea22 0303 	bic.w	r3, r2, r3
    647e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    6480:	fa22 f001 	lsr.w	r0, r2, r1
}
    6484:	f000 0001 	and.w	r0, r0, #1
    6488:	4770      	bx	lr

0000648a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    648a:	b120      	cbz	r0, 6496 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    648c:	2200      	movs	r2, #0
    648e:	30c0      	adds	r0, #192	; 0xc0
    6490:	4611      	mov	r1, r2
    6492:	f7fe baa3 	b.w	49dc <z_sched_wake>
}
    6496:	4770      	bx	lr

00006498 <memset>:
    6498:	4603      	mov	r3, r0
    649a:	4402      	add	r2, r0
    649c:	4293      	cmp	r3, r2
    649e:	d100      	bne.n	64a2 <memset+0xa>
    64a0:	4770      	bx	lr
    64a2:	f803 1b01 	strb.w	r1, [r3], #1
    64a6:	e7f9      	b.n	649c <memset+0x4>

000064a8 <__sfputc_r>:
    64a8:	6893      	ldr	r3, [r2, #8]
    64aa:	b410      	push	{r4}
    64ac:	3b01      	subs	r3, #1
    64ae:	2b00      	cmp	r3, #0
    64b0:	6093      	str	r3, [r2, #8]
    64b2:	da07      	bge.n	64c4 <__sfputc_r+0x1c>
    64b4:	6994      	ldr	r4, [r2, #24]
    64b6:	42a3      	cmp	r3, r4
    64b8:	db01      	blt.n	64be <__sfputc_r+0x16>
    64ba:	290a      	cmp	r1, #10
    64bc:	d102      	bne.n	64c4 <__sfputc_r+0x1c>
    64be:	bc10      	pop	{r4}
    64c0:	f7ff bba8 	b.w	5c14 <__swbuf_r>
    64c4:	6813      	ldr	r3, [r2, #0]
    64c6:	1c58      	adds	r0, r3, #1
    64c8:	6010      	str	r0, [r2, #0]
    64ca:	7019      	strb	r1, [r3, #0]
    64cc:	4608      	mov	r0, r1
    64ce:	bc10      	pop	{r4}
    64d0:	4770      	bx	lr

000064d2 <__sfputs_r>:
    64d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64d4:	4606      	mov	r6, r0
    64d6:	460f      	mov	r7, r1
    64d8:	4614      	mov	r4, r2
    64da:	18d5      	adds	r5, r2, r3
    64dc:	42ac      	cmp	r4, r5
    64de:	d101      	bne.n	64e4 <__sfputs_r+0x12>
    64e0:	2000      	movs	r0, #0
    64e2:	e007      	b.n	64f4 <__sfputs_r+0x22>
    64e4:	463a      	mov	r2, r7
    64e6:	4630      	mov	r0, r6
    64e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    64ec:	f7ff ffdc 	bl	64a8 <__sfputc_r>
    64f0:	1c43      	adds	r3, r0, #1
    64f2:	d1f3      	bne.n	64dc <__sfputs_r+0xa>
    64f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000064f6 <_printf_common>:
    64f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64fa:	4616      	mov	r6, r2
    64fc:	4698      	mov	r8, r3
    64fe:	688a      	ldr	r2, [r1, #8]
    6500:	690b      	ldr	r3, [r1, #16]
    6502:	4607      	mov	r7, r0
    6504:	4293      	cmp	r3, r2
    6506:	bfb8      	it	lt
    6508:	4613      	movlt	r3, r2
    650a:	6033      	str	r3, [r6, #0]
    650c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    6510:	460c      	mov	r4, r1
    6512:	f8dd 9020 	ldr.w	r9, [sp, #32]
    6516:	b10a      	cbz	r2, 651c <_printf_common+0x26>
    6518:	3301      	adds	r3, #1
    651a:	6033      	str	r3, [r6, #0]
    651c:	6823      	ldr	r3, [r4, #0]
    651e:	0699      	lsls	r1, r3, #26
    6520:	bf42      	ittt	mi
    6522:	6833      	ldrmi	r3, [r6, #0]
    6524:	3302      	addmi	r3, #2
    6526:	6033      	strmi	r3, [r6, #0]
    6528:	6825      	ldr	r5, [r4, #0]
    652a:	f015 0506 	ands.w	r5, r5, #6
    652e:	d106      	bne.n	653e <_printf_common+0x48>
    6530:	f104 0a19 	add.w	sl, r4, #25
    6534:	68e3      	ldr	r3, [r4, #12]
    6536:	6832      	ldr	r2, [r6, #0]
    6538:	1a9b      	subs	r3, r3, r2
    653a:	42ab      	cmp	r3, r5
    653c:	dc2b      	bgt.n	6596 <_printf_common+0xa0>
    653e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    6542:	6822      	ldr	r2, [r4, #0]
    6544:	3b00      	subs	r3, #0
    6546:	bf18      	it	ne
    6548:	2301      	movne	r3, #1
    654a:	0692      	lsls	r2, r2, #26
    654c:	d430      	bmi.n	65b0 <_printf_common+0xba>
    654e:	4641      	mov	r1, r8
    6550:	4638      	mov	r0, r7
    6552:	f104 0243 	add.w	r2, r4, #67	; 0x43
    6556:	47c8      	blx	r9
    6558:	3001      	adds	r0, #1
    655a:	d023      	beq.n	65a4 <_printf_common+0xae>
    655c:	6823      	ldr	r3, [r4, #0]
    655e:	6922      	ldr	r2, [r4, #16]
    6560:	f003 0306 	and.w	r3, r3, #6
    6564:	2b04      	cmp	r3, #4
    6566:	bf14      	ite	ne
    6568:	2500      	movne	r5, #0
    656a:	6833      	ldreq	r3, [r6, #0]
    656c:	f04f 0600 	mov.w	r6, #0
    6570:	bf08      	it	eq
    6572:	68e5      	ldreq	r5, [r4, #12]
    6574:	f104 041a 	add.w	r4, r4, #26
    6578:	bf08      	it	eq
    657a:	1aed      	subeq	r5, r5, r3
    657c:	f854 3c12 	ldr.w	r3, [r4, #-18]
    6580:	bf08      	it	eq
    6582:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    6586:	4293      	cmp	r3, r2
    6588:	bfc4      	itt	gt
    658a:	1a9b      	subgt	r3, r3, r2
    658c:	18ed      	addgt	r5, r5, r3
    658e:	42b5      	cmp	r5, r6
    6590:	d11a      	bne.n	65c8 <_printf_common+0xd2>
    6592:	2000      	movs	r0, #0
    6594:	e008      	b.n	65a8 <_printf_common+0xb2>
    6596:	2301      	movs	r3, #1
    6598:	4652      	mov	r2, sl
    659a:	4641      	mov	r1, r8
    659c:	4638      	mov	r0, r7
    659e:	47c8      	blx	r9
    65a0:	3001      	adds	r0, #1
    65a2:	d103      	bne.n	65ac <_printf_common+0xb6>
    65a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    65a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65ac:	3501      	adds	r5, #1
    65ae:	e7c1      	b.n	6534 <_printf_common+0x3e>
    65b0:	2030      	movs	r0, #48	; 0x30
    65b2:	18e1      	adds	r1, r4, r3
    65b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    65b8:	1c5a      	adds	r2, r3, #1
    65ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    65be:	4422      	add	r2, r4
    65c0:	3302      	adds	r3, #2
    65c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    65c6:	e7c2      	b.n	654e <_printf_common+0x58>
    65c8:	2301      	movs	r3, #1
    65ca:	4622      	mov	r2, r4
    65cc:	4641      	mov	r1, r8
    65ce:	4638      	mov	r0, r7
    65d0:	47c8      	blx	r9
    65d2:	3001      	adds	r0, #1
    65d4:	d0e6      	beq.n	65a4 <_printf_common+0xae>
    65d6:	3601      	adds	r6, #1
    65d8:	e7d9      	b.n	658e <_printf_common+0x98>

000065da <strncpy>:
    65da:	4603      	mov	r3, r0
    65dc:	b510      	push	{r4, lr}
    65de:	3901      	subs	r1, #1
    65e0:	b132      	cbz	r2, 65f0 <strncpy+0x16>
    65e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    65e6:	3a01      	subs	r2, #1
    65e8:	f803 4b01 	strb.w	r4, [r3], #1
    65ec:	2c00      	cmp	r4, #0
    65ee:	d1f7      	bne.n	65e0 <strncpy+0x6>
    65f0:	2100      	movs	r1, #0
    65f2:	441a      	add	r2, r3
    65f4:	4293      	cmp	r3, r2
    65f6:	d100      	bne.n	65fa <strncpy+0x20>
    65f8:	bd10      	pop	{r4, pc}
    65fa:	f803 1b01 	strb.w	r1, [r3], #1
    65fe:	e7f9      	b.n	65f4 <strncpy+0x1a>

00006600 <strnlen>:
    6600:	4602      	mov	r2, r0
    6602:	b510      	push	{r4, lr}
    6604:	4401      	add	r1, r0
    6606:	428a      	cmp	r2, r1
    6608:	4613      	mov	r3, r2
    660a:	d003      	beq.n	6614 <strnlen+0x14>
    660c:	781c      	ldrb	r4, [r3, #0]
    660e:	3201      	adds	r2, #1
    6610:	2c00      	cmp	r4, #0
    6612:	d1f8      	bne.n	6606 <strnlen+0x6>
    6614:	1a18      	subs	r0, r3, r0
    6616:	bd10      	pop	{r4, pc}

00006618 <__sflush_r>:
    6618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    661e:	0717      	lsls	r7, r2, #28
    6620:	4605      	mov	r5, r0
    6622:	460c      	mov	r4, r1
    6624:	d456      	bmi.n	66d4 <__sflush_r+0xbc>
    6626:	684b      	ldr	r3, [r1, #4]
    6628:	2b00      	cmp	r3, #0
    662a:	dc02      	bgt.n	6632 <__sflush_r+0x1a>
    662c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    662e:	2b00      	cmp	r3, #0
    6630:	dd3d      	ble.n	66ae <__sflush_r+0x96>
    6632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6634:	2e00      	cmp	r6, #0
    6636:	d03a      	beq.n	66ae <__sflush_r+0x96>
    6638:	2300      	movs	r3, #0
    663a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    663e:	682f      	ldr	r7, [r5, #0]
    6640:	6a21      	ldr	r1, [r4, #32]
    6642:	602b      	str	r3, [r5, #0]
    6644:	d025      	beq.n	6692 <__sflush_r+0x7a>
    6646:	6d62      	ldr	r2, [r4, #84]	; 0x54
    6648:	89a3      	ldrh	r3, [r4, #12]
    664a:	0758      	lsls	r0, r3, #29
    664c:	d505      	bpl.n	665a <__sflush_r+0x42>
    664e:	6863      	ldr	r3, [r4, #4]
    6650:	1ad2      	subs	r2, r2, r3
    6652:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6654:	b10b      	cbz	r3, 665a <__sflush_r+0x42>
    6656:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6658:	1ad2      	subs	r2, r2, r3
    665a:	6a21      	ldr	r1, [r4, #32]
    665c:	2300      	movs	r3, #0
    665e:	4628      	mov	r0, r5
    6660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6662:	47b0      	blx	r6
    6664:	1c41      	adds	r1, r0, #1
    6666:	d024      	beq.n	66b2 <__sflush_r+0x9a>
    6668:	2300      	movs	r3, #0
    666a:	6063      	str	r3, [r4, #4]
    666c:	6923      	ldr	r3, [r4, #16]
    666e:	6023      	str	r3, [r4, #0]
    6670:	89a3      	ldrh	r3, [r4, #12]
    6672:	04da      	lsls	r2, r3, #19
    6674:	d500      	bpl.n	6678 <__sflush_r+0x60>
    6676:	6560      	str	r0, [r4, #84]	; 0x54
    6678:	6b61      	ldr	r1, [r4, #52]	; 0x34
    667a:	602f      	str	r7, [r5, #0]
    667c:	b1b9      	cbz	r1, 66ae <__sflush_r+0x96>
    667e:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6682:	4299      	cmp	r1, r3
    6684:	d002      	beq.n	668c <__sflush_r+0x74>
    6686:	4628      	mov	r0, r5
    6688:	f7fe ffa0 	bl	55cc <_free_r>
    668c:	2300      	movs	r3, #0
    668e:	6363      	str	r3, [r4, #52]	; 0x34
    6690:	e00d      	b.n	66ae <__sflush_r+0x96>
    6692:	2301      	movs	r3, #1
    6694:	4628      	mov	r0, r5
    6696:	47b0      	blx	r6
    6698:	1c46      	adds	r6, r0, #1
    669a:	4602      	mov	r2, r0
    669c:	d1d4      	bne.n	6648 <__sflush_r+0x30>
    669e:	682b      	ldr	r3, [r5, #0]
    66a0:	2b00      	cmp	r3, #0
    66a2:	d0d1      	beq.n	6648 <__sflush_r+0x30>
    66a4:	2b1d      	cmp	r3, #29
    66a6:	d001      	beq.n	66ac <__sflush_r+0x94>
    66a8:	2b16      	cmp	r3, #22
    66aa:	d12a      	bne.n	6702 <__sflush_r+0xea>
    66ac:	602f      	str	r7, [r5, #0]
    66ae:	2000      	movs	r0, #0
    66b0:	e02e      	b.n	6710 <__sflush_r+0xf8>
    66b2:	682a      	ldr	r2, [r5, #0]
    66b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    66b8:	b142      	cbz	r2, 66cc <__sflush_r+0xb4>
    66ba:	2a1d      	cmp	r2, #29
    66bc:	d001      	beq.n	66c2 <__sflush_r+0xaa>
    66be:	2a16      	cmp	r2, #22
    66c0:	d121      	bne.n	6706 <__sflush_r+0xee>
    66c2:	2300      	movs	r3, #0
    66c4:	6063      	str	r3, [r4, #4]
    66c6:	6923      	ldr	r3, [r4, #16]
    66c8:	6023      	str	r3, [r4, #0]
    66ca:	e7d5      	b.n	6678 <__sflush_r+0x60>
    66cc:	6062      	str	r2, [r4, #4]
    66ce:	6922      	ldr	r2, [r4, #16]
    66d0:	6022      	str	r2, [r4, #0]
    66d2:	e7ce      	b.n	6672 <__sflush_r+0x5a>
    66d4:	690f      	ldr	r7, [r1, #16]
    66d6:	2f00      	cmp	r7, #0
    66d8:	d0e9      	beq.n	66ae <__sflush_r+0x96>
    66da:	0793      	lsls	r3, r2, #30
    66dc:	bf18      	it	ne
    66de:	2300      	movne	r3, #0
    66e0:	680e      	ldr	r6, [r1, #0]
    66e2:	bf08      	it	eq
    66e4:	694b      	ldreq	r3, [r1, #20]
    66e6:	1bf6      	subs	r6, r6, r7
    66e8:	600f      	str	r7, [r1, #0]
    66ea:	608b      	str	r3, [r1, #8]
    66ec:	2e00      	cmp	r6, #0
    66ee:	ddde      	ble.n	66ae <__sflush_r+0x96>
    66f0:	4633      	mov	r3, r6
    66f2:	463a      	mov	r2, r7
    66f4:	4628      	mov	r0, r5
    66f6:	6a21      	ldr	r1, [r4, #32]
    66f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    66fc:	47e0      	blx	ip
    66fe:	2800      	cmp	r0, #0
    6700:	dc07      	bgt.n	6712 <__sflush_r+0xfa>
    6702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    670a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    670e:	81a3      	strh	r3, [r4, #12]
    6710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6712:	4407      	add	r7, r0
    6714:	1a36      	subs	r6, r6, r0
    6716:	e7e9      	b.n	66ec <__sflush_r+0xd4>

00006718 <__sfmoreglue>:
    6718:	2368      	movs	r3, #104	; 0x68
    671a:	b570      	push	{r4, r5, r6, lr}
    671c:	1e4d      	subs	r5, r1, #1
    671e:	435d      	muls	r5, r3
    6720:	460e      	mov	r6, r1
    6722:	f105 0174 	add.w	r1, r5, #116	; 0x74
    6726:	f7fe ff99 	bl	565c <_malloc_r>
    672a:	4604      	mov	r4, r0
    672c:	b140      	cbz	r0, 6740 <__sfmoreglue+0x28>
    672e:	2100      	movs	r1, #0
    6730:	e9c0 1600 	strd	r1, r6, [r0]
    6734:	300c      	adds	r0, #12
    6736:	60a0      	str	r0, [r4, #8]
    6738:	f105 0268 	add.w	r2, r5, #104	; 0x68
    673c:	f7ff feac 	bl	6498 <memset>
    6740:	4620      	mov	r0, r4
    6742:	bd70      	pop	{r4, r5, r6, pc}

00006744 <_fwalk_reent>:
    6744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6748:	4606      	mov	r6, r0
    674a:	4688      	mov	r8, r1
    674c:	2700      	movs	r7, #0
    674e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    6752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    6756:	f1b9 0901 	subs.w	r9, r9, #1
    675a:	d505      	bpl.n	6768 <_fwalk_reent+0x24>
    675c:	6824      	ldr	r4, [r4, #0]
    675e:	2c00      	cmp	r4, #0
    6760:	d1f7      	bne.n	6752 <_fwalk_reent+0xe>
    6762:	4638      	mov	r0, r7
    6764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6768:	89ab      	ldrh	r3, [r5, #12]
    676a:	2b01      	cmp	r3, #1
    676c:	d907      	bls.n	677e <_fwalk_reent+0x3a>
    676e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    6772:	3301      	adds	r3, #1
    6774:	d003      	beq.n	677e <_fwalk_reent+0x3a>
    6776:	4629      	mov	r1, r5
    6778:	4630      	mov	r0, r6
    677a:	47c0      	blx	r8
    677c:	4307      	orrs	r7, r0
    677e:	3568      	adds	r5, #104	; 0x68
    6780:	e7e9      	b.n	6756 <_fwalk_reent+0x12>

00006782 <__retarget_lock_init_recursive>:
    6782:	4770      	bx	lr

00006784 <__retarget_lock_acquire_recursive>:
    6784:	4770      	bx	lr

00006786 <__retarget_lock_release_recursive>:
    6786:	4770      	bx	lr

00006788 <__swhatbuf_r>:
    6788:	b570      	push	{r4, r5, r6, lr}
    678a:	460c      	mov	r4, r1
    678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6790:	4615      	mov	r5, r2
    6792:	2900      	cmp	r1, #0
    6794:	461e      	mov	r6, r3
    6796:	b096      	sub	sp, #88	; 0x58
    6798:	da0c      	bge.n	67b4 <__swhatbuf_r+0x2c>
    679a:	89a3      	ldrh	r3, [r4, #12]
    679c:	2100      	movs	r1, #0
    679e:	f013 0f80 	tst.w	r3, #128	; 0x80
    67a2:	bf14      	ite	ne
    67a4:	2340      	movne	r3, #64	; 0x40
    67a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    67aa:	2000      	movs	r0, #0
    67ac:	6031      	str	r1, [r6, #0]
    67ae:	602b      	str	r3, [r5, #0]
    67b0:	b016      	add	sp, #88	; 0x58
    67b2:	bd70      	pop	{r4, r5, r6, pc}
    67b4:	466a      	mov	r2, sp
    67b6:	f7ff fc49 	bl	604c <_fstat_r>
    67ba:	2800      	cmp	r0, #0
    67bc:	dbed      	blt.n	679a <__swhatbuf_r+0x12>
    67be:	9901      	ldr	r1, [sp, #4]
    67c0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
    67c4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
    67c8:	4259      	negs	r1, r3
    67ca:	4159      	adcs	r1, r3
    67cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    67d0:	e7eb      	b.n	67aa <__swhatbuf_r+0x22>

000067d2 <memchr>:
    67d2:	4603      	mov	r3, r0
    67d4:	b510      	push	{r4, lr}
    67d6:	b2c9      	uxtb	r1, r1
    67d8:	4402      	add	r2, r0
    67da:	4293      	cmp	r3, r2
    67dc:	4618      	mov	r0, r3
    67de:	d101      	bne.n	67e4 <memchr+0x12>
    67e0:	2000      	movs	r0, #0
    67e2:	e003      	b.n	67ec <memchr+0x1a>
    67e4:	7804      	ldrb	r4, [r0, #0]
    67e6:	3301      	adds	r3, #1
    67e8:	428c      	cmp	r4, r1
    67ea:	d1f6      	bne.n	67da <memchr+0x8>
    67ec:	bd10      	pop	{r4, pc}

000067ee <__sread>:
    67ee:	b510      	push	{r4, lr}
    67f0:	460c      	mov	r4, r1
    67f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    67f6:	f7ff fc5d 	bl	60b4 <_read_r>
    67fa:	2800      	cmp	r0, #0
    67fc:	bfab      	itete	ge
    67fe:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    6800:	89a3      	ldrhlt	r3, [r4, #12]
    6802:	181b      	addge	r3, r3, r0
    6804:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    6808:	bfac      	ite	ge
    680a:	6563      	strge	r3, [r4, #84]	; 0x54
    680c:	81a3      	strhlt	r3, [r4, #12]
    680e:	bd10      	pop	{r4, pc}

00006810 <__swrite>:
    6810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6814:	461f      	mov	r7, r3
    6816:	898b      	ldrh	r3, [r1, #12]
    6818:	4605      	mov	r5, r0
    681a:	05db      	lsls	r3, r3, #23
    681c:	460c      	mov	r4, r1
    681e:	4616      	mov	r6, r2
    6820:	d505      	bpl.n	682e <__swrite+0x1e>
    6822:	2302      	movs	r3, #2
    6824:	2200      	movs	r2, #0
    6826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    682a:	f7ff fc31 	bl	6090 <_lseek_r>
    682e:	89a3      	ldrh	r3, [r4, #12]
    6830:	4632      	mov	r2, r6
    6832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6836:	81a3      	strh	r3, [r4, #12]
    6838:	4628      	mov	r0, r5
    683a:	463b      	mov	r3, r7
    683c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6844:	f7ff bbe0 	b.w	6008 <_write_r>

00006848 <__sseek>:
    6848:	b510      	push	{r4, lr}
    684a:	460c      	mov	r4, r1
    684c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6850:	f7ff fc1e 	bl	6090 <_lseek_r>
    6854:	1c43      	adds	r3, r0, #1
    6856:	89a3      	ldrh	r3, [r4, #12]
    6858:	bf15      	itete	ne
    685a:	6560      	strne	r0, [r4, #84]	; 0x54
    685c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    6860:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    6864:	81a3      	strheq	r3, [r4, #12]
    6866:	bf18      	it	ne
    6868:	81a3      	strhne	r3, [r4, #12]
    686a:	bd10      	pop	{r4, pc}

0000686c <__sclose>:
    686c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6870:	f7ff bbdc 	b.w	602c <_close_r>
