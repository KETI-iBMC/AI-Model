
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_JTAG_H
#define Z_INCLUDE_SYSCALLS_JTAG_H


#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_jtag_freq_get(const struct device * dev, uint32_t * freq);
static inline int jtag_freq_get(const struct device * dev, uint32_t * freq)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&freq, K_SYSCALL_JTAG_FREQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_freq_get(dev, freq);
}


extern int z_impl_jtag_freq_set(const struct device * dev, uint32_t freq);
static inline int jtag_freq_set(const struct device * dev, uint32_t freq)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&freq, K_SYSCALL_JTAG_FREQ_SET);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_freq_set(dev, freq);
}


extern int z_impl_jtag_tap_get(const struct device * dev, enum tap_state * state);
static inline int jtag_tap_get(const struct device * dev, enum tap_state * state)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&state, K_SYSCALL_JTAG_TAP_GET);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_tap_get(dev, state);
}


extern int z_impl_jtag_tap_set(const struct device * dev, enum tap_state state);
static inline int jtag_tap_set(const struct device * dev, enum tap_state state)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&state, K_SYSCALL_JTAG_TAP_SET);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_tap_set(dev, state);
}


extern int z_impl_jtag_tck_run(const struct device * dev, uint32_t run_count);
static inline int jtag_tck_run(const struct device * dev, uint32_t run_count)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&run_count, K_SYSCALL_JTAG_TCK_RUN);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_tck_run(dev, run_count);
}


extern int z_impl_jtag_ir_scan(const struct device * dev, int num_bits, const uint8_t * out_value, uint8_t * in_value, enum tap_state state);
static inline int jtag_ir_scan(const struct device * dev, int num_bits, const uint8_t * out_value, uint8_t * in_value, enum tap_state state)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke5(*(uintptr_t *)&dev, *(uintptr_t *)&num_bits, *(uintptr_t *)&out_value, *(uintptr_t *)&in_value, *(uintptr_t *)&state, K_SYSCALL_JTAG_IR_SCAN);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_ir_scan(dev, num_bits, out_value, in_value, state);
}


extern int z_impl_jtag_dr_scan(const struct device * dev, int num_bits, const uint8_t * out_value, uint8_t * in_value, enum tap_state state);
static inline int jtag_dr_scan(const struct device * dev, int num_bits, const uint8_t * out_value, uint8_t * in_value, enum tap_state state)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke5(*(uintptr_t *)&dev, *(uintptr_t *)&num_bits, *(uintptr_t *)&out_value, *(uintptr_t *)&in_value, *(uintptr_t *)&state, K_SYSCALL_JTAG_DR_SCAN);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_dr_scan(dev, num_bits, out_value, in_value, state);
}


extern int z_impl_jtag_sw_xfer(const struct device * dev, enum jtag_pin pin, uint8_t value);
static inline int jtag_sw_xfer(const struct device * dev, enum jtag_pin pin, uint8_t value)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&pin, *(uintptr_t *)&value, K_SYSCALL_JTAG_SW_XFER);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_sw_xfer(dev, pin, value);
}


extern int z_impl_jtag_tdo_get(const struct device * dev, uint8_t * value);
static inline int jtag_tdo_get(const struct device * dev, uint8_t * value)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&value, K_SYSCALL_JTAG_TDO_GET);
	}
#endif
	compiler_barrier();
	return z_impl_jtag_tdo_get(dev, value);
}


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
